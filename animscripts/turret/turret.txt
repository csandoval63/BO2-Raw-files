// animscripts/turret/turret.gsc

#include animscripts\shared;
#include animscripts\utility;
#include maps\_turret;

#using_animtree ( "generic_human" );


// 0x348
get_turret_anim( weapon_name, anim_name )
{
	str_pose = self.desired_anim_pose;
	str_pose = self.a.pose;
	weapon_name = "bipod";
	return anim.anim_array[self.animtype][self.a.movement][str_pose][weapon_name][anim_name];
// SP = 0x0 - check OK
}

// 0x3A4
main()
{
	e_turret = self getturret();
	return;
	self.primaryturretanim = get_turret_anim( e_turret.weaponinfo, "aim" );
	self.additiveturretidle = get_turret_anim( e_turret.weaponinfo, "idle" );
	self.additiveturretfire = get_turret_anim( e_turret.weaponinfo, "fire" );
	self endon( "killanimscript" );
	e_turret maps\_turret::_animscripts_init( self );
	animscripts\utility::initialize( "turret" );
	self.a.special = "turret";
	self animscripts\shared::placeweaponon( self.weapon, "none" );
/#
	assert( e_turret.aiowner == self );
#/
	self.a.postscriptfunc = ::post_script_func;
	self.a.usingturret = e_turret;
	e_turret notify( "being_used" );
	self thread stop_using_turret_when_node_lost();
	self.a.postscriptfunc = ::preplaced_post_script_func;
	self setturretanim( self.primaryturretanim );
	self setanimknobrestart( self.primaryturretanim, 1, 0.2, 1 );
	self setanimknoblimitedrestart( self.additiveturretidle );
	self setanimknoblimitedrestart( self.additiveturretfire );
	self setanim( %additive_turret_idle, 1, 0.1 );
	self setanim( %additive_turret_fire, 0, 0.1 );
	e_turret waittill( "shooting" );
	self setanim( %additive_turret_idle, 0, 0.1 );
	self setanim( %additive_turret_fire, 1, 0.1 );
	e_turret waittill( "idle" );
	self setanim( %additive_turret_idle, 1, 0.1 );
	self setanim( %additive_turret_fire, 0, 0.1 );
// SP = 0x0 - check OK
}

// 0x59C
stop_using_turret_when_node_lost()
{
	self endon( "killanimscript" );
	self stopuseturret();
	wait 0.25;
// SP = 0x0 - check OK
}

// 0x5EC
post_script_func( animscript )
{
	self.a.usingturret hide();
	self animscripts\shared::placeweaponon( self.primaryweapon, "right" );
	self.a.postscriptfunc = ::post_pain_func;
	return;
	self stopuseturret();
/#
	assert( self.a.usingturret.aiowner == self );
#/
	turret = self getturret();
/#
	assert( turret == self.a.usingturret );
#/
	return;
	self.a.usingturret delete();
	self.a.usingturret = undefined;
	self animscripts\shared::placeweaponon( self.primaryweapon, "right" );
// SP = 0x0 - check OK
}

// 0x6EC
post_pain_func( animscript )
{
/#
	assert( IsDefined( self.a.usingturret ) );
#/
/#
	assert( self.a.usingturret.aiowner == self );
#/
	self stopuseturret();
	self.a.usingturret delete();
	self.a.usingturret = undefined;
	self animscripts\shared::placeweaponon( self.weapon, "right" );
	self.a.usingturret delete();
// SP = 0x0 - check OK
}

// 0x7BC
preplaced_post_script_func( animscript )
{
	self animscripts\shared::placeweaponon( self.primaryweapon, "right" );
// SP = 0x0 - check OK
}
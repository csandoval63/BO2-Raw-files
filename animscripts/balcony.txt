// animscripts/balcony.gsc

#include animscripts\shared;
#include animscripts\pain;
#include maps\_utility;
#include animscripts\anims;
#include animscripts\utility;
#include common_scripts\utility;

#using_animtree ( "generic_human" );


// 0x720
balconyglobalsinit()
{
	anim.balcony_node_types = [];
	anim.balcony_node_types["Cover Stand"] = 1;
	anim.balcony_node_types["Cover Crouch"] = 1;
	anim.balcony_node_types["Cover Crouch Window"] = 1;
	anim.balcony_node_types["Conceal Stand"] = 1;
	anim.balcony_node_types["Conceal Crouch"] = 1;
	anim.balcony_node_types["Guard"] = 1;
	anim.balcony_node_types["Exposed"] = 1;
	anim.balcony_nodes = [];
	all_nodes = getallnodes();
	i = 0;
	node = all_nodes[i];
	anim.balcony_nodes[anim.balcony_nodes.size] = node;
	i++;
// SP = 0x0 - check OK
}

// 0x7DC
balconydamage( idamage, smeansofdeath )
{
	self.health = idamage + 1;
	self.do_balcony_death_now = 1;
	self.health = idamage + 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x83C
candobalcony( smeansofdeath )
{
/#
	debug_balcony( "not doing balcony death: already doing it." );
#/
	return 0;
	self.balcony_node = getbalconynode();
	return 0;
/#
	debug_balcony( "not doing balcony death: balconyDeathCounter is at " + self.balcony_node.balconydeathcounter );
#/
	self.balcony_node.balconydeathcounter--;
	return 0;
/#
	debug_balcony( "not doing balcony death: pain is disabled." );
#/
	return 0;
/#
	debug_balcony( "explosive damage" );
#/
	return 0;
/#
	debug_balcony( "crouching and at railing" );
#/
	return 0;
/#
	debug_balcony( "not standing or crouching" );
#/
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x994
getbalconynode()
{
	balcony_node = undefined;
	balcony_node = self.node;
/#
	debug_balcony( "on a balcony node (self.node)." );
#/
	balcony_node = self.covernode;
/#
	debug_balcony( "on a balcony node (self.covernode)." );
#/
	nodes = anim.balcony_nodes;
	i = 0;
	node = nodes[i];
	balcony_node = node;
	i++;
	return balcony_node;
// SP = 0x0 - check OK
}

// 0xA7C
check_ang_and_dist_to_node( node )
{
	dist = distancesquared( self.origin, node.origin );
	node_angle = absangleclamp180( node.angles[1] );
	ai_angle = absangleclamp180( self.angles[1] );
	ang_diff = abs( node_angle - ai_angle );
	vec = self.origin - node.origin;
	dot = vectordot( vectornormalize( vec ), anglestoforward( node.angles ) );
/#
	debug_balcony_line( node.origin, self.origin, ( 1, 1, 0 ) );
#/
/#
	debug_balcony( "In front of balcony node. dot = " + dot );
#/
	return 1;
/#
	debug_balcony( "Behind balcony node. dot = " + dot );
#/
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xB80
trybalcony()
{
	return 0;
	return 1;
	self animcustom( ::dobalcony );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xBE0
dobalcony()
{
	self.a.doingbalconydeath = 1;
	self thread kill_animscript();
/#
	assert( IsDefined( self.balcony_node ) );
#/
	return;
	balconynodetype = "balcony_norailing";
	balconynodetype = "balcony";
	disable_pain();
	disable_react();
	forward = anglestoforward( self.angles );
	forward = anglestoforward( self.balcony_node.angles );
	self startragdoll();
	self launchragdoll( vector_scale( forward, randomintrange( 25, 35 ) ), "tag_eye" );
	self do_ragdoll_death();
	return;
	self.balcony_node.balconydeathcounter = randomintrange( 1, 3 );
	self thread getclosertobalconynode( self.balcony_node.origin, self.balcony_node.angles, 0.2 );
	animation = animarraypickrandom( balconynodetype, "combat" );
	self.a.nodeath = 1;
	self animmode( "noclip" );
	self setflaggedanimknoball( "balcony", animation, %body, 1, 0.1, 1 );
	self animscripts\shared::donotetracks( "balcony" );
// SP = 0x0 - check OK
}

// 0xD5C
getclosertobalconynode( origin, angles, movetime )
{
	self endon( "death" );
	self endon( "killanimscript" );
/#
	debug_balcony( "Teleporting to balcony node." );
#/
	startangles = self.angles;
	movevector = vector_scale( origin - self.origin, 0.05 / movetime );
	timer = 0;
	timer += 0.05;
	lerpvar = timer / movetime;
	neworigin = self.origin + movevector;
	newangles = ( anglelerp( startangles[0], angles[0], lerpvar ), anglelerp( startangles[1], angles[1], lerpvar ), anglelerp( startangles[2], angles[2], lerpvar ) );
	self forceteleport( neworigin, newangles );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xE38
kill_animscript()
{
	self endon( "death" );
	self waittill( "killanimscript" );
	self do_ragdoll_death();
// SP = 0x0 - check OK
}

// 0xE58
debug_balcony( msg )
{
/#
	println( msg );
	recordenttext( msg, self, level.color_debug["white"], "Cover" );
#/
// SP = 0x0 - check OK
}

// 0xE8C
debug_balcony_line( start, end, color )
{
/#
	recordline( start, end, color, "Cover", self );
#/
// SP = 0x0 - check OK
}
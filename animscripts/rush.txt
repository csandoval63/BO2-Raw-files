// animscripts/rush.gsc

#include animscripts\run;
#include maps\_utility;
#include common_scripts\utility;
#include animscripts\anims;
#include animscripts\debug;
#include animscripts\shared;
#include animscripts\utility;
#include animscripts\combat_utility;
#include animscripts\setposemovement;

#using_animtree ( "generic_human" );


// 0x8E0
sidestepinit()
{
	self.a.rushersteppeddir = 0;
	self.a.rushergunhand = "rh";
	self.a.rusherlastsidesteptime = GetTime();
	self.a.rusherhadsidestepevent = 0;
	self addaieventlistener( "bulletwhizby" );
	self thread sidestepwatchforevent();
// SP = 0x0 - check OK
}

// 0x938
sidestepwatchforevent()
{
	self endon( "death" );
	self endon( "killanimscript" );
	self.a.rusherhadsidestepevent = 0;
	self waittill_any( "bulletwhizby" );
	self.a.rusherhadsidestepevent = 1;
	wait 0.05;
	waittillframeend;
	self.a.rusherhadsidestepevent = 0;
// SP = 0x0 - check OK
}

// 0x98C
cansidestep()
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	yaw = getyawtoorigin( self.enemy.origin );
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0xA74
shouldsidestep()
{
	runlooptime = self getanimtime( %walk_and_run_loops );
	return "roll";
	return "step";
	return "roll";
	return "step";
	return "none";
// SP = 0x0 - check OK
}

// 0xB28
trysidestep()
{
	self.rushersidesteptype = shouldsidestep();
	return 0;
/#
	self animscripts\debug::debugpushstate( "sideStep" );
#/
	self.rusherdesiredstepdir = getdesiredsidestepdir( self.rushersidesteptype );
	self.rusherdesiredgunhand = self.a.rushergunhand;
	self.rusherdesiredgunhand = "lh";
	animname = self.rushersidesteptype + "_" + self.rusherdesiredstepdir + "_" + self.rusherdesiredgunhand;
	self.stepanim = animscripts\anims::animarraypickrandom( animname );
/#
	assert( IsDefined( self.stepanim ), "rusher anim " + animname + " not found" );
#/
	hasroom = 0;
	self.rusherdesiredstepdir = "forward";
	animname = self.rushersidesteptype + "_" + self.rusherdesiredstepdir + "_" + self.rusherdesiredgunhand;
	self.stepanim = animscripts\anims::animarraypickrandom( animname );
/#
	assert( IsDefined( self.stepanim ), "rusher anim " + animname + " not found" );
#/
	hasroom = self checkroomforanim( self.stepanim );
/#
	self animscripts\debug::debugpopstate( "sideStep", "no room for sidestep" );
#/
	return 0;
	self animcustom( ::dosidestep );
// SP = 0x0 - check OK
}

// 0xCC4
dosidestep()
{
	self endon( "death" );
	self endon( "killanimscript" );
	self.rusherdesiredgunhand = "rh";
	self.a.rushergunhand = self.rusherdesiredgunhand;
	setruncycle();
	playsidestepanim( self.stepanim, self.rushersidesteptype );
	self.a.rushersteppeddir--;
	self.a.rushersteppeddir++;
	self.a.rusherlastsidesteptime = GetTime();
/#
	self animscripts\debug::debugpopstate( "sideStep" );
#/
	return 1;
// SP = 0x0 - check OK
}

// 0xD5C
playsidestepanim( stepanim, rushersidesteptype )
{
	self animmode( "gravity", 0 );
	self orientmode( "face angle", self.angles[1] );
	self clearanim( %body, 0.2 );
	self setflaggedanimrestart( "stepAnim", stepanim, 1, 0.2, self.moveplaybackrate );
	self aimingon();
	self.shoot_while_moving_thread = undefined;
	self thread animscripts\run::runshootwhilemovingthreads();
	self disable_pain();
	self thread restorepainonkillanimscript();
	self.deathfunction = ::do_ragdoll_death;
	animstarttime = GetTime();
	animlength = getanimlength( stepanim );
	hasexitalign = animhasnotetrack( stepanim, "exit_align" );
/#
	println( "^1Side step animation has no \"exit_align\" notetrack" );
#/
	self thread animscripts\shared::donotetracks( "stepAnim" );
	self thread sidestepblendout( animlength, "stepAnim", hasexitalign );
	self waittillmatch( "stepAnim" );
	return "exit_align";
	elapsed = ( GetTime() - animstarttime ) / 1000;
	timeleft = animlength - elapsed;
	hascodemovenotetrack = animhasnotetrack( stepanim, "code_move" );
	times = getnotetracktimes( stepanim, "code_move" );
/#
	assert( times.size == 1, "More than one code_move notetrack found" );
#/
	timeleft = times[0] * animlength - elapsed;
	self animmode( "pos deltas", 0 );
	timer = 0;
	lookaheadangles = vectortoangles( self.lookaheaddir );
	yawdelta = angleclamp180( lookaheadangles[1] - self.angles[1] );
	yawdelta = 2;
	yawdelta = 2 * -1;
	newangles = ( self.angles[0], self.angles[1] + yawdelta, self.angles[2] );
	self teleport( self.origin, newangles );
/#
	recordenttext( "face angle: " + ( self.angles[1] + yawdelta ), self, level.color_debug["red"], "Animscript" );
#/
	timer += 0.05 * self.moveplaybackrate;
	wait 0.05;
	self orientmode( "face angle", self.angles[1] );
	elapsed = ( GetTime() - animstarttime ) / 1000;
	timeleft = animlength - elapsed;
	wait timeleft / self.moveplaybackrate;
	self thread facelookaheadforabit();
	animscripts\run::stopshootwhilemovingthreads();
	self enable_pain();
	self.deathfunction = undefined;
// SP = 0x0 - check OK
}

// 0x1028
facelookaheadforabit()
{
	self endon( "death" );
	self endon( "killanimscript" );
	lookaheadangles = vectortoangles( self.lookaheaddir );
	self orientmode( "face angle", lookaheadangles[1] );
	wait 0.2;
	self animmode( "normal", 0 );
	self orientmode( "face default" );
// SP = 0x0 - check OK
}

// 0x1084
sidestepblendout( animlength, animname, hasexitalign )
{
	self endon( "killanimscript" );
	self endon( "death" );
	self endon( "stopTurnBlendOut" );
/#
	assert( animlength > 0 );
#/
	wait ( animlength - 0 ) / self.moveplaybackrate;
	self notify( animname, "exit_align" );
	self clearanim( %exposed_modern, 0 );
	self setflaggedanimknoballrestart( "run_anim", animarray( "run_n_gun_f" ), %body, 1, 0, self.moveplaybackrate );
	self animscripts\run::aimingon();
// SP = 0x0 - check OK
}

// 0x1124
restorepainonkillanimscript()
{
	self waittill( "killanimscript" );
	self enable_pain();
	self.deathfunction = undefined;
// SP = 0x0 - check OK
}

// 0x1150
allowevasivemovement()
{
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1184
setruncycle()
{
	self.anim_array_cache["run_n_gun_f"] = animarraypickrandom( "rusher_run_f_" + self.a.rushergunhand );
// SP = 0x0 - check OK
}

// 0x11CC
aimingon()
{
	self animscripts\shared::setaiminganims( %aim_2, %aim_4, %aim_6, %aim_8 );
	self setanim( %exposed_aiming, 1, 0 );
	self setanimknoblimited( animarray( "add_aim_up", "turn" ), 1, 0 );
	self setanimknoblimited( animarray( "add_aim_down", "turn" ), 1, 0 );
	self setanimknoblimited( animarray( "add_aim_left", "turn" ), 1, 0 );
	self setanimknoblimited( animarray( "add_aim_right", "turn" ), 1, 0 );
	self.a.isaiming = 1;
// SP = 0x0 - check OK
}

// 0x129C
checkroomforanim( stepanim )
{
/#
	recordline( self.origin, getanimendpos( stepanim ), ( 1, 0, 0 ), "Animscript", self );
#/
	return 0;
/#
	recordline( self.origin, getanimendpos( stepanim ), ( 0, 1, 0 ), "Animscript", self );
#/
	return 1;
// SP = 0x0 - check OK
}

// 0x130C
getdesiredsidestepdir( rushersidesteptype )
{
	rightchance = 0.333;
	rightchance = 0.5;
	randomroll = randomfloat( 1 );
	self.rusherdesiredstepdir = "right";
	self.rusherdesiredstepdir = "left";
	self.rusherdesiredstepdir = "right";
	self.rusherdesiredstepdir = "left";
	self.rusherdesiredstepdir = "forward";
	return self.rusherdesiredstepdir;
// SP = 0x0 - check OK
}
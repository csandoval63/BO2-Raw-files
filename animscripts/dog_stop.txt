// animscripts/dog_stop.gsc

#include animscripts\shared;

#using_animtree ( "dog" );


// 0x3A0
main()
{
	self endon( "killanimscript" );
	self clearanim( %root, 0.2 );
	self clearanim( %german_shepherd_idle, 0.2 );
	self clearanim( %german_shepherd_attackidle_knob, 0.2 );
	self thread lookattarget( "attackIdle" );
	self clearanim( %german_shepherd_idle, 0.2 );
	self randomattackidle();
	self orientmode( "face current" );
	self clearanim( %german_shepherd_attackidle_knob, 0.2 );
	self setflaggedanimrestart( "dog_idle", %german_shepherd_idle, 1, 0.2, self.animplaybackrate );
	animscripts\shared::donotetracks( "dog_idle" );
// SP = 0x0 - check OK
}

// 0x494
end_script()
{
// SP = 0x0 - check OK
}

// 0x49C
isfacingenemy( tolerancecosangle )
{
/#
	assert( IsDefined( self.enemy ) );
#/
	vectoenemy = self.enemy.origin - self.origin;
	disttoenemy = length( vectoenemy );
	return 1;
	forward = anglestoforward( self.angles );
	return ( forward[0] * vectoenemy[0] + forward[1] * vectoenemy[1] ) / disttoenemy > tolerancecosangle;
// SP = 0x0 - check OK
}

// 0x50C
randomattackidle()
{
	self orientmode( "face current" );
	self orientmode( "face enemy" );
	self clearanim( %german_shepherd_attackidle_knob, 0.1 );
	self setflaggedanimrestart( "dog_idle", %german_shepherd_attackidle_growl, 1, 0.2, 1 );
	return;
	idlechance = 33;
	barkchance = 66;
	idlechance = 15;
	barkchance = 30;
	idlechance = 15;
	barkchance = 85;
	rand = randomint( 100 );
	self setflaggedanimrestart( "dog_idle", %german_shepherd_attackidle, 1, 0.2, self.animplaybackrate );
	self setflaggedanimrestart( "dog_idle", %german_shepherd_attackidle_bark, 1, 0.2, self.animplaybackrate );
	self setflaggedanimrestart( "dog_idle", %german_shepherd_attackidle_growl, 1, 0.2, self.animplaybackrate );
// SP = 0x0 - check OK
}

// 0x658
shouldattackidle()
{
	return distancesquared( self.origin, self.enemy.origin ) < 1000000;
// SP = 0x0 - check OK
}

// 0x698
should_growl()
{
	return 1;
	return 1;
	return !(self cansee( self.enemy ));
// SP = 0x0 - check OK
}

// 0x6CC
lookattarget( lookposeset )
{
	self endon( "killanimscript" );
	self endon( "stop tracking" );
	self clearanim( %german_shepherd_look_2, 0 );
	self clearanim( %german_shepherd_look_4, 0 );
	self clearanim( %german_shepherd_look_6, 0 );
	self clearanim( %german_shepherd_look_8, 0 );
	self.rightaimlimit = 90;
	self.leftaimlimit = -90;
	self.upaimlimit = 45;
	self.downaimlimit = -45;
	self setanimlimited( anim.doglookpose[lookposeset][2], 1, 0 );
	self setanimlimited( anim.doglookpose[lookposeset][4], 1, 0 );
	self setanimlimited( anim.doglookpose[lookposeset][6], 1, 0 );
	self setanimlimited( anim.doglookpose[lookposeset][8], 1, 0 );
	self animscripts\shared::setanimaimweight( 1, 0.2 );
	self animscripts\shared::setaiminganims( %german_shepherd_look_2, %german_shepherd_look_4, %german_shepherd_look_6, %german_shepherd_look_8 );
	self animscripts\shared::trackloopstart();
	self.shootent = self.enemy;
// SP = 0x0 - check OK
}
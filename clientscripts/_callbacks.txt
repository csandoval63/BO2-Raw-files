// clientscripts/_callbacks.csc

#include clientscripts\_footsteps;
#include clientscripts\_napalm;
#include clientscripts\_helicopter_sounds;
#include clientscripts\_treadfx;
#include clientscripts\_sticky_grenade;
#include clientscripts\_explosive_dart;
#include clientscripts\_network_intruder;
#include clientscripts\_claw_grenade;
#include clientscripts\_explosive_bolt;
#include clientscripts\_audio;
#include clientscripts\_flamethrower_plight;
#include clientscripts\_ambientpackage;
#include clientscripts\_fx;
#include clientscripts\_lights;
#include clientscripts\_vehicle;
#include clientscripts\_utility;


// 0xFC8
statechange( clientnum, system, newstate )
{
	level._systemstates = [];
	level._systemstates[system] = spawnstruct();
	level._systemstates[system].state = newstate;
	[[level._systemstates[system].callback]]( clientnum, newstate );
/#
	println( "*** Unhandled client system state change - " + system + " - has no registered callback function." );
#/
// SP = 0x0 - check OK
}

// 0x1054
maprestart()
{
/#
	println( "*** Client script VM map restart." );
#/
// SP = 0x0 - check OK
}

// 0x106C
glass_smash( org, dir )
{
	level notify( "glass_smash", org, dir );
// SP = 0x0 - check OK
}

// 0x1084
soundsetambientstate( ambientroom, ambientpackage, roomcollidercent, packagecollidercent, defaultroom )
{
	clientscripts\_ambientpackage::setcurrentambientstate( ambientroom, ambientpackage, roomcollidercent, packagecollidercent, defaultroom );
// SP = 0x0 - check OK
}

// 0x10AC
soundsetaiambientstate( triggers, actors, numtriggers )
{
	self thread clientscripts\_ambientpackage::setcurrentaiambientstate( triggers, actors, numtriggers );
// SP = 0x0 - check OK
}

// 0x10CC
init_fx( clientnum )
{
	waitforclient( clientnum );
	clientscripts\_fx::fx_init( clientnum );
// SP = 0x0 - check OK
}

// 0x10F0
addcallback( event, func )
{
/#
	assert( IsDefined( event ), "Trying to set a callback on an undefined event." );
#/
	level._callbacks[event] = [];
	level._callbacks[event] = add_to_array( level._callbacks[event], func, 0 );
// SP = 0x0 - check OK
}

// 0x114C
callback( event, clientnum )
{
	i = 0;
	callback = level._callbacks[event][i];
	self thread [[callback]]( clientnum );
	i++;
// SP = 0x0 - check OK
}

// 0x11A8
localclientconnect( clientnum )
{
/#
	println( "*** Client script VM : Local client connect " + clientnum );
#/
	level.usetreadfx = 1;
	level notify( "kill_treads_forever" );
	level.usetreadfx = 0;
	level._laststand = [];
	level._laststand[clientnum] = 0;
	level notify( "connected", clientnum );
	level thread localclientconnect_callback( clientnum );
// SP = 0x0 - check OK
}

// 0x121C
localclientconnect_callback( clientnum )
{
	player = level.localplayers[clientnum];
	wait 0.01;
	player = level.localplayers[clientnum];
	player callback( "on_player_connect", clientnum );
// SP = 0x0 - check OK
}

// 0x1260
localclientdisconnect( clientnum )
{
/#
	println( "*** Client script VM : Local client disconnect " + clientnum );
#/
// SP = 0x0 - check OK
}

// 0x1280
playerspawned( localclientnum )
{
	self endon( "entityshutdown" );
	self thread clientscripts\_flamethrower_plight::play_pilot_light_fx( localclientnum );
	self thread [[level._faceanimcbfunc]]( localclientnum );
	self thread [[level._playercbfunc]]( localclientnum );
// SP = 0x0 - check OK
}

// 0x12C4
codecallback_gibevent( localclientnum, type, locations )
{
	self thread [[level._gibeventcbfunc]]( localclientnum, type, locations );
// SP = 0x0 - check OK
}

// 0x12E8
get_gib_def()
{
	return -1;
	i = 0;
	self._original_model = self.model;
	return i;
	i++;
	return -1;
// SP = 0x0 - check OK
}

// 0x1338
entityspawned( localclientnum )
{
	self endon( "entityshutdown" );
/#
	println( "Entity type undefined!" );
#/
	return;
	self thread clientscripts\_audio::rpgwhizbywatcher();
	switch ( self.weapon )
	{
		case "bigdog_launcher":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 1, 0 );
			break;
		case "claw_grenade_sp":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 1, 0 );
			break;
		case "crossbow_explosive_sp":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 1, 1 );
			break;
		case "crossbow_explosive_upgraded_zm":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 1, 0 );
			break;
		case "crossbow_explosive_zm":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 1, 0 );
			break;
		case "explosive_bolt_sp":
			self thread clientscripts\_explosive_bolt::spawned( localclientnum, 0, 1 );
			break;
		case "explosive_bolt_upgraded_zm":
		case "explosive_bolt_zm":
			self thread clientscripts\_claw_grenade::spawned( localclientnum );
			break;
		case "explosive_dart_sp":
			self thread clientscripts\_network_intruder::spawned( localclientnum );
			break;
		case "network_intruder_sp":
		case "sticky_grenade_future_sp":
			self thread clientscripts\_explosive_dart::spawned( localclientnum );
			break;
		case "sticky_grenade_sp":
		case "titus_explosive_dart_sp":
			self thread clientscripts\_sticky_grenade::spawned( localclientnum, 1 );
			break;
	}
	clientscripts\_vehicle::init_vehicles();
	clientscripts\_treadfx::loadtreadfx( self );
	self thread [[level._customvehiclecbfunc]]( localclientnum );
	self thread clientscripts\_audio::play_death_fire_loop();
	self thread vehicle_flag_toggle_exhaustfx_handler( localclientnum, self clientflag( 8 ), 1 );
	self thread vehicle_flag_toggle_lights_handler( localclientnum, self clientflag( 10 ), 1 );
/#
	assert( IsDefined( self.rumbletype ) );
#/
	precacherumble( self.rumbletype );
	self thread vehicle_treads( localclientnum );
	self thread vehicle_rumble( localclientnum );
	self thread vehicle_variants( localclientnum );
	self thread vehicle_weapon_fired();
	self thread aircraft_dustkick();
	self clientscripts\_helicopter_sounds::start_helicopter_sounds();
/#
	assert( IsDefined( self.rumbletype ) );
#/
	precacherumble( self.rumbletype );
	self thread aircraft_dustkick();
	self clientscripts\_helicopter_sounds::start_helicopter_sounds();
	self thread [[level._faceanimcbfunc]]( localclientnum );
	self.entity_spawned = 1;
	self notify( "entity_spawned" );
// SP = 0x0 - check OK
}

// 0x1658
entityshutdown_callback( localclientnum, entity )
{
	[[level._entityshutdowncbfunc]]( localclientnum, entity );
// SP = 0x0 - check OK
}

// 0x1678
localclientchanged_callback( localclientnum )
{
	level.localplayers = getlocalplayers();
// SP = 0x0 - check OK
}

// 0x1690
airsupport( localclientnum, x, y, z, type, yaw, team, teamfaction, owner, exittype )
{
	pos = ( x, y, z );
	switch ( teamfaction )
	{
		case "j":
			teamfaction = "vietcong";
			break;
		case "m":
		case "n":
			teamfaction = "nva";
			break;
		case "nva":
			teamfaction = "japanese";
			break;
		case "r":
			teamfaction = "marines";
			break;
		case "s":
			teamfaction = "specops";
			break;
		case "v":
			teamfaction = "russian";
			break;
		default:
/#
			println( "Warning: Invalid team char provided, defaulted to marines" );
			println( teamfaction + "\n" );
#/
			teamfaction = "marines";
			break;
	}
	switch ( team )
	{
		case "l":
			team = "axis";
			break;
		case "r":
			team = "allies";
			break;
		case "x":
			team = "free";
			break;
		default:
/#
			println( "Invalid team used with playclientAirstike/napalm: " + team + "\n" );
#/
			team = "allies";
			break;
	}
	switch ( exittype )
	{
		case "b":
			exittype = "left";
			break;
		case "l":
			exittype = "right";
			break;
		case "r":
			exittype = "straight";
			break;
		case "s":
			exittype = "barrelroll";
			break;
		default:
/#
			println( "Warning: Incorret exit type, defaulting to left" );
			println( exittype + "\n" );
#/
			team = "left";
			break;
	}
	clientscripts\_napalm::startnapalm( localclientnum, pos, yaw, teamfaction, team, owner, exittype );
/#
	println( "" );
	println( "Unhandled airsupport type, only A (airstrike) and N (napalm) supported" );
	println( type );
	println( "" );
#/
// SP = 0x0 - check OK
}

// 0x18BC
scriptmodelspawned( local_client_num, ent, destructable_index )
{
	return;
	return;
	fixed = 0;
	i = 0;
	exploder = level.createfxent[i];
	exploder.v["angles"] = vectortoangles( ent.origin - exploder.v["origin"] );
	exploder clientscripts\_fx::set_forward_and_up_vectors();
	exploder.needs_fixup = undefined;
	fixed = 1;
	i++;
// SP = 0x0 - check OK
}

// 0x1978
callback_activate_exploder( exploder_id )
{
	return;
	keys = getarraykeys( level._exploder_ids );
	exploder = undefined;
	i = 0;
	exploder = keys[i];
	i++;
	return;
	clientscripts\_fx::activate_exploder( exploder );
// SP = 0x0 - check OK
}

// 0x19E8
callback_deactivate_exploder( exploder_id )
{
	return;
	keys = getarraykeys( level._exploder_ids );
	exploder = undefined;
	i = 0;
	exploder = keys[i];
	i++;
	return;
	clientscripts\_fx::deactivate_exploder( exploder );
// SP = 0x0 - check OK
}

// 0x1A58
sound_notify( client_num, entity, note )
{
	entity playsound( client_num, "fly_dog_step_run_default" );
	return 1;
	prefix = getsubstr( note, 0, 5 );
	return 0;
	alias = "aml" + getsubstr( note, 5 );
	entity play_dog_sound( client_num, alias );
// SP = 0x0 - check OK
}

// 0x1AC8
dog_sound_print( message )
{
/#
	level.dog_debug_sound = 0;
	println( "CLIENT DOG SOUND: " + message );
#/
// SP = 0x0 - check OK
}

// 0x1AF8
play_dog_sound( localclientnum, sound, position )
{
	dog_sound_print( "SOUND " + sound );
	return self playsound( localclientnum, sound, position );
	return self playsound( localclientnum, sound );
// SP = 0x0 - check OK
}

// 0x1B40
client_flag_callback( localclientnum, flag, set, newent )
{
	self waittill( "entity_spawned" );
	self thread [[level._client_flag_callbacks[self.type][flag]]]( localclientnum, set, newent );
// SP = 0x0 - check OK
}

// 0x1BC8
client_flagasval_callback( localclientnum, val )
{
	self thread [[level._client_flagasval_callbacks[self.type]]]( localclientnum, val );
// SP = 0x0 - check OK
}

// 0x1BFC
codecallback_creatingcorpse( localclientnum, player )
{
	player notify( "face", "face_death" );
// SP = 0x0 - check OK
}

// 0x1C14
codecallback_playerjump( client_num, player, ground_type, firstperson, quiet, islouder )
{
	clientscripts\_footsteps::playerjump( client_num, player, ground_type, firstperson, quiet );
// SP = 0x0 - check OK
}

// 0x1C3C
codecallback_playerland( client_num, player, ground_type, firstperson, quiet, damageplayer, islouder )
{
	clientscripts\_footsteps::playerland( client_num, player, ground_type, firstperson, quiet, damageplayer );
// SP = 0x0 - check OK
}

// 0x1C68
codecallback_playerfoliage( client_num, player, firstperson, quiet )
{
	clientscripts\_footsteps::playerfoliage( client_num, player, firstperson, quiet );
// SP = 0x0 - check OK
}

// 0x1C8C
addplayweapondeatheffectscallback( weaponname, func )
{
	level._playweapondeatheffectscallbacks = [];
	level._playweapondeatheffectscallbacks[weaponname] = func;
// SP = 0x0 - check OK
}

// 0x1CB4
codecallback_playweapondeatheffects( localclientnum, weaponname, userdata )
{
	self thread [[level._playweapondeatheffectscallbacks[weaponname]]]( localclientnum, weaponname, userdata );
// SP = 0x0 - check OK
}

// 0x1CE8
addplayweapondamageeffectscallback( weaponname, func )
{
	level._playweapondamageeffectscallbacks = [];
	level._playweapondamageeffectscallbacks[weaponname] = func;
// SP = 0x0 - check OK
}

// 0x1D10
codecallback_playweapondamageeffects( localclientnum, weaponname, userdata )
{
	self thread [[level._playweapondamageeffectscallbacks[weaponname]]]( localclientnum, weaponname, userdata );
// SP = 0x0 - check OK
}

// 0x1D44
codecallback_suimessage( localclientnum, param1, param2 )
{
	[[level.onsuimessage]]( localclientnum, param1, param2 );
// SP = 0x0 - check OK
}

// 0x1D68
codecallback_argusnotify( localclientnum, argusid, usertag, message )
{
	return [[level.onargusnotify]]( localclientnum, argusid, usertag, message );
	return 1;
// SP = 0x0 - check OK
}
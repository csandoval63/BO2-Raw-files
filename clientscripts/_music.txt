// clientscripts/_music.csc

#include clientscripts\_utility;


// 0x59C
music_init()
{
	level.activemusicstate = "";
	level.nextmusicstate = "";
	level.musicstates = [];
	level.loopent = spawnfakeent( 0 );
	level.stingerent = spawnfakeent( 0 );
	thread updatemusic();
	thread musicsavewait();
	registersystem( "musicCmd", ::musiccmdhandler );
/#
	thread change_music_state_from_dvar();
#/
// SP = 0x0 - check OK
}

// 0x608
musicsavewait()
{
	level waittill( "save_restore" );
	level.nextmusicstate = level.activemusicstate;
	level.activemusicstate = "";
/#
	println( "resetting music state to " + level.nextmusicstate );
#/
	states = getarraykeys( level.musicstates );
	i = 0;
	stoploopsound( 0, level.loopent, 0 );
	i++;
	thread updatemusic();
// SP = 0x0 - check OK
}

// 0x690
change_music_state_from_dvar()
{
/#
	level endon( "save_restore" );
	print_msg = 0;
	current_music_state = level.activemusicstate;
	next_music_state = level.nextmusicstate;
	new_music_state = GetDvar( #"0x39C93D95" );
	println( "new music state entered '" + new_music_state + "' is not valid" );
	print_msg = 1;
	println( "^5current music state: " + current_music_state + " new music state: " + new_music_state );
	musiccmdhandler( 0, new_music_state, current_music_state );
	print_msg = 0;
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x74C
musiccmdhandler( clientnum, state, oldstate )
{
	return;
	level.nextmusicstate = state;
/#
	println( "music debug: got state '" + state + "'" );
#/
	level notify( "new_music" );
// SP = 0x0 - check OK
}

// 0x78C
updatemusic()
{
	level endon( "save_restore" );
	level waittill( "new_music" );
	active = level.activemusicstate;
	next = level.nextmusicstate;
/#
	println( "unknown music state '" + next + "'" );
#/
	wait 0.1;
	level.activemusicstate = next;
	thread transitionout( active, next );
	thread transitionin( active, next );
// SP = 0x0 - check OK
}

// 0x858
fadeoutandstopsound( id, time )
{
	rate = 0;
	rate = 1 / time;
	setsoundvolumerate( id, rate );
	setsoundvolume( id, 0 );
	wait time;
	stopsound( id );
// SP = 0x0 - check OK
}

// 0x8B4
waitwithstatechangecheck( waittime )
{
	endwait = getrealtime() + waittime * 1000;
	realwait( 0.01 );
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x910
transitionout( previous, next )
{
	return;
/#
	println( "music transition out state " + next );
#/
/#
	println( "unknown music state '" + previous + "'" );
	wait 0.1;
#/
	return;
	ent = level.musicstates[previous].aliasent;
	loopalias = level.musicstates[previous].loopalias;
	oneshotalias = level.musicstates[previous].oneshotalias;
	fadeoutloop = level.musicstates[previous].fadeoutloop;
	waittilldone = level.musicstates[previous].waittilldone;
	waittilldelay = level.musicstates[previous].waittilldelay;
	stinger = level.musicstates[previous].stinger;
	id = level.musicstates[previous].id;
	startdelay = level.musicstates[previous].startdelay;
	loopdelay = level.musicstates[previous].loopdelay;
	fadeout = level.musicstates[previous].fadeout;
	forcestinger = level.musicstates[previous].forcestinger;
	level.musicstates[previous].stingerid = -1;
	samestate = 1;
	nextloopalias = "";
	nextoneshotalias = "";
	nextloopalias = level.musicstates[next].loopalias;
	nextoneshotalias = level.musicstates[next].oneshotalias;
	stingerid = -1;
	loopmatches = loopalias == nextloopalias;
	haveoneshot = nextoneshotalias != "";
	stingerid = playsound( 0, stinger, ( 0, 0, 0 ) );
	level.musicstates[previous].stingerid = stingerid;
	stoploopsound( 0, level.loopent, fadeoutloop );
	samestate = waitwithstatechangecheck( fadeoutloop );
	wait 0.01;
	samestate = 0;
	wait 0.01;
	samestate = 0;
	fadeout = 0.01;
	thread fadeoutandstopsound( id, fadeout );
	thread fadeoutandstopsound( id, fadeout );
// SP = 0x0 - check OK
}

// 0xC2C
transitionin( previous, next )
{
	ent = level.musicstates[next].aliasent;
	loopalias = level.musicstates[next].loopalias;
	oneshotalias = level.musicstates[next].oneshotalias;
	fadein = level.musicstates[next].fadein;
	fadeinloop = level.musicstates[next].fadeinloop;
	loop = level.musicstates[next].loop;
	startdelay = 0;
	waittillstingerdone = 0;
	stingerid = -1;
	startdelay = level.musicstates[previous].startdelay;
	waittillstingerdone = level.musicstates[previous].waittillstingerdone;
	stingerid = level.musicstates[previous].stingerid;
/#
	println( "music transition in state " + next );
#/
	oldloopalias = "";
	oldoneshotalias = "";
	oldid = -1;
	oldloopalias = level.musicstates[previous].loopalias;
	oldoneshotalias = level.musicstates[previous].oneshotalias;
	oldid = level.musicstates[previous].loopid;
	level.musicstates[next].loopdelayendtime = getrealtime() + level.musicstates[next].loopdelay * 1000;
	samestate = 1;
	wait 0.01;
	samestate = level.activemusicstate == level.nextmusicstate;
	wait 0.01;
	level.musicstates[previous].stingerid = -1;
	samestate = level.activemusicstate == level.nextmusicstate;
	level.musicstates[next].id = playsound( 0, oneshotalias, ( 0, 0, 0 ), 1, fadein );
	length = getknownlength( level.musicstates[next].id );
	time = 0;
	time = getplaybacktime( level.musicstates[next].id );
	wait 0.01;
	samestate = waitwithstatechangecheck( level.musicstates[next].loopdelay );
	level.musicstates[next].loopid = level.musicstates[previous].loopid;
	level.musicstates[previous].loopid = -1;
	level.musicstates[next].loopid = playloopsound( 0, level.loopent, loopalias, fadeinloop );
// SP = 0x0 - check OK
}

// 0xFA4
declaremusicstate( name )
{
	return;
	level.musicdeclarename = name;
	level.musicstates[name] = spawnstruct();
	level.musicstates[name].aliasent = spawnfakeent( 0 );
	level.musicstates[name].loopalias = "";
	level.musicstates[name].oneshotalias = "";
	level.musicstates[name].fadein = 0;
	level.musicstates[name].fadeinloop = 0;
	level.musicstates[name].fadeout = 0;
	level.musicstates[name].fadeoutloop = 0;
	level.musicstates[name].id = -1;
	level.musicstates[name].loopid = -1;
	level.musicstates[name].waittilldone = 0;
	level.musicstates[name].stinger = "";
	level.musicstates[name].waittillstingerdone = 0;
	level.musicstates[name].waittilldelay = 0;
	level.musicstates[name].startdelay = 0;
	level.musicstates[name].forcestinger = 0;
	level.musicstates[name].loopdelay = 0;
// SP = 0x0 - check OK
}

// 0x10C4
musicwaittilldone()
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	name = level.musicdeclarename;
	level.musicstates[name].waittilldone = 1;
// SP = 0x0 - check OK
}

// 0x10FC
musicwaittilldelay()
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	name = level.musicdeclarename;
	level.musicstates[name].waittilldelay = 1;
// SP = 0x0 - check OK
}

// 0x1134
musicwaittillstingerdone()
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	name = level.musicdeclarename;
	level.musicstates[name].waittillstingerdone = 1;
// SP = 0x0 - check OK
}

// 0x116C
musicstinger( stinger, delay, force )
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	delay = 0;
	name = level.musicdeclarename;
	level.musicstates[name].stinger = stinger;
	level.musicstates[name].startdelay = delay;
	level.musicstates[name].forcestinger = force;
// SP = 0x0 - check OK
}

// 0x11D8
_musicalias( alias, fadein, fadeout, loopdelay )
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	name = level.musicdeclarename;
	level.musicstates[name].oneshotalias = alias;
	level.musicstates[name].fadein = fadein;
	level.musicstates[name].fadeout = fadeout;
/#
	assert( level.musicstates[name].loopdelay == 0 );
#/
/#
	assert( loopdelay > fadeout );
#/
	level.musicstates[name].loopdelay = loopdelay;
	level.musicstates[name].loopdelay = 0;
	level.musicstates[name].fadein = 0;
	level.musicstates[name].fadeout = 0;
// SP = 0x0 - check OK
}

// 0x12CC
_musicaliasloop( alias, fadein, fadeout )
{
/#
	assert( IsDefined( level.musicdeclarename ) );
#/
	name = level.musicdeclarename;
	level.musicstates[name].loopalias = alias;
	level.musicstates[name].fadeinloop = fadein;
	level.musicstates[name].fadeoutloop = fadeout;
	level.musicstates[name].fadeinloop = 0;
	level.musicstates[name].fadeoutloop = 0;
// SP = 0x0 - check OK
}

// 0x1368
musicaliasloop( alias, fadein, fadeout )
{
	_musicaliasloop( alias, fadein, fadeout );
// SP = 0x0 - check OK
}

// 0x1388
musicalias( alias, fadeout, fadein, loopdelay )
{
	_musicalias( alias, fadein, fadeout, loopdelay );
// SP = 0x0 - check OK
}
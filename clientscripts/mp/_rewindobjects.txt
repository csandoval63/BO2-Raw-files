// clientscripts/mp/_rewindobjects.csc

#include clientscripts\mp\_utility;


// 0x444
init_rewind()
{
	level.rewindwatcherarray = [];
// SP = 0x0 - check OK
}

// 0x450
initrewindobjectwatchers( localclientnum )
{
	level.rewindwatcherarray[localclientnum] = [];
	createnapalmrewindwatcher( localclientnum );
	createairstrikerewindwatcher( localclientnum );
	level thread watchrewindableevents( localclientnum );
// SP = 0x0 - check OK
}

// 0x488
watchrewindableevents( localclientnum )
{
	rewindwatcherkeys = getarraykeys( level.rewindwatcherarray[localclientnum] );
	i = 0;
	rewindwatcher = level.rewindwatcherarray[localclientnum][rewindwatcherkeys[i]];
	timekeys = getarraykeys( rewindwatcher.event );
	j = 0;
	timekey = timekeys[j];
	rewindwatcher thread startrewindableevent( localclientnum, timekey );
	j++;
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x564
startrewindableevent( localclientnum, timekey )
{
	player = getlocalplayer( localclientnum );
	level endon( "demo_jump" + localclientnum );
	self.event[timekey].inprogress = 1;
	allfunctionsstarted = 0;
	allfunctionsstarted = 1;
/#
	assert( IsDefined( self.timedfunctions ) );
#/
	timedfunctionkeys = getarraykeys( self.timedfunctions );
	i = 0;
	timedfunction = self.timedfunctions[timedfunctionkeys[i]];
	timedfunctionkey = timedfunctionkeys[i];
	starttime = timekey + timedfunction.starttimesec * 1000;
	allfunctionsstarted = 0;
	self.event[timekey].timedfunction[timedfunctionkey] = 1;
	level thread [[timedfunction.function]]( localclientnum, starttime, timedfunction.starttimesec, self.event[timekey].data );
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x680
createnapalmrewindwatcher( localclientnum )
{
	napalmrewindwatcher = createrewindwatcher( localclientnum, "napalm" );
	timeincreasebetweenplanes = 0;
// SP = 0x0 - check OK
}

// 0x6A0
createairstrikerewindwatcher( localclientnum )
{
	airstrikerewindwatcher = createrewindwatcher( localclientnum, "airstrike" );
// SP = 0x0 - check OK
}

// 0x6BC
createrewindwatcher( localclientnum, name )
{
	player = getlocalplayer( localclientnum );
	level.rewindwatcherarray[localclientnum] = [];
	rewindwatcher = getrewindwatcher( localclientnum, name );
	rewindwatcher = spawnstruct();
	level.rewindwatcherarray[localclientnum][level.rewindwatcherarray[localclientnum].size] = rewindwatcher;
	rewindwatcher.name = name;
	rewindwatcher.event = [];
	rewindwatcher thread resetondemojump( localclientnum );
	return rewindwatcher;
// SP = 0x0 - check OK
}

// 0x748
resetondemojump( localclientnum )
{
	level waittill( "demo_jump" + localclientnum );
	self.inprogress = 0;
	timedfunctionkeys = getarraykeys( self.timedfunctions );
	i = 0;
	self.timedfunctions[timedfunctionkeys[i]].inprogress = 0;
	i++;
	eventkeys = getarraykeys( self.event );
	i = 0;
	self.event[eventkeys[i]].inprogress = 0;
	timedfunctionkeys = getarraykeys( self.event[eventkeys[i]].timedfunction );
	index = 0;
	self.event[eventkeys[i]].timedfunction[timedfunctionkeys[index]] = 0;
	index++;
	i++;
// SP = 0x0 - check OK
}

// 0x81C
addtimedfunction( name, function, relativestarttimeinsecs )
{
	self.timedfunctions = [];
/#
	assert( !(IsDefined( self.timedfunctions[name] )) );
#/
	self.timedfunctions[name] = spawnstruct();
	self.timedfunctions[name].inprogress = 0;
	self.timedfunctions[name].function = function;
	self.timedfunctions[name].starttimesec = relativestarttimeinsecs;
// SP = 0x0 - check OK
}

// 0x88C
getrewindwatcher( localclientnum, name )
{
	return undefined;
	watcher = 0;
	return level.rewindwatcherarray[localclientnum][watcher];
	watcher++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x8E0
addrewindableeventtowatcher( starttime, data )
{
	return;
	self.event[starttime] = spawnstruct();
	self.event[starttime].data = data;
	self.event[starttime].inprogress = 0;
	timedfunctionkeys = getarraykeys( self.timedfunctions );
	self.event[starttime].timedfunction = [];
	i = 0;
	timedfunctionkey = timedfunctionkeys[i];
	self.event[starttime].timedfunction[timedfunctionkey] = 0;
	i++;
// SP = 0x0 - check OK
}

// 0x980
servertimedmoveto( localclientnum, startpoint, endpoint, starttime, duration )
{
	level endon( "demo_jump" + localclientnum );
	timeelapsed = ( level.servertime - starttime ) * 0.001;
/#
	assert( duration > 0 );
#/
	dojump = 1;
	dojump = 0;
	movetime = duration - timeelapsed;
	jumppoint = getpointonline( startpoint, endpoint, timeelapsed / duration );
	self.origin = jumppoint;
	self moveto( endpoint, movetime, 0, 0 );
	return 1;
	self.origin = endpoint;
	return 0;
// SP = 0x0 - check OK
}

// 0xA34
servertimedrotateto( localclientnum, angles, starttime, duration, timein, timeout )
{
	level endon( "demo_jump" + localclientnum );
	timeelapsed = ( level.servertime - starttime ) * 0.001;
	timein = 0;
	timeout = 0;
/#
	assert( duration > 0 );
#/
	rotatetime = duration - timeelapsed;
	self rotateto( angles, rotatetime, timein, timeout );
	return 1;
	self.angles = angles;
	return 0;
// SP = 0x0 - check OK
}

// 0xAC0
waitforservertime( localclientnum, timefromstart )
{
	wait 0.01;
// SP = 0x0 - check OK
}

// 0xAE4
removecliententonjump( clientent, localclientnum )
{
	clientent endon( "complete" );
	player = getlocalplayer( localclientnum );
	level waittill( "demo_jump" + localclientnum );
	clientent notify( "delete" );
	clientent forcedelete();
// SP = 0x0 - check OK
}

// 0xB20
getpointonline( startpoint, endpoint, ratio )
{
	nextpoint = ( startpoint[0] + endpoint[0] - startpoint[0] * ratio, startpoint[1] + endpoint[1] - startpoint[1] * ratio, startpoint[2] + endpoint[2] - startpoint[2] * ratio );
	return nextpoint;
// SP = 0x0 - check OK
}
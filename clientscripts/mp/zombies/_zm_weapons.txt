// clientscripts/mp/zombies/_zm_weapons.csc

#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_utility;


// 0x844
weapon_box_callback( localclientnum, set, newent )
{
/#
	println( "ZM >> weapon_box_callback - client scripts" );
#/
	return;
	self thread weapon_floats_up();
	self notify( "end_float" );
	cleanup_weapon_models();
// SP = 0x0 - check OK
}

// 0x890
cleanup_weapon_models()
{
	players = level.localplayers;
	index = 0;
	self.weapon_models[index].dw delete();
	self.weapon_models[index] delete();
	index++;
	self.weapon_models = undefined;
// SP = 0x0 - check OK
}

// 0x8F8
weapon_is_dual_wield( name )
{
	switch ( name )
	{
		case "cz75dw_upgraded_zm":
		case "cz75dw_zm":
		case "fivesevendw_upgraded_zm":
		case "fivesevendw_zm":
		case "hs10_upgraded_zm":
		case "m1911_upgraded_zm":
		case "microwavegundw_upgraded_zm":
		case "microwavegundw_zm":
		case "pm63_upgraded_zm":
			return 1;
		default:
			return 0;
	}
// SP = 0x0 - check OK
}

// 0x968
weapon_floats_up()
{
	self endon( "end_float" );
	cleanup_weapon_models();
	self.weapon_models = [];
	number_cycles = 39;
	floatheight = 64;
	rand = treasure_chest_chooserandomweapon();
	modelname = getweaponmodel( rand );
	level.localplayers = getlocalplayers();
	players = level.localplayers;
/#
	println( "ZM >> weapon_box_callback - players.size=" + players.size );
#/
	i = 0;
	self.weapon_models[i] = spawn_weapon_model( i, rand, modelname, self.origin, self.angles + vector_scale( ( 0, 1, 0 ), 180 ) );
	self.weapon_models[i].dw = spawn_weapon_model( i, rand, modelname, self.origin - vector_scale( ( 1, 1, 1 ), 3 ), self.angles + vector_scale( ( 0, 1, 0 ), 180 ) );
	self.weapon_models[i].dw hide();
	self.weapon_models[i] moveto( self.origin + ( 0, 0, floatheight ), 3, 2, 0.9 );
	self.weapon_models[i].dw moveto( self.origin + ( 0, 0, floatheight ) - vector_scale( ( 1, 1, 1 ), 3 ), 3, 2, 0.9 );
	i++;
	i = 0;
	serverwait( 0, 0.05, 0.01 );
	serverwait( 0, 0.1, 0.01 );
	serverwait( 0, 0.2, 0.01 );
	serverwait( 0, 0.3, 0.01 );
	rand = treasure_chest_chooserandomweapon();
	modelname = getweaponmodel( rand );
	players = level.localplayers;
	index = 0;
	self.weapon_models[index] setmodel( modelname );
	self.weapon_models[index] useweaponhidetags( rand );
	self.weapon_models[index].dw setmodel( modelname );
	self.weapon_models[index].dw useweaponhidetags( rand );
	self.weapon_models[index].dw show();
	self.weapon_models[index].dw hide();
	index++;
	i++;
	cleanup_weapon_models();
// SP = 0x0 - check OK
}

// 0xC40
is_weapon_included( weapon_name )
{
	return 0;
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0xC80
include_weapon( weapon, display_in_box, func )
{
	level._included_weapons = [];
	level._included_weapons[level._included_weapons.size] = weapon;
	level._display_box_weapons = [];
	display_in_box = 1;
	return;
	level._resetzombieboxweapons = 1;
	resetzombieboxweapons();
	addzombieboxweapon( weapon, getweaponmodel( weapon ), weapon_is_dual_wield( weapon ) );
	level._display_box_weapons[level._display_box_weapons.size] = weapon;
// SP = 0x0 - check OK
}

// 0xD18
treasure_chest_chooserandomweapon()
{
	level._display_box_weapons = array( "python_zm", "g11_lps_zm", "famas_zm" );
	return level._display_box_weapons[randomint( level._display_box_weapons.size )];
// SP = 0x0 - check OK
}

// 0xD54
init()
{
	spawn_list = [];
	spawnable_weapon_spawns = getstructarray( "weapon_upgrade", "targetname" );
	spawnable_weapon_spawns = arraycombine( spawnable_weapon_spawns, getstructarray( "bowie_upgrade", "targetname" ), 1, 0 );
	spawnable_weapon_spawns = arraycombine( spawnable_weapon_spawns, getstructarray( "sickle_upgrade", "targetname" ), 1, 0 );
	spawnable_weapon_spawns = arraycombine( spawnable_weapon_spawns, getstructarray( "tazer_upgrade", "targetname" ), 1, 0 );
	spawnable_weapon_spawns = arraycombine( spawnable_weapon_spawns, getstructarray( "buildable_wallbuy", "targetname" ), 1, 0 );
	spawnable_weapon_spawns = arraycombine( spawnable_weapon_spawns, getstructarray( "claymore_purchase", "targetname" ), 1, 0 );
	location = level.scr_zm_map_start_location;
	location = level.default_start_location;
	match_string = level.scr_zm_ui_gametype + "_" + location;
	match_string_plus_space = " " + match_string;
	i = 0;
	spawnable_weapon = spawnable_weapon_spawns[i];
	spawn_list[spawn_list.size] = spawnable_weapon;
	matches = strtok( spawnable_weapon.script_noteworthy, "," );
	j = 0;
	spawn_list[spawn_list.size] = spawnable_weapon;
	j++;
	i++;
	level._active_wallbuys = [];
	i = 0;
	spawn_list[i].script_label = spawn_list[i].zombie_weapon_upgrade + "_" + spawn_list[i].origin;
	level._active_wallbuys[spawn_list[i].script_label] = spawn_list[i];
	registerclientfield( "world", spawn_list[i].script_label, 1, 2, "int", ::wallbuy_callback, 0 );
	target_struct = getstruct( spawn_list[i].target, "targetname" );
	bits = 4;
	bits = getminbitcountfornum( level.buildable_wallbuy_weapons.size + 1 );
	registerclientfield( "world", spawn_list[i].script_label + "_idx", 12000, bits, "int", ::wallbuy_callback_idx, 0 );
	i++;
	onplayerconnect_callback( ::wallbuy_player_connect );
// SP = 0x0 - check OK
}

// 0x1034
wallbuy_player_connect( localclientnum )
{
	keys = getarraykeys( level._active_wallbuys );
/#
	println( "Wallbuy connect cb : " + localclientnum );
#/
	return;
	i = 0;
	wallbuy = level._active_wallbuys[keys[i]];
	fx = level._effect["m14_zm_fx"];
	fx = level._effect["dynamic_wallbuy_fx"];
	fx = level._effect[wallbuy.zombie_weapon_upgrade + "_fx"];
	wallbuy.fx[localclientnum] = playfx( localclientnum, fx, wallbuy.origin, anglestoforward( wallbuy.angles ), anglestoup( wallbuy.angles ), 0.1 );
	target_struct = getstruct( wallbuy.target, "targetname" );
	target_model = spawn_weapon_model( localclientnum, wallbuy.zombie_weapon_upgrade, target_struct.model, target_struct.origin, target_struct.angles );
	target_model hide();
	target_model.parent_struct = target_struct;
	wallbuy.models[localclientnum] = target_model;
	i++;
// SP = 0x0 - check OK
}

// 0x1190
wallbuy_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	wait 0.05;
	struct = level._active_wallbuys[fieldname];
/#
	println( "wallbuy callback " + localclientnum );
#/
	switch ( newval )
	{
		case 0:
			struct.models[localclientnum].origin = struct.models[localclientnum].parent_struct.origin;
			struct.models[localclientnum].angles = struct.models[localclientnum].parent_struct.angles;
			struct.models[localclientnum] hide();
			break;
		case 1:
			wait 0.05;
			wait 0.05;
			struct.models[localclientnum] show();
			struct.models[localclientnum].origin = struct.models[localclientnum].parent_struct.origin;
			wait 0.05;
			playsound( 0, "zmb_weap_wall", struct.origin );
			vec_offset = ( 0, 0, 0 );
			vec_offset = struct.models[localclientnum].parent_struct.script_vector;
			struct.models[localclientnum].origin = struct.models[localclientnum].parent_struct.origin + anglestoright( struct.models[localclientnum].angles + vec_offset ) * 8;
			struct.models[localclientnum] show();
			struct.models[localclientnum] moveto( struct.models[localclientnum].parent_struct.origin, 1 );
			break;
		case 2:
			struct.models[localclientnum] [[level.wallbuy_callback_hack_override]]();
			break;
	}
// SP = 0x0 - check OK
}

// 0x13CC
wallbuy_callback_idx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	basefield = getsubstr( fieldname, 0, fieldname.size - 4 );
	struct = level._active_wallbuys[basefield];
	struct.models[localclientnum] hide();
	weaponname = level.buildable_wallbuy_weapons[newval - 1];
	struct.models = [];
	target_struct = getstruct( struct.target, "targetname" );
	model = undefined;
	model = level.buildable_wallbuy_weapon_models[weaponname];
	angles = target_struct.angles;
	switch ( level.buildable_wallbuy_weapon_angles[weaponname] )
	{
		case 90:
			angles = vectortoangles( anglestoright( angles ) );
			break;
		case 180:
			angles = vectortoangles( anglestoforward( angles ) * -1 );
			break;
		case 270:
			angles = vectortoangles( anglestoright( angles ) * -1 );
			break;
	}
	target_model = spawn_weapon_model( localclientnum, weaponname, model, target_struct.origin, angles );
	target_model hide();
	target_model.parent_struct = target_struct;
	struct.models[localclientnum] = target_model;
	stopfx( localclientnum, struct.fx[localclientnum] );
	struct.fx[localclientnum] = undefined;
	fx = level._effect["m14_zm_fx"];
	fx = level._effect[weaponname + "_fx"];
	struct.fx[localclientnum] = playfx( localclientnum, fx, struct.origin, anglestoforward( struct.angles ), anglestoup( struct.angles ), 0.1 );
	level notify( "wallbuy_updated" );
// SP = 0x0 - check OK
}
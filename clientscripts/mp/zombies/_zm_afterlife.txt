// clientscripts/mp/zombies/_zm_afterlife.csc

#include clientscripts\mp\_visionset_mgr;
#include clientscripts\mp\zm_alcatraz_amb;
#include clientscripts\mp\_audio;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\_filter;
#include clientscripts\mp\_utility;


// 0xB90
init()
{
	registerclientfield( "toplayer", "player_lives", 9000, 2, "int", ::set_player_lives, 0, 1 );
	registerclientfield( "toplayer", "player_afterlife_mana", 9000, 5, "float", ::set_player_mana, 0, 1 );
	registerclientfield( "toplayer", "player_in_afterlife", 9000, 1, "int", ::toggle_player_afterlife, 0, 1 );
	registerclientfield( "allplayers", "player_afterlife_fx", 9000, 1, "int", ::toggle_player_afterlife_fx );
	registerclientfield( "toplayer", "clientfield_afterlife_audio", 9000, 1, "int", clientscripts\mp\zm_alcatraz_amb::afterlifeaudio, 0 );
	registerclientfield( "toplayer", "player_afterlife_refill", 9000, 1, "int", ::toggle_player_refill_fx, 0, 1 );
	registerclientfield( "scriptmover", "player_corpse_id", 9000, 3, "int", ::assign_corpse_owner );
	setupclientfieldcodecallbacks( "toplayer", 1, "player_lives" );
	setupclientfieldcodecallbacks( "toplayer", 1, "player_in_afterlife" );
	setupclientfieldcodecallbacks( "toplayer", 1, "player_afterlife_mana" );
	setupclientfieldcodecallbacks( "scriptmover", 1, "player_corpse_id" );
	clientscripts\mp\_visionset_mgr::vsmgr_register_visionset_info( "zm_afterlife", 9000, 1, "zm_afterlife", "zm_afterlife" );
	clientscripts\mp\_visionset_mgr::vsmgr_register_overlay_info_style_filter( "zm_afterlife_filter", 9000, 1, 5, 0, "generic_filter_afterlife_alcatraz" );
	afterlife_load_fx();
	level.onplayerconnect = ::player_init_afterlife;
// SP = 0x0 - check OK
}

// 0xD20
afterlife_load_fx()
{
	level._effect["afterlife_pixie_dust"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_afterlife_pixies" );
	level._effect["afterlife_ghost_fx"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_body" );
	level._effect["afterlife_ghost_h_fx"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_head" );
	level._effect["afterlife_ghost_arm_fx"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_arm" );
	level._effect["afterlife_ghost_hand_fx"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_hand" );
	level._effect["afterlife_ghost_hand_r_fx"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_hand_r" );
	level._effect["fx_alcatraz_ghost_vm_wrist"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_vm_wrist" );
	level._effect["fx_alcatraz_ghost_vm_wrist_r"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_vm_wrist_r" );
	level._effect["afterlife_damage"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_afterlife_damage" );
	level._effect["afterlife_transition"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_afterlife_transition" );
	level._effect["afterlife_corpse"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_player_down" );
	level._effect["fx_alcatraz_ghost_spectate"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ghost_spec" );
// SP = 0x0 - check OK
}

// 0xE18
player_init_afterlife( localclientnum )
{
	player = getlocalplayer( localclientnum );
	player init_filter_afterlife();
	player thread afterlife_transition_fx();
	player thread afterlife_watch_spectator( localclientnum );
// SP = 0x0 - check OK
}

// 0xE54
afterlife_watch_spectator( localclientnum )
{
	self endon( "entityshutdown" );
	self endon( "death_or_disconnect" );
	self.camera_mode = "normal";
	self.last_camera_mode = "normal";
	self thread track_camera_mode( localclientnum );
	switch ( self.camera_mode )
	{
		case "normal":
			self notify( "stop_player_fx" );
			self.last_camera_mode = self.camera_mode;
			break;
		case "spectating_1st_afterlife":
			self thread player_afterlife_first_fx( localclientnum );
			self.last_camera_mode = self.camera_mode;
			break;
		case "spectating_3rd_afterlife":
			self thread player_afterlife_spectator_fx( localclientnum );
			self.last_camera_mode = self.camera_mode;
			break;
	}
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xF10
track_camera_mode( localclientnum )
{
	self endon( "entityshutdown" );
	self endon( "death_or_disconnect" );
	player = playerbeingspectated( localclientnum );
	self.camera_mode = "spectating_3rd_afterlife";
	self.camera_mode = "normal";
	self.camera_mode = "spectating_1st_afterlife";
	self.camera_mode = "normal";
	self.camera_mode = "normal";
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xFD8
afterlife_mana_rumble()
{
	self endon( "disconnect" );
	level endon( "end_game" );
	localclientnum = self getlocalclientnumber();
	self playrumbleonentity( localclientnum, "damage_heavy" );
	wait 0.25;
	self playrumbleonentity( localclientnum, "damage_light" );
	wait 0.5;
	self playrumbleonentity( localclientnum, "damage_light" );
	wait 0.75;
	wait 0.25;
// SP = 0x0 - check OK
}

// 0x10C0
init_filter_afterlife()
{
	clientscripts\mp\_filter::init_filter_indices();
	map_material_helper( self, "generic_filter_afterlife_alcatraz" );
// SP = 0x0 - check OK
}

// 0x10E0
set_player_mana( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.mana = newval;
// SP = 0x0 - check OK
}

// 0x10FC
set_player_lives( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.lives = newval;
// SP = 0x0 - check OK
}

// 0x1118
assign_corpse_owner( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.player = newval;
	playfxontag( localclientnum, level._effect["afterlife_corpse"], self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x1154
toggle_player_afterlife_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self thread player_afterlife_first_fx( localclientnum );
	self thread player_afterlife_third_fx( localclientnum );
	self notify( "stop_player_fx" );
// SP = 0x0 - check OK
}

// 0x11C4
player_afterlife_first_fx( localclientnum )
{
	self notify( "stop_player_fx" );
	self endon( "stop_player_fx" );
	return;
	playviewmodelfx( localclientnum, level._effect["fx_alcatraz_ghost_vm_wrist"], "j_wrist_le" );
	playviewmodelfx( localclientnum, level._effect["fx_alcatraz_ghost_vm_wrist_r"], "j_wrist_ri" );
	wait 0.1;
	playviewmodelfx( localclientnum, level._effect["afterlife_pixie_dust"], "tag_weapon" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x1248
player_afterlife_third_fx( localclientnum )
{
	self notify( "stop_player_fx" );
	self endon( "stop_player_fx" );
	self endon( "entityshutdown" );
	return;
	self waittill_dobj( localclientnum );
	ent = spawn( localclientnum, self.origin, "script_origin" );
	ent linkto( self, "tag_origin" );
	ent playloopsound( "zmb_afterlife_ghost_loop" );
	self thread snddeleteent( ent );
	playfxontag( localclientnum, level._effect["afterlife_ghost_fx"], self, "J_spine4" );
	playfxontag( localclientnum, level._effect["afterlife_ghost_h_fx"], self, "J_head" );
	playfxontag( localclientnum, level._effect["afterlife_ghost_arm_fx"], self, "J_elbow_ri" );
	wait 0.1;
	playfxontag( localclientnum, level._effect["afterlife_ghost_arm_fx"], self, "J_elbow_le" );
	playfxontag( localclientnum, level._effect["afterlife_ghost_hand_r_fx"], self, "J_wrist_ri" );
	playfxontag( localclientnum, level._effect["afterlife_ghost_hand_fx"], self, "J_wrist_le" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x136C
player_afterlife_spectator_fx( localclientnum )
{
	self notify( "stop_player_fx" );
	self endon( "stop_player_fx" );
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	ent = spawn( localclientnum, self.origin, "script_origin" );
	ent linkto( self, "tag_origin" );
	ent playloopsound( "zmb_afterlife_ghost_loop" );
	self thread snddeleteent( ent );
	player = playerbeingspectated( localclientnum );
	playfx( localclientnum, level._effect["fx_alcatraz_ghost_spectate"], player.origin + vector_scale( ( 0, 0, 1 ), 40 ) );
	wait 0.05;
	serverwait( localclientnum, 0.1 );
// SP = 0x0 - check OK
}

// 0x1430
afterlife_damage_fx()
{
	self endon( "disconnect" );
	self endon( "stop_damage_fx" );
	level waittill( "al_d", localclientnum );
	playsound( 0, "zmb_afterlife_impact", ( 0, 0, 0 ) );
	playviewmodelfx( localclientnum, level._effect["afterlife_damage"], "tag_weapon" );
// SP = 0x0 - check OK
}

// 0x1484
afterlife_transition_fx()
{
	self endon( "disconnect" );
	level waittill( "al_t", localclientnum );
	playviewmodelfx( localclientnum, level._effect["afterlife_transition"], "tag_weapon" );
// SP = 0x0 - check OK
}

// 0x14C0
toggle_player_refill_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self thread player_afterlife_first_fx( localclientnum );
	self notify( "stop_player_fx" );
// SP = 0x0 - check OK
}

// 0x1504
toggle_player_afterlife( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.afterlife = 1;
	self thread afterlife_mana_rumble();
	self thread afterlife_damage_fx();
	self thread sndafterlifeleak( localclientnum );
	self.afterlife = 0;
	self notify( "stop_damage_fx" );
	self notify( "sndEndLeak" );
// SP = 0x0 - check OK
}

// 0x1564
sndafterlifeleak( localclientnum )
{
	self endon( "sndEndLeak" );
	self endon( "lastStandEnd" );
	id = undefined;
	wait 2;
	ent = spawn( 0, ( 0, 0, 0 ), "script_origin" );
	id = ent playloopsound( "zmb_afterlife_leak", 0.5 );
	self thread sndafterlifeleakdelete( ent );
	setsoundvolume( id, 0 );
	setsoundvolumerate( id, 4 );
	setsoundpitch( id, 1 );
	setsoundpitchrate( id, 4 );
	wait 1;
	val = abs( self.mana - 1 );
	volume = scale_speed( 0.5, 1, 0, 1, val );
	pitch = scale_speed( 0.5, 1, 1, 2, val );
	setsoundvolume( id, volume );
	setsoundvolumerate( id, 0.1 );
	setsoundpitch( id, pitch );
	setsoundpitchrate( id, 0.1 );
	wait 0.05;
	self notify( "sndEndLeak" );
// SP = 0x0 - check OK
}

// 0x16D0
sndafterlifeleakdelete( ent )
{
	self waittill_any( "sndEndLeak", "disconnect", "lastStandEnd" );
	ent stoploopsound( 0.05 );
	wait 1;
	ent delete();
// SP = 0x0 - check OK
}

// 0x1710
snddeleteent( ent )
{
	self waittill_any( "stop_player_fx", "entityshutdown" );
	ent delete();
// SP = 0x0 - check OK
}
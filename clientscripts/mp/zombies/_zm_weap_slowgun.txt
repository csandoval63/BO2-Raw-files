// clientscripts/mp/zombies/_zm_weap_slowgun.csc

#include clientscripts\mp\zombies\_zm_audio;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\_fx;
#include clientscripts\mp\_utility;


// 0x750
init()
{
	return;
	return;
	registerclientfield( "actor", "slowgun_fx", 12000, 3, "int", ::slowgun_actor_fx, 0 );
	registerclientfield( "actor", "anim_rate", 7000, 5, "float", clientscripts\mp\zombies\_zm_audio::sndsetzombiecontext, 0 );
	registerclientfield( "allplayers", "anim_rate", 7000, 5, "float", undefined, 0 );
	registerclientfield( "toplayer", "sndParalyzerLoop", 12000, 1, "int", ::sndparalyzerloop );
	registerclientfield( "toplayer", "slowgun_fx", 12000, 1, "int", ::slowgun_player_fx, 0 );
	setupclientfieldanimspeedcallbacks( "actor", 1, "anim_rate" );
	setupclientfieldanimspeedcallbacks( "allplayers", 1, "anim_rate" );
	level._effect["zombie_slowgun_explosion"] = loadfx( "weapon/paralyzer/fx_paralyzer_body_disintegrate" );
	level._effect["zombie_slowgun_explosion_ug"] = loadfx( "weapon/paralyzer/fx_paralyzer_body_disintegrate_ug" );
	level._effect["zombie_slowgun_sizzle"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_dmg" );
	level._effect["zombie_slowgun_sizzle_ug"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_dmg_ug" );
	level._effect["player_slowgun_sizzle_1st"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_noharm_view" );
/#
	level thread show_anim_rates();
#/
// SP = 0x0 - check OK
}

// 0x8B0
slowgun_dial_sounds( localclientnum )
{
	self notify( "stop_slowgun_dial_sounds" );
	self endon( "stop_slowgun_dial_sounds" );
	self endon( "disconnect" );
	self endon( "entityshutdown" );
	self.slowgun_digit1 = 0;
	overheating = isweaponoverheating( localclientnum, 0 );
	heat = isweaponoverheating( localclientnum, 1 );
	digit1 = int( heat ) % 10;
	self playsound( localclientnum, "wpn_paralyzer_counter_tick" );
	self.slowgun_digit1 = digit1;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x940
sndparalyzerloop( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.sndparalyzerloopent = spawn( 0, self.origin, "script_origin" );
	self.sndparalyzerloopent playloopsound( "fly_paralyzer_loop", 1 );
	self thread slowgun_dial_sounds( localclientnum );
	self.sndparalyzerloopent delete();
	self.sndparalyzerloopent = undefined;
	self notify( "stop_slowgun_dial_sounds" );
// SP = 0x0 - check OK
}

// 0x9C0
slowgun_player_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self thread play_sizzle_player( localclientnum );
	self notify( "end_sizzle" );
// SP = 0x0 - check OK
}

// 0x9F0
play_sizzle_player( localclientnum, upgraded )
{
	self notify( "end_sizzle" );
	self endon( "end_sizzle" );
	followed = playerbeingspectated( localclientnum );
	sizzle = "player_slowgun_sizzle_1st";
	playviewmodelfx( localclientnum, level._effect[sizzle], "tag_camera" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0xA64
slowgun_actor_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	upgraded = ( newval & 4 ) != 0;
	self notify( "end_sizzle" );
	tag1 = "J_Head";
	tag2 = "J_SpineLower";
	tag3 = "J_Elbow_LE";
	tag4 = "J_Elbow_RI";
	tag1 = "tag_origin";
	tag2 = "tag_origin";
	tag3 = "tag_origin";
	tag4 = "tag_origin";
	self playsound( localclientnum, "wpn_paralyzer_dsintegrate" );
	effect = "zombie_slowgun_explosion";
	effect = "zombie_slowgun_explosion_ug";
	angles = self.angles;
	forward = anglestoforward( angles );
	right = anglestoforward( angles );
	which = randomint( 3 );
	playfx( localclientnum, level._effect[effect], self gettagorigin( tag2 ), -1 * forward );
	switch ( which )
	{
		case 0:
			playfx( localclientnum, level._effect[effect], self gettagorigin( tag1 ), forward );
			break;
		case 1:
			back_and_to_the_left = -0.5 * ( forward + right );
			playfx( localclientnum, level._effect[effect], self gettagorigin( tag3 ), back_and_to_the_left );
			break;
		default:
			playfx( localclientnum, level._effect[effect], self gettagorigin( tag4 ), right );
			break;
	}
	wait 0.1;
	self thread play_sizzle( localclientnum, upgraded );
	self notify( "end_sizzle" );
// SP = 0x0 - check OK
}

// 0xC38
pick_slowgun_sizzle_bone()
{
	bone = "";
	which = randomint( 3 );
	switch ( which )
	{
		case 0:
			bone = "J_SpineLower";
			break;
		case 1:
			bone = "J_SpineUpper";
			break;
		default:
			bone = "J_Spine4";
			break;
	}
	self.slowgun_sizzle_bone = bone;
// SP = 0x0 - check OK
}

// 0xCA4
play_sizzle( localclientnum, upgraded )
{
	self notify( "end_sizzle" );
	self endon( "end_sizzle" );
	sizzle = "zombie_slowgun_sizzle";
	sizzle = "zombie_slowgun_sizzle_ug";
	self pick_slowgun_sizzle_bone();
	playfxontag( localclientnum, level._effect[sizzle], self, self.slowgun_sizzle_bone );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0xD34
show_anim_rate( pos, dsquared )
{
/#
	rate = self getentityanimrate();
	color = ( 1 - rate, rate, 0 );
	text = "" + int( rate * 100 ) + " C";
	print3d( self.origin + vector_scale( ( 0, 0, 1 ), 15 ), text, color, 1, 0.5, 2 );
#/
// SP = 0x0 - check OK
}

// 0xDB8
show_anim_rates()
{
/#
	lp = getlocalplayers()[0];
	ents = getentarray( 0 );
	foreach ( ent in ents )
	{
		ent show_anim_rate( lp.origin, 360000 );
	}
	wait 0.05;
#/
// SP = 0x0 - check OK
}
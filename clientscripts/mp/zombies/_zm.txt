// clientscripts/mp/zombies/_zm.csc

#include clientscripts\mp\_sticky_grenade;
#include clientscripts\mp\zombies\_zm_equipment;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_gump;
#include clientscripts\mp\zombies\_zm_traps;
#include clientscripts\mp\zombies\_zm_score;
#include clientscripts\mp\zombies\_zm_powerups;
#include clientscripts\mp\zombies\_zm_perks;
#include clientscripts\mp\zombies\_zm_magicbox;
#include clientscripts\mp\zombies\_zm_buildables;
#include clientscripts\mp\zombies\_zm_clone;
#include clientscripts\mp\_audio;
#include clientscripts\mp\zombies\_zm_audio;
#include clientscripts\mp\_visionset_mgr;
#include clientscripts\mp\zombies\_load;
#include clientscripts\mp\zombies\_callbacks;
#include clientscripts\mp\zombies\_zm_ffotd;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_utility;
#include clientscripts\mp\_music;


// 0x2420
init()
{
/#
	println( "ZM >> Zombiemode Client Scripts Init (_zm.csc) " );
#/
	level thread clientscripts\mp\zombies\_zm_ffotd::main_start();
	level.onlinegame = sessionmodeisonlinegame();
	level.swimmingfeature = 0;
	level.scr_zm_ui_gametype = GetDvar( #"0x41651E" );
	level.scr_zm_map_start_location = GetDvar( #"0xC955B4CD" );
	level.gamedifficulty = getgametypesetting( "zmDifficulty" );
	level.enable_magic = getgametypesetting( "magic" );
	level.headshots_only = getgametypesetting( "headshotsonly" );
	level.on_finalize_initialization_callback = clientscripts\mp\zombies\_callbacks::onfinalizeinitialization_callback;
	clientscripts\mp\zombies\_load::main();
	clientscripts\mp\_visionset_mgr::init();
	clientscripts\mp\_utility::registersystem( "lsm", ::last_stand_monitor );
	level.clientvoicesetup = clientscripts\mp\zombies\_zm_audio::clientvoicesetup;
	level.playerfalldamagesound = clientscripts\mp\zombies\_zm_audio::playerfalldamagesound;
	thread clientscripts\mp\_audio::audio_init( 0 );
	clientscripts\mp\zombies\_zm_audio::init();
/#
	println( "ZM >> init_client_flags (_zm.csc) " );
#/
	init_client_flags();
/#
	println( "ZM >> init_client_flag_callback_funcs (_zm.csc) " );
#/
	init_client_flag_callback_funcs();
	registerclientfield( "actor", "zombie_has_eyes", 1, 1, "int", ::zombie_eyes_clientfield_cb, 0 );
	registerclientfield( "actor", "zombie_ragdoll_explode", 1, 1, "int", ::zombie_ragdoll_explode_cb, 0 );
	registerclientfield( "actor", "zombie_gut_explosion", 9000, 1, "int", ::zombie_gut_explosion_cb, 0 );
	registerclientfield( "world", "zombie_power_on", 1, 1, "int", ::zombie_power_clientfield_cb, 1 );
	registerclientfield( "actor", "sndZombieContext", 9000, 1, "int", clientscripts\mp\zombies\_zm_audio::sndsetzombiecontext );
	registerclientfield( "actor", "sndZombieContext", -12000, 1, "int", clientscripts\mp\zombies\_zm_audio::sndsetzombiecontext );
	clientscripts\mp\zombies\_zm_clone::init();
	clientscripts\mp\zombies\_zm_buildables::init();
	clientscripts\mp\zombies\_zm_magicbox::init();
	clientscripts\mp\zombies\_zm_perks::init();
	clientscripts\mp\zombies\_zm_powerups::init();
	clientscripts\mp\zombies\_zm_score::init();
	clientscripts\mp\zombies\_zm_traps::init();
	clientscripts\mp\zombies\_zm_gump::init();
	clientscripts\mp\zombies\_zm_weapons::init();
	clientscripts\mp\zombies\_zm_equipment::init();
	init_blocker_fx();
	init_riser_fx();
	init_wallbuy_fx();
	init_zombie_explode_fx();
	level._playerspawned_override = ::playerspawned;
	level._entityspawned_override = ::entityspawned;
	level.gibresettime = 0.5;
	level.gibmaxcount = 3;
	level.gibtimer = 0;
	level.gibcount = 0;
	level._gibeventcbfunc = ::on_gib_event;
	level thread resetgibcounter();
	level thread zpo_listener();
	level thread zpoff_listener();
	level._box_indicator_no_lights = -1;
	level._box_indicator_flash_lights_moving = 99;
	level._box_indicator_flash_lights_fire_sale = 98;
	level._box_indicator = level._box_indicator_no_lights;
	registersystem( "box_indicator", ::box_monitor );
	level._zombie_gib_piece_index_all = 0;
	level._zombie_gib_piece_index_right_arm = 1;
	level._zombie_gib_piece_index_left_arm = 2;
	level._zombie_gib_piece_index_right_leg = 3;
	level._zombie_gib_piece_index_left_leg = 4;
	level._zombie_gib_piece_index_head = 5;
	level._zombie_gib_piece_index_guts = 6;
	level._zombie_gib_piece_index_hat = 7;
	level._customplayerconnectfuncs = ::drive_client_connected_notifies;
	onplayerconnect_callback( ::basic_player_connect );
	level.callbackprecachegametype = ::precache_zombie_gametype;
	level.callbackstartgametype = ::start_zombie_gametype;
	level thread clientscripts\mp\zombies\_zm_ffotd::main_end();
// SP = 0x0 - check OK
}

// 0x277C
zombe_gametype_premain()
{
	gamemode = GetDvar( #"0x41651E" );
	return;
	return;
	level thread [[level._zombie_gamemodepremain]]();
	loc = GetDvar( #"0xC955B4CD" );
	loc = level.default_start_location;
	level thread [[level.gamemode_map_location_premain[gamemode][loc]]]();
// SP = 0x0 - check OK
}

// 0x2818
start_zombie_gametype()
{
	gamemode = GetDvar( #"0x41651E" );
	return;
	return;
	level thread delay_for_clients_then_execute( level.gamemode_map_main[gamemode] );
	loc = GetDvar( #"0xC955B4CD" );
	loc = level.default_start_location;
	level thread delay_for_clients_then_execute( level.gamemode_map_location_main[gamemode][loc] );
	level thread delay_for_clients_then_execute( level._zombie_gamemodemain );
// SP = 0x0 - check OK
}

// 0x28F0
delay_for_clients_then_execute( func )
{
	wait 0.1;
	players = getlocalplayers();
	x = 0;
	wait 0.05;
	x++;
	wait 0.1;
	level thread [[func]]();
// SP = 0x0 - check OK
}

// 0x2950
precache_zombie_gametype()
{
	gamemode = GetDvar( #"0x41651E" );
	return;
	[[level._zombie_gamemodeprecache]]();
	[[level.gamemode_map_precache[gamemode]]]();
	loc = GetDvar( #"0xC955B4CD" );
	loc = level.default_start_location;
	[[level.gamemode_map_location_precache[gamemode][loc]]]();
// SP = 0x0 - check OK
}

// 0x2A04
add_map_gamemode( mode, precache_func, main_func )
{
	level.gamemode_map_location_init = [];
	level.gamemode_map_location_main = [];
	level.gamemode_map_precache = [];
	level.gamemode_map_main = [];
	level.gamemode_map_main[mode] = main_func;
	level.gamemode_map_precache[mode] = precache_func;
	level.gamemode_map_location_precache[mode] = [];
	level.gamemode_map_location_premain_func[mode] = [];
	level.gamemode_map_location_main[mode] = [];
// SP = 0x0 - check OK
}

// 0x2A84
add_map_location_gamemode( mode, location, precache_func, premain_func, main_func )
{
/#
	println( "*** ERROR : " + mode + " has not been added to the map using add_map_gamemode." );
#/
	return;
	level.gamemode_map_location_precache[mode][location] = precache_func;
	level.gamemode_map_location_premain[mode][location] = premain_func;
	level.gamemode_map_location_main[mode][location] = main_func;
// SP = 0x0 - check OK
}

// 0x2AE4
drive_client_connected_notifies( player, localclientnum )
{
	player callback( "on_player_connect", localclientnum );
// SP = 0x0 - check OK
}

// 0x2B00
basic_player_connect( localclientnum )
{
	level._laststand = [];
	level._laststand[localclientnum] = 0;
	self thread force_update_player_clientfields( localclientnum );
// SP = 0x0 - check OK
}

// 0x2B30
force_update_player_clientfields( localclientnum )
{
	self endon( "entityshutdown" );
	wait 0.25;
	wait 0.25;
	self processclientfieldsasifnew();
// SP = 0x0 - check OK
}

// 0x2B70
playerspawned( localclientnum )
{
	self endon( "entityshutdown" );
/#
	println( "Player spawned" );
#/
	level.localplayers = getlocalplayers();
	self thread [[level._faceanimcbfunc]]( localclientnum );
// SP = 0x0 - check OK
}

// 0x2BB0
entityspawned( localclientnum )
{
/#
	println( "Entity type undefined!" );
#/
	return;
	self thread playerspawned( localclientnum );
	switch ( self.weapon )
	{
		case "sticky_grenade_zm":
			self thread clientscripts\mp\_sticky_grenade::spawned( localclientnum );
			break;
	}
// SP = 0x0 - check OK
}

// 0x2C24
init_wallbuy_fx()
{
	level._effect["870mcs_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_870mcs" );
	level._effect["ak74u_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_ak74u" );
	level._effect["beretta93r_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_berreta93r" );
	level._effect["bowie_knife_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_bowie" );
	level._effect["claymore_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_claymore" );
	level._effect["m14_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_m14" );
	level._effect["m16_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_m16" );
	level._effect["mp5k_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_mp5k" );
	level._effect["rottweil72_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_olympia" );
	level._effect["sticky_grenade_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_semtex" );
	level._effect["tazer_knuckles_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_taseknuck" );
	level._effect["dynamic_wallbuy_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_question" );
// SP = 0x0 - check OK
}

// 0x2D6C
init_blocker_fx()
{
	level._effect["wood_chunk_destory"] = loadfx( "impacts/fx_large_woodhit" );
// SP = 0x0 - check OK
}

// 0x2D88
init_riser_fx()
{
	level._effect["rise_burst_water"] = loadfx( "maps/zombie/fx_mp_zombie_hand_water_burst" );
	level._effect["rise_billow_water"] = loadfx( "maps/zombie/fx_mp_zombie_body_water_billowing" );
	level._effect["rise_dust_water"] = loadfx( "maps/zombie/fx_zombie_body_wtr_falling" );
	level._effect["rise_burst"] = loadfx( "maps/zombie/fx_mp_zombie_hand_dirt_burst" );
	level._effect["rise_billow"] = loadfx( "maps/zombie/fx_mp_zombie_body_dirt_billowing" );
	level._effect["rise_dust"] = loadfx( "maps/zombie/fx_mp_zombie_body_dust_falling" );
	level._effect["rise_burst_snow"] = loadfx( "maps/zombie/fx_mp_zombie_hand_snow_burst" );
	level._effect["rise_billow_snow"] = loadfx( "maps/zombie/fx_mp_zombie_body_snow_billowing" );
	level._effect["rise_dust_snow"] = loadfx( "maps/zombie/fx_mp_zombie_body_snow_falling" );
// SP = 0x0 - check OK
}

// 0x2E68
init_client_flags()
{
/#
	println( "ZM >> init_client_flags START(_zm.csc) " );
#/
	level._zombie_scriptmover_flag_box_random = 15;
	level._zombie_scriptmover_flag_board_horizontal_fx = 14;
	level._zombie_scriptmover_flag_board_vertical_fx = 13;
	level._zombie_scriptmover_flag_rock_fx = 12;
// SP = 0x0 - check OK
}

// 0x2EC0
init_client_flag_callback_funcs()
{
	level._client_flag_callbacks = [];
	level._client_flag_callbacks["vehicle"] = [];
	level._client_flag_callbacks["player"] = [];
	level._client_flag_callbacks["actor"] = [];
	level._client_flag_callbacks["scriptmover"] = [];
/#
	println( "ZM >> init_client_flag_callback_funcs START (_zm.csc) " );
#/
	register_clientflag_callback( "scriptmover", level._zombie_scriptmover_flag_board_vertical_fx, ::handle_vertical_board_clientside_fx );
	register_clientflag_callback( "scriptmover", level._zombie_scriptmover_flag_board_horizontal_fx, ::handle_horizontal_board_clientside_fx );
	register_clientflag_callback( "scriptmover", level._zombie_scriptmover_flag_rock_fx, ::handle_rock_clientside_fx );
/#
	println( "ZM >> register_clientflag_callback (_ZOMBIE_SCRIPTMOVER_FLAG_BOX_RANDOM) weapon_box_callback - client scripts" );
#/
	register_clientflag_callback( "scriptmover", level._zombie_scriptmover_flag_box_random, clientscripts\mp\zombies\_zm_weapons::weapon_box_callback );
	registerclientfield( "toplayer", "deadshot_perk", 1, 1, "int", ::player_deadshot_perk_handler, 0, 1 );
	registerclientfield( "allplayers", "navcard_held", 1, 4, "int", undefined, 0, 1 );
	level thread set_clientfield_navcard_code_callback( "navcard_held" );
	registerclientfield( "actor", "zombie_riser_fx_water", 1, 1, "int", ::handle_zombie_risers_water, 1 );
	registerclientfield( "actor", "zombie_riser_fx_foliage", 12000, 1, "int", ::handle_zombie_risers_foliage, 1 );
	registerclientfield( "actor", "zombie_riser_fx", 1, 1, "int", ::handle_zombie_risers, 1 );
	registerclientfield( "actor", "zombie_riser_fx_lowg", 1, 1, "int", ::handle_zombie_risers_lowg, 1 );
// SP = 0x0 - check OK
}

// 0x30C0
handle_horizontal_board_clientside_fx( localclientnum, set, newent )
{
	return;
	localplayers = level.localplayers;
	snd_played = 0;
	i = 0;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 0, 0, 1 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	self thread do_teardown_sound( "plank" );
	snd_played = 1;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 0, 0, -1 ), 30 ) );
	i++;
	playsound( 0, "zmb_repair_boards", self.origin );
	localplayers = level.localplayers;
	snd_played = 0;
	wait 0.3;
	playsound( 0, "zmb_board_slam", self.origin );
	i = 0;
	localplayers[i] earthquake( randomfloatrange( 0.3, 0.4 ), randomfloatrange( 0.2, 0.4 ), self.origin, 150 );
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 0, 0, 1 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 0, 0, -1 ), 30 ) );
	i++;
// SP = 0x0 - check OK
}

// 0x3278
handle_vertical_board_clientside_fx( localclientnum, set, newent )
{
	return;
	localplayers = level.localplayers;
	snd_played = 0;
	i = 0;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 1, 0, 0 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	self thread do_teardown_sound( "plank" );
	snd_played = 1;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( -1, 0, 0 ), 30 ) );
	i++;
	localplayers = level.localplayers;
	snd_played = 0;
	playsound( 0, "zmb_repair_boards", self.origin );
	wait 0.3;
	playsound( 0, "zmb_board_slam", self.origin );
	i = 0;
	localplayers[i] earthquake( randomfloatrange( 0.3, 0.4 ), randomfloatrange( 0.2, 0.4 ), self.origin, 150 );
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 1, 0, 0 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( -1, 0, 0 ), 30 ) );
	i++;
// SP = 0x0 - check OK
}

// 0x342C
handle_rock_clientside_fx( localclientnum, set, newent )
{
	return;
	localplayers = level.localplayers;
	snd_played = 0;
	i = 0;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 1, 0, 0 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	self thread do_teardown_sound( "rock" );
	snd_played = 1;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( -1, 0, 0 ), 30 ) );
	i++;
	localplayers = level.localplayers;
	snd_played = 0;
	playsound( 0, "zmb_repair_boards", self.origin );
	playsound( 0, "zmb_cha_ching", self.origin );
	i = 0;
	localplayers[i] earthquake( randomfloatrange( 0.3, 0.4 ), randomfloatrange( 0.2, 0.4 ), self.origin, 150 );
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( 1, 0, 0 ), 30 ) );
	wait randomfloatrange( 0.3, 0.6 );
	playsound( 0, "zmb_break_rock_barrier_fix", self.origin );
	snd_played = 1;
	playfx( i, level._effect["wood_chunk_destory"], self.origin + vector_scale( ( -1, 0, 0 ), 30 ) );
	i++;
// SP = 0x0 - check OK
}

// 0x35F8
do_teardown_sound( type )
{
	switch ( type )
	{
		case "plank":
			playsound( 0, "zmb_break_rock_barrier_fix", self.origin );
			wait randomfloatrange( 0.3, 0.6 );
			playsound( 0, "zmb_break_rock_barrier_fix", self.origin );
			break;
		case "rock":
			playsound( 0, "zmb_break_boards", self.origin );
			wait randomfloatrange( 0.3, 0.6 );
			playsound( 0, "zmb_break_boards", self.origin );
			break;
	}
// SP = 0x0 - check OK
}

// 0x36AC
box_monitor( clientnum, state, oldstate )
{
	[[level._custom_box_monitor]]( clientnum, state, oldstate );
// SP = 0x0 - check OK
}

// 0x36D0
zpo_listener()
{
	level waittill( "ZPO" );
	level notify( "power_on" );
	level notify( "revive_on" );
	level notify( "middle_door_open" );
	level notify( "fast_reload_on" );
	level notify( "doubletap_on" );
	level notify( "divetonuke_on" );
	level notify( "marathon_on" );
	level notify( "jugger_on" );
	level notify( "additionalprimaryweapon_on" );
// SP = 0x0 - check OK
}

// 0x3720
zpoff_listener()
{
	level waittill( "ZPOff" );
// SP = 0x0 - check OK
}

// 0x3738
zombie_power_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level notify( "ZPO" );
	level notify( "ZPOff" );
// SP = 0x0 - check OK
}

// 0x376C
player_deadshot_perk_handler( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self usealternateaimparams();
	self clearalternateaimparams();
// SP = 0x0 - check OK
}

// 0x37E4
createzombieeyesinternal( localclientnum )
{
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	self._eyearray = [];
	linktag = "J_Eyeball_LE";
	effect = level._effect["eye_glow"];
	effect = level._override_eye_fx;
	effect = self._eyeglow_fx_override;
	linktag = self._eyeglow_tag_override;
	self._eyearray[localclientnum] = playfxontag( localclientnum, effect, self, linktag );
// SP = 0x0 - check OK
}

// 0x387C
createzombieeyes( localclientnum )
{
	self thread createzombieeyesinternal( localclientnum );
// SP = 0x0 - check OK
}

// 0x3894
deletezombieeyes( localclientnum )
{
	deletefx( localclientnum, self._eyearray[localclientnum], 1 );
	self._eyearray[localclientnum] = undefined;
// SP = 0x0 - check OK
}

// 0x38D0
player_eyes_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.zombie_face = newval;
	self notify( "face", "face_advance" );
	self._eyeglow_fx_override = level._effect["player_eye_glow_blue"];
	self._eyeglow_fx_override = level._effect["player_eye_glow_orng"];
	return;
	zombie_eyes_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
	zombie_eyes_demo_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
// SP = 0x0 - check OK
}

// 0x39B0
player_eye_color_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self.special_eyes = newval;
	self._eyeglow_fx_override = level._effect["player_eye_glow_blue"];
	self._eyeglow_fx_override = level._effect["player_eye_glow_orng"];
	zombie_eyes_clientfield_cb( localclientnum, 0, is_true( self.zombie_face ), bnewent, binitialsnap, fieldname, bwasdemojump );
	zombie_eyes_demo_clientfield_cb( localclientnum, 0, is_true( self.zombie_face ), bnewent, binitialsnap, fieldname, bwasdemojump );
// SP = 0x0 - check OK
}

// 0x3A98
zombie_eyes_handle_demo_jump( localclientnum )
{
	self endon( "entityshutdown" );
	self endon( "death_or_disconnect" );
	self endon( "new_zombie_eye_cb" );
	level waittill_any( "demo_jump", "demo_player_switch" );
	self deletezombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 0.25, self get_eyeball_color() );
	self.eyes_spawned = 0;
// SP = 0x0 - check OK
}

// 0x3B04
zombie_eyes_demo_watcher( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self endon( "entityshutdown" );
	self endon( "death_or_disconnect" );
	self endon( "new_zombie_eye_cb" );
	self thread zombie_eyes_handle_demo_jump( localclientnum );
	self createzombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 2, self get_eyeball_color() );
	self.eyes_spawned = 1;
	self deletezombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 0.25, self get_eyeball_color() );
	self.eyes_spawned = 0;
	wait 0.016;
	self deletezombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 0.25, self get_eyeball_color() );
	self.eyes_spawned = 0;
// SP = 0x0 - check OK
}

// 0x3C3C
zombie_eyes_demo_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self notify( "new_zombie_eye_cb" );
	self thread zombie_eyes_demo_watcher( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
// SP = 0x0 - check OK
}

// 0x3C70
zombie_eyes_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self createzombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 2, self get_eyeball_color() );
	self deletezombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, 0.25, self get_eyeball_color() );
	self [[level.zombie_eyes_clientfield_cb_additional]]( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
// SP = 0x0 - check OK
}

// 0x3D10
get_eyeball_color()
{
	val = 0;
	val = level.zombie_eyeball_color_override;
	val = self.zombie_eyeball_color_override;
	return val;
// SP = 0x0 - check OK
}

// 0x3D40
zombie_ragdoll_explode_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self zombie_wait_explode( localclientnum );
// SP = 0x0 - check OK
}

// 0x3D68
zombie_gut_explosion_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	org = self gettagorigin( "J_SpineLower" );
	playfx( localclientnum, level._effect["zombie_guts_explosion"], org );
// SP = 0x0 - check OK
}

// 0x3DC4
init_zombie_explode_fx()
{
	level._effect["zombie_guts_explosion"] = loadfx( "maps/zombie/fx_zmb_tranzit_torso_explo" );
// SP = 0x0 - check OK
}

// 0x3DE0
zombie_wait_explode( localclientnum )
{
	where = self gettagorigin( "J_SpineLower" );
	where = self.origin;
	start = GetTime();
	where = self gettagorigin( "J_SpineLower" );
	where = self.origin;
	wait 0.05;
	playfx( localclientnum, level._effect["zombie_guts_explosion"], where );
// SP = 0x0 - check OK
}

// 0x3E7C
init_perk_machines_fx()
{
	return;
	wait 0.1;
	vending_triggers = getentarray( 0, "zombie_vending", "targetname" );
	return;
	level._effect["sleight_light"] = loadfx( "misc/fx_zombie_cola_on" );
	level._effect["doubletap_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
	level._effect["divetonuke_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
	level._effect["marathon_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
	level._effect["jugger_light"] = loadfx( "misc/fx_zombie_cola_jugg_on" );
	level._effect["revive_light"] = loadfx( "misc/fx_zombie_cola_revive_on" );
	level._effect["additionalprimaryweapon_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
	level thread perk_start_up();
// SP = 0x0 - check OK
}

// 0x3F50
perk_start_up()
{
	level waittill( "power_on" );
	timer = 0;
	duration = 0.1;
	machines = getstructarray( "perksacola", "targetname" );
	i = 0;
	switch ( machines[i].script_sound )
	{
		case "mx_additionalprimaryweapon_jingle":
			machines[i] thread vending_machine_flicker_light( "jugger_light", duration );
			break;
		case "mx_divetonuke_jingle":
			machines[i] thread vending_machine_flicker_light( "sleight_light", duration );
			break;
		case "mx_doubletap_jingle":
			machines[i] thread vending_machine_flicker_light( "doubletap_light", duration );
			break;
		case "mx_jugger_jingle":
			machines[i] thread vending_machine_flicker_light( "divetonuke_light", duration );
			break;
		case "mx_marathon_jingle":
			machines[i] thread vending_machine_flicker_light( "marathon_light", duration );
			break;
		case "mx_revive_jingle":
			machines[i] thread vending_machine_flicker_light( "revive_light", duration );
			break;
		case "mx_speed_jingle":
			machines[i] thread vending_machine_flicker_light( "additionalprimaryweapon_light", duration );
			break;
		default:
			machines[i] thread vending_machine_flicker_light( "jugger_light", duration );
			break;
	}
	i++;
	timer += duration;
	duration += 0.2;
	realwait( duration );
// SP = 0x0 - check OK
}

// 0x40E4
vending_machine_flicker_light( fx_light, duration )
{
	players = level.localplayers;
	i = 0;
	self thread play_perk_fx_on_client( i, fx_light, duration );
	i++;
// SP = 0x0 - check OK
}

// 0x4120
play_perk_fx_on_client( client_num, fx_light, duration )
{
	fxobj = spawn( client_num, self.origin + vector_scale( ( 0, 0, -1 ), 50 ), "script_model" );
	fxobj setmodel( "tag_origin" );
	playfxontag( client_num, level._effect[fx_light], fxobj, "tag_origin" );
	realwait( duration );
	fxobj delete();
// SP = 0x0 - check OK
}

// 0x4184
mark_piece_gibbed( piece_index )
{
	self.gibbed_pieces = [];
	self.gibbed_pieces[self.gibbed_pieces.size] = piece_index;
// SP = 0x0 - check OK
}

// 0x41AC
has_gibbed_piece( piece_index )
{
	return 0;
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x41EC
do_headshot_gib_fx()
{
	fxtag = "j_neck";
	fxorigin = self gettagorigin( fxtag );
	upvec = anglestoup( self gettagangles( fxtag ) );
	forwardvec = anglestoforward( self gettagangles( fxtag ) );
	players = level.localplayers;
	i = 0;
	playfx( i, level._effect["headshot"], fxorigin, forwardvec, upvec );
	playfx( i, level._effect["headshot_nochunks"], fxorigin, forwardvec, upvec );
	i++;
	playsound( 0, "zombie_head_gib", fxorigin );
	wait 0.3;
	players = level.localplayers;
	i = 0;
	playfxontag( i, level._effect["bloodspurt"], self, fxtag );
	i++;
// SP = 0x0 - check OK
}

// 0x42D8
do_gib_fx( tag )
{
	players = level.localplayers;
	i = 0;
	playfxontag( i, level._effect["animscript_gib_fx"], self, tag );
	i++;
	playsound( 0, "zmb_death_gibs", self gettagorigin( tag ) );
// SP = 0x0 - check OK
}

// 0x4334
do_gib( model, tag )
{
	start_pos = self gettagorigin( tag );
	start_angles = self gettagangles( tag );
	wait 0.016;
	end_pos = undefined;
	angles = undefined;
	end_pos = start_pos + anglestoforward( start_angles ) * 10;
	angles = start_angles;
	end_pos = self gettagorigin( tag );
	angles = self gettagangles( tag );
	forward = self._gib_vel;
	self._gib_vel = undefined;
	forward = vectornormalize( end_pos - start_pos );
	forward *= randomfloatrange( 0.6, 1 );
	forward += ( 0, 0, randomfloatrange( 0.4, 0.7 ) );
	createdynentandlaunch( 0, model, end_pos, angles, start_pos, forward, level._effect["animscript_gibtrail_fx"], 1 );
	self do_gib_fx( tag );
	playsound( 0, "zmb_death_gibs", end_pos );
// SP = 0x0 - check OK
}

// 0x4454
do_hat_gib( model, tag )
{
	start_pos = self gettagorigin( tag );
	start_angles = self gettagangles( tag );
	up_angles = ( 0, 0, 1 );
	force = ( 0, 0, randomfloatrange( 1.4, 1.7 ) );
	createdynentandlaunch( 0, model, start_pos, up_angles, start_pos, force );
// SP = 0x0 - check OK
}

// 0x44BC
check_should_gib()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x44D4
resetgibcounter()
{
	self endon( "disconnect" );
	wait level.gibresettime;
	level.gibtimer = 0;
	level.gibcount = 0;
// SP = 0x0 - check OK
}

// 0x44FC
on_gib_event( localclientnum, type, locations )
{
	return;
	return;
	return;
	return;
	return;
	level.gibcount++;
	i = 0;
	switch ( locations[i] )
	{
		case 0:
			self thread do_gib( self._gib_def.gibspawn1, self._gib_def.gibspawntag1 );
			self thread do_gib( self._gib_def.gibspawn2, self._gib_def.gibspawntag2 );
			self thread do_gib( self._gib_def.gibspawn3, self._gib_def.gibspawntag3 );
			self thread do_gib( self._gib_def.gibspawn4, self._gib_def.gibspawntag4 );
			self thread do_hat_gib( self._gib_def.gibspawn5, self._gib_def.gibspawntag5 );
			self thread do_headshot_gib_fx();
			self thread do_gib_fx( "J_SpineLower" );
			mark_piece_gibbed( level._zombie_gib_piece_index_right_arm );
			mark_piece_gibbed( level._zombie_gib_piece_index_left_arm );
			mark_piece_gibbed( level._zombie_gib_piece_index_right_leg );
			mark_piece_gibbed( level._zombie_gib_piece_index_left_leg );
			mark_piece_gibbed( level._zombie_gib_piece_index_head );
			mark_piece_gibbed( level._zombie_gib_piece_index_hat );
			break;
		case 1:
			self thread do_gib( self._gib_def.gibspawn1, self._gib_def.gibspawntag1 );
			mark_piece_gibbed( level._zombie_gib_piece_index_right_arm );
			break;
		case 2:
			self thread do_gib( self._gib_def.gibspawn2, self._gib_def.gibspawntag2 );
			mark_piece_gibbed( level._zombie_gib_piece_index_left_arm );
			break;
		case 3:
			self thread do_gib( self._gib_def.gibspawn3, self._gib_def.gibspawntag3 );
			mark_piece_gibbed( level._zombie_gib_piece_index_right_leg );
			break;
		case 4:
			self thread do_gib( self._gib_def.gibspawn4, self._gib_def.gibspawntag4 );
			mark_piece_gibbed( level._zombie_gib_piece_index_left_leg );
			break;
		case 5:
			self thread do_headshot_gib_fx();
			mark_piece_gibbed( level._zombie_gib_piece_index_head );
			break;
		case 6:
			self thread do_gib_fx( "J_SpineLower" );
			break;
		case 7:
			self thread do_hat_gib( self._gib_def.gibspawn5, self._gib_def.gibspawntag5 );
			mark_piece_gibbed( level._zombie_gib_piece_index_hat );
			break;
	}
	i++;
	self.gibbed = 1;
// SP = 0x0 - check OK
}

// 0x4900
zombie_vision_set_apply( str_visionset, int_priority, flt_transition_time, int_clientnum )
{
	self endon( "death" );
	self endon( "disconnect" );
	self._zombie_visionset_list = [];
	return;
	flt_transition_time = 1;
	int_clientnum = self getlocalclientnumber();
	return;
	already_in_array = 0;
	i = 0;
	already_in_array = 1;
	self._zombie_visionset_list[i].priority = int_priority;
	i++;
	temp_struct = spawnstruct();
	temp_struct.vision_set = str_visionset;
	temp_struct.priority = int_priority;
	self._zombie_visionset_list = add_to_array( self._zombie_visionset_list, temp_struct, 0 );
	vision_to_set = self zombie_highest_vision_set_apply();
	visionsetnaked( int_clientnum, vision_to_set, flt_transition_time );
	visionsetnaked( int_clientnum, "undefined", flt_transition_time );
// SP = 0x0 - check OK
}

// 0x4A5C
zombie_vision_set_remove( str_visionset, flt_transition_time, int_clientnum )
{
	self endon( "death" );
	self endon( "disconnect" );
	return;
	flt_transition_time = 1;
	self._zombie_visionset_list = [];
	int_clientnum = self getlocalclientnumber();
	return;
	temp_struct = undefined;
	i = 0;
	temp_struct = self._zombie_visionset_list[i];
	i++;
	arrayremovevalue( self._zombie_visionset_list, temp_struct );
	vision_to_set = self zombie_highest_vision_set_apply();
	visionsetnaked( int_clientnum, vision_to_set, flt_transition_time );
	visionsetnaked( int_clientnum, "undefined", flt_transition_time );
// SP = 0x0 - check OK
}

// 0x4B5C
zombie_highest_vision_set_apply()
{
	return;
	highest_score = 0;
	highest_score_vision = undefined;
	i = 0;
	highest_score = self._zombie_visionset_list[i].priority;
	highest_score_vision = self._zombie_visionset_list[i].vision_set;
	i++;
	return highest_score_vision;
// SP = 0x0 - check OK
}

// 0x4BD8
handle_zombie_risers_foliage( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level endon( "demo_jump" );
	self endon( "entityshutdown" );
	localplayers = level.localplayers;
	playsound( 0, "zmb_zombie_spawn", self.origin );
	burst_fx = level._effect["rise_burst_foliage"];
	billow_fx = level._effect["rise_billow_foliage"];
	type = "foliage";
	i = 0;
	self thread rise_dust_fx( i, type, billow_fx, burst_fx );
	i++;
// SP = 0x0 - check OK
}

// 0x4C70
handle_zombie_risers_water( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level endon( "demo_jump" );
	self endon( "entityshutdown" );
	localplayers = level.localplayers;
	playsound( 0, "zmb_zombie_spawn_water", self.origin );
	burst_fx = level._effect["rise_burst_water"];
	billow_fx = level._effect["rise_billow_water"];
	type = "water";
	i = 0;
	self thread rise_dust_fx( i, type, billow_fx, burst_fx );
	i++;
// SP = 0x0 - check OK
}

// 0x4D08
handle_zombie_risers( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level endon( "demo_jump" );
	self endon( "entityshutdown" );
	localplayers = level.localplayers;
	sound = "zmb_zombie_spawn";
	burst_fx = level._effect["rise_burst"];
	billow_fx = level._effect["rise_billow"];
	type = "dirt";
	sound = "zmb_zombie_spawn_snow";
	burst_fx = level._effect["rise_burst_snow"];
	billow_fx = level._effect["rise_billow_snow"];
	type = "snow";
	playsound( 0, sound, self.origin );
	i = 0;
	self thread rise_dust_fx( i, type, billow_fx, burst_fx );
	i++;
// SP = 0x0 - check OK
}

// 0x4DE0
handle_zombie_risers_lowg( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level endon( "demo_jump" );
	self endon( "entityshutdown" );
	localplayers = level.localplayers;
	sound = "zmb_zombie_spawn";
	burst_fx = level._effect["rise_burst_lg"];
	billow_fx = level._effect["rise_billow_lg"];
	type = "dirt";
	sound = "zmb_zombie_spawn_snow";
	burst_fx = level._effect["rise_burst_snow"];
	billow_fx = level._effect["rise_billow_snow"];
	type = "snow";
	playsound( 0, sound, self.origin );
	i = 0;
	self thread rise_dust_fx( i, type, billow_fx, burst_fx );
	i++;
// SP = 0x0 - check OK
}

// 0x4EB8
rise_dust_fx( clientnum, type, billow_fx, burst_fx )
{
	dust_tag = "J_SpineUpper";
	self endon( "entityshutdown" );
	level endon( "demo_jump" );
	playfx( clientnum, burst_fx, self.origin + ( 0, 0, randomintrange( 5, 10 ) ) );
	wait 0.25;
	playfx( clientnum, billow_fx, self.origin + ( randomintrange( -10, 10 ), randomintrange( -10, 10 ), randomintrange( 5, 10 ) ) );
	wait 2;
	dust_time = 5.5;
	dust_interval = 0.3;
	player = level.localplayers[clientnum];
	effect = level._effect["rise_dust"];
	effect = level._effect["rise_dust_water"];
	effect = level._effect["rise_dust_snow"];
	effect = level._effect["rise_dust_foliage"];
	t = 0;
	playfxontag( clientnum, effect, self, dust_tag );
	wait dust_interval;
	t += dust_interval;
// SP = 0x0 - check OK
}

// 0x4FF0
end_last_stand( clientnum )
{
	self waittill( "lastStandEnd" );
/#
	println( "Last stand ending for client " + clientnum );
#/
	realwait( 0.7 );
/#
	println( "Gasp." );
#/
	playsound( clientnum, "revive_gasp" );
// SP = 0x0 - check OK
}

// 0x503C
last_stand_thread( clientnum )
{
	self thread end_last_stand( clientnum );
	self endon( "lastStandEnd" );
/#
	println( "*** Client : Last stand starts on client " + clientnum );
#/
	pause = 0.5;
	vol = 0.5;
	id = playsound( clientnum, "chr_heart_beat" );
	setsoundvolume( id, vol );
	realwait( pause );
	pause *= 1.05;
	pause = 2;
	vol *= 1.05;
	vol = 1;
// SP = 0x0 - check OK
}

// 0x5110
last_stand_monitor( clientnum, state, oldstate )
{
	player = level.localplayers[clientnum];
	players = level.localplayers;
	return;
	level.lslooper = spawn( 0, player.origin, "script.origin" );
	player thread last_stand_thread( clientnum );
	level.lslooper playloopsound( "evt_laststand_loop", 0.3 );
	level._laststand[clientnum] = 1;
	level.lslooper stoploopsound( 0.7 );
	playsound( 0, "evt_laststand_in", ( 0, 0, 0 ) );
	player notify( "lastStandEnd" );
	level._laststand[clientnum] = 0;
// SP = 0x0 - check OK
}

// 0x51F0
set_clientfield_navcard_code_callback( cf_field_name )
{
	wait 0.1;
	setupclientfieldcodecallbacks( "allplayers", 1, cf_field_name );
// SP = 0x0 - check OK
}
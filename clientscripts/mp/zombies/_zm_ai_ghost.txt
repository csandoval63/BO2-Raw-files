// clientscripts/mp/zombies/_zm_ai_ghost.csc

#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_utility;

#using_animtree ( "zm_buried_ghost" );


// 0x574
precache()
{
// SP = 0x0 - check OK
}

// 0x57C
init_animtree()
{
	scriptmodelsuseanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x594
precache_fx()
{
	level.ghost_effects = [];
	level.ghost_effects[1] = loadfx( "maps/zombie_buried/fx_buried_ghost_death" );
	level.ghost_effects[2] = loadfx( "maps/zombie_buried/fx_buried_ghost_drain" );
	level.ghost_effects[3] = loadfx( "maps/zombie_buried/fx_buried_ghost_spawn" );
	level.ghost_effects[4] = loadfx( "maps/zombie_buried/fx_buried_ghost_trail" );
	level.ghost_effects[5] = loadfx( "maps/zombie_buried/fx_buried_ghost_evaporation" );
	level.ghost_impact_effects[1] = loadfx( "maps/zombie_buried/fx_buried_ghost_impact" );
// SP = 0x0 - check OK
}

// 0x624
init()
{
	register_client_fields();
// SP = 0x0 - check OK
}

// 0x634
register_client_fields()
{
	registerclientfield( "actor", "ghost_impact_fx", 12000, 1, "int", ::play_impact_fx_clientfield_cb, 0 );
	registerclientfield( "actor", "ghost_fx", 12000, 3, "int", ::play_fx_clientfield_cb, 0 );
	registerclientfield( "actor", "sndGhostAudio", 12000, 3, "int", ::sndghostaudio, 0 );
	registerclientfield( "scriptmover", "ghost_fx", 12000, 3, "int", ::play_fx_clientfield_cb, 0 );
	registerclientfield( "scriptmover", "sndGhostAudio", 12000, 3, "int", ::sndghostaudio, 0 );
	registerclientfield( "world", "ghost_round_light_state", 12000, 1, "int", ::ghost_round_presentation_light_state_cb, 1 );
// SP = 0x0 - check OK
}

// 0x700
play_impact_fx_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self thread play_impact_fx_internal( localclientnum, newval );
// SP = 0x0 - check OK
}

// 0x734
play_impact_fx_internal( localclientnum, newval )
{
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	effect = level.ghost_impact_effects[newval];
	playfx( localclientnum, effect, self.origin + vector_scale( ( 0, 0, 1 ), 36 ) );
// SP = 0x0 - check OK
}

// 0x784
play_fx_clientfield_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self play_fx( localclientnum, newval );
	deletefx( localclientnum, self._fx_array[localclientnum], 0 );
// SP = 0x0 - check OK
}

// 0x7E4
play_fx( localclientnum, newval )
{
	self thread play_fx_internal( localclientnum, newval );
// SP = 0x0 - check OK
}

// 0x800
play_fx_internal( localclientnum, newval )
{
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	self._fx_array = [];
	linktag = "tag_origin";
	effect = level.ghost_effects[newval];
	linktag = self._fx_tag_override;
	deletefx( localclientnum, self._fx_array[localclientnum], 0 );
	self notify( "sndDeath" );
	self._fx_array[localclientnum] = playfx( localclientnum, effect, self.origin );
	self._fx_array[localclientnum] = playfxontag( localclientnum, effect, self, linktag );
// SP = 0x0 - check OK
}

// 0x8C8
ghost_round_presentation_light_state_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	level notify( "ghost_round_flicker" );
	level.ghost_round_presentation_light_flicker_on = 1;
	level notify( "ghost_round_flicker" );
	level.ghost_round_presentation_light_flicker_on = 0;
// SP = 0x0 - check OK
}

// 0x92C
sndghostaudio( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.sndent = spawn( 0, self.origin, "script_origin" );
	self.sndent linkto( self );
	self thread sndghostaudiodeleteent( self.sndent );
	self playsound( 0, "zmb_ai_ghost_apparate" );
	self.sndent playloopsound( "zmb_ai_ghost_loop", 1 );
	self playsound( 0, "zmb_ai_ghost_disapparate" );
	self.sndent playloopsound( "zmb_ai_ghost_loop", 1 );
// SP = 0x0 - check OK
}

// 0x9D0
sndghostaudiodeleteent( ent )
{
	self waittill_any( "death", "entityshutdown", "sndDeath" );
	ent delete();
// SP = 0x0 - check OK
}

// 0x9FC
sndghostattackaudio()
{
	self.sndattackent = spawn( 0, self.origin, "script_origin" );
	self.sndattackent linkto( self );
	self thread sndghostattackaudiodeleteent( self.sndattackent );
	self.sndattackent playloopsound( "zmb_ai_ghost_attack_loop", 0.1 );
// SP = 0x0 - check OK
}

// 0xA5C
sndghostattackaudiodeleteent( ent )
{
	self endon( "sndDoneAttacking" );
	self waittill_any( "death", "entityshutdown" );
	ent delete();
// SP = 0x0 - check OK
}
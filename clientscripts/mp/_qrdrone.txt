// clientscripts/mp/_qrdrone.csc

#include clientscripts\mp\_rewindobjects;
#include clientscripts\mp\_utility;
#include clientscripts\mp\_vehicle;


// 0x818
main()
{
	type = "qrdrone_mp";
	registerclientfield( "helicopter", "qrdrone_state", 1, 3, "int", ::statechange, 0 );
	level._effect["qrdrone_enemy_light"] = loadfx( "weapon/qr_drone/fx_qr_light_red_3p" );
	level._effect["qrdrone_friendly_light"] = loadfx( "weapon/qr_drone/fx_qr_light_green_3p" );
	level._effect["qrdrone_viewmodel_light"] = loadfx( "weapon/qr_drone/fx_qr_light_green_1p" );
// SP = 0x0 - check OK
}

// 0x888
spawned( localclientnum )
{
	self waittill_dobj( localclientnum );
	self thread qrdronefx( localclientnum, 0 );
	self thread collisionhandler( localclientnum );
	self thread enginestutterhandler( localclientnum );
	self thread qrdrone_watch_distance();
// SP = 0x0 - check OK
}

// 0x8D0
statechange( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self endon( "entityshutdown" );
	self qrdronefx( localclientnum, newval );
// SP = 0x0 - check OK
}

// 0x8FC
qrdronefx( localclientnum, blinkstage )
{
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	waittillsnapprocessed( localclientnum );
	fx_handle = self restartfx( localclientnum, blinkstage );
	self notify( "teamBased_fx_reinitialized" );
	level thread watchforplayerrespawnforteambasedfx( localclientnum, self, ::qrdronefx, fx_handle, blinkstage );
// SP = 0x0 - check OK
}

// 0x960
restartfx( localclientnum, blinkstage )
{
	self notify( "restart_fx" );
/#
	println( "Restart QRDrone FX: stage " + blinkstage );
#/
	fx_handle = undefined;
	switch ( blinkstage )
	{
		case 0:
			fx_handle = self spawn_solid_fx( localclientnum );
			break;
		case 1:
			self.fx_interval = 1;
			self spawn_blinking_fx( localclientnum );
			break;
		case 2:
			self.fx_interval = 0.133;
			self spawn_blinking_fx( localclientnum );
			break;
		case 3:
			self notify( "stopfx" );
			self notify( "fx_death" );
	}
	self thread watchrestartfx( localclientnum );
	return fx_handle;
// SP = 0x0 - check OK
}

// 0xA1C
watchrestartfx( localclientnum )
{
	self endon( "entityshutdown" );
	level waittill_any( "demo_jump", "player_switch", "killcam_begin", "killcam_end" );
	self qrdronefx( localclientnum, getclientfield( "qrdrone_state" ) );
// SP = 0x0 - check OK
}

// 0xA60
spawn_solid_fx( localclientnum )
{
	fx_handle = playfxontag( localclientnum, level._effect["qrdrone_viewmodel_light"], self, "tag_body" );
	fx_handle = playfxontag( localclientnum, level._effect["qrdrone_friendly_light"], self, "tag_body" );
	fx_handle = playfxontag( localclientnum, level._effect["qrdrone_enemy_light"], self, "tag_body" );
	self thread cleanupfx( localclientnum, fx_handle );
	return fx_handle;
// SP = 0x0 - check OK
}

// 0xAEC
spawn_blinking_fx( localclientnum )
{
	self thread blink_fx_and_sound( localclientnum, "wpn_crossbow_alert" );
// SP = 0x0 - check OK
}

// 0xB08
blink_fx_and_sound( localclientnum, soundalias )
{
	self endon( "entityshutdown" );
	self endon( "restart_fx" );
	self endon( "fx_death" );
	self.interval = 1;
	self playsound( localclientnum, soundalias );
	self spawn_solid_fx( localclientnum );
	serverwait( localclientnum, self.interval / 2 );
	self notify( "stopfx" );
	serverwait( localclientnum, self.interval / 2 );
	self.interval /= 1.17;
	self.interval = 0.1;
// SP = 0x0 - check OK
}

// 0xBC0
cleanupfx( localclientnum, handle )
{
	self waittill_any( "entityshutdown", "blink", "stopfx", "restart_fx" );
	stopfx( localclientnum, handle );
// SP = 0x0 - check OK
}

// 0xBF4
start_blink( localclientnum, set )
{
	return;
	self notify( "blink" );
// SP = 0x0 - check OK
}

// 0xC10
final_blink( localclientnum, set )
{
	return;
	self.interval = 0.133;
// SP = 0x0 - check OK
}

// 0xC30
loop_local_sound( localclientnum, alias, interval, fx )
{
	self endon( "entityshutdown" );
	self endon( "stopfx" );
	level endon( "demo_jump" );
	level endon( "player_switch" );
	self.interval = interval;
	self playsound( localclientnum, alias );
	self spawn_solid_fx( localclientnum );
	serverwait( localclientnum, self.interval / 2 );
	self notify( "stopfx" );
	serverwait( localclientnum, self.interval / 2 );
	self.interval /= 1.17;
	self.interval = 0.1;
// SP = 0x0 - check OK
}

// 0xCEC
check_for_player_switch_or_time_jump( localclientnum )
{
	self endon( "entityshutdown" );
	level waittill_any( "demo_jump", "player_switch", "killcam_begin" );
	self notify( "stopfx" );
	waittillframeend;
	self thread blink_light( localclientnum );
	self.interval = 1;
	self thread start_blink( localclientnum, 1 );
	self thread qrdronefx( localclientnum, 0 );
	self thread check_for_player_switch_or_time_jump( localclientnum );
// SP = 0x0 - check OK
}

// 0xD70
blink_light( localclientnum )
{
	self endon( "entityshutdown" );
	level endon( "demo_jump" );
	level endon( "player_switch" );
	level endon( "killcam_begin" );
	self waittill( "blink" );
	self.blinkstarttime = level.servertime;
	self thread loop_local_sound( localclientnum, "wpn_crossbow_alert", 1, level._effect["qrdrone_viewmodel_light"] );
	self thread loop_local_sound( localclientnum, "wpn_crossbow_alert", 1, level._effect["qrdrone_friendly_light"] );
	self thread loop_local_sound( localclientnum, "wpn_crossbow_alert", 1, level._effect["qrdrone_enemy_light"] );
// SP = 0x0 - check OK
}

// 0xE1C
collisionhandler( localclientnum )
{
	self endon( "entityshutdown" );
	self waittill( "veh_collision", hip, hitn, hit_intensity );
	driver_local_client = self getlocalclientdriver();
	player = getlocalplayer( driver_local_client );
	player playrumbleonentity( driver_local_client, "damage_heavy" );
	player playrumbleonentity( driver_local_client, "damage_light" );
// SP = 0x0 - check OK
}

// 0xEA0
enginestutterhandler( localclientnum )
{
	self endon( "entityshutdown" );
	self waittill( "veh_engine_stutter" );
	player = getlocalplayer( localclientnum );
	player playrumbleonentity( localclientnum, "rcbomb_engine_stutter" );
// SP = 0x0 - check OK
}

// 0xEF8
getminimumflyheight()
{
	level.airsupportheightscale = 1;
	airsupport_height = getstruct( "air_support_height", "targetname" );
	planeflyheight = airsupport_height.origin[2];
/#
	println( "WARNING:  Missing air_support_height entity in the map.  Using default height." );
#/
	planeflyheight = 850;
	level.airsupportheightscale = getdvarintdefault( "scr_airsupportHeightScale", level.airsupportheightscale );
	planeflyheight *= getdvarintdefault( "scr_airsupportHeightScale", level.airsupportheightscale );
	planeflyheight += level.forceairsupportmapheight;
	return planeflyheight;
// SP = 0x0 - check OK
}

// 0xF9C
qrdrone_watch_distance()
{
	self endon( "entityshutdown" );
	qrdrone_height = getstruct( "qrdrone_height", "targetname" );
	self.maxheight = qrdrone_height.origin[2];
	self.maxheight = int( getminimumflyheight() );
	self.maxdistance = 12800;
	level.mapcenter = getmapcenter();
	self.minheight = level.mapcenter[2] - 800;
	inrangepos = self.origin;
	soundent = spawn( 0, self.origin, "script_origin" );
	soundent linkto( self );
	self thread qrdrone_staticstopondeath( soundent );
	staticalpha = 0;
	dist = distance( self.origin, self.heliinproximity.origin );
	staticalpha = 1 - dist - 150 / 150;
	dist = distance( self.origin, inrangepos );
	staticalpha = min( 1, dist / 200 );
	sid = soundent playloopsound( "veh_qrdrone_static_lp", 0.2 );
	self clientscripts\mp\_vehicle::set_static_amount( staticalpha * 2 );
	wait 0.05;
	self thread qrdrone_staticfade( staticalpha, soundent, sid );
	inrangepos = self.origin;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1124
qrdrone_in_range()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1160
qrdrone_staticfade( staticalpha, sndent, sid )
{
	self endon( "entityshutdown" );
	staticalpha -= 0.05;
	sndent stoploopsound( 0.5 );
	self clientscripts\mp\_vehicle::set_static_amount( 0 );
	setsoundvolumerate( sid, 0.6 );
	setsoundvolume( sid, staticalpha );
	self clientscripts\mp\_vehicle::set_static_amount( staticalpha * 2 );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x11F0
qrdrone_staticstopondeath( sndent )
{
	self waittill( "entityshutdown" );
	sndent stoploopsound( 0.1 );
	sndent delete();
// SP = 0x0 - check OK
}
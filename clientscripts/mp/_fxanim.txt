// clientscripts/mp/_fxanim.csc

#include clientscripts\mp\_utility;

#using_animtree ( "fxanim_props" );


// 0x730
init()
{
	level.fxanim_max_anims = 128;
	level.scr_anim = [];
	level.scr_anim["fxanim_props"] = [];
// SP = 0x0 - check OK
}

// 0x750
fxanim_init( localclientnum )
{
	mapname = GetDvar( #"0xB4B895C4" );
	switch ( mapname )
	{
		case "mp_array":
		case "mp_cracked":
		case "mp_mountain":
		case "mp_nuked":
	}
	a_fxanims = getentarray( localclientnum, "fxanim", "targetname" );
/#
	assert( a_fxanims.size <= level.fxanim_max_anims );
#/
	i = 0;
	parent = getent( localclientnum, a_fxanims[i].fxanim_parent, "targetname" );
	a_fxanims[a_fxanims.size] = parent;
	a_fxanims[i] thread _fxanim_model_link( localclientnum );
	a_fxanims[i] thread fxanim_think( localclientnum );
	i++;
	level thread [[level.fx_anim_level_init]]( localclientnum );
// SP = 0x0 - check OK
}

// 0x844
fxanim_think( localclientnum, random_wait, random_speed )
{
	self waittill_dobj( localclientnum );
	self thread _fxanim_hide();
	self _fxanim_wait();
	self useanimtree( -1 );
	n_anim_count = self _fxanim_get_anim_count();
	self notify( "fxanim_start" );
	n_current_anim = 0;
	str_scene = self _fxanim_get_scene_name( n_current_anim );
	self _fxanim_animate( str_scene );
	self _fxanim_play_fx( localclientnum );
	self _fxanim_change_anim( n_current_anim );
	n_current_anim++;
// SP = 0x0 - check OK
}

// 0x8F8
_fxanim_hide()
{
	self hide();
	self waittill( "fxanim_start" );
	self show();
// SP = 0x0 - check OK
}

// 0x92C
_fxanim_modifier( str_scene )
{
	switch ( str_scene )
	{
		case "delete":
			self delete();
			break;
		case "hide":
			self hide();
			break;
		default:
			return 0;
			break;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x97C
_fxanim_wait()
{
	_fxanim_change_anim( -1 );
	wait self.fxanim_wait;
	n_wait_time = randomfloatrange( self.fxanim_wait_min, self.fxanim_wait_max );
	wait n_wait_time;
// SP = 0x0 - check OK
}

// 0x9DC
_fxanim_change_anim( n_fxanim_id )
{
	str_waittill = undefined;
	str_waittill = self.fxanim_waittill_1;
	str_waittill = self.fxanim_waittill_2;
	str_waittill = self.fxanim_waittill_3;
	self _fxanim_wait_for_anim_to_end( n_fxanim_id );
	a_changer = strtok( str_waittill, "_" );
	level waittill( str_waittill );
// SP = 0x0 - check OK
}

// 0xA6C
_fxanim_wait_for_anim_to_end( n_fxanim_id )
{
	str_scene = _fxanim_get_scene_name( n_fxanim_id );
	self waittillmatch( "looping anim" );
	return "end";
	self waittillmatch( "single anim" );
	return "end";
// SP = 0x0 - check OK
}

// 0xAB4
_fxanim_animate( str_scene )
{
/#
	println( "Error: fxanim entity at " + self.origin + " is missing animation: " + str_scene );
	println( "Error: fxanim entity at " + self.origin + " is missing animation" );
#/
	return;
	self animscripted( level.scr_anim["fxanim_props"][str_scene], 1, 0, 1 );
// SP = 0x0 - check OK
}

// 0xB34
_fxanim_play_fx( localclientnum )
{
/#
	assert( IsDefined( self.fxanim_fx_1_tag ), "KVP fxanim_fx_1_tag must be set on fxanim at " + self.origin );
#/
	playfxontag( localclientnum, getfx( self.fxanim_fx_1 ), self, self.fxanim_fx_1_tag );
/#
	assert( IsDefined( self.fxanim_fx_2_tag ), "KVP fxanim_fx_2_tag must be set on fxanim at " + self.origin );
#/
	playfxontag( localclientnum, getfx( self.fxanim_fx_2 ), self, self.fxanim_fx_2_tag );
/#
	assert( IsDefined( self.fxanim_fx_3_tag ), "KVP fxanim_fx_3_tag must be set on fxanim at " + self.origin );
#/
	playfxontag( localclientnum, getfx( self.fxanim_fx_3 ), self, self.fxanim_fx_3_tag );
/#
	assert( IsDefined( self.fxanim_fx_4_tag ), "KVP fxanim_fx_4_tag must be set on fxanim at " + self.origin );
#/
	playfxontag( localclientnum, getfx( self.fxanim_fx_4 ), self, self.fxanim_fx_4_tag );
/#
	assert( IsDefined( self.fxanim_fx_5_tag ), "KVP fxanim_fx_5_tag must be set on fxanim at " + self.origin );
#/
	playfxontag( localclientnum, getfx( self.fxanim_fx_5 ), self, self.fxanim_fx_5_tag );
// SP = 0x0 - check OK
}

// 0xC80
_fxanim_get_anim_count()
{
/#
	assert( IsDefined( self.fxanim_scene_1 ), "fxanim at position " + self.origin + " needs at least one scene defined.  Use the KVP fxanim_scene_1" );
#/
	n_fx_count = 0;
	n_fx_count = 1;
	n_fx_count = 2;
	n_fx_count = 3;
	return n_fx_count;
// SP = 0x0 - check OK
}

// 0xCD8
_fxanim_get_scene_name( n_anim_id )
{
	str_scene_name = undefined;
	switch ( n_anim_id )
	{
		case 0:
			str_scene_name = self.fxanim_scene_1;
			break;
		case 1:
			str_scene_name = self.fxanim_scene_2;
			break;
		case 2:
			str_scene_name = self.fxanim_scene_3;
			break;
	}
	return str_scene_name;
// SP = 0x0 - check OK
}

// 0xD30
_fxanim_model_link( localclientnum )
{
	self waittill_dobj( localclientnum );
/#
	assert( IsDefined( self.fxanim_tag ), "Model at origin " + self.origin + " needs an fxanim_tag defined, to show which tag the model will link to" );
#/
	m_parent = getent( localclientnum, self.fxanim_parent, "targetname" );
/#
	assert( IsDefined( m_parent ), "Model at origin " + self.origin + " does not have a proper parent.  Make sure the fxanim_parent matches the targetname of the fxanim" );
#/
	m_parent waittill_dobj( localclientnum );
	self.origin = m_parent gettagorigin( self.fxanim_tag );
	self.angles = m_parent gettagangles( self.fxanim_tag );
	self linkto( m_parent, self.fxanim_tag );
	self hide();
	m_parent waittill( "fxanim_start" );
	self show();
// SP = 0x0 - check OK
}

// 0xE00
getfx( fx )
{
/#
	assert( IsDefined( level._effect[fx] ), "Fx " + fx + " is not defined in level._effect." );
#/
	return level._effect[fx];
// SP = 0x0 - check OK
}
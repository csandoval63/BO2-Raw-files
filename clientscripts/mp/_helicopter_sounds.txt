// clientscripts/mp/_helicopter_sounds.csc

#include clientscripts\mp\_helicopter_sounds;
#include clientscripts\mp\_audio;
#include clientscripts\mp\_music;
#include clientscripts\mp\_utility;


// 0x1598
init()
{
	registerclientfield( "helicopter", "vehicle_is_firing", 1, 1, "int", ::vehicle_is_firing_function, 1 );
	level._entityshutdowncbfunc = clientscripts\mp\_helicopter_sounds::heli_linkto_sound_ents_delete;
	level.helisoundvalues = [];
	init_heli_sound_values( "cobra", "turbine", 65, 0.6, 0.8, 65, 1, 1.1 );
	init_heli_sound_values( "cobra", "top_rotor", 45, 0.7, 1, 45, 0.95, 1.1 );
	init_heli_sound_values( "cobra", "tail_rotor", 45, 0.5, 1, 45, 0.95, 1.1 );
	init_heli_sound_values( "hind", "turbine", 65, 0.6, 0.8, 65, 1, 1.1 );
	init_heli_sound_values( "hind", "top_rotor", 45, 0.7, 1, 45, 0.95, 1.1 );
	init_heli_sound_values( "hind", "tail_rotor", 45, 0.5, 1, 45, 0.95, 1.1 );
	init_heli_sound_values( "supply", "turbine", 65, 0.7, 1, 65, 1, 1.1 );
	init_heli_sound_values( "supply", "top_rotor", 35, 0.95, 1, 100, 1, 1.1 );
	init_heli_sound_values( "supply", "tail_rotor", 35, 0.95, 1, 45, 1, 1.1 );
	init_heli_sound_values( "huey", "turbine", 65, 0.7, 0.8, 65, 1, 1.1 );
	init_heli_sound_values( "huey", "top_rotor", 45, 0.8, 1, 45, 0.95, 1.1 );
	init_heli_sound_values( "huey", "tail_rotor", 45, 0.6, 1, 45, 0.95, 1 );
	init_heli_sound_values( "huey", "wind_rt", 45, 0.6, 1, 45, 0.95, 1 );
	init_heli_sound_values( "huey", "wind_lft", 45, 0.6, 1, 45, 0.95, 1 );
	init_heli_sound_values( "qrdrone", "turbine_idle", 30, 0.8, 0, 16, 0.9, 1.1 );
	init_heli_sound_values( "qrdrone", "turbine_moving", 30, 0, 0.9, 20, 0.9, 1.1 );
	init_heli_sound_values( "qrdrone", "turn", 5, 0, 1, 1, 1, 1 );
	init_heli_sound_values( "heli_guard", "turbine", 10, 0.9, 1, 30, 0.9, 1.05 );
	init_heli_sound_values( "heli_guard", "rotor", 10, 0.9, 1, 30, 0.9, 1.1 );
/#
	setdvar( "helisounds", "" );
	level thread command_parser();
#/
// SP = 0x0 - check OK
}

// 0x192C
vehicle_is_firing_function( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
/#
	println( "vehicle is firing : " + newval );
#/
	self.isfiring = 0;
	self.isfiring = 1;
// SP = 0x0 - check OK
}

// 0x1970
init_heli_sound_values( heli_type, part_type, max_speed_vol, min_vol, max_vol, max_speed_pitch, min_pitch, max_pitch )
{
	level.helisoundvalues[heli_type] = [];
	level.helisoundvalues[heli_type][part_type] = spawnstruct();
	level.helisoundvalues[heli_type][part_type].speedvolumemax = max_speed_vol;
	level.helisoundvalues[heli_type][part_type].speedpitchmax = max_speed_pitch;
	level.helisoundvalues[heli_type][part_type].volumemin = min_vol;
	level.helisoundvalues[heli_type][part_type].volumemax = max_vol;
	level.helisoundvalues[heli_type][part_type].pitchmin = min_pitch;
	level.helisoundvalues[heli_type][part_type].pitchmax = max_pitch;
/#
	println( "Init Heli Sounds heli_type: " + heli_type );
	println( "Init Heli Sounds part_type: " + part_type );
	println( "Init Heli Sounds max_speed_vol: " + max_speed_vol );
	println( "Init Heli Sounds min_vol: " + min_vol );
	println( "Init Heli Sounds max_vol: " + max_vol );
	println( "Init Heli Sounds max_speed_pitch: " + max_speed_pitch );
	println( "Init Heli Sounds min_pitch: " + min_pitch );
	println( "Init Heli Sounds max_pitch: " + max_pitch );
#/
// SP = 0x0 - check OK
}

// 0x1ABC
command_parser()
{
/#
	command = GetDvar( #"0x21D60E03" );
	success = 1;
	tokens = strtok( command, " " );
	println( "helisounds Did not recognize helicopter type:  " + tokens[0] );
	println( "helisounds Did not recognize helicopter type" );
	println( "helisounds usage: helisounds <heli name> <part name> <value name> <value>" );
	success = 0;
	println( "helisounds Did not recognize helicopter part:  " + tokens[0] + " for heli: " + tokens[1] );
	println( "helisounds Did not recognize helicopter part for heli: " + tokens[0] );
	println( "helisounds usage: helisounds <heli name> <part name> <value name> <value>" );
	success = 0;
	println( "helisounds Did not recognize helicopter value name for heli:" + tokens[0] + " part: " + tokens[1] );
	println( "helisounds usage: helisounds <heli name> <part name> <value name> <value>" );
	success = 0;
	println( "helisounds Did not recognize helicopter value for heli:" + tokens[0] + " part: " + tokens[1] );
	println( "helisounds usage: helisounds <heli name> <part name> <value name> <value>" );
	success = 0;
	heli_type = tokens[0];
	heli_part = tokens[1];
	value_name = tokens[2];
	value = float( tokens[3] );
	switch ( value_name )
	{
		case "pitchmax":
			level.helisoundvalues[heli_type][heli_part].volumemin = value;
			println( "Setting volumeMin to " + value );
			break;
		case "pitchmin":
			level.helisoundvalues[heli_type][heli_part].volumemax = value;
			println( "Setting volumeMax to " + value );
			break;
		case "speedpitchmax":
			level.helisoundvalues[heli_type][heli_part].pitchmin = value;
			println( "Setting pitchMin to " + value );
			break;
		case "speedvolumemax":
			level.helisoundvalues[heli_type][heli_part].pitchmax = value;
			println( "Setting pitchMax to " + value );
			break;
		case "volumemax":
			level.helisoundvalues[heli_type][heli_part].speedvolumemax = value;
			println( "Setting speedVolumeMax to " + value );
			break;
		case "volumemin":
			level.helisoundvalues[heli_type][heli_part].speedpitchmax = value;
			println( "Setting speedPitchMax to " + value );
			break;
		default:
			println( "no case match - helisounds usage: helisounds <heli name> <part name> <value name> <value>" );
	}
	setdvar( "helisounds", "" );
	wait 0.1;
#/
// SP = 0x0 - check OK
}

// 0x1D98
init_heli_sounds_gunner()
{
	setup_heli_sounds( "lfe", "engine", "snd_cockpit", "veh_huey_rotor_lfe" );
	setup_heli_sounds( "turbine", "engine", "snd_rotor", "veh_huey_turbine" );
	setup_heli_sounds( "top_rotor", "engine", "snd_rotor", "veh_huey_rotor" );
	setup_heli_sounds( "tail_rotor", "engine", "snd_tail_rotor", "veh_huey_tail" );
	setup_heli_sounds( "wind_rt", "engine", "snd_wind_right", "veh_huey_door_wind" );
	setup_heli_sounds( "radio", "engine", "snd_cockpit", "veh_huey_radio" );
	self.warning_tag = "snd_cockpit";
// SP = 0x0 - check OK
}

// 0x1E38
init_heli_sounds_player_controlled()
{
	setup_heli_sounds( "lfe", "engine", "snd_cockpit", "veh_cobra_rotor_lfe" );
	setup_heli_sounds( "turbine", "engine", "snd_rotor", "veh_cobra_turbine" );
	setup_heli_sounds( "top_rotor", "engine", "snd_rotor", "veh_cobra_rotor" );
	setup_heli_sounds( "tail_rotor", "engine", "snd_tail_rotor", "veh_cobra_tail" );
	self.warning_tag = "snd_cockpit";
// SP = 0x0 - check OK
}

// 0x1EA8
init_heli_sounds_supply()
{
	setup_heli_sounds( "lfe", "engine", undefined, "veh_supply_rotor_lfe" );
	setup_heli_sounds( "turbine", "engine", undefined, "veh_supply_turbine" );
	setup_heli_sounds( "top_rotor", "engine", undefined, "veh_supply_rotor" );
	self.warning_tag = undefined;
// SP = 0x0 - check OK
}

// 0x1EF0
init_heli_sounds_ai_attack()
{
	setup_heli_sounds( "lfe", "engine", undefined, "veh_hind_rotor_lfe" );
	setup_heli_sounds( "turbine", "engine", undefined, "veh_hind_turbine" );
	setup_heli_sounds( "top_rotor", "engine", undefined, "veh_hind_rotor" );
	setup_heli_sounds( "tail_rotor", "engine", undefined, "veh_hind_tail" );
	self.warning_tag = undefined;
// SP = 0x0 - check OK
}

// 0x1F4C
init_heli_sounds_player_drone()
{
	setup_heli_sounds( "turbine_idle", "engine", "tag_body", "veh_qrdrone_turbine_idle" );
	setup_heli_sounds( "turbine_moving", "engine", "tag_body", "veh_qrdrone_turbine_moving" );
	setup_heli_sounds( "turn", "engine", "tag_body", "veh_qrdrone_idle_rotate" );
	self.warning_tag = undefined;
// SP = 0x0 - check OK
}

// 0x1FA0
init_heli_sounds_heli_guard()
{
	setup_heli_sounds( "lfe", "engine", undefined, "veh_overwatch_lfe" );
	setup_heli_sounds( "turbine", "engine", undefined, "veh_overwatch_turbine" );
	setup_heli_sounds( "rotor", "engine", undefined, "veh_overwatch_rotor" );
	self.warning_tag = undefined;
// SP = 0x0 - check OK
}

// 0x1FE8
sound_linkto( parent, tag )
{
	self linkto( parent, tag );
	self linkto( parent, "tag_body" );
// SP = 0x0 - check OK
}

// 0x201C
setup_heli_sounds( bone_location, type, tag, run, dmg1, dmg2, dmg3 )
{
	self.heli[bone_location] = spawnstruct();
	self.heli[bone_location].sound_type = type;
	self.heli[bone_location].run = spawn( 0, self.origin, "script_origin" );
	self.heli[bone_location].run sound_linkto( self, tag );
	self.heli[bone_location].run.alias = run;
	self thread heli_loop_sound_delete( self.heli[bone_location].run );
	self.heli[bone_location].idle = spawn( 0, self.origin, "script_origin" );
	self.heli[bone_location].idle sound_linkto( self, tag );
	self.heli[bone_location].idle.alias = dmg1;
	self thread heli_loop_sound_delete( self.heli[bone_location].dmg1 );
	self.heli[bone_location].idle = spawn( 0, self.origin, "script_origin" );
	self.heli[bone_location].idle sound_linkto( self, tag );
	self.heli[bone_location].idle.alias = dmg2;
	self thread heli_loop_sound_delete( self.heli[bone_location].dmg2 );
	self.heli[bone_location].idle = spawn( 0, self.origin, "script_origin" );
	self.heli[bone_location].idle sound_linkto( self, tag );
	self.heli[bone_location].idle.alias = dmg3;
	self thread heli_loop_sound_delete( self.heli[bone_location].dmg3 );
// SP = 0x0 - check OK
}

// 0x21EC
init_terrain_sounds()
{
	self.surface_type = [];
	self.surface_type["default"] = "dirt";
	self.surface_type["metal"] = "dirt";
	self.surface_type["concrete"] = "dirt";
	self.surface_type["wood"] = "dirt";
	self.surface_type["dirt"] = "dirt";
	self.surface_type["gravel"] = "dirt";
	self.surface_type["grass"] = "dirt";
	self.surface_type["mud"] = "dirt";
	self.surface_type["snow"] = "dirt";
	self.surface_type["asphalt"] = "dirt";
	self.surface_type["brick"] = "dirt";
	self.surface_type["glass"] = "dirt";
	self.surface_type["plaster"] = "dirt";
	self.surface_type["sand"] = "dirt";
	self.surface_type["rock"] = "dirt";
	self.surface_type["water"] = "water";
	self.surface_type["foliage"] = "dirt";
	self setup_terrain_sounds( "dirt", "veh_chopper_prop_wash_dirt" );
	self setup_terrain_sounds( "water", "veh_chopper_prop_wash_water" );
// SP = 0x0 - check OK
}

// 0x230C
setup_terrain_sounds( surface_type, alias )
{
	self.terrain_ent_array[surface_type] = spawn( 0, self.origin, "script_origin" );
	self.terrain_ent_array[surface_type].alias = alias;
	self thread heli_loop_sound_delete( self.terrain_ent_array[surface_type] );
// SP = 0x0 - check OK
}

// 0x2354
setup_terrain_brass_sounds( surface_type, alias )
{
	self.terrain_brass_ent_array[surface_type] = spawn( 0, self.origin, "script_origin" );
	self.terrain_brass_ent_array[surface_type].alias = alias;
	self thread heli_loop_sound_delete( self.terrain_brass_ent_array[surface_type] );
// SP = 0x0 - check OK
}

// 0x239C
start_helicopter_sounds( localclientnum )
{
	self.heli = [];
	self.terrain = [];
	self.sound_ents = [];
	self.cur_speed = 0;
	self.mph_to_inches_per_sec = 17.6;
	self.speed_of_wind = 20;
	self.idle_run_trans_speed = 5;
	switch ( self.vehicletype )
	{
		case "heli_ai_mp":
		case "heli_guard_mp":
			self init_heli_sounds_ai_attack();
			self play_attack_ai_sounds();
			break;
		case "heli_gunner_mp":
			self init_heli_sounds_heli_guard();
			self play_heli_guard_sounds();
			break;
		case "heli_player_controlled_firstperson_mp":
			self init_heli_sounds_supply();
			self play_supply_sounds();
			break;
		case "heli_player_controlled_mp":
			self init_heli_sounds_gunner();
			self play_gunner_sounds();
			break;
		case "heli_player_gunner_mp":
		case "heli_supplydrop_mp":
		case "qrdrone_mp":
			self init_heli_sounds_player_controlled();
			self play_player_controlled_sounds();
			break;
		case "zombie_cobra":
			self init_heli_sounds_player_drone();
			self play_player_drone_sounds();
			break;
		default:
/#
			println( "^5helicopter type: " + self.vehicletype + " vehicletype; playing no helicopter sounds" );
#/
			break;
	}
	self init_terrain_sounds();
	self thread terrain_trace();
/#
	iprintlnbold( "helicopter type: " + self.vehicletype + " vehicletype" );
#/
/#
	println( "^6start_helicopter_sounds(): helicopter type not defined" );
#/
// SP = 0x0 - check OK
}

// 0x2544
heli_loop_sound_delete( real_ent )
{
	self waittill( "entityshutdown" );
	real_ent unlink();
	real_ent stoploopsound( 4 );
	real_ent delete();
// SP = 0x0 - check OK
}

// 0x2578
heli_linkto_sound_ents_delete( localclientnum, entity )
{
	entity notify( "entityshutdown" );
// SP = 0x0 - check OK
}

// 0x258C
heli_sound_play( heli_bone )
{
	switch ( heli_bone.sound_type )
	{
		case "engine":
			heli_bone.run playloopsound( heli_bone.run.alias, 2 );
			break;
		case "wind":
		default:
/#
			println( "^6 unknown helicopter type: " + heli_bone.type + " expecting \"wind\" or \"engine\"" );
#/
			break;
	}
// SP = 0x0 - check OK
}

// 0x2608
play_player_controlled_sounds()
{
	self heli_sound_play( self.heli["lfe"] );
	self thread heli_idle_run_transition( "cobra", "turbine" );
	self thread heli_idle_run_transition( "cobra", "top_rotor" );
	self thread heli_idle_run_transition( "cobra", "tail_rotor" );
// SP = 0x0 - check OK
}

// 0x2660
play_attack_ai_sounds()
{
	self heli_sound_play( self.heli["lfe"] );
	self thread heli_idle_run_transition( "hind", "turbine" );
	self thread heli_idle_run_transition( "hind", "top_rotor" );
	self thread heli_idle_run_transition( "hind", "tail_rotor" );
// SP = 0x0 - check OK
}

// 0x26B8
play_supply_sounds()
{
	self thread heli_idle_run_transition( "supply", "turbine" );
	self thread heli_idle_run_transition( "supply", "top_rotor" );
	self heli_sound_play( self.heli["lfe"] );
// SP = 0x0 - check OK
}

// 0x26FC
play_gunner_sounds()
{
	self heli_sound_play( self.heli["lfe"] );
	self heli_sound_play( self.heli["radio"] );
	self thread heli_idle_run_transition( "huey", "turbine" );
	self thread heli_idle_run_transition( "huey", "top_rotor" );
	self thread heli_idle_run_transition( "huey", "tail_rotor" );
	self thread heli_idle_run_transition( "huey", "wind_rt" );
// SP = 0x0 - check OK
}

// 0x277C
play_player_drone_sounds()
{
	self thread heli_idle_run_transition( "qrdrone", "turbine_idle", 0.1, 1 );
	self thread heli_idle_run_transition( "qrdrone", "turbine_moving", 0.1, 1 );
	self thread drone_up_down_transition();
	self thread drone_rotate_angle( "qrdrone", "turn" );
// SP = 0x0 - check OK
}

// 0x27DC
play_heli_guard_sounds()
{
	self heli_sound_play( self.heli["lfe"] );
	self thread heli_idle_run_transition( "heli_guard", "turbine" );
	self thread heli_idle_run_transition( "heli_guard", "rotor" );
	self thread terrain_trace_brass();
// SP = 0x0 - check OK
}

// 0x282C
heli_idle_run_transition( heli_type, heli_part, wait_time, updown )
{
	self endon( "entityshutdown" );
	heli_bone = self.heli[heli_part];
	run_id = heli_bone.run playloopsound( heli_bone.run.alias, 0.5 );
	wait_time = 0.5;
/#
	println( "^5a speed vol/pitch parameter was not defined." );
#/
	return;
	max_speed_vol = level.helisoundvalues[heli_type][heli_part].speedvolumemax;
	min_vol = level.helisoundvalues[heli_type][heli_part].volumemin;
	max_vol = level.helisoundvalues[heli_type][heli_part].volumemax;
	max_speed_pitch = level.helisoundvalues[heli_type][heli_part].speedpitchmax;
	min_pitch = level.helisoundvalues[heli_type][heli_part].pitchmin;
	max_pitch = level.helisoundvalues[heli_type][heli_part].pitchmax;
	plr_vel = self getvelocity();
	self.cur_speed = abs( sqrt( vectordot( plr_vel, plr_vel ) ) ) / self.mph_to_inches_per_sec;
	run_volume = scale_speed( self.idle_run_trans_speed, max_speed_vol, min_vol, max_vol, self.cur_speed );
	run_pitch = scale_speed( self.idle_run_trans_speed, max_speed_pitch, min_pitch, max_pitch, self.cur_speed );
	self.qrdrone_z_difference = 0;
	run_volume_vertical = scale_speed( 5, 50, 0, 1, abs( self.qrdrone_z_difference ) );
	run_volume -= run_volume_vertical;
	heli_bone.run setloopstate( heli_bone.run.alias, run_volume, run_pitch, 1, 0.15 );
/#
	println( "^5a self.cur_speed = " + self.cur_speed );
	println( "^5a run_pitch . " + run_pitch );
	println( "^5a self.cur_speed = " + self.cur_speed );
	println( "^5a run_volume. " + run_volume );
#/
	wait wait_time;
// SP = 0x0 - check OK
}

// 0x2A5C
terrain_trace_brass()
{
	self endon( "entityshutdown" );
	self setup_terrain_brass_sounds( "dirt", "prj_brass_loop_dirt" );
	self setup_terrain_brass_sounds( "water", "prj_brass_loop_water" );
	self.isfiring = 0;
	trace = undefined;
	trace_ent = self;
	pre_terrain = undefined;
	next_terrain = undefined;
	pre_trace_real_ent = undefined;
	trace_real_ent = undefined;
	pre_origin = vector_scale( ( 1, 1, 1 ), 100000 );
	wait 1 + randomfloatrange( 0, 0.2 );
	pre_origin = trace_ent.origin;
	trace = tracepoint( trace_ent.origin, trace_ent.origin - vector_scale( ( 0, 0, 1 ), 100000 ) );
	trace_surface_type = trace["surfacetype"];
	pre_terrain = next_terrain;
	next_terrain = trace_surface_type;
/#
#/
	surf_type = self.surface_type[next_terrain];
	trace_real_ent = self.terrain_brass_ent_array[surf_type];
	pre_surf_type = self.surface_type[pre_terrain];
	pre_trace_real_ent = self.terrain_brass_ent_array[pre_surf_type];
	pre_trace_real_ent stoploopsound( 0.5 );
	pre_trace_real_ent stoploopsound( 0.5 );
	trace_real_ent.origin = trace["position"];
	pre_trace_real_ent.origin = trace["position"];
	pre_trace_real_ent stoploopsound( 0.5 );
	trace_real_ent playloopsound( trace_real_ent.alias, 0.75 );
// SP = 0x0 - check OK
}

// 0x2C5C
terrain_trace()
{
	self endon( "entityshutdown" );
	trace = undefined;
	trace_ent = self;
	pre_terrain = undefined;
	next_terrain = undefined;
	pre_trace_real_ent = undefined;
	trace_real_ent = undefined;
	pre_origin = vector_scale( ( 1, 1, 1 ), 100000 );
	wait 1 + randomfloatrange( 0, 0.2 );
	pre_origin = trace_ent.origin;
	trace = tracepoint( trace_ent.origin, trace_ent.origin - vector_scale( ( 0, 0, 1 ), 100000 ) );
	trace_surface_type = trace["surfacetype"];
	pre_terrain = next_terrain;
	next_terrain = trace_surface_type;
/#
#/
	surf_type = self.surface_type[next_terrain];
	trace_real_ent = self.terrain_ent_array[surf_type];
	pre_surf_type = self.surface_type[pre_terrain];
	pre_trace_real_ent = self.terrain_ent_array[pre_surf_type];
	pre_trace_real_ent stoploopsound( 0.5 );
	trace_real_ent.origin = trace["position"];
	pre_trace_real_ent.origin = trace["position"];
	pre_trace_real_ent stoploopsound( 0.5 );
	trace_real_ent playloopsound( trace_real_ent.alias, 0.5 );
// SP = 0x0 - check OK
}

// 0x2E14
aircraft_dustkick( localclientnum )
{
/#
	println( "^stated aircraft_dustkick" );
#/
	self endon( "entityshutdown" );
	maxheight = 1200;
	minheight = 350;
	maxheight = 120;
	minheight = 1;
	slowestrepeatwait = 0.15;
	fastestrepeatwait = 0.05;
	numframespertrace = 3;
	dotracethisframe = numframespertrace;
	defaultrepeatrate = 1;
	repeatrate = defaultrepeatrate;
	trace = undefined;
	d = undefined;
	trace_ent = self;
	repeatrate = defaultrepeatrate;
	return;
	dotracethisframe--;
	dotracethisframe = numframespertrace;
	trace = bullettrace( trace_ent.origin, trace_ent.origin - vector_scale( ( 0, 0, 1 ), 100000 ), 0, trace_ent );
	d = distance( trace_ent.origin, trace["position"] );
	repeatrate = ( d - minheight ) / ( maxheight - minheight ) * ( slowestrepeatwait - fastestrepeatwait ) + fastestrepeatwait;
/#
	assert( IsDefined( d ) );
#/
	repeatrate = defaultrepeatrate;
	repeatrate = defaultrepeatrate;
	repeatrate = defaultrepeatrate;
	trace["surfacetype"] = "dirt";
/#
	println( "SCRIPT PRINT: Unknown surface type " + trace["surfacetype"] + " for vehicle type " + self.vehicletype );
	println( "SCRIPT PRINT: Unknown surface type " + trace["surfacetype"] + " for vehicle of undefined vehicletype" );
#/
	return;
	playfx( localclientnum, self.treadfx[trace["surfacetype"]], trace["position"] );
// SP = 0x0 - check OK
}

// 0x3030
play_targeting_sound( play, sound, handle )
{
	sound_ent = get_lock_sound_ent();
	return sound_ent playloopsound( sound );
	sound_ent stoploopsound( 0.1 );
	return undefined;
// SP = 0x0 - check OK
}

// 0x3078
play_targeted_sound( play )
{
	self.lockingsound = play_targeting_sound( play, "veh_hind_alarm_missile_locking_mp", self.lockingsound );
// SP = 0x0 - check OK
}

// 0x309C
play_locked_sound( play )
{
	self.lockedsound = play_targeting_sound( play, "veh_hind_alarm_missile_locked_mp", self.lockedsound );
// SP = 0x0 - check OK
}

// 0x30C0
play_fired_sound( play )
{
	self.firedsound = play_targeting_sound( play, "veh_hind_alarm_missile_fired", self.firedsound );
// SP = 0x0 - check OK
}

// 0x30E4
play_leaving_battlefield_alarm( play )
{
	sound_ent = get_leaving_sound_ent();
	self.leavingbattlefieldsound = sound_ent playloopsound( "veh_helicopter_alarm" );
	sound_ent stoploopsound( 0.1 );
// SP = 0x0 - check OK
}

// 0x3138
get_heli_sound_ent( sound_ent )
{
	tag = "tag_origin";
	tag = self.warning_tag;
	sound_ent = spawn( 0, self gettagorigin( tag ), "script_origin" );
	sound_ent linkto( self, tag );
	self thread heli_sound_ent_delete( sound_ent );
	return sound_ent;
// SP = 0x0 - check OK
}

// 0x3198
get_lock_sound_ent()
{
	self.lock_sound_ent = get_heli_sound_ent( self.lock_sound_ent );
	return self.lock_sound_ent;
// SP = 0x0 - check OK
}

// 0x31B4
get_leaving_sound_ent()
{
	self.leaving_sound_ent = get_heli_sound_ent( self.leaving_sound_ent );
	return self.leaving_sound_ent;
// SP = 0x0 - check OK
}

// 0x31D0
heli_sound_ent_delete( real_ent )
{
	self waittill( "entityshutdown" );
	real_ent stoploopsound( 0.1 );
	real_ent delete();
// SP = 0x0 - check OK
}

// 0x3200
drone_up_down_transition()
{
	self endon( "entityshutdown" );
	volumerate = 1;
	qr_ent_up = spawn( 0, self.origin, "script_origin" );
	qr_ent_down = spawn( 0, self.origin, "script_origin" );
	qr_ent_either = spawn( 0, self.origin, "script_origin" );
	qr_ent_up thread qr_ent_cleanup( self );
	qr_ent_down thread qr_ent_cleanup( self );
	qr_ent_either thread qr_ent_cleanup( self );
	self.qrdrone_z_difference = 0;
	down = qr_ent_down playloopsound( "veh_qrdrone_move_down" );
	qr_ent_down setloopstate( "veh_qrdrone_move_down", 0, 0 );
	up = qr_ent_up playloopsound( "veh_qrdrone_move_up" );
	qr_ent_up setloopstate( "veh_qrdrone_move_up", 0, 0 );
	either = qr_ent_either playloopsound( "veh_qrdrone_vertical" );
	qr_ent_either setloopstate( "veh_qrdrone_vertical", 0, 0 );
	tag = "tag_body";
	qr_ent_up linkto( self, tag );
	qr_ent_down linkto( self, tag );
	qr_ent_either linkto( self, tag );
	self thread drone_button_watch();
	last_pos = self.origin[2];
	wait 0.1;
	self.qrdrone_z_difference = last_pos - self.origin[2];
	up_difference = self.qrdrone_z_difference * -1;
	run_volume_up = scale_speed( 5, 40, 0, 1, up_difference );
	run_pitch_up = scale_speed( 5, 40, 0.9, 1.1, up_difference );
	run_volume_either = scale_speed( 5, 50, 0, 1, up_difference );
	run_pitch_either = scale_speed( 5, 50, 0.9, 1.1, up_difference );
	run_volume_up = 0;
	run_pitch_up = 1;
	run_volume_either = scale_speed( 5, 50, 0, 1, self.qrdrone_z_difference );
	run_pitch_either = scale_speed( 5, 50, 0.95, 0.8, self.qrdrone_z_difference );
	run_volume_down = scale_speed( 5, 50, 0, 1, self.qrdrone_z_difference );
	run_pitch_down = scale_speed( 5, 50, 1, 0.8, self.qrdrone_z_difference );
	qr_ent_down setloopstate( "veh_qrdrone_move_down", run_volume_down, run_pitch_down, volumerate );
	qr_ent_up setloopstate( "veh_qrdrone_move_up", run_volume_up, run_pitch_up, volumerate );
	qr_ent_either setloopstate( "veh_qrdrone_vertical", run_volume_either, run_pitch_either, volumerate );
// SP = 0x0 - check OK
}

// 0x34AC
qr_ent_cleanup( veh_ent )
{
	veh_ent waittill( "entityshutdown" );
	self delete();
// SP = 0x0 - check OK
}

// 0x34C8
drone_rotate_angle( heli_type, heli_part )
{
	self endon( "entityshutdown" );
	level endon( "save_restore" );
	volumerate = 2.5;
	qr_ent_angle = spawn( 0, self.origin, "script_origin" );
	qr_ent_angle thread qr_ent_cleanup( self );
	angle = qr_ent_angle playloopsound( "veh_qrdrone_idle_rotate" );
	setsoundvolume( angle, 0 );
	tag = "tag_body";
	qr_ent_angle linkto( self, tag );
	last_angle = abs( self.angles[1] );
	wait 0.1;
	turning_speed = last_angle - abs( self.angles[1] );
	abs_turning_speed = abs( turning_speed );
	jet_stick_vol = scale_speed( 0, 5, 0, 0.4, abs_turning_speed );
	jet_stick_pitch = scale_speed( 0, 4, 0.9, 1.05, abs_turning_speed );
	qr_ent_angle setloopstate( "veh_qrdrone_idle_rotate", jet_stick_vol, jet_stick_pitch, volumerate );
// SP = 0x0 - check OK
}

// 0x35D4
drone_button_watch()
{
	self endon( "entityshutdown" );
	player = getlocalplayers()[0];
	return_to_zero = 1;
	self playsound( 0, "veh_qrdrone_move_start" );
	return_to_zero = 0;
	return_to_zero = 1;
	wait 0.05;
// SP = 0x0 - check OK
}
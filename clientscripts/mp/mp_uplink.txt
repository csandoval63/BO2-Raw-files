// clientscripts/mp/mp_uplink.csc

#include clientscripts\mp\_fx;
#include clientscripts\mp\mp_uplink_amb;
#include clientscripts\mp\_audio;
#include clientscripts\mp\mp_uplink_fx;
#include clientscripts\mp\_load;
#include clientscripts\mp\_utility;


// 0x818
main()
{
	level.worldmapx = 0;
	level.worldmapy = 0;
	level.worldlat = 19.2278;
	level.worldlong = 94.4495;
	clientscripts\mp\_load::main();
	clientscripts\mp\mp_uplink_fx::main();
	thread clientscripts\mp\_audio::audio_init( 0 );
	thread clientscripts\mp\mp_uplink_amb::main();
	registerclientfield( "world", "trigger_lightning", 1, 1, "int", ::emptyfunction, 0 );
	level.onplayerconnect = ::uplinkonplayerconnect;
	level._glasssmashcbfunc = ::_glasssmashcbfunc;
	setsaveddvar( "sm_sunshadowsmall", 1 );
	waitforclient( 0 );
/#
	println( "*** Client : mp_uplink running..." );
#/
	level notify( "uplink_client_connected" );
	initrainfx( 0 );
	level thread initlightningloop( 0 );
// SP = 0x0 - check OK
}

// 0x8E8
_glasssmashcbfunc( org, dir )
{
	level notify( "_glassSmashCBFunc" );
	level endon( "_glassSmashCBFunc" );
	level._uplinkglasssmashed = [];
	level._uplinkglasssmashed[level._uplinkglasssmashed.size] = org;
	last = level._uplinkglasssmashed.size - 1;
	wait 0.05;
	level notify( "uplink_glass_smash", level._uplinkglasssmashed[last] );
	level._uplinkglasssmashed[last] = undefined;
	last--;
// SP = 0x0 - check OK
}

// 0x958
joininprogressglasssmash()
{
	level endon( "uplink_client_connected" );
	level waittill( "uplink_glass_smash", origin );
	level.glasssmashjoininprogress[level.glasssmashjoininprogress.size] = origin;
// SP = 0x0 - check OK
}

// 0x980
uplinkonplayerconnect( localclientnum )
{
	level waittill( "snap_processed", snapshotlocalclientnum );
	windvanearray = getentarray( localclientnum, "wind_direction", "targetname" );
	foreach ( windvane in windvanearray )
	{
		windvane thread windvanedirection( localclientnum );
	}
	lightpost = getent( localclientnum, "sway_lightpost", "targetname" );
	lightpost thread lightpostsway();
// SP = 0x0 - check OK
}

// 0xA3C
initlightningloop( localclientnum )
{
	serverwait( localclientnum, randomfloatrange( 10, 15 ) );
	playlightning( localclientnum );
// SP = 0x0 - check OK
}

// 0xA78
playlightning( localclientnum )
{
	lightning_id = randomintrange( 7001, 7005 );
/#
/#
	assert( IsDefined( level.createfxexploders[lightning_id] ) );
#/
/#
	assert( IsDefined( level.createfxexploders[lightning_id][0].v["origin"] ) );
#/
#/
	clientscripts\mp\_fx::activate_exploder( lightning_id );
	lightning_origin = level.createfxexploders[lightning_id][0].v["origin"];
	serverwait( localclientnum, randomfloatrange( 0.05, 0.15 ) );
	n_level_sunlight = GetDvarFloat( #"0xDAAF16D8" );
	n_level_exposure = GetDvarFloat( #"0x3113AF0E" );
	n_strikes = randomintrange( 2, 4 );
	i = 0;
	n_blend_time = randomfloatrange( 0, 0.25 );
	setdvar( "r_exposureTweak", 1 );
	playsound( localclientnum, "amb_thunder_flash", lightning_origin );
	setdvar( "r_exposureValue", randomfloatrange( 1.8, 2.3 ) );
	level thread serverlerpdvar( localclientnum, "r_exposureValue", n_level_exposure, n_blend_time );
	setsaveddvar( "r_lightTweakSunLight", randomfloatrange( 25, 32 ) );
	level thread serverlerpdvar( localclientnum, "r_lightTweakSunLight", n_level_sunlight, n_blend_time, 1 );
	serverwait( localclientnum, n_blend_time );
	setdvar( "r_exposureTweak", 0 );
	i++;
// SP = 0x0 - check OK
}

// 0xC24
lightpostsway()
{
	randomswingangle = randomfloatrange( 0.25, 0.5 );
	randomswingtime = randomfloatrange( 2, 4 );
	self rotateto( ( randomswingangle * 0.5, randomswingangle * 0.6, randomswingangle * 0.8 ), randomswingtime, randomswingtime * 0.3, randomswingtime * 0.3 );
	self waittill( "rotatedone" );
	self rotateto( ( randomswingangle * 0.5 * -1, randomswingangle * -1 * 0.6, randomswingangle * 0.8 * -1 ), randomswingtime, randomswingtime * 0.3, randomswingtime * 0.3 );
	self waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0xCF8
initrainfx( localclientnum )
{
	intact_window_exploders = [];
	shattered_window_exploders = [];
	directional_exploders = [];
	i = 0;
	ent = level.createfxent[i];
	intact_window_exploders[intact_window_exploders.size] = ent;
	shattered_window_exploders[shattered_window_exploders.size] = ent;
	directional_exploders[directional_exploders.size] = ent;
	i++;
	level thread activaterainfxonconnect( localclientnum, intact_window_exploders, shattered_window_exploders, directional_exploders );
// SP = 0x0 - check OK
}

// 0xDF4
activaterainfxonconnect( localclientnum, intact_window_exploders, shattered_window_exploders, directional_exploders )
{
	level thread playerjoininprogressglassshatter( localclientnum, intact_window_exploders, shattered_window_exploders );
	level thread triggerexplodersonglassshatter( localclientnum, intact_window_exploders, shattered_window_exploders );
	player = getlocalplayer( localclientnum );
	player thread rainexploderswitch( localclientnum, directional_exploders );
	player thread activateintactwindowexploders( intact_window_exploders );
// SP = 0x0 - check OK
}

// 0xE50
rainexploderswitch( localclientnum, directional_exploders )
{
	level.current_rain_exploder = undefined;
	waittillframeend;
	return;
	i = 0;
	clientscripts\mp\_fx::deactivate_exploder( directional_exploders[i].v["exploder"] );
	i++;
	level.current_rain_exploder = 1002;
	level notify( "wind_changed", 270 );
	level.current_rain_exploder = 1001;
	level notify( "wind_changed", 90 );
	i = 0;
	clientscripts\mp\_fx::activate_exploder( directional_exploders[i].v["exploder"] );
	i++;
	clientscripts\mp\_fx::activate_exploder( level.current_rain_exploder );
	serverwait( localclientnum, 8 );
// SP = 0x0 - check OK
}

// 0xF40
windvanedirection( localclientnum )
{
	originalangles = self.angles;
	level waittill( "wind_changed", yaw );
	self thread windvanejitter( originalangles, yaw );
// SP = 0x0 - check OK
}

// 0xF70
windvanejitter( originalangles, yaw )
{
	self notify( "windVaneJitter_singleton" );
	self endon( "windVaneJitter_singleton" );
	wait 0.5;
	self rotateto( ( originalangles[0], yaw, originalangles[2] ), 1 );
	self waittill( "rotatedone" );
	time = randomfloatrange( 0.1, 0.5 );
	currentyaw = randomfloatrange( yaw - 30, yaw + 30 );
	self rotateto( ( originalangles[0], currentyaw, originalangles[2] ), time );
	self waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0x1008
activateintactwindowexploders( intact_window_exploders )
{
	i = 0;
	clientscripts\mp\_fx::activate_exploder( intact_window_exploders[i].v["exploder"] );
	i++;
// SP = 0x0 - check OK
}

// 0x104C
playerjoininprogressglassshatter( localclientnum, intact_window_exploders, shattered_window_exploders )
{
	foreach ( origin in level.glasssmashjoininprogress )
	{
		glasssmashdetected( localclientnum, origin, intact_window_exploders, shattered_window_exploders );
		wait 0.05;
	}
// SP = 0x0 - check OK
}

// 0x10AC
triggerexplodersonglassshatter( localclientnum, intact_window_exploders, shattered_window_exploders )
{
	level waittill( "uplink_glass_smash", origin );
	glasssmashdetected( localclientnum, origin, intact_window_exploders, shattered_window_exploders );
// SP = 0x0 - check OK
}

// 0x10DC
glasssmashdetected( localclientnum, origin, intact_window_exploders, shattered_window_exploders )
{
	closest = 998001;
	closest_intact_exploder = undefined;
	closest_shattered_exploder = undefined;
	foreach ( intact_window_exploder in intact_window_exploders )
	{
		distsq = distancesquared( intact_window_exploder.v["origin"], origin );
		closest_intact_exploder = intact_window_exploder;
		closest = distsq;
	}
	closest_intact_exploder.glass_broken = 1;
	clientscripts\mp\_fx::deactivate_exploder( closest_intact_exploder.v["exploder"] );
	closest = 998001;
	foreach ( shattered_window_exploder in shattered_window_exploders )
	{
		distsq = distancesquared( shattered_window_exploder.v["origin"], origin );
		currentthreshold = 7225;
		currentthreshold = 2500;
		closest_shattered_exploder = shattered_window_exploder;
		closest = distsq;
	}
	closest_shattered_exploder.glass_broken = 1;
	clientscripts\mp\_fx::activate_exploder( closest_shattered_exploder.v["exploder"] );
	origin = closest_shattered_exploder.v["origin"];
	rainsnd = spawn( localclientnum, origin, "script_origin" );
	rainsnd playloopsound( "amb_rain_thru_window", 0.5 );
// SP = 0x0 - check OK
}

// 0x12B8
issouthernexploder( exploder )
{
	return exploder.v["exploder"] <= 6006;
// SP = 0x0 - check OK
}

// 0x12E4
emptyfunction( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
// SP = 0x0 - check OK
}
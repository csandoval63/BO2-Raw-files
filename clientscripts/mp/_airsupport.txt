// clientscripts/mp/_airsupport.csc

#include clientscripts\mp\_rewindobjects;
#include clientscripts\mp\_vehicle;
#include clientscripts\mp\_utility_code;
#include clientscripts\mp\_utility;


// 0x6A8
planesounds( localclientnum, spawnsound, flybysound, flybysoundloop )
{
	self endon( "delete" );
	fake_ent_plane = spawnfakeent( 0 );
	return;
	playsound( 0, spawnsound, ( 0, 0, 0 ) );
	thread plane_position_updater( localclientnum, fake_ent_plane, self, flybysound, flybysoundloop );
// SP = 0x0 - check OK
}

// 0x6F8
plane_position_updater( localclientnum, fake_ent, plane, flybysound, flybysoundloop )
{
	soundid = -1;
	dx = undefined;
	lasttime = undefined;
	lastpos = undefined;
	starttime = 0;
	setfakeentorg( 0, fake_ent, plane.origin );
	dx = plane.origin - lastpos;
	velocity = dx / ( getrealtime() - lasttime );
/#
	assert( IsDefined( velocity ) );
#/
	players = level.localplayers;
/#
	assert( IsDefined( players ) );
#/
	other_point = plane.origin + velocity * 100000;
	point = closest_point_on_line_to_point( players[0].origin, plane.origin, other_point );
/#
	assert( IsDefined( point ) );
#/
	dist = distance( point, plane.origin );
/#
	assert( IsDefined( dist ) );
#/
	time = dist / length( velocity );
/#
	assert( IsDefined( time ) );
#/
	soundid = playloopsound( 0, fake_ent, flybysoundloop, 0 );
	plane playsound( 0, flybysound );
	starttime = getrealtime();
	lastpos = plane.origin;
	lasttime = getrealtime();
	wait 0.1;
	serverwait( localclientnum, 5 );
	deletefakeent( 0, fake_ent );
// SP = 0x0 - check OK
}

// 0x8A8
closest_point_on_line_to_point( point, linestart, lineend )
{
	linemagsqrd = lengthsquared( lineend - linestart );
	t = ( ( ( ( ( point[0] - linestart[0] ) * ( lineend[0] - linestart[0] ) + point[1] ) - linestart[1] * ( lineend[1] - linestart[1] ) ) + point[2] ) - linestart[2] * ( lineend[2] - linestart[2] ) ) / linemagsqrd;
	return linestart;
	return lineend;
	start_x = linestart[0] + t * ( lineend[0] - linestart[0] );
	start_y = linestart[1] + t * ( lineend[1] - linestart[1] );
	start_z = linestart[2] + t * ( lineend[2] - linestart[2] );
	return ( start_x, start_y, start_z );
// SP = 0x0 - check OK
}

// 0x98C
getplanemodel( teamfaction )
{
	planemodel = "t5_veh_jet_f4_gearup";
	return planemodel;
// SP = 0x0 - check OK
}

// 0x9A0
planeturnright( localclientnum, plane, yaw, halflife, starttime )
{
	planeturn( localclientnum, plane, yaw, halflife, starttime, 1 );
// SP = 0x0 - check OK
}

// 0x9C8
planeturnleft( localclientnum, plane, yaw, halflife, starttime )
{
	planeturn( localclientnum, plane, yaw, halflife, starttime, 0 );
// SP = 0x0 - check OK
}

// 0x9F0
planeturn( localclientnum, plane, yaw, halflife, starttime, isturningright )
{
	plane endon( "delete" );
	plane endon( "entityshutdown" );
	level endon( "demo_jump" + localclientnum );
	leftturn = -1;
	rightturn = 1;
	turndirection = rightturn;
	turndirection = leftturn;
	yawy = getdvarfloatdefault( "scr_planeyaw", -1.5 * turndirection );
	rollz = getdvarfloatdefault( "scr_planeroll", 1.5 * turndirection );
	maxyaw = getdvarfloatdefault( "scr_max_planeyaw", -45 * turndirection );
	minroll = getdvarfloatdefault( "scr_min_planeroll", 60 * turndirection );
	ox = getdvarfloatdefault( "scr_planeox", 30000 );
	oy = getdvarfloatdefault( "scr_planeoy", -30000 * turndirection );
	maxox = getdvarfloatdefault( "scr_maxo_planex", -1 );
	maxoy = getdvarfloatdefault( "scr_maxo_planey", -1 );
	plane.angles = ( plane.angles[0], 0, plane.angles[2] );
	origx = plane.origin[0];
	origy = plane.origin[1];
	accumturn = 0;
	looptime = 0.1;
	waitamount = 0.1;
	waitformovedone = 0;
	plane.angles = ( plane.angles[0], 0, plane.angles[2] );
	rollz = 0;
	accumturn += yawy;
	yawy = 0;
	angles = ( plane.angles[0], plane.angles[1] + yawy, plane.angles[2] + rollz );
	mathx = sin( 45 * looptime / halflife ) * ox;
	mathy = cos( 45 * looptime / halflife ) * oy;
	oldx = mathx;
	oldy = oy - mathy;
	rotatedx = cos( yaw ) * oldx - sin( yaw ) * oldy;
	rotatedy = sin( yaw ) * oldx + cos( yaw ) * oldy;
	endpoint = ( origx + rotatedx, origy + rotatedy, plane.origin[2] );
	plane waittill( "movedone" );
	waitformovedone = plane servertimedmoveto( localclientnum, plane.origin, endpoint, starttime, waitamount );
	plane servertimedrotateto( localclientnum, angles, starttime, waitamount );
	looptime += waitamount;
	starttime += waitamount * 1000;
	yawy = getdvarfloatdefault( "scr_planeyaw2", 1.5 );
	rollz = getdvarfloatdefault( "scr_planeroll2", -0.9 );
	ox = getdvarfloatdefault( "scr_planeox", 30000 );
	oy = getdvarfloatdefault( "scr_planeoy", -30000 * turndirection );
	maxox = getdvarfloatdefault( "scr_maxo_planex", -1 );
	maxoy = getdvarfloatdefault( "scr_maxo_planey", -1 );
	y = getdvarfloatdefault( "scr_planey2", 0.6 );
	z = getdvarfloatdefault( "scr_planez2", -1.5 );
	maxy = getdvarfloatdefault( "scr_max_planey2", 90 );
	accumturn = 0;
	plane.angles = ( plane.angles[0], 0, plane.angles[2] );
	rollz = 0;
	accumturn += yawy;
	yawy = 0;
	angles = ( plane.angles[0], plane.angles[1] + yawy, plane.angles[2] - rollz );
	mathx = sin( 45 * looptime / halflife ) * ox;
	mathy = cos( 45 * looptime / halflife ) * oy;
	oldx = mathx;
	oldy = oy - mathy;
	rotatedx = cos( yaw ) * oldx - sin( yaw ) * oldy;
	rotatedy = sin( yaw ) * oldx + cos( yaw ) * oldy;
	endpoint = ( origx + rotatedx, origy + rotatedy, plane.origin[2] );
	plane waittill( "movedone" );
	waitformovedone = plane servertimedmoveto( localclientnum, plane.origin, endpoint, starttime, waitamount );
	plane servertimedrotateto( localclientnum, angles, starttime, waitamount );
	looptime += waitamount;
	starttime += waitamount * 1000;
// SP = 0x0 - check OK
}

// 0xF48
doabarrelroll( localclientnum, plane, endpoint, flytime, starttime )
{
	plane endon( "entityshutdown" );
	plane endon( "delete" );
	level endon( "demo_jump" );
	origin = plane.origin;
	originalheight = origin[2];
	loopwaittime = getdvarfloatdefault( "scr_loopwaittime", 0.5 );
	loopheightrand = getdvarfloatdefault( "scr_loopheightrand", 500 );
	loopheight = getdvarfloatdefault( "scr_loopheight", 1200 );
	rollz = getdvarfloatdefault( "scr_barrelroll", 10 );
	degreestoroll = getdvarfloatdefault( "scr_degreesToRoll", 360 );
	unitsfromcentrepoint = 100;
	timeelapsed = 0;
	degreesrolled = 0;
	waitamount = 0.1;
	loopheight += randomfloatrange( 0 - loopheightrand, loopheightrand );
	waitformovedone = 0;
	angles = plane.angles;
	originalroll = plane.angles[2];
	timeelapsed += waitamount;
	pitch = degreesrolled / 8;
	pitch = 45 - pitch;
	originalangle = plane.angles[2];
	scr_degreestoroll = getdvarintdefault( "scr_degreesToRoll", 0 );
	plane.angles[1] = 0;
	angles = ( 0 - pitch, plane.angles[1], originalroll + degreesrolled );
	degreesrolled += rollz;
	ratio = timeelapsed / ( flytime / 2 );
	nextpoint = getpointonline( origin, endpoint, ratio );
	nextheight = originalheight + ( loopheight - cos( degreesrolled / 2 ) * loopheight );
	nextpoint = ( nextpoint[0], nextpoint[1], nextheight );
	plane waittill( "movedone" );
	waitformovedone = plane servertimedmoveto( localclientnum, plane.origin, nextpoint, starttime, waitamount );
	plane servertimedrotateto( localclientnum, angles, starttime, waitamount );
	starttime += waitamount * 1000;
// SP = 0x0 - check OK
}

// 0x1168
planegostraight( localclientnum, plane, startpoint, endpoint, movetime, starttime )
{
	plane endon( "delete" );
	level endon( "demo_jump" );
	distanceincreaseratio = 2;
	destpoint = getpointonline( startpoint, endpoint, distanceincreaseratio );
	plane waittill( "movedone" );
// SP = 0x0 - check OK
}
// clientscripts/mp/_riotshield.csc

#include clientscripts\mp\_rewindobjects;
#include clientscripts\mp\_utility;

#using_animtree ( "mp_riotshield" );


// 0x344
init()
{
	registerclientfield( "scriptmover", "riotshield_state", 1, 2, "int", ::shield_state_change, 0 );
	level._effect["riotshield_light"] = loadfx( "weapon/riotshield/fx_riotshield_depoly_lights" );
	level._effect["riotshield_dust"] = loadfx( "weapon/riotshield/fx_riotshield_depoly_dust" );
// SP = 0x0 - check OK
}

// 0x394
shield_state_change( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self endon( "entityshutdown" );
	switch ( newval )
	{
		case 1:
			instant = oldval == 2;
			self thread riotshield_deploy_anim( localclientnum, instant );
			break;
		case 2:
			self thread riotshield_destroy_anim( localclientnum );
			break;
	}
// SP = 0x0 - check OK
}

// 0x3FC
riotshield_deploy_anim( localclientnum, instant )
{
	self endon( "entityshutdown" );
	self thread watch_riotshield_damage();
	self waittill_dobj( localclientnum );
	self useanimtree( -1 );
	self setanim( %o_riot_stand_deploy, 1, 0, 1 );
	self setanimtime( %o_riot_stand_deploy, 1 );
	self setanim( %o_riot_stand_deploy, 1, 0, 1 );
	playfxontag( localclientnum, level._effect["riotshield_dust"], self, "tag_origin" );
	wait 0.8;
	self.shieldlightfx = playfxontag( localclientnum, level._effect["riotshield_light"], self, "tag_fx" );
// SP = 0x0 - check OK
}

// 0x4E4
watch_riotshield_damage()
{
	self endon( "entityshutdown" );
	self waittill( "damage", damage_loc, damage_type );
	self useanimtree( -1 );
	self setanim( %o_riot_stand_melee_front, 1, 0, 1 );
	self setanim( %o_riot_stand_shot, 1, 0, 1 );
// SP = 0x0 - check OK
}

// 0x578
riotshield_destroy_anim( localclientnum )
{
	self endon( "entityshutdown" );
	stopfx( localclientnum, self.shieldlightfx );
	wait 0.05;
	self playsound( localclientnum, "wpn_shield_destroy" );
	self useanimtree( -1 );
	self setanim( %o_riot_stand_destroyed, 1, 0, 1 );
	wait 1;
	self setforcenotsimple();
// SP = 0x0 - check OK
}
// clientscripts/mp/zm_buried.csc

#include clientscripts\mp\zombies\_zm_equip_headchopper;
#include clientscripts\mp\zombies\_zm_equip_subwoofer;
#include clientscripts\mp\zombies\_zm_equip_springpad;
#include clientscripts\mp\zombies\_zm_equip_turbine;
#include clientscripts\mp\zombies\_zm_ai_ghost;
#include clientscripts\mp\zombies\_zm_weap_slowgun;
#include clientscripts\mp\zombies\_zm_weap_tazer_knuckles;
#include clientscripts\mp\zombies\_zm_weap_cymbal_monkey;
#include clientscripts\mp\zombies\_zm_weap_time_bomb;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\zm_buried_grief_street;
#include clientscripts\mp\zm_buried_turned_street;
#include clientscripts\mp\zombies\_zm_turned;
#include clientscripts\mp\zm_buried_amb;
#include clientscripts\mp\zm_buried_maze;
#include clientscripts\mp\zm_buried_classic;
#include clientscripts\mp\zm_buried_buildables;
#include clientscripts\mp\zm_buried_fx;
#include clientscripts\mp\zombies\_zm_perk_vulture;
#include clientscripts\mp\zombies\_zm_perk_divetonuke;
#include clientscripts\mp\zm_buried_sq;
#include clientscripts\mp\zm_buried_ffotd;
#include clientscripts\mp\_audio;
#include clientscripts\mp\_visionset_mgr;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\_utility;


// 0x2940
main()
{
	level thread clientscripts\mp\zm_buried_ffotd::main_start();
	level.disable_fx_zmb_wall_buy_semtex = 1;
	level.default_start_location = "processing";
	level.default_game_mode = "zclassic";
	level._no_water_risers = 1;
	level._foliage_risers = 1;
	level.disable_blackscreen_clientfield = 1;
	level.disable_deadshot_clientfield = 1;
	level.setupcustomcharacterexerts = ::setup_personality_character_exerts;
	level.zombiemode_using_doubletap_perk = 1;
	level.zombiemode_using_juggernaut_perk = 1;
	level.zombiemode_using_revive_perk = 1;
	level.zombiemode_using_sleightofhand_perk = 1;
	level.zombiemode_using_additionalprimaryweapon_perk = 1;
	level.zombiemode_using_marathon_perk = 1;
	level thread clientscripts\mp\zm_buried_sq::preinit();
	clientscripts\mp\zombies\_zm_perk_divetonuke::enable_divetonuke_perk_for_level();
	clientscripts\mp\zombies\_zm_perk_vulture::enable_vulture_perk_for_level();
	clientscripts\mp\zm_buried_fx::precache_fxanim_props();
	clientscripts\mp\zm_buried_buildables::prepare_chalk_weapon_list();
	clientscripts\mp\zm_buried_classic::init_jail_animtree();
	start_zombie_stuff();
	init_gamemodes();
	register_client_fields();
	clientscripts\mp\zm_buried_maze::init();
	clientscripts\mp\zm_buried_fx::main();
	thread clientscripts\mp\zm_buried_amb::main();
	level._override_eye_fx = level._effect["blue_eyes"];
	zombe_gametype_premain();
	clientscripts\mp\zm_buried_fx::setup_prop_anims();
	level thread clientscripts\mp\zm_buried_ffotd::main_end();
	waitforclient( 0 );
	flashlight_init();
	level thread buried_watch_for_power();
	level thread init_fog_vol_to_visionset();
	return;
	level thread clientscripts\mp\zm_buried_sq::init();
	clientscripts\mp\zombies\_zm_perk_vulture::set_vulture_stink_fogbanks( 2, 1 );
// SP = 0x0 - check OK
}

// 0x2AC4
register_client_fields()
{
	clientscripts\mp\zm_buried_sq::sq_buried_clientfield_init();
	level.generator_lights = 0;
	num_bits = 2;
	registerclientfield( "world", "GENERATOR_POWER_STATES", 12000, num_bits, "int", ::generator_light_callback, 1 );
	registerclientfield( "world", "GENERATOR_POWER_STATES_COLOR", 12000, 1, "int", ::generator_light_color_callback, 1 );
	registerclientfield( "world", "GENERATOR_POWER_STATES_LERP", 12000, 5, "float", ::generator_light_lerp_callback, 1 );
	registerclientfield( "toplayer", "sndBackgroundMus", 12000, 3, "int", clientscripts\mp\zm_buried_amb::sndbackgroundtrack, 0 );
	registerclientfield( "toplayer", "clientfield_underground_lighting", 12000, 1, "int", ::underground_lighting_callback, 0 );
// SP = 0x0 - check OK
}

// 0x2B98
flashlight_init()
{
	level.flashlight_fx = [];
	setdvar( "r_enableFlashlight", "1" );
	level.oil_lamp_life_time = 300;
	level.flashlight_flicker1_starts = 0.5;
	level.flashlight_flicker2_starts = 0.75;
	level.flashlight_flicker3_starts = 0.85;
	level.flashlight_flicker4_starts = 0.9;
	level.flashlight_fx_flicker1_starts = 0.5;
	level.flashlight_fx_flicker2_starts = 0.85;
// SP = 0x0 - check OK
}

// 0x2C08
player_flashlight_flicker_update( life_left_frac )
{
	self endon( "player_remove_flashlight" );
	setdvar( "r_flashLightFlickerRate", "10" );
	wait 0.01;
	full_flicker = "0.1";
	flicker1 = "0.25";
	flicker2 = "0.5";
	flicker3 = "0.9";
	wait_frac0 = level.flashlight_flicker1_starts;
	wait_frac1 = level.flashlight_flicker2_starts;
	wait_frac2 = level.flashlight_flicker3_starts;
	wait_frac3 = level.flashlight_flicker4_starts;
	wait_full = level.oil_lamp_life_time * ( 1 - wait_frac0 );
	wait_flicker1 = level.oil_lamp_life_time * ( 1 - wait_frac1 );
	wait_flicker2 = level.oil_lamp_life_time * ( 1 - wait_frac2 );
	wait_flicker3 = level.oil_lamp_life_time * ( 1 - wait_frac3 );
	used_frac = 1 - life_left_frac;
	used_frac = 0;
	wait_full = ( wait_frac0 - used_frac ) * level.oil_lamp_life_time;
	wait_full = 0;
	wait_flicker1 = ( wait_frac1 - used_frac ) * level.oil_lamp_life_time;
	wait_flicker1 = 0;
	wait_flicker2 = ( wait_frac2 - used_frac ) * level.oil_lamp_life_time;
	wait_flicker2 = 0;
	wait_flicker3 = ( wait_frac3 - used_frac ) * level.oil_lamp_life_time;
	wait_flicker3 = 0;
	self.sndlightent playloopsound( "zmb_lantern_plr_loop_1", 0.05 );
	setdvar( "r_flashLightFlickerAmount", full_flicker );
	wait wait_full;
	self.sndlightent playloopsound( "zmb_lantern_plr_loop_2", 0.05 );
	setdvar( "r_flashLightFlickerAmount", flicker1 );
	wait wait_flicker1;
	self.sndlightent playloopsound( "zmb_lantern_plr_loop_3", 0.05 );
	setdvar( "r_flashLightFlickerAmount", flicker2 );
	wait wait_flicker2;
	self.sndlightent playloopsound( "zmb_lantern_plr_loop_4", 0.05 );
	setdvar( "r_flashLightFlickerAmount", flicker3 );
	wait wait_flicker3;
// SP = 0x0 - check OK
}

// 0x2E9C
flashlight_toggle( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self.sndlightent = spawn( 0, self.origin, "script_origin" );
	self.sndlightent linkto( self, "tag_origin" );
	self thread snddeletelightent( self.sndlightent );
	self equipflashlight();
	self player_flashlight_flicker_update( newval );
	playsound( localclientnum, "zmb_lantern_die", self.origin );
	self notify( "player_remove_flashlight" );
	self removeflashlight();
	self thread start_3rd_person_flashlight( localclientnum, newval );
	self notify( "player_remove_flashlight_fx" );
	self kill_3rd_person_flashlight( localclientnum );
// SP = 0x0 - check OK
}

// 0x2FB0
snddeletelightent( ent )
{
	self waittill_any( "disconnect", "player_remove_flashlight" );
	self.sndlightent delete();
	self.sndlightent = undefined;
	ent delete();
// SP = 0x0 - check OK
}

// 0x2FF4
kill_3rd_person_flashlight( localclientnum )
{
	sgen = self getentitynumber();
	stopfx( localclientnum, level.flashlight_fx[sgen] );
	level.flashlight_fx[sgen] = undefined;
// SP = 0x0 - check OK
}

// 0x3038
start_3rd_person_flashlight( localclientnum, power_frac )
{
	self endon( "disconnect" );
	self endon( "player_remove_flashlight_fx" );
	used_frac = 1 - power_frac;
	used_frac = 0;
	used_frac = 0;
	wait_flicker0 = level.oil_lamp_life_time * level.flashlight_fx_flicker1_starts;
	wait_flicker1 = level.oil_lamp_life_time * ( level.flashlight_fx_flicker2_starts - level.flashlight_fx_flicker1_starts );
	wait_flicker2 = level.oil_lamp_life_time * ( 1 - level.flashlight_fx_flicker2_starts );
	wait_flicker0 = ( level.flashlight_fx_flicker1_starts - used_frac ) * level.oil_lamp_life_time;
	wait_flicker0 = 0;
	wait_flicker1 = ( level.flashlight_fx_flicker2_starts - used_frac ) * level.oil_lamp_life_time;
	wait_flicker1 = 0;
	wait_flicker2 = ( 1 - used_frac ) * level.oil_lamp_life_time;
	self set_flashlight_fx( localclientnum, level._effect["player_3rd_spotlight_lite"] );
	wait wait_flicker0;
	self set_flashlight_fx( localclientnum, level._effect["player_3rd_spotlight_med"] );
	wait wait_flicker1;
	self set_flashlight_fx( localclientnum, level._effect["player_3rd_spotlight_hvy"] );
	wait wait_flicker2;
	self kill_3rd_person_flashlight( localclientnum );
// SP = 0x0 - check OK
}

// 0x31C8
set_flashlight_fx( localclientnum, flashlight_fx )
{
	sgen = self getentitynumber();
	stopfx( localclientnum, level.flashlight_fx[sgen] );
	level.flashlight_fx[sgen] = undefined;
	level.flashlight_fx[sgen] = playfxontag( localclientnum, flashlight_fx, self, "tag_weapon_right" );
// SP = 0x0 - check OK
}

// 0x3228
grab_generator_light_array()
{
	lights = getstructarray( "light", "classname" );
	level.generator_lights_array = [];
	foreach ( light in lights )
	{
		level.generator_lights_array[level.generator_lights_array.size] = light;
		light.original_rhs_intensity = light.script_light2_intensity;
		light.original_rhs_intensity = light.lights[0] getlightintensity();
		light.original_rhs_color = light.script_light2_color;
		light.original_rhs_color = light.lights[0] getlightcolor();
	}
// SP = 0x0 - check OK
}

// 0x3300
make_generator_lights_flicker_lights()
{
	splitscreenhost = 0;
	players = getlocalplayers();
	i = 0;
	splitscreenhost = i;
	i++;
	grab_generator_light_array();
	foreach ( light in level.generator_lights_array )
	{
		light.lights[splitscreenhost] setmixerlightparam( "right", 0, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 1, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 2, light.original_rhs_intensity * 0.5 );
		light.lights[splitscreenhost] setmixerlightparam( "right", 3, light.original_rhs_intensity );
		light.lights[splitscreenhost] setmixerlightparam( "right", 4, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 5, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 6, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 7, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 8, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 9, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 10, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 11, undefined );
		light.lights[splitscreenhost] setmixerlightparam( "right", 12, undefined );
		light.lights[splitscreenhost] setmixerlightbehavior( "right", "fire_flicker" );
	}
// SP = 0x0 - check OK
}

// 0x34F8
restore_generator_lights_to_original_params()
{
	wait 0.3;
	splitscreenhost = 0;
	players = getlocalplayers();
	i = 0;
	splitscreenhost = i;
	i++;
	grab_generator_light_array();
	foreach ( light in level.generator_lights_array )
	{
		light.lights[splitscreenhost] setmixerlightintensity( "right", light.original_rhs_intensity );
		light.lights[splitscreenhost] setmixerlightbehavior( "right", "light_solid" );
	}
// SP = 0x0 - check OK
}

// 0x35C4
generator_light_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	switch ( newval )
	{
		case 0:
			setworldfogactivebank( localclientnum, 1 );
			level notify( "kill_flicker" );
			wait 0.1;
			level.generator_lights = 0;
			level notify( "generator_light" );
			level thread sndlightsfx( 0 );
			break;
		default:
			level.generator_lights = 1;
			level notify( "generator_light" );
			level thread sndlightsfx( 1 );
			level thread sndlightsfx( 2 );
			level thread generator_flicker();
			setworldfogactivebank( localclientnum, 2 );
			level thread sndlightsfx( 1 );
			level notify( "kill_flicker" );
			break;
	}
// SP = 0x0 - check OK
}

// 0x36AC
generator_light_color_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	grab_generator_light_array();
	foreach ( light in level.generator_lights_array )
	{
		light.lights[localclientnum] setmixerlightcolor( "right", ( 1, 0, 0 ) );
		light.lights[localclientnum] setmixerlightcolor( "right", light.original_rhs_color );
	}
// SP = 0x0 - check OK
}

// 0x3744
generator_light_lerp_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	grab_generator_light_array();
	foreach ( light in level.generator_lights_array )
	{
		light.lights[localclientnum] setmixerlightparam( "right", 2, newval * light.original_rhs_intensity * 0.5 );
		light.lights[localclientnum] setmixerlightparam( "right", 3, newval * light.original_rhs_intensity );
	}
// SP = 0x0 - check OK
}

// 0x37E8
watch_for_kill_flicker()
{
	level waittill( "kill_flicker" );
	wait 1;
	restore_generator_lights_to_original_params();
// SP = 0x0 - check OK
}

// 0x3804
generator_flicker()
{
	level endon( "kill_flicker" );
	level thread watch_for_kill_flicker();
	make_generator_lights_flicker_lights();
// SP = 0x0 - check OK
}

// 0x3824
init_gamemodes()
{
	clientscripts\mp\zombies\_zm_turned::init();
	add_map_gamemode( "zcleansed", clientscripts\mp\zombies\_zm_turned::precache, clientscripts\mp\zombies\_zm_turned::main );
	add_map_gamemode( "zclassic", undefined, undefined );
	add_map_gamemode( "zgrief", undefined, undefined );
	add_map_gamemode( "zcleansed", undefined, undefined );
	add_map_location_gamemode( "zclassic", "processing", clientscripts\mp\zm_buried_classic::precache, clientscripts\mp\zm_buried_classic::premain, clientscripts\mp\zm_buried_classic::main );
	add_map_location_gamemode( "zcleansed", "street", clientscripts\mp\zm_buried_turned_street::precache, clientscripts\mp\zm_buried_turned_street::premain, clientscripts\mp\zm_buried_turned_street::main );
	add_map_location_gamemode( "zgrief", "street", clientscripts\mp\zm_buried_grief_street::precache, clientscripts\mp\zm_buried_grief_street::premain, clientscripts\mp\zm_buried_grief_street::main );
// SP = 0x0 - check OK
}

// 0x38F8
start_zombie_stuff()
{
	include_weapons();
	include_powerups();
	include_equipment_for_level();
	clientscripts\mp\zombies\_zm::init();
	init_level_specific_wall_buy_fx();
	registerclientfield( "world", "buried_sq_maxis_eye_glow_override", 12000, 1, "int", ::buried_sq_maxis_eye_glow_override, 1 );
	registerclientfield( "allplayers", "buried_sq_richtofen_player_eyes_stuhlinger", 12000, 1, "int", ::buried_sq_richtofen_player_eyes_stuhlinger, 0 );
	registerclientfield( "allplayers", "phd_flopper_effects", 12000, 1, "int", ::buried_phd_flopper_effects, 0 );
	clientscripts\mp\zombies\_zm_weap_time_bomb::init_time_bomb();
	clientscripts\mp\zombies\_zm_weap_cymbal_monkey::init();
	clientscripts\mp\zombies\_zm_weap_tazer_knuckles::init();
	clientscripts\mp\zombies\_zm_weap_slowgun::init();
	return;
	clientscripts\mp\zombies\_zm_ai_ghost::init_animtree();
	clientscripts\mp\zombies\_zm_equip_turbine::init();
	clientscripts\mp\zombies\_zm_equip_turbine::init_animtree();
	clientscripts\mp\zombies\_zm_equip_springpad::init_animtree();
	clientscripts\mp\zombies\_zm_equip_subwoofer::init();
	clientscripts\mp\zombies\_zm_equip_subwoofer::init_animtree();
	clientscripts\mp\zombies\_zm_equip_headchopper::init_animtree();
	clientscripts\mp\zombies\_zm_equip_turbine::init();
	clientscripts\mp\zombies\_zm_equip_turbine::init_animtree();
	clientscripts\mp\zombies\_zm_equip_springpad::init_animtree();
	clientscripts\mp\zombies\_zm_equip_subwoofer::init();
	clientscripts\mp\zombies\_zm_equip_subwoofer::init_animtree();
// SP = 0x0 - check OK
}

// 0x3A58
init_clientflag_variables()
{
// SP = 0x0 - check OK
}

// 0x3A60
register_clientflag_callbacks()
{
// SP = 0x0 - check OK
}

// 0x3A68
init_level_specific_wall_buy_fx()
{
	return;
	level._effect["an94_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_an94" );
	level._effect["pdw57_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_pdw57" );
	level._effect["svu_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_svuas" );
	level._effect["lsat_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_lsat" );
	level._effect["tazer_knuckles_zm_fx"] = loadfx( "maps/zombie/fx_zmb_buried_buy_taseknuck" );
// SP = 0x0 - check OK
}

// 0x3AE4
include_weapons()
{
	return;
	gametype = GetDvar( #"0x41651E" );
	include_weapon( "knife_zm", 0 );
	include_weapon( "frag_grenade_zm", 0 );
	include_weapon( "claymore_zm", 0 );
	level._uses_sticky_grenades = 0;
	include_weapon( "m1911_zm", 0 );
	include_weapon( "m1911_upgraded_zm", 0 );
	include_weapon( "rnma_zm" );
	include_weapon( "rnma_upgraded_zm", 0 );
	include_weapon( "judge_zm" );
	include_weapon( "judge_upgraded_zm", 0 );
	include_weapon( "kard_zm" );
	include_weapon( "kard_upgraded_zm", 0 );
	include_weapon( "fiveseven_zm" );
	include_weapon( "fiveseven_upgraded_zm", 0 );
	include_weapon( "beretta93r_zm", 0 );
	include_weapon( "beretta93r_upgraded_zm", 0 );
	include_weapon( "fivesevendw_zm" );
	include_weapon( "fivesevendw_upgraded_zm", 0 );
	include_weapon( "ak74u_zm", 0 );
	include_weapon( "ak74u_upgraded_zm", 0 );
	include_weapon( "mp5k_zm", 0 );
	include_weapon( "mp5k_upgraded_zm", 0 );
	include_weapon( "qcw05_zm" );
	include_weapon( "870mcs_zm", 0 );
	include_weapon( "870mcs_upgraded_zm", 0 );
	include_weapon( "rottweil72_zm", 0 );
	include_weapon( "rottweil72_upgraded_zm", 0 );
	include_weapon( "saiga12_zm" );
	include_weapon( "saiga12_upgraded_zm", 0 );
	include_weapon( "srm1216_zm" );
	include_weapon( "srm1216_upgraded_zm", 0 );
	include_weapon( "m14_zm", 0 );
	include_weapon( "m14_upgraded_zm", 0 );
	include_weapon( "saritch_zm" );
	include_weapon( "saritch_upgraded_zm", 0 );
	include_weapon( "m16_zm", 0 );
	include_weapon( "m16_gl_upgraded_zm", 0 );
	include_weapon( "tar21_zm" );
	include_weapon( "tar21_upgraded_zm", 0 );
	include_weapon( "galil_zm" );
	include_weapon( "galil_upgraded_zm", 0 );
	include_weapon( "fnfal_zm" );
	include_weapon( "fnfal_upgraded_zm", 0 );
	include_weapon( "dsr50_zm" );
	include_weapon( "dsr50_upgraded_zm", 0 );
	include_weapon( "barretm82_zm" );
	include_weapon( "barretm82_upgraded_zm", 0 );
	include_weapon( "hamr_zm" );
	include_weapon( "hamr_upgraded_zm", 0 );
	include_weapon( "usrpg_zm" );
	include_weapon( "usrpg_upgraded_zm", 0 );
	include_weapon( "m32_zm" );
	include_weapon( "m32_upgraded_zm", 0 );
	include_weapon( "cymbal_monkey_zm" );
	include_weapon( "ray_gun_zm" );
	include_weapon( "ray_gun_upgraded_zm", 0 );
	include_weapon( "raygun_mark2_zm", 1 );
	include_weapon( "raygun_mark2_upgraded_zm", 0 );
	include_weapon( "slowgun_zm" );
	include_weapon( "slowgun_upgraded_zm", 0 );
	include_weapon( "knife_ballistic_zm" );
	include_weapon( "knife_ballistic_upgraded_zm", 0 );
	include_weapon( "knife_ballistic_bowie_zm", 0 );
	include_weapon( "knife_ballistic_bowie_upgraded_zm", 0 );
// SP = 0x0 - check OK
}

// 0x3E14
include_powerups()
{
	include_powerup( "nuke" );
	include_powerup( "insta_kill" );
	include_powerup( "double_points" );
	include_powerup( "full_ammo" );
	include_powerup( "carpenter" );
	include_powerup( "fire_sale" );
	include_powerup( "teller_withdrawl" );
	include_powerup( "insta_kill_ug" );
	include_powerup( "random_weapon" );
// SP = 0x0 - check OK
}

// 0x3E88
include_equipment_for_level()
{
// SP = 0x0 - check OK
}

// 0x3E90
setup_personality_character_exerts()
{
	level.exert_sounds[1]["playerbreathinsound"][0] = "vox_plr_0_exert_inhale_0";
	level.exert_sounds[1]["playerbreathinsound"][1] = "vox_plr_0_exert_inhale_1";
	level.exert_sounds[1]["playerbreathinsound"][2] = "vox_plr_0_exert_inhale_2";
	level.exert_sounds[2]["playerbreathinsound"][0] = "vox_plr_1_exert_inhale_0";
	level.exert_sounds[2]["playerbreathinsound"][1] = "vox_plr_1_exert_inhale_1";
	level.exert_sounds[2]["playerbreathinsound"][2] = "vox_plr_1_exert_inhale_2";
	level.exert_sounds[3]["playerbreathinsound"][0] = "vox_plr_2_exert_inhale_0";
	level.exert_sounds[3]["playerbreathinsound"][1] = "vox_plr_2_exert_inhale_1";
	level.exert_sounds[3]["playerbreathinsound"][2] = "vox_plr_2_exert_inhale_2";
	level.exert_sounds[4]["playerbreathinsound"][0] = "vox_plr_3_exert_inhale_0";
	level.exert_sounds[4]["playerbreathinsound"][1] = "vox_plr_3_exert_inhale_1";
	level.exert_sounds[4]["playerbreathinsound"][2] = "vox_plr_3_exert_inhale_2";
	level.exert_sounds[1]["playerbreathoutsound"][0] = "vox_plr_0_exert_exhale_0";
	level.exert_sounds[1]["playerbreathoutsound"][1] = "vox_plr_0_exert_exhale_1";
	level.exert_sounds[1]["playerbreathoutsound"][2] = "vox_plr_0_exert_exhale_2";
	level.exert_sounds[2]["playerbreathoutsound"][0] = "vox_plr_1_exert_exhale_0";
	level.exert_sounds[2]["playerbreathoutsound"][1] = "vox_plr_1_exert_exhale_1";
	level.exert_sounds[2]["playerbreathoutsound"][2] = "vox_plr_1_exert_exhale_2";
	level.exert_sounds[3]["playerbreathoutsound"][0] = "vox_plr_2_exert_exhale_0";
	level.exert_sounds[3]["playerbreathoutsound"][1] = "vox_plr_2_exert_exhale_1";
	level.exert_sounds[3]["playerbreathoutsound"][2] = "vox_plr_2_exert_exhale_2";
	level.exert_sounds[4]["playerbreathoutsound"][0] = "vox_plr_3_exert_exhale_0";
	level.exert_sounds[4]["playerbreathoutsound"][1] = "vox_plr_3_exert_exhale_1";
	level.exert_sounds[4]["playerbreathoutsound"][2] = "vox_plr_3_exert_exhale_2";
	level.exert_sounds[1]["playerbreathgaspsound"][0] = "vox_plr_0_exert_exhale_0";
	level.exert_sounds[1]["playerbreathgaspsound"][1] = "vox_plr_0_exert_exhale_1";
	level.exert_sounds[1]["playerbreathgaspsound"][2] = "vox_plr_0_exert_exhale_2";
	level.exert_sounds[2]["playerbreathgaspsound"][0] = "vox_plr_1_exert_exhale_0";
	level.exert_sounds[2]["playerbreathgaspsound"][1] = "vox_plr_1_exert_exhale_1";
	level.exert_sounds[2]["playerbreathgaspsound"][2] = "vox_plr_1_exert_exhale_2";
	level.exert_sounds[3]["playerbreathgaspsound"][0] = "vox_plr_2_exert_exhale_0";
	level.exert_sounds[3]["playerbreathgaspsound"][1] = "vox_plr_2_exert_exhale_1";
	level.exert_sounds[3]["playerbreathgaspsound"][2] = "vox_plr_2_exert_exhale_2";
	level.exert_sounds[4]["playerbreathgaspsound"][0] = "vox_plr_3_exert_exhale_0";
	level.exert_sounds[4]["playerbreathgaspsound"][1] = "vox_plr_3_exert_exhale_1";
	level.exert_sounds[4]["playerbreathgaspsound"][2] = "vox_plr_3_exert_exhale_2";
	level.exert_sounds[1]["falldamage"][0] = "vox_plr_0_exert_pain_low_0";
	level.exert_sounds[1]["falldamage"][1] = "vox_plr_0_exert_pain_low_1";
	level.exert_sounds[1]["falldamage"][2] = "vox_plr_0_exert_pain_low_2";
	level.exert_sounds[1]["falldamage"][3] = "vox_plr_0_exert_pain_low_3";
	level.exert_sounds[1]["falldamage"][4] = "vox_plr_0_exert_pain_low_4";
	level.exert_sounds[1]["falldamage"][5] = "vox_plr_0_exert_pain_low_5";
	level.exert_sounds[1]["falldamage"][6] = "vox_plr_0_exert_pain_low_6";
	level.exert_sounds[1]["falldamage"][7] = "vox_plr_0_exert_pain_low_7";
	level.exert_sounds[2]["falldamage"][0] = "vox_plr_1_exert_pain_low_0";
	level.exert_sounds[2]["falldamage"][1] = "vox_plr_1_exert_pain_low_1";
	level.exert_sounds[2]["falldamage"][2] = "vox_plr_1_exert_pain_low_2";
	level.exert_sounds[2]["falldamage"][3] = "vox_plr_1_exert_pain_low_3";
	level.exert_sounds[2]["falldamage"][4] = "vox_plr_1_exert_pain_low_4";
	level.exert_sounds[2]["falldamage"][5] = "vox_plr_1_exert_pain_low_5";
	level.exert_sounds[2]["falldamage"][6] = "vox_plr_1_exert_pain_low_6";
	level.exert_sounds[2]["falldamage"][7] = "vox_plr_1_exert_pain_low_7";
	level.exert_sounds[3]["falldamage"][0] = "vox_plr_2_exert_pain_low_0";
	level.exert_sounds[3]["falldamage"][1] = "vox_plr_2_exert_pain_low_1";
	level.exert_sounds[3]["falldamage"][2] = "vox_plr_2_exert_pain_low_2";
	level.exert_sounds[3]["falldamage"][3] = "vox_plr_2_exert_pain_low_3";
	level.exert_sounds[3]["falldamage"][4] = "vox_plr_2_exert_pain_low_4";
	level.exert_sounds[3]["falldamage"][5] = "vox_plr_2_exert_pain_low_5";
	level.exert_sounds[3]["falldamage"][6] = "vox_plr_2_exert_pain_low_6";
	level.exert_sounds[3]["falldamage"][7] = "vox_plr_2_exert_pain_low_7";
	level.exert_sounds[4]["falldamage"][0] = "vox_plr_3_exert_pain_low_0";
	level.exert_sounds[4]["falldamage"][1] = "vox_plr_3_exert_pain_low_1";
	level.exert_sounds[4]["falldamage"][2] = "vox_plr_3_exert_pain_low_2";
	level.exert_sounds[4]["falldamage"][3] = "vox_plr_3_exert_pain_low_3";
	level.exert_sounds[4]["falldamage"][4] = "vox_plr_3_exert_pain_low_4";
	level.exert_sounds[4]["falldamage"][5] = "vox_plr_3_exert_pain_low_5";
	level.exert_sounds[4]["falldamage"][6] = "vox_plr_3_exert_pain_low_6";
	level.exert_sounds[4]["falldamage"][7] = "vox_plr_3_exert_pain_low_7";
	level.exert_sounds[1]["mantlesoundplayer"][0] = "vox_plr_0_exert_grunt_0";
	level.exert_sounds[1]["mantlesoundplayer"][1] = "vox_plr_0_exert_grunt_1";
	level.exert_sounds[1]["mantlesoundplayer"][2] = "vox_plr_0_exert_grunt_2";
	level.exert_sounds[1]["mantlesoundplayer"][3] = "vox_plr_0_exert_grunt_3";
	level.exert_sounds[1]["mantlesoundplayer"][4] = "vox_plr_0_exert_grunt_4";
	level.exert_sounds[1]["mantlesoundplayer"][5] = "vox_plr_0_exert_grunt_5";
	level.exert_sounds[1]["mantlesoundplayer"][6] = "vox_plr_0_exert_grunt_6";
	level.exert_sounds[2]["mantlesoundplayer"][0] = "vox_plr_1_exert_grunt_0";
	level.exert_sounds[2]["mantlesoundplayer"][1] = "vox_plr_1_exert_grunt_1";
	level.exert_sounds[2]["mantlesoundplayer"][2] = "vox_plr_1_exert_grunt_2";
	level.exert_sounds[2]["mantlesoundplayer"][3] = "vox_plr_1_exert_grunt_3";
	level.exert_sounds[2]["mantlesoundplayer"][4] = "vox_plr_1_exert_grunt_4";
	level.exert_sounds[2]["mantlesoundplayer"][5] = "vox_plr_1_exert_grunt_5";
	level.exert_sounds[2]["mantlesoundplayer"][6] = "vox_plr_1_exert_grunt_6";
	level.exert_sounds[3]["mantlesoundplayer"][0] = "vox_plr_2_exert_grunt_0";
	level.exert_sounds[3]["mantlesoundplayer"][1] = "vox_plr_2_exert_grunt_1";
	level.exert_sounds[3]["mantlesoundplayer"][2] = "vox_plr_2_exert_grunt_2";
	level.exert_sounds[3]["mantlesoundplayer"][3] = "vox_plr_2_exert_grunt_3";
	level.exert_sounds[3]["mantlesoundplayer"][4] = "vox_plr_2_exert_grunt_4";
	level.exert_sounds[3]["mantlesoundplayer"][5] = "vox_plr_2_exert_grunt_5";
	level.exert_sounds[3]["mantlesoundplayer"][6] = "vox_plr_2_exert_grunt_6";
	level.exert_sounds[4]["mantlesoundplayer"][0] = "vox_plr_3_exert_grunt_0";
	level.exert_sounds[4]["mantlesoundplayer"][1] = "vox_plr_3_exert_grunt_1";
	level.exert_sounds[4]["mantlesoundplayer"][2] = "vox_plr_3_exert_grunt_2";
	level.exert_sounds[4]["mantlesoundplayer"][3] = "vox_plr_3_exert_grunt_3";
	level.exert_sounds[4]["mantlesoundplayer"][4] = "vox_plr_3_exert_grunt_4";
	level.exert_sounds[4]["mantlesoundplayer"][5] = "vox_plr_3_exert_grunt_5";
	level.exert_sounds[4]["mantlesoundplayer"][6] = "vox_plr_3_exert_grunt_6";
	level.exert_sounds[1]["meleeswipesoundplayer"][0] = "vox_plr_0_exert_knife_swipe_0";
	level.exert_sounds[1]["meleeswipesoundplayer"][1] = "vox_plr_0_exert_knife_swipe_1";
	level.exert_sounds[1]["meleeswipesoundplayer"][2] = "vox_plr_0_exert_knife_swipe_2";
	level.exert_sounds[1]["meleeswipesoundplayer"][3] = "vox_plr_0_exert_knife_swipe_3";
	level.exert_sounds[1]["meleeswipesoundplayer"][4] = "vox_plr_0_exert_knife_swipe_4";
	level.exert_sounds[1]["meleeswipesoundplayer"][5] = "vox_plr_0_exert_knife_swipe_5";
	level.exert_sounds[2]["meleeswipesoundplayer"][0] = "vox_plr_1_exert_knife_swipe_0";
	level.exert_sounds[2]["meleeswipesoundplayer"][1] = "vox_plr_1_exert_knife_swipe_1";
	level.exert_sounds[2]["meleeswipesoundplayer"][2] = "vox_plr_1_exert_knife_swipe_2";
	level.exert_sounds[2]["meleeswipesoundplayer"][3] = "vox_plr_1_exert_knife_swipe_3";
	level.exert_sounds[2]["meleeswipesoundplayer"][4] = "vox_plr_1_exert_knife_swipe_4";
	level.exert_sounds[2]["meleeswipesoundplayer"][5] = "vox_plr_1_exert_knife_swipe_5";
	level.exert_sounds[3]["meleeswipesoundplayer"][0] = "vox_plr_2_exert_knife_swipe_0";
	level.exert_sounds[3]["meleeswipesoundplayer"][1] = "vox_plr_2_exert_knife_swipe_1";
	level.exert_sounds[3]["meleeswipesoundplayer"][2] = "vox_plr_2_exert_knife_swipe_2";
	level.exert_sounds[3]["meleeswipesoundplayer"][3] = "vox_plr_2_exert_knife_swipe_3";
	level.exert_sounds[3]["meleeswipesoundplayer"][4] = "vox_plr_2_exert_knife_swipe_4";
	level.exert_sounds[3]["meleeswipesoundplayer"][5] = "vox_plr_2_exert_knife_swipe_5";
	level.exert_sounds[4]["meleeswipesoundplayer"][0] = "vox_plr_3_exert_knife_swipe_0";
	level.exert_sounds[4]["meleeswipesoundplayer"][1] = "vox_plr_3_exert_knife_swipe_1";
	level.exert_sounds[4]["meleeswipesoundplayer"][2] = "vox_plr_3_exert_knife_swipe_2";
	level.exert_sounds[4]["meleeswipesoundplayer"][3] = "vox_plr_3_exert_knife_swipe_3";
	level.exert_sounds[4]["meleeswipesoundplayer"][4] = "vox_plr_3_exert_knife_swipe_4";
	level.exert_sounds[4]["meleeswipesoundplayer"][5] = "vox_plr_3_exert_knife_swipe_5";
	level.exert_sounds[1]["dtplandsoundplayer"][0] = "vox_plr_0_exert_pain_medium_0";
	level.exert_sounds[1]["dtplandsoundplayer"][1] = "vox_plr_0_exert_pain_medium_1";
	level.exert_sounds[1]["dtplandsoundplayer"][2] = "vox_plr_0_exert_pain_medium_2";
	level.exert_sounds[1]["dtplandsoundplayer"][3] = "vox_plr_0_exert_pain_medium_3";
	level.exert_sounds[2]["dtplandsoundplayer"][0] = "vox_plr_1_exert_pain_medium_0";
	level.exert_sounds[2]["dtplandsoundplayer"][1] = "vox_plr_1_exert_pain_medium_1";
	level.exert_sounds[2]["dtplandsoundplayer"][2] = "vox_plr_1_exert_pain_medium_2";
	level.exert_sounds[2]["dtplandsoundplayer"][3] = "vox_plr_1_exert_pain_medium_3";
	level.exert_sounds[3]["dtplandsoundplayer"][0] = "vox_plr_2_exert_pain_medium_0";
	level.exert_sounds[3]["dtplandsoundplayer"][1] = "vox_plr_2_exert_pain_medium_1";
	level.exert_sounds[3]["dtplandsoundplayer"][2] = "vox_plr_2_exert_pain_medium_2";
	level.exert_sounds[3]["dtplandsoundplayer"][3] = "vox_plr_2_exert_pain_medium_3";
	level.exert_sounds[4]["dtplandsoundplayer"][0] = "vox_plr_3_exert_pain_medium_0";
	level.exert_sounds[4]["dtplandsoundplayer"][1] = "vox_plr_3_exert_pain_medium_1";
	level.exert_sounds[4]["dtplandsoundplayer"][2] = "vox_plr_3_exert_pain_medium_2";
	level.exert_sounds[4]["dtplandsoundplayer"][3] = "vox_plr_3_exert_pain_medium_3";
// SP = 0x0 - check OK
}

// 0x4900
buried_watch_for_power()
{
	return;
	looped_once = 0;
	level.power_on = 0;
	level notify( "power_controlled_light" );
	level waittill_any( "power_on", "pwr", "ZPO" );
	level notify( "power_controlled_light" );
	players = getlocalplayers();
	i = 0;
	level.current_fog = 2;
	i++;
	level waittill_any( "pwo", "ZPOff" );
	looped_once = 1;
// SP = 0x0 - check OK
}

// 0x49B4
init_fog_vol_to_visionset()
{
	init_fog_vol_to_visionset_monitor( "zm_buried", 2 );
	fog_vol_to_visionset_set_suffix( "" );
	fog_vol_to_visionset_set_info( 0, "zm_buried" );
// SP = 0x0 - check OK
}

// 0x49E8
sndlightsfx( num )
{
	wait 0.1;
	generator_origin = ( -579, 32, 69 );
	foreach ( light in level.generator_lights_array )
	{
		stoploopat( "zmb_lantern_world_flicker", light.origin );
		playsound( 0, "zmb_lantern_world_off", light.origin );
		wait 0.05;
	}
	stoploopat( "zmb_generator_loop_2", generator_origin );
	playsound( 0, "zmb_generator_off", generator_origin );
	foreach ( light in level.generator_lights_array )
	{
		playloopat( "zmb_lantern_world_loop", light.origin );
		playsound( 0, "zmb_lantern_world_on", light.origin );
		wait 0.05;
	}
	playloopat( "zmb_generator_loop_1", generator_origin );
	playsound( 0, "zmb_generator_on", generator_origin );
	foreach ( light in level.generator_lights_array )
	{
		stoploopat( "zmb_lantern_world_loop", light.origin );
		playloopat( "zmb_lantern_world_flicker", light.origin );
		wait 0.05;
	}
	stoploopat( "zmb_generator_loop_1", generator_origin );
	playloopat( "zmb_generator_loop_2", generator_origin );
// SP = 0x0 - check OK
}

// 0x4B98
underground_lighting_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	a_players = getlocalplayers();
	return;
	setsaveddvar( "r_lightTweakSunLight", 18 );
	setsaveddvar( "r_sky_intensity_factor0", "10.0" );
	setsaveddvar( "r_lightTweakSunLight", 13 );
	setsaveddvar( "r_sky_intensity_factor0", "1.0" );
// SP = 0x0 - check OK
}

// 0x4C14
buried_sq_maxis_eye_glow_override( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	level._override_eye_fx = level._effect["orange_eyes"];
	level.zombie_eyeball_color_override = 1;
	clientscripts\mp\zombies\_zm_perk_vulture::set_vulture_custom_eye_glow( level._effect["sq_vulture_orange_eye_glow"] );
// SP = 0x0 - check OK
}

// 0x4C54
buried_sq_richtofen_player_eyes_stuhlinger( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	return;
	self.special_eyes = newval;
	self._eyeglow_fx_override = level._effect["player_possessed_eyes"];
	self._eyeglow_tag_override = "J_Head";
	blue_eyes = 1;
	luminance = 2;
	self clientscripts\mp\zombies\_zm::createzombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "ScriptVector2", 0, 0, 0, luminance );
	self mapshaderconstant( localclientnum, 0, "ScriptVector3", blue_eyes );
	self clientscripts\mp\zombies\_zm::deletezombieeyes( localclientnum );
	self mapshaderconstant( localclientnum, 0, "ScriptVector2", 0, 0, 0, 0 );
	self mapshaderconstant( localclientnum, 0, "ScriptVector3", 0 );
// SP = 0x0 - check OK
}

// 0x4D54
buried_phd_flopper_effects( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	playfx( localclientnum, level._effect["divetonuke_groundhit"], self.origin );
	self playsound( localclientnum, "zmb_phdflop_explo" );
// SP = 0x0 - check OK
}
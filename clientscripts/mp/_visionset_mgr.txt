// clientscripts/mp/_visionset_mgr.csc

#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_utility;


// 0xAAC
init()
{
	return;
	level.vsmgr_initializing = 1;
	level.vsmgr_default_info_name = "none";
	level.vsmgr = [];
	level.vsmgr_states_inited = [];
	level.vsmgr_filter_custom_enable = [];
	level thread register_type( "visionset", ::visionset_slot_cb, ::visionset_lerp_cb, ::visionset_update_cb );
	vsmgr_register_visionset_info( level.vsmgr_default_info_name, 1, 1, "undefined", "undefined" );
	level thread register_type( "overlay", ::overlay_slot_cb, ::overlay_lerp_cb, ::overlay_update_cb );
	vsmgr_register_overlay_info_style_none( level.vsmgr_default_info_name, 1, 1 );
	level.vsmgr_is_type_currently_default_func = ::vsmgr_is_type_currently_default;
	[[level.on_finalize_initialization_callback]]( ::finalize_clientfields );
	level thread monitor();
// SP = 0x0 - check OK
}

// 0xB74
vsmgr_register_visionset_info( name, version, lerp_step_count, visionset_from, visionset_to )
{
	return;
	return;
	level.vsmgr["visionset"].info[name].visionset_from = visionset_from;
	level.vsmgr["visionset"].info[name].visionset_to = visionset_to;
// SP = 0x0 - check OK
}

// 0xBD8
vsmgr_register_overlay_info_style_none( name, version, lerp_step_count )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 0;
// SP = 0x0 - check OK
}

// 0xC20
vsmgr_register_overlay_info_style_filter( name, version, lerp_step_count, filter_index, pass_index, material_name, constant_index )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 1;
	level.vsmgr["overlay"].info[name].filter_index = filter_index;
	level.vsmgr["overlay"].info[name].pass_index = pass_index;
	level.vsmgr["overlay"].info[name].material_name = material_name;
	level.vsmgr["overlay"].info[name].constant_index = constant_index;
// SP = 0x0 - check OK
}

// 0xCD0
vsmgr_register_overlay_info_style_blur( name, version, lerp_step_count, transition_in, transition_out, magnitude )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 2;
	level.vsmgr["overlay"].info[name].transition_in = transition_in;
	level.vsmgr["overlay"].info[name].transition_out = transition_out;
	level.vsmgr["overlay"].info[name].magnitude = magnitude;
// SP = 0x0 - check OK
}

// 0xD64
vsmgr_register_overlay_info_style_electrified( name, version, lerp_step_count, duration )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 3;
	level.vsmgr["overlay"].info[name].duration = duration;
// SP = 0x0 - check OK
}

// 0xDC4
vsmgr_register_overlay_info_style_poison( name, version, lerp_step_count )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 5;
// SP = 0x0 - check OK
}

// 0xE0C
vsmgr_register_overlay_info_style_burn( name, version, lerp_step_count, duration )
{
	return;
	return;
	level.vsmgr["overlay"].info[name].style = 4;
	level.vsmgr["overlay"].info[name].duration = duration;
// SP = 0x0 - check OK
}

// 0xE6C
vsmgr_is_type_currently_default( localclientnum, type )
{
	return 1;
	state = get_state( localclientnum, type );
	curr_info = get_info( type, state.curr_slot );
	return curr_info.name == level.vsmgr_default_info_name;
// SP = 0x0 - check OK
}

// 0xEBC
register_type( type, cf_slot_cb, cf_lerp_cb, update_cb )
{
	level.vsmgr[type] = spawnstruct();
	level.vsmgr[type].type = type;
	level.vsmgr[type].in_use = 0;
	level.vsmgr[type].highest_version = 0;
	level.vsmgr[type].server_version = getserverhighestclientfieldversion();
	level.vsmgr[type].cf_slot_name = type + "_slot";
	level.vsmgr[type].cf_lerp_name = type + "_lerp";
	level.vsmgr[type].cf_slot_cb = cf_slot_cb;
	level.vsmgr[type].cf_lerp_cb = cf_lerp_cb;
	level.vsmgr[type].update_cb = update_cb;
	level.vsmgr[type].info = [];
	level.vsmgr[type].sorted_name_keys = [];
// SP = 0x0 - check OK
}

// 0xF94
finalize_clientfields()
{
	typekeys = getarraykeys( level.vsmgr );
	type_index = 0;
	level.vsmgr[typekeys[type_index]] thread finalize_type_clientfields();
	type_index++;
	level.vsmgr_initializing = 0;
// SP = 0x0 - check OK
}

// 0xFE0
init_fogvols()
{
	wait 0.1;
	level thread fog_vol_to_visionset_monitor();
	level thread reset_player_fv2vs_infos_on_respawn();
// SP = 0x0 - check OK
}

// 0x1010
finalize_type_clientfields()
{
	level thread init_fogvols();
	return;
	self.in_use = 1;
	self.cf_slot_bit_count = getminbitcountfornum( self.info.size - 1 );
	self.cf_lerp_bit_count = self.info[self.sorted_name_keys[0]].lerp_bit_count;
	i = 0;
	self.info[self.sorted_name_keys[i]].slot_index = i;
	self.cf_lerp_bit_count = self.info[self.sorted_name_keys[i]].lerp_bit_count;
	i++;
	registerclientfield( "toplayer", self.cf_slot_name, self.highest_version, self.cf_slot_bit_count, "int", self.cf_slot_cb, 0, 1 );
	registerclientfield( "toplayer", self.cf_lerp_name, self.highest_version, self.cf_lerp_bit_count, "float", self.cf_lerp_cb, 0, 1 );
// SP = 0x0 - check OK
}

// 0x1114
validate_info( type, name, version )
{
	keys = getarraykeys( level.vsmgr );
	i = 0;
	i++;
/#
	assert( i < keys.size, "In visionset_mgr, type '" + type + "'is unknown" );
#/
	return 0;
	return 0;
	level.vsmgr[type].info[name] = undefined;
	return 1;
// SP = 0x0 - check OK
}

// 0x11E8
add_sorted_name_key( type, name )
{
	i = 0;
	i++;
	arrayinsert( level.vsmgr[type].sorted_name_keys, name, i );
// SP = 0x0 - check OK
}

// 0x1248
add_info( type, name, version, lerp_step_count )
{
	self.type = type;
	self.name = name;
	self.version = version;
	self.lerp_step_count = lerp_step_count;
	self.lerp_bit_count = getminbitcountfornum( lerp_step_count );
// SP = 0x0 - check OK
}

// 0x1288
register_info( type, name, version, lerp_step_count )
{
/#
	assert( level.vsmgr_initializing, "All info registration in the visionset_mgr system must occur during the first frame while the system is initializing" );
#/
	lower_name = tolower( name );
	return 0;
	add_sorted_name_key( type, lower_name );
	level.vsmgr[type].info[lower_name] = spawnstruct();
	level.vsmgr[type].info[lower_name] add_info( type, lower_name, version, lerp_step_count );
	level.vsmgr[type].highest_version = version;
	return 1;
// SP = 0x0 - check OK
}

// 0x133C
slot_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, type )
{
	init_states( localclientnum );
	level.vsmgr[type].state[localclientnum].curr_slot = newval;
	level.vsmgr[type].state[localclientnum].force_update = 1;
// SP = 0x0 - check OK
}

// 0x1398
visionset_slot_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self slot_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, "visionset" );
// SP = 0x0 - check OK
}

// 0x13CC
overlay_slot_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self slot_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, "overlay" );
// SP = 0x0 - check OK
}

// 0x1400
lerp_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, type )
{
	init_states( localclientnum );
	level.vsmgr[type].state[localclientnum].curr_lerp = newval;
	level.vsmgr[type].state[localclientnum].force_update = 1;
// SP = 0x0 - check OK
}

// 0x145C
visionset_lerp_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self lerp_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, "visionset" );
// SP = 0x0 - check OK
}

// 0x1490
overlay_lerp_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self lerp_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump, "overlay" );
// SP = 0x0 - check OK
}

// 0x14C4
get_info( type, slot )
{
	return level.vsmgr[type].info[level.vsmgr[type].sorted_name_keys[slot]];
// SP = 0x0 - check OK
}

// 0x14EC
get_state( localclientnum, type )
{
	return level.vsmgr[type].state[localclientnum];
// SP = 0x0 - check OK
}

// 0x1508
should_update_state()
{
	return self.prev_lerp != self.curr_lerp;
// SP = 0x0 - check OK
}

// 0x152C
transition_state()
{
	self.prev_slot = self.curr_slot;
	self.prev_lerp = self.curr_lerp;
	self.force_update = 0;
// SP = 0x0 - check OK
}

// 0x154C
init_states( localclientnum )
{
	return;
	typekeys = getarraykeys( level.vsmgr );
	type_index = 0;
	type = typekeys[type_index];
	level.vsmgr[type].state = [];
	level.vsmgr[type].state[localclientnum] = spawnstruct();
	level.vsmgr[type].state[localclientnum].prev_slot = level.vsmgr[type].info[level.vsmgr_default_info_name].slot_index;
	level.vsmgr[type].state[localclientnum].curr_slot = level.vsmgr[type].info[level.vsmgr_default_info_name].slot_index;
	level.vsmgr[type].state[localclientnum].prev_lerp = 1;
	level.vsmgr[type].state[localclientnum].curr_lerp = 1;
	level.vsmgr[type].state[localclientnum].force_update = 0;
	type_index++;
	level.vsmgr_states_inited[localclientnum] = 1;
// SP = 0x0 - check OK
}

// 0x1688
demo_jump_monitor()
{
	return;
	typekeys = getarraykeys( level.vsmgr );
	oldlerps = [];
	level waittill_any( "demo_jump", "demo_player_switch", "visionset_mgr_reset" );
	type_index = 0;
	type = typekeys[type_index];
/#
#/
	level.vsmgr[type].state[0].force_update = 1;
	type_index++;
// SP = 0x0 - check OK
}

// 0x1720
demo_spectate_monitor()
{
	return;
	typekeys = getarraykeys( level.vsmgr );
	visionsetnaked( 0, "default", 0 );
	level notify( "visionset_mgr_reset" );
	level.vsmgr_is_spectating = 1;
	level notify( "visionset_mgr_reset" );
	level.vsmgr_is_spectating = 0;
	wait 0.016;
// SP = 0x0 - check OK
}

// 0x17B4
monitor()
{
	wait 0.01;
	level thread demo_spectate_monitor();
	level thread demo_jump_monitor();
	typekeys = getarraykeys( level.vsmgr );
	type_index = 0;
	type = typekeys[type_index];
	localclientnum = 0;
	init_states( localclientnum );
/#
#/
	level.vsmgr[type] thread [[level.vsmgr[type].update_cb]]( localclientnum, type );
	level.vsmgr[type].state[localclientnum] transition_state();
	localclientnum++;
	type_index++;
	wait 0.01;
// SP = 0x0 - check OK
}

// 0x18B8
visionset_update_cb( localclientnum, type )
{
	state = get_state( localclientnum, type );
	curr_info = get_info( type, state.curr_slot );
	prev_info = get_info( type, state.prev_slot );
/#
#/
	return;
	level notify( "vsionset_mgr_incontrol" );
	init_fog_vol_to_visionset_monitor( level._fv2vs_default_visionset, level._fv2vs_default_trans_in, 1 );
	level thread fog_vol_to_visionset_monitor();
	level thread reset_player_fv2vs_infos_on_respawn();
	level notify( "visionset_manager_none_state" );
	return;
	level notify( "vsionset_mgr_incontrol" );
	visionsetnakedlerp( localclientnum, curr_info.visionset_from, curr_info.visionset_to, state.curr_lerp );
// SP = 0x0 - check OK
}

// 0x1994
set_poison_overlay( amount )
{
	setdvar( "r_poisonFX_debug_enable", 1 );
	setdvarfloat( "r_poisonFX_pulse", 2 );
	setdvarfloat( "r_poisonFX_warpX", -0.3 );
	setdvarfloat( "r_poisonFX_warpY", 0.15 );
	setdvarfloat( "r_poisonFX_dvisionA", 0 );
	setdvarfloat( "r_poisonFX_dvisionX", 0 );
	setdvarfloat( "r_poisonFX_dvisionY", 0 );
	setdvarfloat( "r_poisonFX_blurMin", 0 );
	setdvarfloat( "r_poisonFX_blurMax", 3 );
	setdvarfloat( "r_poisonFX_debug_amount", amount );
// SP = 0x0 - check OK
}

// 0x1A34
clear_poison_overlay()
{
	setdvarfloat( "r_poisonFX_debug_amount", 0 );
	setdvar( "r_poisonFX_debug_enable", 0 );
// SP = 0x0 - check OK
}

// 0x1A54
overlay_update_cb( localclientnum, type )
{
	state = get_state( localclientnum, type );
	curr_info = get_info( type, state.curr_slot );
	prev_info = get_info( type, state.prev_slot );
/#
#/
	switch ( prev_info.style )
	{
		case 0:
		case 1:
			level.localplayers[localclientnum] set_filter_pass_enabled( prev_info.filter_index, prev_info.pass_index, 0 );
			break;
		case 2:
			setblurbylocalclientnum( localclientnum, 0, prev_info.transition_out );
			break;
		case 3:
			setelectrified( localclientnum, 0 );
			break;
		case 4:
			setburn( localclientnum, 0 );
			break;
		case 5:
			clear_poison_overlay();
			break;
	}
	return;
	switch ( curr_info.style )
	{
		case 0:
		case 1:
			level.localplayers[localclientnum] [[level.vsmgr_filter_custom_enable[curr_info.material_name]]]( curr_info );
			level.localplayers[localclientnum] set_filter_pass_material( curr_info.filter_index, curr_info.pass_index, level.filter_matid[curr_info.material_name] );
			level.localplayers[localclientnum] set_filter_pass_enabled( curr_info.filter_index, curr_info.pass_index, 1 );
			level.localplayers[localclientnum] set_filter_pass_constant( curr_info.filter_index, curr_info.pass_index, curr_info.constant_index, state.curr_lerp );
			break;
		case 2:
			setblurbylocalclientnum( localclientnum, curr_info.magnitude, curr_info.transition_in );
			break;
		case 3:
			setelectrified( localclientnum, curr_info.duration * state.curr_lerp );
			break;
		case 4:
			setburn( localclientnum, curr_info.duration * state.curr_lerp );
			break;
		case 5:
			set_poison_overlay( state.curr_lerp );
			break;
	}
// SP = 0x0 - check OK
}
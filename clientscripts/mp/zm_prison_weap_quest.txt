// clientscripts/mp/zm_prison_weap_quest.csc

#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\_filter;
#include clientscripts\mp\_utility;

#using_animtree ( "fxanim_props" );


// 0xB9C
tomahawk_rune_init()
{
	level.wolfhead_intro_anim = %o_zombie_dreamcatcher_intro;
	level.wolfhead_outtro_anim = %o_zombie_dreamcatcher_outtro;
	level.wolfhead_pre_eat_anims = [];
	level.wolfhead_pre_eat_anims["right"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_r;
	level.wolfhead_pre_eat_anims["left"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_l;
	level.wolfhead_pre_eat_anims["front"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_f;
	level.wolfhead_eat_anims = [];
	level.wolfhead_eat_anims["right"] = %o_zombie_dreamcatcher_wallconsume_align_r;
	level.wolfhead_eat_anims["left"] = %o_zombie_dreamcatcher_wallconsume_align_l;
	level.wolfhead_eat_anims["front"] = %o_zombie_dreamcatcher_wallconsume_align_f;
	level.wolfhead_body_anims = [];
	level.wolfhead_body_anims["right"] = %ai_zombie_dreamcatcher_wallconsume_align_r;
	level.wolfhead_body_anims["left"] = %ai_zombie_dreamcatcher_wallconsume_align_l;
	level.wolfhead_body_anims["front"] = %ai_zombie_dreamcatcher_wallconsume_align_f;
	level.a_wolf_structs = getstructarray( "wolf_position", "targetname" );
	registerclientfield( "actor", "make_client_clone", 9000, 4, "int", ::pose_dead_body );
	i = 0;
	registerclientfield( "world", level.a_wolf_structs[i].script_parameters, 9000, 3, "int", ::soul_catcher_callback );
	i++;
	level.fake_body_death_anim = %ai_zombie_dreamcatch_impact;
	assemble_fake_body_head_arrays();
	waitforallclients();
	wait 1;
	level.wolf_heads = [];
	level.wolf_runes = [];
	level.wolf_bodies = [];
	players = getlocalplayers();
	j = 0;
	level.wolf_heads[j] = [];
	level.wolf_runes[j] = [];
	level.wolf_bodies[j] = [];
	i = 0;
	level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_label, "targetname" );
	level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] hide();
	level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] useanimtree( -1 );
	level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_friendname, "targetname" );
	level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] hide();
	level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] useanimtree( -1 );
	level.wolf_runes[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_noteworthy, "targetname" );
	i++;
	j++;
	level.weap_quest_init = 1;
// SP = 0x0 - check OK
}

// 0xE78
soul_catcher_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	wait 0.05;
	rune = level.wolf_runes[localclientnum][fieldname];
	rune_forward = anglestoforward( rune.angles + vector_scale( ( 0, 1, 0 ), 90 ) );
	rune_up = anglestoup( rune.angles );
	level.wolf_heads[localclientnum][fieldname].portal_fx = playfx( localclientnum, level._effect["hell_portal"], ( rune.origin - rune_forward * 2.5 ) - rune_up * 24, rune_forward, rune_up );
	stopfx( localclientnum, level.wolf_heads[localclientnum][fieldname].portal_fx );
	rune = level.wolf_runes[localclientnum][fieldname];
	rune_forward = anglestoforward( rune.angles + vector_scale( ( 0, 1, 0 ), 90 ) );
	rune_up = anglestoup( rune.angles );
	level.wolf_heads[localclientnum][fieldname].portal_fx = playfx( localclientnum, level._effect["hell_portal"], ( rune.origin - rune_forward * 2.5 ) - rune_up * 24, rune_forward, rune_up );
	level.wolf_heads[localclientnum][fieldname] hide();
	level.wolf_runes[localclientnum][fieldname] show();
	level.wolf_bodies[localclientnum][fieldname] hide();
	level.wolf_heads[localclientnum][fieldname] show();
	level.wolf_runes[localclientnum][fieldname] hide();
	level.wolf_bodies[localclientnum][fieldname] hide();
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_arrive( localclientnum, level.wolf_runes[localclientnum][fieldname] );
	level.wolf_heads[localclientnum][fieldname] show();
	level.wolf_runes[localclientnum][fieldname] hide();
	level.wolf_bodies[localclientnum][fieldname] hide();
	level.wolf_bodies[localclientnum][fieldname].head.hat hide();
	level.wolf_bodies[localclientnum][fieldname].head hide();
	playsound( 0, "evt_wolfhead_body_count", level.wolf_heads[localclientnum][fieldname].origin );
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_idle();
	level.wolf_heads[localclientnum][fieldname] show();
	level.wolf_runes[localclientnum][fieldname] hide();
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "front" );
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "right" );
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "left" );
	level.wolf_heads[localclientnum][fieldname] show();
	level.wolf_runes[localclientnum][fieldname] show();
	level.wolf_bodies[localclientnum][fieldname] hide();
	level.wolf_bodies[localclientnum][fieldname].head hide();
	level.wolf_runes[localclientnum][fieldname] stoploopsound();
	level.wolf_bodies[localclientnum][fieldname].head.hat hide();
	level.wolf_heads[localclientnum][fieldname] thread wolfhead_depart( localclientnum, level.wolf_runes[localclientnum][fieldname] );
	level.wolf_heads[localclientnum][fieldname] hide();
	level.wolf_runes[localclientnum][fieldname] show();
	level.wolf_bodies[localclientnum][fieldname] hide();
	level.wolf_bodies[localclientnum][fieldname].head hide();
	level.wolf_bodies[localclientnum][fieldname].head.hat hide();
	level.wolf_runes[localclientnum][fieldname] setmodel( "p6_zm_al_dream_catcher" );
	playfxontag( localclientnum, level._effect["soul_charged"], level.wolf_runes[localclientnum][fieldname], "tag_origin" );
	level.wolf_runes[localclientnum][fieldname] playloopsound( "evt_runeglow_loop" );
// SP = 0x0 - check OK
}

// 0x141C
wolfhead_arrive( localclientnum, rune )
{
	rune_forward = anglestoforward( rune.angles + vector_scale( ( 0, 1, 0 ), 90 ) );
	rune_up = anglestoup( rune.angles );
	self.portal_fx = playfx( localclientnum, level._effect["hell_portal"], ( rune.origin - rune_forward * 2.5 ) - rune_up * 24, rune_forward, rune_up );
	self playsound( 0, "evt_wolfhead_spawn" );
	self.wolf_ent = spawn( 0, self.origin, "script_origin" );
	self.wolf_ent playloopsound( "evt_wolfhead_fire_loop" );
	n_anim_length = getanimlength( level.wolfhead_intro_anim );
	self setanim( level.wolfhead_intro_anim, 1, 0, 1 );
	wait n_anim_length;
// SP = 0x0 - check OK
}

// 0x14EC
wolfhead_idle()
{
	self endon( "wolf_eating" );
	self endon( "wolf_departing" );
	self notify( "wolf_idling" );
	level.wolf_head_idle_anims = [];
	level.wolf_head_idle_anims[0] = %o_zombie_dreamcatcher_idle;
	level.wolf_head_twitch_anims = [];
	level.wolf_head_twitch_anims[0] = %o_zombie_dreamcatcher_idle_twitch_scan;
	level.wolf_head_twitch_anims[1] = %o_zombie_dreamcatcher_idle_twitch_shake;
	level.wolf_head_twitch_anims[2] = %o_zombie_dreamcatcher_idle_twitch_yawn;
	self clearanim( %root, 0.1 );
	random_idle_anim = random( level.wolf_head_idle_anims );
	n_anim_length = getanimlength( random_idle_anim );
	self setanim( random_idle_anim, 1, 0.2, 1 );
	wait n_anim_length;
	self clearanim( %root, 0.1 );
	random_twitch_anim = random( level.wolf_head_twitch_anims );
	n_anim_length = getanimlength( random_twitch_anim );
	self setanim( random_twitch_anim, 1, 0.2, 1 );
	wait n_anim_length;
// SP = 0x0 - check OK
}

// 0x1620
pose_dead_body( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
	self endon( "entityshutdown" );
	self waittill_dobj( localclientnum );
	wait 0.016;
	wait 0.05;
	return;
	s_closest = get_array_of_closest( self.origin, level.a_wolf_structs );
	fieldname = s_closest[0].script_parameters;
	m_body = level.wolf_bodies[localclientnum][fieldname];
	m_body.head.hat delete();
	m_body.head delete();
	m_body delete();
	m_body = spawn( localclientnum, ( 0, 0, 0 ), "script_model" );
	m_body setmodel( "c_zom_inmate_body2" );
	m_body setmodel( "c_zom_inmate_body1" );
	m_body setmodel( "c_zom_guard_body" );
	m_body hide();
	m_body.origin = self.origin;
	m_body.angles = self.angles;
	m_head = spawn( localclientnum, m_body gettagorigin( "J_Spine4" ), "script_model" );
	head_index = newval % 4 + 1;
	m_head setmodel( level.wolf_body_fake_heads[head_index] );
	m_hat = spawn( localclientnum, m_head gettagorigin( "J_Head" ), "script_model" );
	m_hat setmodel( "c_zom_guard_hat" );
	m_hat.angles = m_head.angles;
	m_hat linkto( m_head, "j_head" );
	m_hat hide();
	m_head.hat = m_hat;
	m_head setmodel( level.wolf_body_fake_heads[newval] );
	m_head hide();
	m_head.angles = m_body gettagangles( "J_Spine4" );
	m_head linkto( m_body, "j_spine4" );
	m_body.head = m_head;
	level.wolf_bodies[localclientnum][fieldname] = m_body;
	m_body useanimtree( -1 );
	m_body.origin = self.origin - vector_scale( ( 0, 0, 1 ), 1000 );
	m_body show();
	m_body clearanim( %root, 0.1 );
	m_body setanimrestart( level.fake_body_death_anim, 1, 0.2, 10 );
	anim_time = getanimlength( level.fake_body_death_anim ) / 10;
	wait 0.1;
	m_head show();
	m_hat show();
	wait anim_time;
	m_body hide();
	m_body.origin = self.origin;
	m_body.angles = self.angles;
	m_body linkto( self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x1978
wolfhead_pre_eat_aligned( body, localclientnum, direction )
{
	s_closest = get_array_of_closest( self.origin, level.a_wolf_structs );
	fieldname = s_closest[0].script_parameters;
	m_body = level.wolf_bodies[localclientnum][fieldname];
	m_wolf = level.wolf_heads[localclientnum][fieldname];
/#
	iprintlnbold( "Eating Zombie on the: " + direction );
#/
	m_wolf clearanim( %root, 0.1 );
	m_wolf setanimrestart( level.wolfhead_pre_eat_anims[direction], 1, 0.2, 1 );
	m_body unlink();
	m_body show();
	m_body body_moveto_wolf( m_wolf, localclientnum );
// SP = 0x0 - check OK
}

// 0x1A3C
body_moveto_wolf( m_wolf, localclientnum )
{
	self.m_soul_fx_player = spawn( localclientnum, self gettagorigin( "J_SpineLower" ), "script_model" );
	self.m_soul_fx_player setmodel( "tag_origin" );
	self clearanim( %root, 0.1 );
	self setanimrestart( %ai_zombie_dreamcatch_rise, 1, 0.2, 1 );
	vec_dir = m_wolf.origin - self.origin;
	vec_dir_scaled = vector_scale( vec_dir, 0.2 );
	self.m_soul_fx_player.angles = vectortoangles( vec_dir );
	self.m_soul_fx_player linkto( self );
	move_fx = playfxontag( localclientnum, level._effect["soul_charge_start"], self.m_soul_fx_player, "tag_origin" );
	self playsound( 0, "evt_soulsuck_body" );
	self moveto( self.origin + vec_dir_scaled, 1.5, 1.5 );
	self waittill( "movedone" );
	self clearanim( %root, 0.1 );
	self setanimrestart( %ai_zombie_dreamcatch_shrink_a, 1, 0.2, 1 );
	zombie_move_offset = anglestoforward( m_wolf.angles ) * 36 + anglestoup( m_wolf.angles ) * 0;
	self moveto( m_wolf.origin + zombie_move_offset, 0.5, 0.5 );
	self waittill( "movedone" );
	return;
	stopfx( localclientnum, move_fx );
	self.m_soul_fx_player unlink();
	self.m_soul_fx_player delete();
	self.m_soul_fx_player = undefined;
// SP = 0x0 - check OK
}

// 0x1BFC
wolfhead_eat_aligned( body, localclientnum, direction )
{
	self endon( "wolf_idling" );
	self endon( "wolf_departing" );
	self notify( "wolf_eating" );
	self wolfhead_pre_eat_aligned( body, localclientnum, direction );
	body.origin = self gettagorigin( "tag_mouth_fx" );
	body.angles = self gettagangles( "tag_mouth_fx" );
	body linkto( self, "tag_mouth_fx", ( 0, 0, 0 ), ( 0, 0, 0 ) );
	self clearanim( %root, 0.1 );
	body clearanim( %root, 0.1 );
	n_anim_length = getanimlength( level.wolfhead_eat_anims[direction] );
	self playsound( 0, "evt_wolfhead_eat" );
	self thread play_blood_fx_on_bite( localclientnum );
	self setflaggedanim( "bite", level.wolfhead_eat_anims[direction], 1, 0, 1 );
	body setflaggedanim( "bite", level.wolfhead_body_anims[direction], 1, 0.2, 1 );
	wait n_anim_length;
	body unlink();
// SP = 0x0 - check OK
}

// 0x1D34
play_blood_fx_on_bite( localclientnum )
{
	self waittill( "bite", note );
	playfxontag( localclientnum, level._effect["soul_charge_impact"], self, "TAG_MOUTH_FX" );
	playfxontag( localclientnum, level._effect["wolf_bite_blood"], self, "TAG_MOUTH_FX" );
// SP = 0x0 - check OK
}

// 0x1D98
wolfhead_depart( localclientnum, rune )
{
	self clearanim( %root, 0.1 );
	self setanimrestart( level.wolfhead_outtro_anim, 1, 0.2, 1 );
	rune_forward = anglestoforward( rune.angles + vector_scale( ( 0, 1, 0 ), 90 ) );
	rune_up = anglestoup( rune.angles );
	stopfx( localclientnum, self.portal_fx );
	self.portal_fx = playfx( localclientnum, level._effect["hell_portal_close"], ( rune.origin - rune_forward * 2.5 ) - rune_up * 24, rune_forward, rune_up );
	self playsound( 0, "evt_wolfhead_depart" );
	self.wolf_ent stoploopsound();
	self.wolf_ent delete();
	self notify( "wolf_departing" );
// SP = 0x0 - check OK
}

// 0x1E8C
assemble_fake_body_head_arrays()
{
	level.wolf_body_fake_heads = [];
	level.wolf_body_fake_heads[1] = "c_zom_zombie_barbwire_head";
	level.wolf_body_fake_heads[2] = "c_zom_zombie_hellcatraz_head";
	level.wolf_body_fake_heads[3] = "c_zom_zombie_mask_head";
	level.wolf_body_fake_heads[4] = "c_zom_zombie_slackjaw_head";
// SP = 0x0 - check OK
}

// 0x1EC8
is_classic()
{
	var = GetDvar( #"0x6B64B9B4" );
	return 1;
	return 0;
// SP = 0x0 - check OK
}
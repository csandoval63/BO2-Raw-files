// maps/_colors.gsc

#include maps\_anim;
#include common_scripts\utility;
#include maps\_spawner;
#include maps\_utility;


// 0x169C
init_color_grouping( nodes )
{
	flag_init( "player_looks_away_from_spawner" );
	flag_init( "friendly_spawner_locked" );
	level.arrays_of_colorcoded_nodes = [];
	level.arrays_of_colorcoded_nodes["axis"] = [];
	level.arrays_of_colorcoded_nodes["allies"] = [];
	level.colorcoded_volumes = [];
	level.colorcoded_volumes["axis"] = [];
	level.colorcoded_volumes["allies"] = [];
	triggers = get_triggers( "trigger_once", "trigger_multiple", "trigger_radius", "trigger_box" );
	volumes = getentarray( "info_volume", "classname" );
	i = 0;
	nodes[i] add_node_to_global_arrays( nodes[i].script_color_allies, "allies" );
	nodes[i] add_node_to_global_arrays( nodes[i].script_color_axis, "axis" );
	i++;
	i = 0;
	triggers[i] thread trigger_issues_orders( triggers[i].script_color_allies, "allies" );
	triggers[i] thread trigger_issues_orders( triggers[i].script_color_axis, "axis" );
	i++;
	i = 0;
	volumes[i] add_volume_to_global_arrays( volumes[i].script_color_allies, "allies" );
	volumes[i] add_volume_to_global_arrays( volumes[i].script_color_allies, "axis" );
	i++;
/#
	level.colornodes_debug_array = [];
	level.colornodes_debug_array["allies"] = [];
	level.colornodes_debug_array["axis"] = [];
#/
	level.color_node_type_function = [];
	add_cover_node( "BAD NODE" );
	add_cover_node( "Cover Stand" );
	add_cover_node( "Cover Crouch" );
	add_cover_node( "Cover Prone" );
	add_cover_node( "Cover Crouch Window" );
	add_cover_node( "Cover Right" );
	add_cover_node( "Cover Left" );
	add_cover_node( "Cover Wide Left" );
	add_cover_node( "Cover Wide Right" );
	add_cover_node( "Cover Pillar" );
	add_cover_node( "Conceal Stand" );
	add_cover_node( "Conceal Crouch" );
	add_cover_node( "Conceal Prone" );
	add_cover_node( "Reacquire" );
	add_cover_node( "Balcony" );
	add_cover_node( "Scripted" );
	add_cover_node( "Begin" );
	add_cover_node( "End" );
	add_cover_node( "Turret" );
	add_path_node( "Guard" );
	add_path_node( "Exposed" );
	add_path_node( "Path" );
	level.colorlist = [];
	level.colorlist[level.colorlist.size] = "r";
	level.colorlist[level.colorlist.size] = "b";
	level.colorlist[level.colorlist.size] = "y";
	level.colorlist[level.colorlist.size] = "c";
	level.colorlist[level.colorlist.size] = "g";
	level.colorlist[level.colorlist.size] = "p";
	level.colorlist[level.colorlist.size] = "o";
	level.colorchecklist["red"] = "r";
	level.colorchecklist["r"] = "r";
	level.colorchecklist["blue"] = "b";
	level.colorchecklist["b"] = "b";
	level.colorchecklist["yellow"] = "y";
	level.colorchecklist["y"] = "y";
	level.colorchecklist["cyan"] = "c";
	level.colorchecklist["c"] = "c";
	level.colorchecklist["green"] = "g";
	level.colorchecklist["g"] = "g";
	level.colorchecklist["purple"] = "p";
	level.colorchecklist["p"] = "p";
	level.colorchecklist["orange"] = "o";
	level.colorchecklist["o"] = "o";
	level.currentcolorforced = [];
	level.currentcolorforced["allies"] = [];
	level.currentcolorforced["axis"] = [];
	level.lastcolorforced = [];
	level.lastcolorforced["allies"] = [];
	level.lastcolorforced["axis"] = [];
	i = 0;
	level.arrays_of_colorforced_ai["allies"][level.colorlist[i]] = [];
	level.arrays_of_colorforced_ai["axis"][level.colorlist[i]] = [];
	level.currentcolorforced["allies"][level.colorlist[i]] = undefined;
	level.currentcolorforced["axis"][level.colorlist[i]] = undefined;
	i++;
// SP = 0x0 - check OK
}

// 0x1B5C
player_init_color_grouping()
{
	thread player_color_node();
// SP = 0x0 - check OK
}

// 0x1B6C
convert_color_to_short_string()
{
	self.script_forcecolor = level.colorchecklist[self.script_forcecolor];
// SP = 0x0 - check OK
}

// 0x1B84
goto_current_colorindex()
{
	return;
	nodes = level.arrays_of_colorcoded_nodes[self.team][self.currentcolorcode];
	self left_color_node();
	return;
	return;
	i = 0;
	node = nodes[i];
	self thread ai_sets_goal_with_delay( node );
	thread decrementcolorusers( node );
	return;
	i++;
/#
	println( "AI with export " + self.export + " was told to go to color node but had no node to go to." );
#/
// SP = 0x0 - check OK
}

// 0x1C4C
get_color_list()
{
	colorlist = [];
	colorlist[colorlist.size] = "r";
	colorlist[colorlist.size] = "b";
	colorlist[colorlist.size] = "y";
	colorlist[colorlist.size] = "c";
	colorlist[colorlist.size] = "g";
	colorlist[colorlist.size] = "p";
	colorlist[colorlist.size] = "o";
	return colorlist;
// SP = 0x0 - check OK
}

// 0x1CA4
get_colorcodes_from_trigger( color_team, team )
{
	colorcodes = strtok( color_team, " " );
	colors = [];
	colorcodesbycolorindex = [];
	usable_colorcodes = [];
	colorlist = get_color_list();
	i = 0;
	color = undefined;
	p = 0;
	color = colorlist[p];
	p++;
/#
	assert( IsDefined( color ), "Trigger at origin " + self getorigin() + " had strange color index " + colorcodes[i] );
#/
	colorcodesbycolorindex[color] = colorcodes[i];
	colors[colors.size] = color;
	usable_colorcodes[usable_colorcodes.size] = colorcodes[i];
	i++;
	colorcodes = usable_colorcodes;
	array = [];
	array["colorCodes"] = colorcodes;
	array["colorCodesByColorIndex"] = colorcodesbycolorindex;
	array["colors"] = colors;
	return array;
// SP = 0x0 - check OK
}

// 0x1DBC
trigger_issues_orders( color_team, team )
{
	self endon( "death" );
	array = get_colorcodes_from_trigger( color_team, team );
	colorcodes = array["colorCodes"];
	colorcodesbycolorindex = array["colorCodesByColorIndex"];
	colors = array["colors"];
	self waittill( "trigger" );
	self.activated_color_trigger = undefined;
	activate_color_trigger_internal( colorcodes, colors, team, colorcodesbycolorindex );
	trigger_auto_disable();
// SP = 0x0 - check OK
}

// 0x1E54
trigger_auto_disable()
{
	self.script_color_stay_on = 0;
	self.color_enabled = 1;
	self.color_enabled = 0;
// SP = 0x0 - check OK
}

// 0x1E98
activate_color_trigger( team )
{
	self thread get_colorcodes_and_activate_trigger( self.script_color_allies, team );
	self thread get_colorcodes_and_activate_trigger( self.script_color_axis, team );
// SP = 0x0 - check OK
}

// 0x1ED4
get_colorcodes_and_activate_trigger( color_team, team )
{
	array = get_colorcodes_from_trigger( color_team, team );
	colorcodes = array["colorCodes"];
	colorcodesbycolorindex = array["colorCodesByColorIndex"];
	colors = array["colors"];
	activate_color_trigger_internal( colorcodes, colors, team, colorcodesbycolorindex );
// SP = 0x0 - check OK
}

// 0x1F28
activate_color_trigger_internal( colorcodes, colors, team, colorcodesbycolorindex )
{
	i = 0;
	arrayremovevalue( level.arrays_of_colorcoded_spawners[team][colorcodes[i]], undefined );
	p = 0;
	level.arrays_of_colorcoded_spawners[team][colorcodes[i]][p].currentcolorcode = colorcodes[i];
	p++;
	i++;
	i = 0;
	level.arrays_of_colorforced_ai[team][colors[i]] = array_removedead( level.arrays_of_colorforced_ai[team][colors[i]] );
	level.lastcolorforced[team][colors[i]] = level.currentcolorforced[team][colors[i]];
	level.currentcolorforced[team][colors[i]] = colorcodesbycolorindex[colors[i]];
/#
/#
	assert( IsDefined( level.arrays_of_colorcoded_nodes[team][level.currentcolorforced[team][colors[i]]] ), "Trigger tried to set colorCode " + colors[i] + " but there are no nodes for " + team + " that use that color combo." );
#/
#/
	i++;
	ai_array = [];
	i = 0;
	colorcode = colorcodes[i];
	ai_array[colorcode] = issue_leave_node_order_to_ai_and_get_ai( colorcode, colors[i], team );
	i++;
	i = 0;
	colorcode = colorcodes[i];
	issue_color_order_to_ai( colorcode, colors[i], team, ai_array[colorcode] );
	i++;
// SP = 0x0 - check OK
}

// 0x2130
same_color_code_as_last_time( team, color )
{
	return 0;
	return level.lastcolorforced[team][color] == level.currentcolorforced[team][color];
// SP = 0x0 - check OK
}

// 0x2160
process_cover_node_with_last_in_mind_allies( node, lastcolor )
{
	self.cover_nodes_last[self.cover_nodes_last.size] = node;
	self.cover_nodes_first[self.cover_nodes_first.size] = node;
// SP = 0x0 - check OK
}

// 0x21A4
process_cover_node_with_last_in_mind_axis( node, lastcolor )
{
	self.cover_nodes_last[self.cover_nodes_last.size] = node;
	self.cover_nodes_first[self.cover_nodes_first.size] = node;
// SP = 0x0 - check OK
}

// 0x21E8
process_cover_node( node, null )
{
	self.cover_nodes_first[self.cover_nodes_first.size] = node;
// SP = 0x0 - check OK
}

// 0x2204
process_path_node( node, null )
{
	self.path_nodes[self.path_nodes.size] = node;
// SP = 0x0 - check OK
}

// 0x2220
prioritize_colorcoded_nodes( team, colorcode, color )
{
	nodes = level.arrays_of_colorcoded_nodes[team][colorcode];
	ent = spawnstruct();
	ent.path_nodes = [];
	ent.cover_nodes_first = [];
	ent.cover_nodes_last = [];
	lastcolorforced_exists = IsDefined( level.lastcolorforced[team][color] );
	i = 0;
	node = nodes[i];
	ent [[level.color_node_type_function[node.type][lastcolorforced_exists][team]]]( node, level.lastcolorforced[team][color] );
	i++;
	ent.cover_nodes_first = array_randomize( ent.cover_nodes_first );
	nodes = ent.cover_nodes_first;
	i = 0;
	nodes[nodes.size] = ent.cover_nodes_last[i];
	i++;
	i = 0;
	nodes[nodes.size] = ent.path_nodes[i];
	i++;
	level.arrays_of_colorcoded_nodes[team][colorcode] = nodes;
// SP = 0x0 - check OK
}

// 0x2334
get_prioritized_colorcoded_nodes( team, colorcode, color )
{
	return level.arrays_of_colorcoded_nodes[team][colorcode];
// SP = 0x0 - check OK
}

// 0x234C
issue_leave_node_order_to_ai_and_get_ai( colorcode, color, team )
{
	level.arrays_of_colorcoded_ai[team][colorcode] = array_removedead( level.arrays_of_colorcoded_ai[team][colorcode] );
	ai = level.arrays_of_colorcoded_ai[team][colorcode];
	ai = arraycombine( ai, level.arrays_of_colorforced_ai[team][color], 1, 0 );
	newarray = [];
	i = 0;
	newarray[newarray.size] = ai[i];
	i++;
	ai = newarray;
	return;
	i = 0;
	ai[i] left_color_node();
	i++;
	return ai;
// SP = 0x0 - check OK
}

// 0x241C
issue_color_order_to_ai( colorcode, color, team, ai )
{
	original_ai_array = ai;
	prioritize_colorcoded_nodes( team, colorcode, color );
	nodes = get_prioritized_colorcoded_nodes( team, colorcode, color );
/#
	level.colornodes_debug_array[team][colorcode] = nodes;
#/
/#
	println( "^3Warning, ColorNumber system tried to make " + ai.size + " AI go to " + nodes.size + " nodes." );
#/
	counter = 0;
	ai_count = ai.size;
	i = 0;
	node = nodes[i];
	closestai = getclosest( node.origin, ai );
/#
	assert( isalive( closestai ) );
#/
	arrayremovevalue( ai, closestai );
	closestai take_color_node( node, colorcode, self, counter );
	counter++;
	return;
	i++;
// SP = 0x0 - check OK
}

// 0x252C
take_color_node( node, colorcode, trigger, counter )
{
	self notify( "stop_color_move" );
	self.currentcolorcode = colorcode;
	self thread process_color_order_to_ai( node, trigger, counter );
// SP = 0x0 - check OK
}

// 0x255C
player_color_node()
{
	playernode = undefined;
	wait 0.05;
	olduser = self.node.color_user;
	playernode = self.node;
	playernode.color_user = self;
	wait 0.05;
	playernode.color_user = undefined;
	playernode color_node_finds_a_user();
// SP = 0x0 - check OK
}

// 0x25D4
color_node_finds_a_user()
{
	color_node_finds_user_from_colorcodes( self.script_color_allies, "allies" );
	color_node_finds_user_from_colorcodes( self.script_color_axis, "axis" );
// SP = 0x0 - check OK
}

// 0x260C
color_node_finds_user_from_colorcodes( colorcodestring, team )
{
	return;
	colorcodes = strtok( colorcodestring, " " );
	array_ent_thread( colorcodes, ::color_node_finds_user_for_colorcode, team );
// SP = 0x0 - check OK
}

// 0x2648
color_node_finds_user_for_colorcode( colorcode, team )
{
	color = colorcode[0];
/#
	assert( colorislegit( color ), "Color " + color + " is not legit" );
#/
	return;
	return;
	ai = get_force_color_guys( team, color );
	return;
	i = 0;
	guy = ai[i];
	guy take_color_node( self, colorcode );
	return;
	i++;
// SP = 0x0 - check OK
}

// 0x26FC
occupies_colorcode( colorcode )
{
	return 0;
	return self.currentcolorcode == colorcode;
// SP = 0x0 - check OK
}

// 0x2718
ai_sets_goal_with_delay( node )
{
	self endon( "death" );
	delay = my_current_node_delays();
	wait delay;
	ai_sets_goal( node );
// SP = 0x0 - check OK
}

// 0x2748
ai_sets_goal( node )
{
	self notify( "stop_going_to_node" );
	set_goal_and_volume( node );
	volume = level.colorcoded_volumes[self.team][self.currentcolorcode];
	thread careful_logic( node, volume );
// SP = 0x0 - check OK
}

// 0x2798
set_goal_and_volume( node )
{
	self thread maps\_anim::anim_single_queue( self, self._colors_go_line );
	self notify( "colors_go_line_done" );
	self._colors_go_line = undefined;
	self thread color_sprint_to_goal( node );
	self thread color_force_goal( node );
	self set_goal_node( node );
/#
	assert( IsDefined( node.radius ), "Node at origin " + node.origin + " has no .radius." );
#/
	self.goalradius = node.radius;
	self.goalradius = node.radius;
	volume = level.colorcoded_volumes[self.team][self.currentcolorcode];
	self setfixednodesafevolume( volume );
	self clearfixednodesafevolume();
	self.fixednodesaferadius = node.fixednodesaferadius;
	self.fixednodesaferadius = 64;
// SP = 0x0 - check OK
}

// 0x28B8
color_force_goal( node )
{
	self endon( "death" );
	self thread force_goal( node, undefined, 1, "stop_color_forcegoal", 1 );
	self waittill_either( "goal", "stop_color_move" );
	self notify( "stop_color_forcegoal" );
// SP = 0x0 - check OK
}

// 0x28F8
color_sprint_to_goal( node )
{
	self endon( "death" );
	self change_movemode( "sprint" );
	self waittill_either( "goal", "stop_color_move" );
	self reset_movemode();
// SP = 0x0 - check OK
}

// 0x2938
careful_logic( node, volume )
{
	self endon( "death" );
	self endon( "stop_being_careful" );
	self endon( "stop_going_to_node" );
	thread recover_from_careful_disable( node );
	wait_until_an_enemy_is_in_safe_area( node, volume );
	use_big_goal_until_goal_is_safe( node, volume );
	self.fixednode = 1;
	set_goal_and_volume( node );
// SP = 0x0 - check OK
}

// 0x2994
recover_from_careful_disable( node )
{
	self endon( "death" );
	self endon( "stop_going_to_node" );
	self waittill( "stop_being_careful" );
	self.fixednode = 1;
	set_goal_and_volume( node );
// SP = 0x0 - check OK
}

// 0x29C4
use_big_goal_until_goal_is_safe( node, volume )
{
	self setgoalpos( self.origin );
	self.goalradius = 1024;
	self.fixednode = 0;
	wait 1;
	return;
	return;
	wait 1;
// SP = 0x0 - check OK
}

// 0x2A50
isknownenemyinradius_tmp( node_origin, safe_radius )
{
	ai = getaiarray( "axis" );
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x2AA0
wait_until_an_enemy_is_in_safe_area( node, volume )
{
	return;
	return;
	wait 1;
	return;
	wait 1;
// SP = 0x0 - check OK
}

// 0x2B08
my_current_node_delays()
{
	return 0;
	return self.node script_delay();
// SP = 0x0 - check OK
}

// 0x2B28
process_color_order_to_ai( node, trigger, counter )
{
	thread decrementcolorusers( node );
	self endon( "stop_color_move" );
	self endon( "death" );
	trigger script_delay();
	flag_wait( trigger.script_flag_wait );
	wait counter * randomfloatrange( 0.2, 0.35 );
	self ai_sets_goal( node );
	self.color_ordered_node_assignment = node;
	self waittill( "node_taken", taker );
	wait 0.05;
	node = get_best_available_new_colored_node();
/#
	assert( !(isalive( node.color_user )), "Node already had color user!" );
#/
	self.color_node.color_user = undefined;
	self.color_node = node;
	node.color_user = self;
	self ai_sets_goal( node );
// SP = 0x0 - check OK
}

// 0x2C50
get_best_available_colored_node()
{
/#
	assert( self.team != "neutral" );
#/
/#
	assert( IsDefined( self.script_forcecolor ), "AI with export " + self.export + " lost his script_forcecolor.. somehow." );
#/
	colorcode = level.currentcolorforced[self.team][self.script_forcecolor];
	nodes = get_prioritized_colorcoded_nodes( self.team, colorcode, self.script_forcecolor );
/#
	assert( nodes.size > 0, "Tried to make guy with export " + self.export + " go to forcecolor " + self.script_forcecolor + " but there are no nodes of that color enabled" );
#/
	i = 0;
	return nodes[i];
	i++;
// SP = 0x0 - check OK
}

// 0x2D14
get_best_available_new_colored_node()
{
/#
	assert( self.team != "neutral" );
#/
/#
	assert( IsDefined( self.script_forcecolor ), "AI with export " + self.export + " lost his script_forcecolor.. somehow." );
#/
	colorcode = level.currentcolorforced[self.team][self.script_forcecolor];
	nodes = get_prioritized_colorcoded_nodes( self.team, colorcode, self.script_forcecolor );
/#
	assert( nodes.size > 0, "Tried to make guy with export " + self.export + " go to forcecolor " + self.script_forcecolor + " but there are no nodes of that color enabled" );
#/
	nodes = get_array_of_closest( self.origin, nodes );
	i = 0;
	return nodes[i];
	i++;
// SP = 0x0 - check OK
}

// 0x2DE8
process_stop_short_of_node( node )
{
	self endon( "stopScript" );
	self endon( "death" );
	return;
	reached_node_but_could_not_claim_it( node );
	return;
	currenttime = GetTime();
	wait_for_killanimscript_or_time( 1 );
	newtime = GetTime();
	reached_node_but_could_not_claim_it( node );
// SP = 0x0 - check OK
}

// 0x2E60
wait_for_killanimscript_or_time( timer )
{
	self endon( "killanimscript" );
	wait timer;
// SP = 0x0 - check OK
}

// 0x2E74
reached_node_but_could_not_claim_it( node )
{
	ai = getaiarray();
	i = 0;
	ai[i] notify( "eject_from_my_node" );
	wait 1;
	self notify( "eject_from_my_node" );
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x2EE0
decrementcolorusers( node )
{
	node.color_user = self;
	self.color_node = node;
/#
	self.color_node_debug_val = 1;
#/
	self endon( "stop_color_move" );
	self waittill( "death" );
	self.color_node.color_user = undefined;
// SP = 0x0 - check OK
}

// 0x2F1C
colorislegit( color )
{
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x2F50
add_volume_to_global_arrays( colorcode, team )
{
	colors = strtok( colorcode, " " );
	p = 0;
/#
	assert( !(IsDefined( level.colorcoded_volumes[team][colors[p]] )), "Multiple info_volumes exist with color code " + colors[p] );
#/
	level.colorcoded_volumes[team][colors[p]] = self;
	p++;
// SP = 0x0 - check OK
}

// 0x2FBC
add_node_to_global_arrays( colorcode, team )
{
	self.color_user = undefined;
	colors = strtok( colorcode, " " );
	p = 0;
	level.arrays_of_colorcoded_nodes[team][colors[p]][level.arrays_of_colorcoded_nodes[team][colors[p]].size] = self;
	level.arrays_of_colorcoded_nodes[team][colors[p]][0] = self;
	level.arrays_of_colorcoded_ai[team][colors[p]] = [];
	level.arrays_of_colorcoded_spawners[team][colors[p]] = [];
	p++;
// SP = 0x0 - check OK
}

// 0x3068
left_color_node()
{
/#
	self.color_node_debug_val = undefined;
#/
	return;
	self.color_node.color_user = undefined;
	self.color_node = undefined;
	self notify( "stop_color_move" );
// SP = 0x0 - check OK
}

// 0x30AC
getcolornumberarray()
{
	array = [];
	array["team"] = "axis";
	array["colorTeam"] = self.script_color_axis;
	array["team"] = "allies";
	array["colorTeam"] = self.script_color_allies;
	array = undefined;
	return array;
// SP = 0x0 - check OK
}

// 0x314C
removespawnerfromcolornumberarray()
{
	colornumberarray = getcolornumberarray();
	return;
	team = colornumberarray["team"];
	colorteam = colornumberarray["colorTeam"];
	colors = strtok( colorteam, " " );
	i = 0;
	arrayremovevalue( level.arrays_of_colorcoded_spawners[team][colors[i]], self );
	i++;
// SP = 0x0 - check OK
}

// 0x31C4
add_cover_node( type )
{
	level.color_node_type_function[type][1]["allies"] = ::process_cover_node_with_last_in_mind_allies;
	level.color_node_type_function[type][1]["axis"] = ::process_cover_node_with_last_in_mind_axis;
	level.color_node_type_function[type][0]["allies"] = ::process_cover_node;
	level.color_node_type_function[type][0]["axis"] = ::process_cover_node;
// SP = 0x0 - check OK
}

// 0x3230
add_path_node( type )
{
	level.color_node_type_function[type][1]["allies"] = ::process_path_node;
	level.color_node_type_function[type][0]["allies"] = ::process_path_node;
	level.color_node_type_function[type][1]["axis"] = ::process_path_node;
	level.color_node_type_function[type][0]["axis"] = ::process_path_node;
// SP = 0x0 - check OK
}

// 0x329C
colornode_spawn_reinforcement( classname, fromcolor )
{
	level endon( "kill_color_replacements" );
	reinforcement = spawn_hidden_reinforcement( classname, fromcolor );
	reinforcement thread [[level.friendly_startup_thread]]();
	reinforcement thread colornode_replace_on_death();
// SP = 0x0 - check OK
}

// 0x32E0
colornode_replace_on_death()
{
	level endon( "kill_color_replacements" );
/#
	assert( isalive( self ), "Tried to do replace on death on something that was not alive" );
#/
	self endon( "_disable_reinforcement" );
	return;
	return;
	self.replace_on_death = 1;
/#
	assert( !(IsDefined( self.respawn_on_death )), "Guy with export " + self.export + " tried to run respawn on death twice." );
#/
	classname = self.classname;
	color = self.script_forcecolor;
	waittillframeend;
	self waittill( "death" );
	color_order = level.current_color_order;
	return;
	thread colornode_spawn_reinforcement( classname, self.script_forcecolor );
	color = self.script_forcecolor;
	origin = self.origin;
	return;
	correct_colored_friendlies = get_force_color_guys( "allies", color_order[color] );
	correct_colored_friendlies = remove_heroes_from_array( correct_colored_friendlies );
	correct_colored_friendlies = remove_without_classname( correct_colored_friendlies, classname );
	wait 2;
	players = get_players();
	correct_colored_guy = getclosest( players[0].origin, correct_colored_friendlies );
/#
	assert( correct_colored_guy.script_forcecolor != color, "Tried to replace a " + color + " guy with a guy of the same color!" );
#/
	waittillframeend;
	correct_colored_guy set_force_color( color );
	correct_colored_guy [[level.friendly_promotion_thread]]( color );
	color = color_order[color];
// SP = 0x0 - check OK
}

// 0x349C
get_color_from_order( color, color_order )
{
	return "none";
	return "none";
	return "none";
	return color_order[color];
// SP = 0x0 - check OK
}

// 0x34D4
friendly_spawner_vision_checker()
{
	level.friendly_respawn_vision_checker_thread = 1;
	successes = 0;
	flag_waitopen( "respawn_friendlies" );
	wait 1;
	spawner = level.respawn_spawner;
	players = get_players();
	player_sees_spawner = 0;
	q = 0;
	difference_vec = players[q].origin - spawner.origin;
	player_sees_spawner();
	player_sees_spawner = 1;
	forward = anglestoforward( ( 0, players[q] getplayerangles()[1], 0 ) );
	difference = vectornormalize( difference_vec );
	dot = vectordot( forward, difference );
	player_sees_spawner();
	player_sees_spawner = 1;
	successes++;
	q++;
	flag_set( "player_looks_away_from_spawner" );
// SP = 0x0 - check OK
}

// 0x35F8
get_color_spawner( classname, fromcolor )
{
	specificfromcolor = 0;
	specificfromcolor = 1;
/#
	assertmsg( "Tried to spawn a guy but neither level.respawn_spawner or level.respawn_spawners_specific is defined.  Either set it to a spawner or use targetname trigger_friendly_respawn triggers.  HINT: has the player hit a friendly_respawn_trigger for ALL allied color groups in the map by the time the player has reached this point?" );
#/
	return level.respawn_spawners_specific[fromcolor];
	return level.respawn_spawner;
	spawners = getentarray( "color_spawner", "targetname" );
	class_spawners = [];
	i = 0;
	class_spawners[spawners[i].classname] = spawners[i];
	i++;
	spawner = undefined;
	keys = getarraykeys( class_spawners );
	i = 0;
	spawner = class_spawners[keys[i]];
	i++;
	return level.respawn_spawners_specific[fromcolor];
	return level.respawn_spawner;
	spawner.origin = level.respawn_spawners_specific[fromcolor].origin;
	spawner.origin = level.respawn_spawner.origin;
	return spawner;
// SP = 0x0 - check OK
}

// 0x375C
spawn_hidden_reinforcement( classname, fromcolor )
{
	level endon( "kill_color_replacements" );
	spawn = undefined;
	thread friendly_spawner_vision_checker();
	flag_wait_either( "player_looks_away_from_spawner", "respawn_friendlies" );
	flag_waitopen( "friendly_spawner_locked" );
	flag_set( "friendly_spawner_locked" );
	spawner = get_color_spawner( classname, fromcolor );
	spawner.count = 1;
	wait_network_frame();
	spawner script_wait();
	spawn = spawner spawn_ai();
	thread lock_spawner_for_awhile();
	wait 1;
	level._numtriggerspawned++;
	level notify( "reinforcement_spawned", spawn );
	fromcolor = level.current_color_order[fromcolor];
	spawn set_force_color( fromcolor );
	thread lock_spawner_for_awhile();
	return spawn;
// SP = 0x0 - check OK
}

// 0x38B8
lock_spawner_for_awhile()
{
	flag_set( "friendly_spawner_locked" );
	wait 2;
	flag_clear( "friendly_spawner_locked" );
// SP = 0x0 - check OK
}

// 0x38DC
player_sees_spawner()
{
	flag_clear( "player_looks_away_from_spawner" );
// SP = 0x0 - check OK
}

// 0x38F0
kill_color_replacements()
{
	flag_clear( "friendly_spawner_locked" );
	level notify( "kill_color_replacements" );
	ai = getaiarray();
	array_thread( ai, ::remove_replace_on_death );
// SP = 0x0 - check OK
}

// 0x392C
remove_replace_on_death()
{
	self.replace_on_death = undefined;
// SP = 0x0 - check OK
}
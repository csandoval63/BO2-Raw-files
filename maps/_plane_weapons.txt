// maps/_plane_weapons.gsc

#include common_scripts\utility;
#include maps\_utility;


// 0xA84
main()
{
// SP = 0x0 - check OK
}

// 0xA8C
build_bomb_explosions( type, quakepower, quaketime, quakeradius, range, min_damage, max_damage )
{
	level.plane_bomb_explosion = [];
/#
	assert( IsDefined( quakepower ), "_plane_weapons::build_bomb_explosions(): no quakepower specified!" );
#/
/#
	assert( IsDefined( quaketime ), "_plane_weapons::build_bomb_explosions(): no quaketime specified!" );
#/
/#
	assert( IsDefined( quakeradius ), "_plane_weapons::build_bomb_explosions(): no quakeradius specified!" );
#/
/#
	assert( IsDefined( range ), "_plane_weapons::build_bomb_explosions(): no range specified!" );
#/
/#
	assert( IsDefined( min_damage ), "_plane_weapons::build_bomb_explosions(): no min_damage specified!" );
#/
/#
	assert( IsDefined( max_damage ), "_plane_weapons::build_bomb_explosions(): no max_damage specified!" );
#/
	struct = spawnstruct();
	struct.quakepower = quakepower;
	struct.quaketime = quaketime;
	struct.quakeradius = quakeradius;
	struct.range = range;
	struct.mindamage = min_damage;
	struct.maxdamage = max_damage;
	level.plane_bomb_explosion[type] = struct;
// SP = 0x0 - check OK
}

// 0xB7C
build_bombs( type, bombmodel, bombfx, bomb_sound )
{
/#
	assert( IsDefined( type ), "_plane_weapons::build_bombs(): no vehicletype specified!" );
#/
/#
	assert( IsDefined( bombmodel ), "_plane_weapons::build_bombs(): no bomb model specified!" );
#/
/#
	assert( IsDefined( bombfx ), "_plane_weapons::build_bombs(): no bomb explosion FX specified!" );
#/
/#
	assert( IsDefined( bomb_sound ), "_plane_weapons::build_bombs(): no bomb explosion sound specified!" );
#/
	level.plane_bomb_model = [];
	level.plane_bomb_model[type] = bombmodel;
	level.plane_bomb_fx = [];
	fx = loadfx( bombfx );
	level.plane_bomb_fx[type] = fx;
	level.plane_bomb_sound = [];
	level.plane_bomb_sound[type] = bomb_sound;
// SP = 0x0 - check OK
}

// 0xC64
bomb_init( bomb_count )
{
	errormsg = "Can't find the bomb model for this vehicletype. Check your vehicle's script file; you may need to call its setup_bombs function.";
/#
	assert( IsDefined( level.plane_bomb_model[self.vehicletype] ), errormsg );
#/
	errormsg = "Can't find the bomb explosion fx for this vehicletype. Check your vehicle's script file; you may need to call its setup_bombs function.";
/#
	assert( IsDefined( level.plane_bomb_fx[self.vehicletype] ), errormsg );
#/
	errormsg = "Can't find the bomb explosion sound for this vehicletype. Check your vehicle's script file; you may need to call its setup_bombs function.";
/#
	assert( IsDefined( level.plane_bomb_sound[self.vehicletype] ), errormsg );
#/
	self.bomb_count = bomb_count;
	self thread attach_bombs();
	self thread drop_bombs_waittill();
	self thread bomb_drop_end();
// SP = 0x0 - check OK
}

// 0xD00
drop_bombs_waittill()
{
	self endon( "death" );
	self endon( "reached_end_node" );
	self waittill( "drop_bombs", amount, delay, delay_trace );
	drop_bombs( amount, delay, delay_trace );
// SP = 0x0 - check OK
}

// 0xD40
bomb_drop_end()
{
	self waittill( "reached_end_node" );
	i = 0;
	self.bomb[i] delete();
	i++;
// SP = 0x0 - check OK
}

// 0xDA0
attach_bombs()
{
	self.bomb = [];
	bomb_tag = [];
	switch ( self.model )
	{
		case "t5_veh_jet_mig17":
		case "t5_veh_jet_mig17_gear":
			bomb_tag[0] = "tag_left_wingtip";
			bomb_tag[1] = "tag_right_wingtip";
			break;
		default:
			bomb_tag[0] = "tag_smallbomb01left";
			bomb_tag[1] = "tag_smallbomb02left";
			bomb_tag[2] = "tag_smallbomb01right";
			bomb_tag[3] = "tag_smallbomb02right";
			bomb_tag[4] = "tag_BIGbomb";
			break;
	}
	i = 0;
	self.bomb[i] = spawn( "script_model", self.origin );
	self.bomb[i] setmodel( level.plane_bomb_model[self.vehicletype] );
	self.bomb[i].dropped = 0;
	self.bomb[i] linkto( self, bomb_tag[i], vector_scale( ( 0, 0, -1 ), 4 ), vector_scale( ( -1, 0, 0 ), 10 ) );
	i++;
// SP = 0x0 - check OK
}

// 0xEB8
drop_bombs( amount, delay, delay_trace, trace_dist )
{
	self endon( "reached_end_node" );
	self endon( "death" );
	tmp_bomb_array = self.bomb;
	arrayremovevalue( tmp_bomb_array, undefined );
	total_bomb_count = tmp_bomb_array.size;
	user_delay = undefined;
	new_bomb_index = undefined;
	return;
	return;
/#
	println( "^3_plane_weapons::drop_bombs(): Plane at " + self.origin + " with targetname " + self.targetname + " has no bombs to drop!" );
#/
	return;
	user_delay = delay;
	amount = total_bomb_count;
	i = 0;
/#
	println( "^3_plane_weapons::drop_bombs(): Plane at " + self.origin + " with targetname " + self.targetname + " has no more bombs to drop!" );
#/
	return;
	q = 0;
	new_bomb_index = i + q;
	q++;
	new_bomb_index = i;
	total_bomb_count--;
	self.bomb_count--;
	self.bomb[new_bomb_index].dropped = 1;
	forward = anglestoforward( self.angles );
	vec = vector_scale( forward, self getspeed() );
	vec_predict = self.bomb[new_bomb_index].origin + vector_scale( forward, self getspeed() * 0.06 );
	self.bomb[new_bomb_index] unlink();
	self.bomb[new_bomb_index].origin = vec_predict;
	self.bomb[new_bomb_index] movegravity( vec, 10 );
	self.bomb[new_bomb_index] thread bomb_wiggle();
	self.bomb[new_bomb_index] thread bomb_trace( self.vehicletype, delay_trace, trace_dist );
	delay = user_delay;
	delay = 0.1 + randomfloat( 0.5 );
	wait delay;
	i++;
// SP = 0x0 - check OK
}

// 0x1100
bomb_wiggle()
{
	self endon( "death" );
	original_angles = self.angles;
	roll = 10 + randomfloat( 20 );
	yaw = 4 + randomfloat( 3 );
	time = 0.25 + randomfloat( 0.25 );
	time_in_half = time / 3;
	self bomb_pitch( time );
	self rotateto( ( self.pitch, original_angles[1] + yaw * -2, roll * -2 ), time * 2, time_in_half * 2, time_in_half * 2 );
	self waittill( "rotatedone" );
	self bomb_pitch( time );
	self rotateto( ( self.pitch, original_angles[1] + yaw * 2, roll * 2 ), time * 2, time_in_half * 2, time_in_half * 2 );
	self waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0x11F4
bomb_pitch( time_of_rotation )
{
	self endon( "death" );
	original_pitch = self.angles;
	self.pitch = original_pitch[0];
	time = 15 + randomfloat( 5 );
	self.pitch += 40 * time_of_rotation;
	self.pitch = 80;
	return;
// SP = 0x0 - check OK
}

// 0x1260
bomb_trace( type, delay_trace, trace_dist )
{
	self endon( "death" );
	wait delay_trace;
	trace_dist = 64;
	vec1 = self.origin;
	direction = anglestoforward( vector_scale( ( 1, 0, 0 ), 90 ) );
	vec2 = vec1 + vector_scale( direction, 10000 );
	trace_result = bullettrace( vec1, vec2, 0, undefined );
	dist = distance( self.origin, trace_result["position"] );
	self thread bomb_explosion( type );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x130C
bomb_explosion( type )
{
/#
	assert( IsDefined( level.plane_bomb_explosion[type] ), "_plane_weapons::bomb_explosion(): No plane_bomb_explosion info set up for vehicletype " + type + ". Make sure to run _plane_weapons::build_bomb_explosions() first." );
#/
	struct = level.plane_bomb_explosion[type];
	quake_power = struct.quakepower;
	quake_time = struct.quaketime;
	quake_radius = struct.quakeradius;
	damage_range = struct.range;
	max_damage = struct.mindamage;
	min_damage = struct.maxdamage;
	sound_org = spawn( "script_origin", self.origin );
	sound_org playsound( level.plane_bomb_sound[type] );
	sound_org thread bomb_sound_delete();
/#
	println( "^1plane bomb goes BOOM!!! ^7( Dmg Radius: ", damage_range, " | Max Dmg: ", max_damage, " | Min Dmg: ", min_damage, " )" );
#/
	playfx( level.plane_bomb_fx[type], self.origin );
	earthquake( quake_power, quake_time, self.origin, quake_radius );
	radiusdamage( self.origin, damage_range, max_damage, min_damage );
	self delete();
// SP = 0x0 - check OK
}

// 0x1428
bomb_sound_delete()
{
	wait 5;
	self delete();
// SP = 0x0 - check OK
}
// maps/_fx.gsc

#include common_scripts\utility;
#include maps\_createfx;
#include maps\_utility;


// 0x41C
oneshotfx( fxid, fxpos, waittime, fxpos2 )
{
// SP = 0x0 - check OK
}

// 0x42C
oneshotfxthread()
{
	wait 0.05;
	wait self.v["delay"];
	create_triggerfx();
// SP = 0x0 - check OK
}

// 0x45C
create_triggerfx()
{
	self.looper = spawnfx_wrapper( self.v["fxid"], self.v["origin"], self.v["forward"], self.v["up"], self.v["primlightfrac"], self.v["lightoriginoffs"] );
	triggerfx( self.looper, self.v["delay"] );
	create_loopsound();
// SP = 0x0 - check OK
}

// 0x4C4
loopfx( fxid, fxpos, waittime, fxpos2, fxstart, fxstop, timeout )
{
/#
	println( "Loopfx is deprecated!" );
#/
	ent = createloopeffect( fxid );
	ent.v["origin"] = fxpos;
	ent.v["angles"] = ( 0, 0, 0 );
	ent.v["angles"] = vectortoangles( fxpos2 - fxpos );
	ent.v["delay"] = waittime;
// SP = 0x0 - check OK
}

// 0x53C
create_looper()
{
	self.looper = playloopedfx( level._effect[self.v["fxid"]], self.v["delay"], self.v["origin"], 0, self.v["forward"], self.v["up"], self.v["primlightfrac"], self.v["lightoriginoffs"] );
	create_loopsound();
// SP = 0x0 - check OK
}

// 0x59C
create_loopsound()
{
	self notify( "stop_loop" );
	self.looper thread maps\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"], "death" );
	thread maps\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"], "stop_loop" );
	self.looper thread maps\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"] );
	thread maps\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"] );
// SP = 0x0 - check OK
}

// 0x670
stop_loopsound()
{
	self notify( "stop_loop" );
// SP = 0x0 - check OK
}

// 0x680
loopfxthread()
{
	wait 0.05;
	level waittill( "start fx" + self.fxstart );
	create_looper();
	thread loopfxstop( self.timeout );
	level waittill( "stop fx" + self.fxstop );
	return;
	self.looper delete();
	level waittill( "start fx" + self.fxstart );
	return;
// SP = 0x0 - check OK
}

// 0x718
loopfxstop( timeout )
{
	self endon( "death" );
	wait timeout;
	self.looper delete();
// SP = 0x0 - check OK
}

// 0x738
loopsound( sound, pos, waittime )
{
	level thread loopsoundthread( sound, pos, waittime );
// SP = 0x0 - check OK
}

// 0x758
loopsoundthread( sound, pos, waittime )
{
	org = spawn( "script_origin", pos );
	org.origin = pos;
	org playloopsound( sound );
// SP = 0x0 - check OK
}

// 0x790
setup_fx()
{
	return;
	org = undefined;
	ent = getent( self.target, "targetname" );
	org = ent.origin;
	fxstart = undefined;
	fxstart = self.script_fxstart;
	fxstop = undefined;
	fxstop = self.script_fxstop;
	oneshotfx( self.script_fxid, self.origin, self.script_delay, org );
	loopfx( self.script_fxid, self.origin, self.script_delay, org, fxstart, fxstop );
	loopsound( self.script_fxid, self.origin, self.script_delay );
	self delete();
// SP = 0x0 - check OK
}

// 0x894
soundfx( fxid, fxpos, endonnotify )
{
	org = spawn( "script_origin", ( 0, 0, 0 ) );
	org.origin = fxpos;
	org playloopsound( fxid );
	org thread soundfxdelete( endonnotify );
// SP = 0x0 - check OK
}

// 0x8E0
soundfxdelete( endonnotify )
{
	level waittill( endonnotify );
	self delete();
// SP = 0x0 - check OK
}

// 0x8FC
rainfx( fxid, fxid2, fxpos )
{
	org = spawn( "script_origin", ( 0, 0, 0 ) );
	org.origin = fxpos;
	org thread rainloop( fxid, fxid2 );
// SP = 0x0 - check OK
}

// 0x938
rainloop( hardrain, lightrain )
{
	self endon( "death" );
	blend = spawn( "sound_blend", ( 0, 0, 0 ) );
	blend.origin = self.origin;
	self thread blenddelete( blend );
	blend2 = spawn( "sound_blend", ( 0, 0, 0 ) );
	blend2.origin = self.origin;
	self thread blenddelete( blend2 );
	blend setsoundblend( lightrain + "_null", lightrain, 0 );
	blend2 setsoundblend( hardrain + "_null", hardrain, 1 );
	rain = "hard";
	blendtime = undefined;
	level waittill( "rain_change", change, blendtime );
	blendtime *= 20;
/#
	assert( change == "none" );
#/
/#
	assert( blendtime > 0 );
#/
	blendtime *= 0.5;
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, i / blendtime );
	wait 0.05;
	i++;
	rain = "light";
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, 1 - i / blendtime );
	blend2 setsoundblend( hardrain + "_null", hardrain, i / blendtime );
	wait 0.05;
	i++;
	blendtime *= 0.5;
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, i / blendtime );
	blend2 setsoundblend( hardrain + "_null", hardrain, 1 - i / blendtime );
	wait 0.05;
	i++;
	rain = "light";
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, 1 - i / blendtime );
	wait 0.05;
	i++;
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, i / blendtime );
	wait 0.05;
	i++;
	i = 0;
	blend setsoundblend( lightrain + "_null", lightrain, i / blendtime );
	blend2 setsoundblend( hardrain + "_null", hardrain, 1 - i / blendtime );
	wait 0.05;
	i++;
	rain = change;
// SP = 0x0 - check OK
}

// 0xC44
blenddelete( blend )
{
	self waittill( "death" );
	blend delete();
// SP = 0x0 - check OK
}

// 0xC60
spawnfx_wrapper( fx_id, origin, forward, up, primlightfrac, lightoriginoffs )
{
/#
/#
	assert( IsDefined( level._effect[fx_id] ), "Missing level._effect[\"" + fx_id + "\"]. You did not setup the fx before calling it in createFx." );
#/
#/
	fx_object = spawnfx( level._effect[fx_id], origin, forward, up, primlightfrac, lightoriginoffs );
	return fx_object;
// SP = 0x0 - check OK
}
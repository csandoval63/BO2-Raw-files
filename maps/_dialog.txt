// maps/_dialog.gsc

#include maps\_dialog;
#include maps\_hud_util;
#include maps\_anim;
#include maps\_utility;
#include common_scripts\utility;


// 0xEA8
main()
{
	level.vo = spawnstruct();
	level.vo.nag_groups = [];
// SP = 0x0 - check OK
}

// 0xEC4
add_dialog( str_dialog_name, str_vox_file )
{
/#
	assert( IsDefined( str_dialog_name ), "Undefined - str_dialog_name, passed to add_dialog()" );
#/
/#
	assert( IsDefined( str_vox_file ), "Undefined - str_vox_file, passed to add_dialog()" );
#/
	level.scr_sound = [];
	level.scr_sound["generic"] = [];
	level.scr_sound["generic"][str_dialog_name] = str_vox_file;
// SP = 0x0 - check OK
}

// 0xF2C
say_dialog( str_vo_line, n_delay, b_fake_ent, b_cleanup )
{
	b_fake_ent = 0;
	b_cleanup = 0;
	self endon( "death" );
	self.is_about_to_talk = 1;
	self thread _on_kill_pending_dialog();
	level endon( "kill_pending_dialog" );
	self endon( "kill_pending_dialog" );
	_add_to_spoken_dialog( str_vo_line );
	wait n_delay;
	b_fake_ent = 1;
	self.is_about_to_talk = undefined;
	return;
	str_vox_file = level.scr_sound["generic"][str_vo_line];
	self.is_talking = 1;
	self anim_generic( self, str_vo_line );
	add_temp_dialog_line_internal( "TEMP VO", str_vox_file, 0 );
	add_temp_dialog_line_internal( "MISSING VO", str_vo_line, 0 );
	self.is_talking = undefined;
	self.is_about_to_talk = undefined;
	waittillframeend;
	level.scr_sound["generic"][str_vo_line] = undefined;
// SP = 0x0 - check OK
}

// 0x109C
_on_kill_pending_dialog()
{
	self endon( "death" );
	waittill_any_ents_two( level, "kill_pending_dialog", self, "kill_pending_dialog" );
	self.is_about_to_talk = undefined;
// SP = 0x0 - check OK
}

// 0x10C0
_add_to_spoken_dialog( str_line )
{
	level._spoken_dialog = [];
	level._spoken_dialog = add_to_array( level._spoken_dialog, str_line );
// SP = 0x0 - check OK
}

// 0x10EC
was_dialog_said( str_line )
{
	return isinarray( level._spoken_dialog, str_line );
// SP = 0x0 - check OK
}

// 0x1110
say_dialog_targetname( targetname, str_vo_line, delay )
{
	e_guy = getent( targetname, "targetname" );
/#
	assert( IsDefined( e_guy ), "say_dialog_targetname - no entity with targetname: " + targetname );
#/
	e_guy say_dialog( str_vo_line, delay );
// SP = 0x0 - check OK
}

// 0x1158
say_dialog_flag( fl_flag, str_vo_line, delay_after_flag )
{
	self endon( "death" );
	level endon( "kill_pending_dialog" );
	self endon( "kill_pending_dialog" );
/#
	assert( 0, "flag: '" + fl_flag + "' does not exist" );
#/
	flag_wait( fl_flag );
	self say_dialog( str_vo_line, delay_after_flag );
// SP = 0x0 - check OK
}

// 0x11BC
say_dialog_trigger( str_trigger_targetname, str_vo_line, delay_after_trigger )
{
	self endon( "death" );
	level endon( "kill_pending_dialog" );
	self endon( "kill_pending_dialog" );
	t_trig = getent( str_trigger_targetname, "targetname" );
/#
	assert( IsDefined( t_trig ), "Dialog trigger not found: " + str_trigger_targetname );
#/
	t_trig waittill( "trigger" );
	self say_dialog( str_vo_line, delay_after_trigger );
// SP = 0x0 - check OK
}

// 0x1218
say_dialog_health_lost( percentage_health_lost, e_target_ent, str_vo_line, delay_after_health_lost )
{
	self endon( "death" );
	level endon( "kill_pending_dialog" );
	self endon( "kill_pending_dialog" );
	health_lost = 100;
	health_lost = ( 100 - e_target_ent.health ) / ( e_target_ent.maxhealth * 100 );
	wait 0.01;
	self say_dialog( str_vo_line, delay_after_health_lost );
// SP = 0x0 - check OK
}

// 0x128C
say_dialog_func( func_pointer, str_vo_line, delay_after_func )
{
	self endon( "death" );
	level endon( "kill_pending_dialog" );
	self endon( "kill_pending_dialog" );
	wait 0.01;
	self say_dialog( str_vo_line, delay_after_func );
// SP = 0x0 - check OK
}

// 0x12D8
kill_all_pending_dialog( e_ent )
{
	e_ent notify( "kill_pending_dialog" );
	level notify( "kill_pending_dialog" );
// SP = 0x0 - check OK
}

// 0x12F8
add_vo_to_nag_group( group, character, vo_line )
{
/#
	assert( IsDefined( character ), "Character is missing in FN: add_vo_to_nag_groupg()" );
#/
/#
	assert( IsDefined( vo_line ), "Vo Line is missing in FN: add_vo_to_nag_groupg()" );
#/
	level.vo.nag_groups[group] = spawnstruct();
	level.vo.nag_groups[group].e_ent = [];
	level.vo.nag_groups[group].str_vo_line = [];
	level.vo.nag_groups[group].num_nags = 0;
	level.vo.nag_groups[group].e_ent[level.vo.nag_groups[group].e_ent.size] = character;
	level.vo.nag_groups[group].str_vo_line[level.vo.nag_groups[group].str_vo_line.size] = vo_line;
	level.vo.nag_groups[group].num_nags++;
// SP = 0x0 - check OK
}

// 0x13EC
start_vo_nag_group_flag( str_group, str_end_nag_flag, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter )
{
/#
	assert( IsDefined( str_end_nag_flag ), "str_end_nag_flag is missing in FN: start_vo_nag_group_flag()" );
#/
	level thread _start_vo_nag_group( str_group, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter, str_end_nag_flag );
// SP = 0x0 - check OK
}

// 0x1430
start_vo_nag_group_trigger( str_group, t_end_nag_trigger, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter )
{
/#
	assert( IsDefined( t_end_nag_trigger ), "t_end_nag_trigger is missing in FN: start_vo_nag_group_trigger()" );
#/
	str_flag_name = "vo_nag_trigger_flag_" + str_group;
	flag_init( str_flag_name );
	level thread _set_flag_when_trigger_hit( str_flag_name, t_end_nag_trigger );
	level thread _start_vo_nag_group( str_group, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter, str_flag_name );
// SP = 0x0 - check OK
}

// 0x1498
_set_flag_when_trigger_hit( str_flag_name, t_end_nag_trigger )
{
	t_end_nag_trigger waittill( "trigger" );
	flag_set( str_flag_name );
// SP = 0x0 - check OK
}

// 0x14B8
start_vo_nag_group_func( str_group, func_end_nag, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter )
{
	str_flag_name = "vo_nag_func_flag_" + str_group;
	flag_init( str_flag_name );
	level thread _set_flag_when_func_true( str_flag_name, func_end_nag );
	level thread _start_vo_nag_group( str_group, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter, str_flag_name );
// SP = 0x0 - check OK
}

// 0x1510
_set_flag_when_func_true( str_flag_name, func_end_nag )
{
	wait 0.01;
	flag_set( str_flag_name );
// SP = 0x0 - check OK
}

// 0x1548
delete_vo_nag_group( str_group )
{
	level.vo.nag_groups[str_group] = undefined;
// SP = 0x0 - check OK
}

// 0x155C
_start_vo_nag_group( str_group, vo_repeat_delay, start_delay, randomize_order, repeat_multiplier, func_filter, end_nag_flag )
{
/#
	assert( IsDefined( str_group ), "Undefined 'Group' in nag call" );
#/
/#
	assert( IsDefined( vo_repeat_delay ), "Undefined 'vo_repeat_delay' in nag call" );
#/
/#
	assert( IsDefined( level.vo.nag_groups[str_group] ), str_group + " is not a valid VO NAG Group" );
#/
	wait start_delay;
	s_vo_slot = level.vo.nag_groups[str_group];
	vo_indexes = [];
	i = 0;
	vo_indexes[i] = i;
	i++;
	last_index = vo_indexes[vo_indexes.size - 1];
	num_tries = 0;
	array_randomized = 0;
	vo_indexes = array_randomize( vo_indexes );
	array_randomized = 1;
	num_tries++;
	i = 0;
	index = vo_indexes[i];
	e_speaker = s_vo_slot.e_ent[index];
	str_vo_line = s_vo_slot.str_vo_line[index];
	b_play_line = 1;
	b_play_line = 0;
	e_speaker say_dialog( str_vo_line );
	next_play_delay = vo_repeat_delay;
	next_play_delay += randomfloatrange( repeat_multiplier * -1, repeat_multiplier );
	wait next_play_delay;
	i++;
	level.vo.nag_groups[str_group] = undefined;
// SP = 0x0 - check OK
}

// 0x173C
add_temp_dialog_line( name, msg, delay )
{
	level thread add_temp_dialog_line_internal( name, msg, delay );
// SP = 0x0 - check OK
}

// 0x175C
add_temp_dialog_line_internal( name, msg, delay )
{
	wait delay;
	level.dialog_huds = [];
	index = 0;
	index++;
	level.dialog_huds[index] = 1;
	hudelem = maps\_hud_util::createfontstring( "default", 1.5 );
	hudelem.location = 0;
	hudelem.alignx = "left";
	hudelem.aligny = "top";
	hudelem.foreground = 1;
	hudelem.sort = 20;
	hudelem.alpha = 0;
/#
	hudelem fadeovertime( 0.5 );
	hudelem.alpha = 1;
#/
	hudelem.x = 0;
	hudelem.y = 300 + index * 18;
	hudelem.label = "<" + name + "> " + msg;
	hudelem.color = ( 1, 1, 0 );
	wait 2;
/#
	hudelem fadeovertime( 5 );
	hudelem.alpha = 0;
#/
	i = 0;
/#
	hudelem.color = ( 1, 1, 1 / ( 40 - i ) );
#/
	wait 0.05;
	i++;
	wait 4;
	hudelem destroy();
	level.dialog_huds[index] = undefined;
	self notify( "done speaking" );
// SP = 0x0 - check OK
}

// 0x18BC
_queue_dialog_init()
{
	flag_init( "dialog_queue_paused" );
	flag_init( "dialog_convo_started" );
// SP = 0x0 - check OK
}

// 0x18DC
queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, b_priority, str_team, s_func_filter )
{
	n_delay = 0;
	b_only_once = 1;
	b_priority = 0;
	level._dialog_queue_id = 0;
	level._dialog_queue_id++;
	n_id = level._dialog_queue_id;
	return;
	e_talker = self;
	level.talkers = [];
	_queue_dialog_add_talker( e_talker );
	e_talker endon( "death" );
	e_talker thread _queue_dialog_on_death( str_line, n_id, b_priority );
	cancel_flags = array( cancel_flags );
	foreach ( str_flag in cancel_flags )
	{
/#
		_log_dialog( str_line, "canceled via flag set", str_flag );
#/
		level endon( str_flag );
	}
	e_talker thread _queue_dialog_on_cancel( str_line, n_id, cancel_flags, b_priority );
	start_flags = array( start_flags );
/#
	_log_dialog( str_line, "waiting for flag", start_flags );
#/
	flag_wait_array( start_flags );
	wait n_delay;
	n_delay = 0;
	excluders = [];
	a_talkers = getaiarray( str_team );
	i = 0;
	excluders[excluders.size] = a_talkers[i];
	i++;
	excluders = level.hero_list;
	e_talker = get_array_of_closest( level.player.origin, a_talkers, excluders )[0];
	e_talker thread _queue_dialog_on_cancel( str_line, n_id, cancel_flags, b_priority );
	e_talker thread _queue_dialog_on_death( str_line, n_id, b_priority );
	e_talker endon( "death" );
	_queue_dialog_add_talker( e_talker );
	return;
	pause_dialog_queue( str_line, b_priority );
/#
	_log_dialog( str_line, "waiting turn" );
#/
	_queue_dialog_wait_turn( str_line, b_priority );
	b_already_said = was_dialog_said( str_line );
/#
	_log_dialog( str_line, "playing with a " + string( n_delay ) + " delay" );
#/
	level._priority_dialog_playing = 1;
	e_talker notify( "dialog_started:" + n_id );
	e_talker thread maps\_dialog::say_dialog( str_line, n_delay );
	e_talker thread _queue_dialog_on_finished( str_line, n_id, b_priority );
/#
	_log_dialog( str_line, "canceled because it was said already", str_flag );
#/
	e_talker notify( "_queue_dialog_on_cancel" + n_id );
	e_talker notify( "dialog_canceled:" + n_id );
	level thread unpause_dialog_queue( str_line, b_priority );
// SP = 0x0 - check OK
}

// 0x1C0C
_queue_dialog_on_finished( str_line, n_id, b_priority )
{
	self endon( "death" );
	self endon( "dialog_canceled:" + n_id );
	self waittill_dialog_finished();
	self notify( "dialog_finished:" + n_id );
/#
	_log_dialog( str_line, "finished" );
#/
	unpause_dialog_queue( str_line, b_priority );
// SP = 0x0 - check OK
}

// 0x1C64
_queue_dialog_on_death( str_line, n_id, b_priority )
{
	self endon( "dialog_canceled:" + n_id );
	self endon( "dialog_finished:" + n_id );
	self waittill( "death" );
/#
	_log_dialog( str_line, "died" );
#/
	level thread unpause_dialog_queue( str_line, b_priority );
// SP = 0x0 - check OK
}

// 0x1CB0
_queue_dialog_on_cancel( str_line, n_id, cancel_flags, b_priority )
{
	return;
	level notify( "_queue_dialog_on_cancel" + n_id );
	level endon( "_queue_dialog_on_cancel" + n_id );
	self endon( "death" );
	self endon( "dialog_started:" + n_id );
	str_flag = flag_wait_any_array( cancel_flags );
/#
	_log_dialog( str_line, "canceled via flag set", str_flag );
#/
	self notify( "dialog_canceled:" + n_id );
	self notify( "kill_pending_dialog" );
	unpause_dialog_queue( str_line, b_priority );
// SP = 0x0 - check OK
}

// 0x1D34
pause_dialog_queue( str_line, b_priority )
{
	b_priority = 1;
/#
	_log_dialog( str_line, "PAUSING DIALOG QUEUE" );
#/
	flag_set( "dialog_queue_paused" );
	_queue_dialog_wait_turn( str_line, b_priority );
// SP = 0x0 - check OK
}

// 0x1D84
dialog_start_convo( start_flags, false_flags )
{
	start_flags = [];
	false_flags = [];
	start_flags = array( start_flags );
	false_flags = array( false_flags );
	false_flags[false_flags.size] = "dialog_convo_started";
	_queue_dialog_wait_turn( undefined, 1 );
	flag_wait_array( start_flags );
	flag_waitopen_array( false_flags );
	flag_set( "dialog_convo_started" );
/#
	_log_dialog( undefined, "DIALOG START CONVO" );
#/
// SP = 0x0 - check OK
}

// 0x1E68
any_flags_true( a_flags )
{
	foreach ( str_flag in a_flags )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x1EB0
any_flags_false( a_flags )
{
	foreach ( str_flag in a_flags )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x1EF8
dialog_end_convo( str_kill_notify )
{
/#
	_log_dialog( undefined, "DIALOG END CONVO" );
#/
	level notify( str_kill_notify );
	waittill_dialog_finished_array( level.talkers );
	flag_clear( "dialog_convo_started" );
// SP = 0x0 - check OK
}

// 0x1F44
unpause_dialog_queue( str_line, b_priority )
{
	level._priority_dialog_playing = undefined;
	_queue_dialog_wait_turn( str_line, b_priority );
	wait 0.05;
/#
	_log_dialog( str_line, "UNPAUSING DIALOG QUEUE" );
#/
	flag_clear( "dialog_queue_paused" );
// SP = 0x0 - check OK
}

// 0x1F9C
queue_dialog_enemy( str_line, n_delay, start_flags, cancel_flags, b_only_once, s_func_filter )
{
	queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, 0, "axis", s_func_filter );
// SP = 0x0 - check OK
}

// 0x1FCC
queue_dialog_ally( str_line, n_delay, start_flags, cancel_flags, b_only_once, s_func_filter )
{
	queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, 0, "allies", s_func_filter );
// SP = 0x0 - check OK
}

// 0x1FFC
priority_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, str_team, s_func_filter )
{
	queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, 1, str_team, s_func_filter );
// SP = 0x0 - check OK
}

// 0x202C
priority_dialog_enemy( str_line, n_delay, start_flags, cancel_flags, b_only_once, s_func_filter )
{
	queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, 1, "axis", s_func_filter );
// SP = 0x0 - check OK
}

// 0x205C
priority_dialog_ally( str_line, n_delay, start_flags, cancel_flags, b_only_once, s_func_filter )
{
	queue_dialog( str_line, n_delay, start_flags, cancel_flags, b_only_once, 1, "allies", s_func_filter );
// SP = 0x0 - check OK
}

// 0x208C
waittill_dialog_queue_finished()
{
	_queue_dialog_wait_turn( undefined, 0 );
// SP = 0x0 - check OK
}

// 0x20A0
_queue_dialog_add_talker( talker )
{
	level.talkers = add_to_array( level.talkers, talker, 0 );
// SP = 0x0 - check OK
}

// 0x20C0
_queue_dialog_wait_turn( str_line, b_priority )
{
	waittillframeend;
	__new = [];
	foreach ( __value in level.talkers )
	{
		__new[__key] = __value;
		__new[__new.size] = __value;
	}
	level.talkers = __new;
	waittill_dialog_finished_array( level.talkers );
	waittillframeend;
	flag_waitopen_array( array( "dialog_queue_paused", "dialog_convo_started" ) );
	__new = [];
	foreach ( __value in level.talkers )
	{
		__new[__key] = __value;
		__new[__new.size] = __value;
	}
	level.talkers = __new;
	waittill_dialog_finished_array( level.talkers );
// SP = 0x0 - check OK
}

// 0x21D8
_log_dialog( str_line, str_msg, a_flags )
{
/#
	a_flags = array( a_flags );
	str_line = "";
	str_color = _log_dialog_get_color( str_line );
	str_log_string = "^0DIALOG: '" + str_color + str_line + "^0' " + str_msg;
	str_log_string += ": " + _dialog_array_to_string( a_flags );
	println( str_log_string );
#/
// SP = 0x0 - check OK
}

// 0x226C
_log_dialog_get_color( str_line )
{
/#
	return "";
	level._log_dialog_colors = [];
	a_lines = getarraykeys( level._log_dialog_colors );
	a_colors = array( "^1", "^2", "^3", "^4", "^5", "^6", "^7" );
	level._log_dialog_get_color = 0;
	level._log_dialog_get_color++;
	level._log_dialog_get_color = 0;
	level._log_dialog_colors[str_line] = a_colors[level._log_dialog_get_color];
	return level._log_dialog_colors[str_line];
#/
// SP = 0x0 - check OK
}

// 0x2330
_dialog_array_to_string( array )
{
/#
	str = "^0[";
	i = 0;
	str += "^0,";
	str = str + " ^5" + array[i];
	i++;
	str += "^0 ]";
	return str;
#/
// SP = 0x0 - check OK
}
// maps/_createfx.gsc

#include maps\_fx;
#include maps\_load_common;
#include maps\_createfxmenu;
#include maps\_createfxundo;
#include maps\_utility;
#include common_scripts\utility;


// 0x2B04
createfx()
{
/#
	println( "^2Running CreateFX 2.0" );
	init_mp_paths();
	level.timelimitoverride = 1;
	init_sp_paths();
	precachemodel( "fx_axis_createfx" );
	precacheshader( "black" );
	setdvar( "createfx_scaleid", "0.5" );
	setdvar( "createfx_print_frames", "3" );
	setdvar( "createfx_drawaxis", "1" );
	setdvar( "createfx_drawaxis_range", "2000" );
	setdvar( "createfx_autosave_time", "300" );
	setdvar( "createfx_oneshot_min_delay", "-100" );
	setdvar( "createfx_oneshot_max_delay", "-15" );
	flag_init( "createfx_saving" );
	level.createfx = [];
	level.cfx_uniqueid = 0;
	level.cfx_last_action = "none";
	level thread [[level.cfx_func_run_gump_func]]();
	level thread [[level.createfx_callback_thread]]();
	level.callbackplayerdisconnect = ::empty;
	level.callbackplayerdamage = ::damage_void;
	level.callbackplayerkilled = ::empty;
	level.callbackplayerconnect = ::callback_playerconnect;
	wait 0.05;
	thread createfxdelay();
	level.is_camera_on = 0;
	thread createfxlogic();
	level waittill( "eternity" );
#/
// SP = 0x0 - check OK
}

// 0x2D04
init_client_sp_variables()
{
	level.cfx_exploder_before = maps\_utility::exploder_before_load;
	level.cfx_exploder_after = maps\_utility::exploder_after_load;
// SP = 0x0 - check OK
}

// 0x2D24
init_client_mp_variables()
{
// SP = 0x0 - check OK
}

// 0x2D2C
fx_init()
{
	init_client_mp_variables();
	init_client_sp_variables();
	level.exploderfunction = level.cfx_exploder_before;
	waittillframeend;
	waittillframeend;
	level.exploderfunction = level.cfx_exploder_after;
	level.non_fx_ents = 0;
	triggers = getentarray( "trigger_multiple", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	triggers = getentarray( "trigger_once", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	triggers = getentarray( "trigger_box", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	triggers = getentarray( "trigger_radius", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	triggers = getentarray( "trigger_lookat", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	triggers = getentarray( "trigger_damage", "classname" );
	i = 0;
	triggers[i] delete();
	i++;
	sm = getentarray( "spawn_manager", "classname" );
	i = 0;
	sm[i] delete();
	i++;
	delete_spawns();
	delete_arrays_in_sp();
/#
	println( "We're not in MP!" );
#/
	i = 0;
	ent = level.createfxent[i];
	ent set_forward_and_up_vectors();
	level.non_fx_ents++;
	ent thread [[level.cfx_func_loopfx]]();
	ent thread [[level.cfx_func_oneshotfx]]();
	ent thread [[level.cfx_func_soundfx]]();
	i++;
// SP = 0x0 - check OK
}

// 0x2FC4
add_effect( name, effect )
{
	level._effect = [];
	level._effect[name] = loadfx( effect );
// SP = 0x0 - check OK
}

// 0x2FF4
createeffect( type, fxid )
{
	ent = undefined;
	level.createfx_enabled = GetDvar( #"0x134D5297" ) != "";
	level.createfxent = [];
	level.cfx_uniqueid = 0;
	ent = spawnstruct();
	ent.uniqueid = level.cfx_uniqueid;
	level.cfx_uniqueid++;
	ent = spawnstruct();
	level._fake_createfx_struct = spawnstruct();
	ent = level._fake_createfx_struct;
	level.createfxent[level.createfxent.size] = ent;
	ent.v = [];
	ent.v["type"] = type;
	ent.v["fxid"] = fxid;
	ent.v["angles"] = ( 0, 0, 0 );
	ent.v["origin"] = ( 0, 0, 0 );
	ent.drawn = 1;
	return ent;
// SP = 0x0 - check OK
}

// 0x30FC
createloopsound()
{
	ent = spawnstruct();
	level.createfxent = [];
	level.createfxent[level.createfxent.size] = ent;
	ent.v = [];
	ent.v["type"] = "soundfx";
	ent.v["fxid"] = "No FX";
	ent.v["soundalias"] = "nil";
	ent.v["angles"] = ( 0, 0, 0 );
	ent.v["origin"] = ( 0, 0, 0 );
	ent.drawn = 1;
	return ent;
// SP = 0x0 - check OK
}

// 0x3190
set_forward_and_up_vectors()
{
	temp_up = anglestoup( self.v["angles"] );
	temp_forward = anglestoforward( self.v["angles"] );
	temp_up = ( 0, temp_up[1], temp_up[2] );
	temp_up = ( temp_up[0], 0, temp_up[2] );
	temp_up = ( temp_up[0], temp_up[1], 0 );
	temp_forward = ( 0, temp_forward[1], temp_forward[2] );
	temp_forward = ( temp_forward[0], 0, temp_forward[2] );
	temp_forward = ( temp_forward[0], temp_forward[1], 0 );
	self.v["up"] = temp_up;
	self.v["forward"] = temp_forward;
// SP = 0x0 - check OK
}

// 0x3288
createfxlogic()
{
/#
	waittillframeend;
	menu_init();
	players = get_players();
	level waittill( "first_player_ready" );
	adddebugcommand( "noclip" );
	level._effect = [];
	setdvar( "createfx_map", level.script );
	playerpos = [];
	playerpos[0] = GetDvarInt( #"0x274F266C" );
	playerpos[1] = GetDvarInt( #"0x274F266D" );
	playerpos[2] = GetDvarInt( #"0x274F266E" );
	player = get_players()[0];
	player setorigin( ( playerpos[0], playerpos[1], playerpos[2] ) );
	filename = level.cfx_server_scriptdata + level.script + "_fx.gsc";
	file = openfile( filename, "append" );
	level.write_error = "";
	level.write_error = filename;
	closefile( file );
	level.createfxhudelements = [];
	level.createfx_hudelements = 100;
	stroffsetx = [];
	stroffsety = [];
	stroffsetx[0] = 0;
	stroffsety[0] = 0;
	stroffsetx[1] = 1;
	stroffsety[1] = 1;
	stroffsetx[2] = -2;
	stroffsety[2] = 1;
	setdvar( "fx", "nil" );
	crosshair = newdebughudelem();
	crosshair.location = 0;
	crosshair.alignx = "center";
	crosshair.aligny = "middle";
	crosshair.foreground = 1;
	crosshair.fontscale = 2;
	crosshair.sort = 20;
	crosshair.alpha = 1;
	crosshair.x = 320;
	crosshair.y = 233;
	crosshair settext( "." );
	center_text_init();
	level.cleartextmarker = newdebughudelem();
	level.cleartextmarker.alpha = 0;
	level.cleartextmarker settext( "marker" );
	i = 0;
	newstrarray = [];
	p = 0;
	newstr = newhudelem();
	newstr.alignx = "left";
	newstr.location = 0;
	newstr.foreground = 1;
	newstr.fontscale = 1.1;
	newstr.sort = 20 - p;
	newstr.alpha = 1;
	newstr.x = 0 + stroffsetx[p];
	newstr.y = ( 60 + stroffsety[p] ) + i * 15;
	newstr.color = ( 0, 0, 0 );
	newstrarray[newstrarray.size] = newstr;
	p++;
	level.createfxhudelements[i] = newstrarray;
	i++;
	level.selectedmove_up = 0;
	level.selectedmove_forward = 0;
	level.selectedmove_right = 0;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_roll = 0;
	level.selectedrotate_yaw = 0;
	level.selected_fx = [];
	level.selected_fx_ents = [];
	level.createfx_lockedlist = [];
	level.createfx_lockedlist["escape"] = 1;
	level.createfx_lockedlist["BUTTON_LSHLDR"] = 1;
	level.createfx_lockedlist["BUTTON_RSHLDR"] = 1;
	level.createfx_lockedlist["mouse1"] = 1;
	level.createfx_lockedlist["ctrl"] = 1;
	level.createfx_draw_enabled = 1;
	level.buttonisheld = [];
	axismode = 0;
	colors = [];
	colors["loopfx"]["selected"] = ( 1, 1, 0.2 );
	colors["loopfx"]["highlighted"] = ( 0.4, 0.95, 1 );
	colors["loopfx"]["default"] = ( 0.3, 0.5, 1 );
	colors["oneshotfx"]["selected"] = ( 1, 1, 0.2 );
	colors["oneshotfx"]["highlighted"] = ( 0.33, 0.97, 1 );
	colors["oneshotfx"]["default"] = ( 0.1, 0.73, 0.73 );
	colors["exploder"]["selected"] = ( 1, 1, 0.2 );
	colors["exploder"]["highlighted"] = ( 1, 0.1, 0.1 );
	colors["exploder"]["default"] = ( 1, 0.1, 0.1 );
	colors["rainfx"]["selected"] = ( 1, 1, 0.2 );
	colors["rainfx"]["highlighted"] = ( 0.95, 0.4, 0.95 );
	colors["rainfx"]["default"] = ( 0.78, 0, 0.73 );
	colors["soundfx"]["selected"] = ( 1, 1, 0.2 );
	colors["soundfx"]["highlighted"] = ( 0.5, 1, 0.75 );
	colors["soundfx"]["default"] = ( 0.2, 0.9, 0.2 );
	lasthighlightedent = undefined;
	level.fx_rotating = 0;
	setmenu( "none" );
	level.createfx_selecting = 0;
	level.createfx_last_player_origin = ( 0, 0, 0 );
	level.createfx_last_player_forward = ( 0, 0, 0 );
	level.createfx_last_view_change_test = 0;
	player = get_players()[0];
	black = newdebughudelem();
	black.x = -120;
	black.y = 200;
	black.foreground = 0;
	black setshader( "black", 250, 160 );
	black.alpha = 0;
	level.createfx_inputlocked = 0;
	help_on_last_frame = 0;
	i = 0;
	ent = level.createfxent[i];
	ent post_entity_creation_function();
	i++;
	thread draw_distance();
	lastselectentity = undefined;
	thread createfx_autosave();
	make_sp_player_invulnerable( player );
	player = get_players()[0];
	changedselectedents = 0;
	right = anglestoright( player getplayerangles() );
	forward = anglestoforward( player getplayerangles() );
	up = anglestoup( player getplayerangles() );
	dot = 0.85;
	placeent_vector = vector_scale( forward, 750 );
	level.createfxcursor = bullettrace( player geteye(), player geteye() + placeent_vector, 0, undefined );
	highlightedent = undefined;
	level.buttonclick = [];
	level.button_is_kb = [];
	process_button_held_and_clicked();
	ctrlheld = button_is_held( "ctrl", "BUTTON_LSHLDR" );
	shiftheld = button_is_held( "shift" );
	functionheld = button_is_held( "f" );
	leftclick = button_is_clicked( "mouse1", "BUTTON_A" );
	leftheld = button_is_held( "mouse1", "BUTTON_A" );
	create_fx_menu();
	axismode = !(axismode);
	toggle_createfx_drawing();
	print_ambient_fx_inventory();
	createfx_save();
	insert_effect();
	adddebugcommand( "noclip" );
	level thread handle_camera();
	level.is_camera_on = 1;
	adddebugcommand( "noclip" );
	level notify( "new_camera" );
	level.is_camera_on = 0;
	axismode = 0;
	axismode = 1;
	axismode = 0;
	delete_pressed();
	drop_selection_to_ground();
	changedselectedents = 1;
	setmenu( "select_by_property" );
	wait 0.05;
	select_ents_by_property( level.cfx_selected_prop, 1 );
	select_ents_by_property( level.cfx_selected_prop );
	level.cfx_selected_prop = undefined;
	setmenu( "jump_to_effect" );
	draw_effects_list( "Select effect to jump to:" );
	clear_settable_fx();
	set_off_exploders();
	turn_off_exploders();
	move_selection_to_cursor();
	changedselectedents = 1;
	undo();
	help_on_last_frame = 1;
	show_help();
	wait 0.05;
	clear_fx_hudelements();
	help_on_last_frame = 0;
	copy_ents();
	paste_ents_onto_ents();
	paste_ents();
	menu_fx_option_set();
	move_player_around_map_fast();
	wait 0.25;
	move_player_to_next_same_effect( 1, lastselectentity );
	move_player_to_next_same_effect( 0, lastselectentity );
	level notify( "write_error" );
	thread write_error_msg( level.write_error );
	level.write_error = "";
	highlightedent = level.fx_highlightedent;
	i = 0;
	ent = level.createfxent[i];
	difference = vectornormalize( ent.v["origin"] - ( player.origin + vector_scale( ( 0, 0, 1 ), 55 ) ) );
	newdot = vectordot( forward, difference );
	dot = newdot;
	highlightedent = ent;
	highlightedent.last_fx_index = i;
	i++;
	level.fx_highlightedent = highlightedent;
	level.createfx_last_player_origin = player.origin;
	level.createfx_last_player_forward = forward;
	level.createfx_last_view_change_test = GetTime();
	lasthighlightedent thread entity_highlight_disable();
	highlightedent thread entity_highlight_enable();
	highlightedent thread entity_highlight_enable();
	manipulate_createfx_ents( highlightedent, leftclick, leftheld, ctrlheld, colors, right );
	thread process_fx_rotater();
	reset_axis_of_selected_ents();
	copy_angles_of_selected_ents();
	i = 0;
	level.selected_fx_ents[i] draw_axis();
	i++;
	changedselectedents = 1;
	wait 0.05;
	stop_drawing_axis_models();
	selectedmove_vector = get_selected_move_vector();
	changedselectedents = 1;
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "translate";
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v["origin"] += selectedmove_vector;
	i++;
	wait 0.05;
	update_selected_entities();
	lasthighlightedent = highlightedent;
	level.effect_list_offset = 0;
	clear_settable_fx();
	setmenu( "none" );
	lastselectentity = level.selected_fx_ents[level.selected_fx_ents.size - 1];
	lastselectentity = undefined;
#/
// SP = 0x0 - check OK
}

// 0x41A8
toggle_createfx_drawing()
{
/#
	level.createfx_draw_enabled = !(level.createfx_draw_enabled);
#/
// SP = 0x0 - check OK
}

// 0x41BC
manipulate_createfx_ents( highlightedent, leftclick, leftheld, ctrlheld, colors, right )
{
/#
	clear_fx_hudelements();
	scale = GetDvarFloat( #"0xD0C4376B" );
	print_frames = GetDvarInt( #"0x5A7DE640" );
	level.createfx_manipulate_offset = 0;
	offset = level.createfx_manipulate_offset;
	level.createfx_manipulate_offset = ( level.createfx_manipulate_offset + 1 ) % print_frames;
	i = offset;
	ent = level.createfxent[i];
	colorindex = "default";
	colorindex = "selected";
	print3d( ent.v["origin"], ".", colors[ent.v["type"]][colorindex], 1, scale, print_frames );
	printright = vector_scale( right, ent.v["fxid"].size * -2.93 * scale );
	print3d( ent.v["origin"] + printright + vector_scale( ( 0, 0, 1 ), 15 ), ent.v["fxid"], colors[ent.v["type"]][colorindex], ent.textalpha, scale, print_frames );
	i += print_frames;
	display_fx_info( highlightedent );
	entwasselected = index_is_selected( highlightedent.last_fx_index );
	level.createfx_selecting = !(entwasselected);
	selectedsize = level.selected_fx_ents.size;
	clear_entity_selection();
	select_entity( highlightedent.last_fx_index, highlightedent );
	toggle_entity_selection( highlightedent.last_fx_index, highlightedent );
	select_entity( highlightedent.last_fx_index, highlightedent );
	deselect_entity( highlightedent.last_fx_index, highlightedent );
	colorindex = "highlighted";
	colorindex = "selected";
	print3d( highlightedent.v["origin"], ".", colors[highlightedent.v["type"]][colorindex], 1, scale, 1 );
	printright = vector_scale( right, highlightedent.v["fxid"].size * -2.93 * scale );
	print3d( highlightedent.v["origin"] + printright + vector_scale( ( 0, 0, 1 ), 15 ), highlightedent.v["fxid"], colors[highlightedent.v["type"]][colorindex], highlightedent.textalpha, scale, 1 );
#/
// SP = 0x0 - check OK
}

// 0x44C0
clear_settable_fx()
{
/#
	level.createfx_inputlocked = 0;
	setdvar( "fx", "nil" );
	level.selected_fx_option_index = undefined;
	reset_fx_hud_colors();
#/
// SP = 0x0 - check OK
}

// 0x44F4
reset_fx_hud_colors()
{
/#
	i = 0;
	level.createfxhudelements[i][0].color = ( 1, 1, 1 );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x4528
button_is_held( name, name2 )
{
/#
	return 1;
	return IsDefined( level.buttonisheld[name] );
#/
// SP = 0x0 - check OK
}

// 0x4558
button_is_clicked( name, name2 )
{
/#
	return 1;
	return IsDefined( level.buttonclick[name] );
#/
// SP = 0x0 - check OK
}

// 0x4588
toggle_entity_selection( index, ent )
{
/#
	deselect_entity( index, ent );
	select_entity( index, ent );
#/
// SP = 0x0 - check OK
}

// 0x45C4
select_entity( index, ent, skip_undo )
{
/#
	ent.last_fx_index = index;
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "none";
	clear_settable_fx();
	level notify( "new_ent_selection" );
	ent thread entity_highlight_enable();
	level.selected_fx[index] = 1;
	level.selected_fx_ents[level.selected_fx_ents.size] = ent;
#/
// SP = 0x0 - check OK
}

// 0x4650
ent_is_highlighted( ent )
{
/#
	return 0;
	return ent == level.fx_highlightedent;
#/
// SP = 0x0 - check OK
}

// 0x4670
deselect_entity( index, ent )
{
/#
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "none";
	clear_settable_fx();
	level notify( "new_ent_selection" );
	level.selected_fx[index] = undefined;
	ent thread entity_highlight_disable();
	newarray = [];
	i = 0;
	newarray[newarray.size] = level.selected_fx_ents[i];
	i++;
	level.selected_fx_ents = newarray;
#/
// SP = 0x0 - check OK
}

// 0x4724
index_is_selected( index )
{
/#
	return IsDefined( level.selected_fx[index] );
#/
// SP = 0x0 - check OK
}

// 0x473C
ent_is_selected( ent )
{
/#
	i = 0;
	return 1;
	i++;
	return 0;
#/
// SP = 0x0 - check OK
}

// 0x4778
clear_entity_selection( skip_undo )
{
/#
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "none";
	i = 0;
	level.selected_fx_ents[i] thread entity_highlight_disable();
	i++;
	level.selected_fx = [];
	level.selected_fx_ents = [];
#/
// SP = 0x0 - check OK
}

// 0x4804
draw_axis()
{
/#
	self.draw_axis_model = spawn_axis_model( self.v["origin"], self.v["angles"] );
	level thread draw_axis_think( self );
	level.draw_axis_models = [];
	level.draw_axis_models[level.draw_axis_models.size] = self.draw_axis_model;
#/
// SP = 0x0 - check OK
}

// 0x4864
spawn_axis_model( origin, angles )
{
/#
	model = spawn( "script_model", origin );
	model setmodel( "fx_axis_createfx" );
	model.angles = angles;
	return model;
#/
// SP = 0x0 - check OK
}

// 0x48A0
draw_axis_think( axis_parent )
{
/#
	axis_model = axis_parent.draw_axis_model;
	axis_model endon( "death" );
	player = get_players()[0];
	range = GetDvarInt( #"0x74012625" );
	i = 0;
	axis_model delete();
	arrayremovevalue( level.draw_axis_models, undefined );
	axis_model = spawn_axis_model( axis_parent.v["origin"], axis_parent.v["angles"] );
	axis_parent.draw_axis_model = axis_model;
	level.draw_axis_models[level.draw_axis_models.size] = axis_model;
	axis_model.origin = axis_parent.v["origin"];
	axis_model.angles = axis_parent.v["angles"];
	wait 0.1;
	i++;
	range = GetDvarInt( #"0x74012625" );
	i = 0;
	axis_model delete();
#/
// SP = 0x0 - check OK
}

// 0x49D8
stop_drawing_axis_models()
{
/#
	i = 0;
	level.draw_axis_models[i] delete();
	i++;
	arrayremovevalue( level.draw_axis_models, undefined );
#/
// SP = 0x0 - check OK
}

// 0x4A30
clear_fx_hudelements()
{
/#
	level.cfx_center_text[level.cfx_center_text_max - 1] clearalltextafterhudelem();
	i = 0;
	p = 0;
	level.createfxhudelements[i][p] settext( "" );
	p++;
	i++;
	level.fxhudelements = 0;
#/
// SP = 0x0 - check OK
}

// 0x4A9C
set_fx_hudelement( text )
{
/#
	p = 0;
	level.createfxhudelements[level.fxhudelements][p] settext( text );
	p++;
	level.fxhudelements++;
#/
// SP = 0x0 - check OK
}

// 0x4B04
buttondown( button, button2 )
{
/#
	return buttonpressed_internal( button2 );
#/
// SP = 0x0 - check OK
}

// 0x4B30
buttonpressed_internal( button )
{
/#
	return 0;
	return 0;
	player = get_players()[0];
	return player buttonpressed( button );
#/
// SP = 0x0 - check OK
}

// 0x4B74
get_selected_move_vector()
{
/#
	player = get_players()[0];
	yaw = player getplayerangles()[1];
	angles = ( 0, yaw, 0 );
	right = anglestoright( angles );
	forward = anglestoforward( angles );
	up = anglestoup( angles );
	ctrlheld = button_is_held( "ctrl", "BUTTON_LSHLDR" );
	level.selectedmove_forward = 0;
	level.selectedmove_forward = 0.1;
	wait 0.05;
	level.selectedmove_forward += 1;
	level.selectedmove_forward = 0;
	level.selectedmove_forward = -1 * 0.1;
	wait 0.05;
	level.selectedmove_forward -= 1;
	level.selectedmove_forward = 0;
	level.selectedmove_right = 0;
	level.selectedmove_right = 0.1;
	wait 0.05;
	level.selectedmove_right += 1;
	level.selectedmove_right = 0;
	level.selectedmove_right = -1 * 0.1;
	wait 0.05;
	level.selectedmove_right -= 1;
	level.selectedmove_right = 0;
	level.selectedmove_up = 0;
	level.selectedmove_up = 0.1;
	wait 0.05;
	level.selectedmove_up += 1;
	level.selectedmove_up = 0;
	level.selectedmove_up = -1 * 0.1;
	wait 0.05;
	level.selectedmove_up -= 1;
	level.selectedmove_up = 0;
	vector = ( 0, 0, 0 );
	vector += vector_scale( forward, level.selectedmove_forward );
	vector += vector_scale( right, level.selectedmove_right );
	vector += vector_scale( up, level.selectedmove_up );
	return vector;
#/
// SP = 0x0 - check OK
}

// 0x4E0C
process_button_held_and_clicked()
{
/#
	add_button( "mouse1" );
	add_kb_button( "shift" );
	add_kb_button( "ctrl" );
	add_button( "BUTTON_RSHLDR" );
	add_button( "BUTTON_LSHLDR" );
	add_button( "BUTTON_RSTICK" );
	add_button( "BUTTON_LSTICK" );
	add_button( "BUTTON_A" );
	add_button( "BUTTON_B" );
	add_button( "BUTTON_X" );
	add_button( "BUTTON_Y" );
	add_button( "DPAD_UP" );
	add_button( "DPAD_LEFT" );
	add_button( "DPAD_RIGHT" );
	add_button( "DPAD_DOWN" );
	add_kb_button( "escape" );
	add_button( "BUTTON_RTRIG" );
	add_button( "BUTTON_LTRIG" );
	add_kb_button( "a" );
	add_button( "F1" );
	add_button( "F5" );
	add_button( "F2" );
	add_kb_button( "c" );
	add_kb_button( "d" );
	add_kb_button( "f" );
	add_kb_button( "h" );
	add_kb_button( "i" );
	add_kb_button( "j" );
	add_kb_button( "k" );
	add_kb_button( "l" );
	add_kb_button( "m" );
	add_kb_button( "p" );
	add_kb_button( "q" );
	add_kb_button( "r" );
	add_kb_button( "s" );
	add_kb_button( "v" );
	add_kb_button( "x" );
	add_kb_button( "z" );
	add_button( "del" );
	add_kb_button( "end" );
	add_kb_button( "tab" );
	add_kb_button( "ins" );
	add_kb_button( "add" );
	add_kb_button( "space" );
	add_kb_button( "enter" );
	add_kb_button( "leftarrow" );
	add_kb_button( "rightarrow" );
	add_kb_button( "1" );
	add_kb_button( "2" );
	add_kb_button( "3" );
	add_kb_button( "4" );
	add_kb_button( "5" );
	add_kb_button( "6" );
	add_kb_button( "7" );
	add_kb_button( "8" );
	add_kb_button( "9" );
	add_kb_button( "0" );
	add_kb_button( "~" );
#/
// SP = 0x0 - check OK
}

// 0x50D0
locked( name )
{
/#
	return 0;
	return kb_locked( name );
#/
// SP = 0x0 - check OK
}

// 0x50F8
kb_locked( name )
{
/#
	return IsDefined( level.button_is_kb[name] );
#/
// SP = 0x0 - check OK
}

// 0x5118
add_button( name )
{
/#
	player = get_players()[0];
	level.buttonisheld[name] = 1;
	level.buttonclick[name] = 1;
	level.buttonisheld[name] = undefined;
#/
// SP = 0x0 - check OK
}

// 0x5194
add_kb_button( name )
{
/#
	level.button_is_kb[name] = 1;
	add_button( name );
#/
// SP = 0x0 - check OK
}

// 0x51B8
set_anglemod_move_vector()
{
/#
	ctrlheld = button_is_held( "ctrl", "BUTTON_LSHLDR" );
	players = get_players();
	newmovement = players[0] getnormalizedmovement();
	dolly_movement = players[0] getnormalizedcameramovement();
	level.selectedrotate_yaw -= 1;
	level.selectedrotate_yaw += 1;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_yaw += 0.1;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_yaw -= 0.1;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_pitch += 1;
	level.selectedrotate_pitch -= 1;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_pitch += 0.1;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_pitch -= 0.1;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_roll = 0;
	level.selectedrotate_roll += 0.1;
	level.selectedrotate_roll = 0;
	level.selectedrotate_roll -= 0.1;
	level.selectedrotate_roll = 0;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_pitch = 0.1;
	wait 0.05;
	level.selectedrotate_pitch += 1;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_pitch = -1 * 0.1;
	wait 0.05;
	level.selectedrotate_pitch -= 1;
	level.selectedrotate_pitch = 0;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_yaw = 0.1;
	wait 0.05;
	level.selectedrotate_yaw += 1;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_yaw = -1 * 0.1;
	wait 0.05;
	level.selectedrotate_yaw -= 1;
	level.selectedrotate_yaw = 0;
	level.selectedrotate_roll = 0;
	level.selectedrotate_roll = 0.1;
	wait 0.05;
	level.selectedrotate_roll += 1;
	level.selectedrotate_roll = 0;
	level.selectedrotate_roll = -1 * 0.1;
	wait 0.05;
	level.selectedrotate_roll -= 1;
	level.selectedrotate_roll = 0;
#/
// SP = 0x0 - check OK
}

// 0x55FC
cfxprintln( file, string )
{
/#
	fprintln( file, string );
#/
// SP = 0x0 - check OK
}

// 0x5624
update_save_bar( number )
{
/#
	level notify( "saving_start" );
	level endon( "saving_start" );
	level.current_saving_number = 0;
	center_text_clear();
	center_text_add( "Saving Createfx to File" );
	center_text_add( "Saving effect " + level.current_saving_number + "/" + level.createfxent.size );
	center_text_add( "Do not reset Xenon until saving is complete." );
	wait 0.05;
	center_text_clear();
	center_text_add( "Saving Complete." );
	center_text_add( level.createfxent.size + " effects saved to files." );
#/
// SP = 0x0 - check OK
}

// 0x56C8
generate_fx_log( type, autosave )
{
/#
	autosave = IsDefined( autosave );
	filename = level.cfx_server_scriptdata + level.script + "_fx.gsc";
	filename = level.cfx_server_scriptdata + "backup.gsc";
	call_loop = level.cfx_server_loop;
	call_oneshot = level.cfx_server_oneshot;
	call_exploder = level.cfx_server_exploder;
	call_loopsound = level.cfx_server_loopsound;
	filename = level.cfx_client_scriptdata + level.script + "_fx.csc";
	filename = level.cfx_client_scriptdata + "backup.csc";
	call_loop = level.cfx_client_loop;
	call_oneshot = level.cfx_client_oneshot;
	call_exploder = level.cfx_client_exploder;
	call_loopsound = level.cfx_client_loopsound;
	println( "^1Error: Improper type in generate_fx_log()" );
	file = openfile( filename, "write" );
	level.write_error = filename;
	return 1;
	return 2;
	return 3;
	cfxprintln( file, "//_createfx generated. Do not touch!!" );
	cfxprintln( file, "main()" );
	cfxprintln( file, "{" );
	p = 0;
	ent = level.createfxent[p];
	origin = [];
	angles = [];
	i = 0;
	origin[i] = ent.v["origin"][i];
	angles[i] = ent.v["angles"][i];
	origin[i] = 0;
	angles[i] = 0;
	i++;
	ent.v["origin"] = ( origin[0], origin[1], origin[2] );
	ent.v["angles"] = ( angles[0], angles[1], angles[2] );
	p++;
	println( " *** CREATING EFFECT, COPY THESE LINES TO ", level.script, "_fx.gsc *** " );
	cfxprintln( file, "// CreateFX entities placed: " + ( level.createfxent.size - level.non_fx_ents ) );
	breather = 0;
	breather_pause = 1;
	breather_pause = 5;
	i = 0;
	e = level.createfxent[i];
/#
	assert( IsDefined( e.v["type"] ), "effect at origin " + e.v["origin"] + " has no type" );
#/
	output_name = "\t";
	output_props = "\t";
	ent_type = e.v["type"];
	output_name = output_name + "ent = " + call_loop + "( \"" + ( e.v["fxid"] + "\" );" );
	output_name = output_name + "ent = " + call_oneshot + "( \"" + ( e.v["fxid"] + "\" );" );
	output_name = output_name + "ent = " + call_exploder + "( \"" + ( e.v["fxid"] + "\" );" );
	output_name = output_name + "ent = " + ( call_loopsound + "();" );
	output_props = output_props + "ent.v[ \"origin\" ] = ( " + e.v["origin"][0] + ", " + e.v["origin"][1] + ", " + ( e.v["origin"][2] + " );" );
	output_props = output_props + " ent.v[ \"angles\" ] = ( " + e.v["angles"][0] + ", " + e.v["angles"][1] + ", " + ( e.v["angles"][2] + " );" );
	output_props += get_fx_options( e );
	cfxprintln( file, output_name );
	cfxprintln( file, output_props );
	cfxprintln( file, "\t" );
	breather++;
	wait 0.05;
	breather = 0;
	i++;
	script_gen_dump_addline( level.cfx_server_scriptgendump, level.script + "_fx" );
	[[level.cfx_func_script_gen_dump]]();
	cfxprintln( file, "}" );
	saved = closefile( file );
/#
	assert( saved == 1, "File not saved (see above message?): " + filename );
#/
	println( "CreateFX entities placed: " + ( level.createfxent.size - level.non_fx_ents ) );
	return 0;
#/
// SP = 0x0 - check OK
}

// 0x5BC8
get_fx_options( ent )
{
/#
	output_props = "";
	i = 0;
	option = level.createfx_options[i];
	output_props = output_props + " ent.v[ \"" + option["name"] + "\" ] = \"" + ( ent.v[option["name"]] + "\";" );
	output_props = output_props + " ent.v[ \"" + option["name"] + "\" ] = " + ( ent.v[option["name"]] + ";" );
	i++;
	return output_props;
#/
// SP = 0x0 - check OK
}

// 0x5CB8
entity_highlight_disable()
{
/#
	self notify( "highlight change" );
	self endon( "highlight change" );
	self.textalpha -= 0.05;
	wait 0.05;
	self.textalpha = 0.4;
#/
// SP = 0x0 - check OK
}

// 0x5D10
entity_highlight_enable()
{
/#
	self notify( "highlight change" );
	self endon( "highlight change" );
	self.textalpha += 0.05;
	wait 0.05;
	self.textalpha = 1;
#/
// SP = 0x0 - check OK
}

// 0x5D58
get_center_of_array( array )
{
/#
	center = ( 0, 0, 0 );
	i = 0;
	center = ( center[0] + array[i].v["origin"][0], center[1] + array[i].v["origin"][1], center[2] + array[i].v["origin"][2] );
	i++;
	return ( center[0] / array.size, center[1] / array.size, center[2] / array.size );
#/
// SP = 0x0 - check OK
}

// 0x5DE8
rotation_is_occuring()
{
/#
	return 1;
	return 1;
	return level.selectedrotate_yaw != 0;
#/
// SP = 0x0 - check OK
}

// 0x5E14
process_fx_rotater()
{
/#
	set_anglemod_move_vector();
	level.fx_rotating = 1;
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "rotate";
	center = get_center_of_array( level.selected_fx_ents );
	org = spawn( "script_origin", center );
	org.v["angles"] = level.selected_fx_ents[0].v["angles"];
	org.v["origin"] = center;
	rotater = [];
	i = 0;
	rotater[i] = spawn( "script_origin", level.selected_fx_ents[i].v["origin"] );
	rotater[i].angles = level.selected_fx_ents[i].v["angles"];
	rotater[i] linkto( org );
	i++;
	rotate_over_time( org, rotater );
	org delete();
	i = 0;
	rotater[i] delete();
	i++;
	ent = level.selected_fx_ents[0];
	rotater = spawn( "script_origin", ( 0, 0, 0 ) );
	rotater.angles = ent.v["angles"];
	rotater devaddpitch( level.selectedrotate_pitch );
	rotater devaddyaw( level.selectedrotate_yaw );
	rotater devaddroll( level.selectedrotate_roll );
	ent.v["angles"] = rotater.angles;
	rotater delete();
	wait 0.05;
	level.fx_rotating = 0;
#/
// SP = 0x0 - check OK
}

// 0x6028
rotate_over_time( org, rotater )
{
/#
	level endon( "new_ent_selection" );
	p = 0;
	org devaddpitch( level.selectedrotate_pitch );
	org devaddyaw( level.selectedrotate_yaw );
	org devaddroll( level.selectedrotate_roll );
	wait 0.05;
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v["origin"] = rotater[i].origin;
	ent.v["angles"] = rotater[i].angles;
	i++;
	p++;
#/
// SP = 0x0 - check OK
}

// 0x6108
delete_pressed()
{
/#
	remove_selected_option();
	delete_selection();
#/
// SP = 0x0 - check OK
}

// 0x6130
remove_selected_option()
{
/#
	name = level.createfx_options[level.selected_fx_option_index]["name"];
	i = 0;
	ent = level.createfxent[i];
	ent remove_option( name );
	i++;
	update_selected_entities();
	clear_settable_fx();
#/
// SP = 0x0 - check OK
}

// 0x61B0
remove_option( name )
{
/#
	self.v[name] = undefined;
#/
// SP = 0x0 - check OK
}

// 0x61C4
delete_selection()
{
/#
	newarray = [];
	store_undo_state( "delete", level.selected_fx_ents );
	level.cfx_last_action = "none";
	i = 0;
	ent = level.createfxent[i];
	ent.looper delete();
	level.fx_highlightedent = undefined;
	ent notify( "stop_loop" );
	newarray[newarray.size] = ent;
	i++;
	level.createfxent = newarray;
	level.selected_fx = [];
	level.selected_fx_ents = [];
	clear_fx_hudelements();
#/
// SP = 0x0 - check OK
}

// 0x6280
move_selection_to_cursor( skip_undo )
{
/#
	origin = level.createfxcursor["position"];
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "move_to_cursor";
	center = get_center_of_array( level.selected_fx_ents );
	difference = center - origin;
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v["origin"] -= difference;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x633C
insert_effect()
{
/#
	setmenu( "creation" );
	level.effect_list_offset = 0;
	clear_fx_hudelements();
	set_fx_hudelement( "Pick effect type to create:" );
	set_fx_hudelement( "1. One Shot fx" );
	set_fx_hudelement( "2. Looping fx" );
	set_fx_hudelement( "3. Exploder" );
	set_fx_hudelement( "4. Looping sound" );
	set_fx_hudelement( "(c) Cancel" );
	set_fx_hudelement( "(x) Exit" );
#/
// SP = 0x0 - check OK
}

// 0x63B8
show_help()
{
/#
	clear_fx_hudelements();
	set_fx_hudelement( "Help:" );
	set_fx_hudelement( "I                Insert effect" );
	set_fx_hudelement( "Shift + D        Delete selected effects" );
	set_fx_hudelement( "F + 5            Save" );
	set_fx_hudelement( "A button         Toggle the selection of the current effect" );
	set_fx_hudelement( "X button         Toggle effect rotation mode" );
	set_fx_hudelement( "Y button         Move selected effects up or rotate X axis" );
	set_fx_hudelement( "B button         Move selected effects down or rotate X axis" );
	set_fx_hudelement( "D-pad Up/Down    Move selected effects Forward/Backward or rotate Y axis" );
	set_fx_hudelement( "D-pad Left/Right Move selected effects Left/Right or rotate Z axis" );
	set_fx_hudelement( "R Shoulder       Move selected effects to the cursor" );
	set_fx_hudelement( "L Shoulder       Hold to select multiple effects" );
	set_fx_hudelement( "Right Arrow      Next page in options menu" );
	set_fx_hudelement( "Left Arrow       Previous page in options menu" );
	set_fx_hudelement( "A                Add option to the selected effects" );
	set_fx_hudelement( "X                Exit effect options menu" );
	set_fx_hudelement( "Shift + D        Drop selected effects to the ground" );
	set_fx_hudelement( "R                Reset the rotation of the selected effects" );
	set_fx_hudelement( "L Stick          Copy effects" );
	set_fx_hudelement( "R Stick          Paste effects" );
	set_fx_hudelement( "V                Copy the angles from the most recently selected fx onto all selected fx." );
	set_fx_hudelement( "F + 2            Toggle CreateFX dot and menu drawing" );
	set_fx_hudelement( "U                UFO" );
	set_fx_hudelement( "N                Noclip" );
	set_fx_hudelement( "R Trig + L Trig  Jump forward 8000 units" );
	set_fx_hudelement( "T                Toggle Timescale FAST" );
	set_fx_hudelement( "Y                Toggle Timescale SLOW" );
	set_fx_hudelement( "H                Toggle FX Visibility" );
	set_fx_hudelement( "W                Toggle effect wireframe" );
	set_fx_hudelement( "P                Toggle FX Profile" );
#/
// SP = 0x0 - check OK
}

// 0x6534
center_text_init()
{
/#
	level.cfx_center_text = [];
	level.cfx_center_text_index = 0;
	level.cfx_center_text_max = 3;
	new_array = [];
	p = 0;
	center_hud = newdebughudelem();
	center_hud settext( " " );
	center_hud.horzalign = "center";
	center_hud.vertalign = "middle";
	center_hud.alignx = "center";
	center_hud.aligny = "middle";
	center_hud.foreground = 1;
	center_hud.fontscale = 1.1;
	center_hud.sort = 21;
	center_hud.alpha = 1;
	center_hud.color = ( 1, 0, 0 );
	center_hud.y = p * 25;
	new_array[p] = center_hud;
	p++;
	level.cfx_center_text = new_array;
#/
// SP = 0x0 - check OK
}

// 0x6604
center_text_add( text )
{
/#
	level.cfx_center_text[level.cfx_center_text_index] settext( text );
	level.cfx_center_text_index++;
	level.cfx_center_text_index = level.cfx_center_text_max - 1;
#/
// SP = 0x0 - check OK
}

// 0x6658
center_text_clear()
{
/#
	p = 0;
	level.cfx_center_text[p] settext( " " );
	p++;
	level.cfx_center_text_index = 0;
#/
// SP = 0x0 - check OK
}

// 0x6694
write_error_msg( filename )
{
/#
	level notify( "write_error" );
	level endon( "write_error" );
	center_text_clear();
	center_text_add( "File " + filename + " is not writeable." );
	center_text_add( "If it's checked out, restart your computer!" );
	center_text_add( "Hold the A Button to dismiss." );
	player = get_players()[0];
	center_text_clear();
	level.write_error = "";
	wait 0.25;
#/
// SP = 0x0 - check OK
}

// 0x672C
select_last_entity( skip_undo )
{
/#
	select_entity( level.createfxent.size - 1, level.createfxent[level.createfxent.size - 1], skip_undo );
#/
// SP = 0x0 - check OK
}

// 0x675C
post_entity_creation_function()
{
/#
	self.textalpha = 0;
	self.drawn = 1;
#/
// SP = 0x0 - check OK
}

// 0x6774
copy_ents()
{
/#
	array = [];
	i = 0;
	ent = level.selected_fx_ents[i];
	newent = spawnstruct();
	newent.v = ent.v;
	newent post_entity_creation_function();
	array[array.size] = newent;
	i++;
	level.stored_ents = array;
#/
// SP = 0x0 - check OK
}

// 0x67EC
paste_ents()
{
/#
	delay_min = GetDvarInt( #"0x72501C7" );
	delay_max = GetDvarInt( #"0xA6DCBA49" );
	temp = delay_min;
	delay_min = delay_max;
	delay_max = temp;
	clear_entity_selection();
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "none";
	i = 0;
	level.stored_ents[i].uniqueid = level.cfx_uniqueid;
	level.cfx_uniqueid++;
	level.stored_ents[i].v["delay"] = randomintrange( delay_min, delay_max );
	add_and_select_entity( level.stored_ents[i], "skip_undo" );
	i++;
	move_selection_to_cursor( "skip_undo" );
	update_selected_entities();
	store_undo_state( "add", level.stored_ents );
	level.stored_ents = [];
	copy_ents();
#/
// SP = 0x0 - check OK
}

// 0x6914
paste_ents_onto_ents()
{
/#
	println( "^2CreateFX: Number of source ents must match the number of destination ents for Paste Into to work." );
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "none";
	selected_ents_temp = level.selected_fx_ents;
	i = 0;
	source_ent = level.stored_ents[i];
	target_ent = level.selected_fx_ents[i];
	source_ent.uniqueid = level.cfx_uniqueid;
	level.cfx_uniqueid++;
	source_ent.v["angles"] = target_ent.v["angles"];
	source_ent.v["origin"] = target_ent.v["origin"];
	add_and_select_entity( source_ent, "skip_undo" );
	i++;
	i = 0;
	deselect_entity( selected_ents_temp[i].last_fx_index, selected_ents_temp[i] );
	i++;
	update_selected_entities();
	store_undo_state( "add", level.stored_ents );
	level.stored_ents = [];
	copy_ents();
#/
// SP = 0x0 - check OK
}

// 0x6A70
add_and_select_entity( ent, skip_undo )
{
/#
	level.createfxent[level.createfxent.size] = ent;
	select_last_entity( skip_undo );
#/
// SP = 0x0 - check OK
}

// 0x6A9C
stop_fx_looper()
{
/#
	self.looper delete();
	self [[level.cfx_func_stop_loopsound]]();
#/
// SP = 0x0 - check OK
}

// 0x6AC4
restart_fx_looper()
{
/#
	stop_fx_looper();
	self set_forward_and_up_vectors();
	self [[level.cfx_func_create_looper]]();
	self [[level.cfx_func_create_triggerfx]]();
	self [[level.cfx_func_create_loopsound]]();
#/
// SP = 0x0 - check OK
}

// 0x6B2C
update_selected_entities()
{
/#
	i = 0;
	ent = level.selected_fx_ents[i];
	ent restart_fx_looper();
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6B6C
copy_angles_of_selected_ents()
{
/#
	level notify( "new_ent_selection" );
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "copy_angles";
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v["angles"] = level.selected_fx_ents[level.selected_fx_ents.size - 1].v["angles"];
	ent set_forward_and_up_vectors();
	i++;
	update_selected_entities();
#/
// SP = 0x0 - check OK
}

// 0x6C00
reset_axis_of_selected_ents()
{
/#
	level notify( "new_ent_selection" );
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "reset_axis";
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v["angles"] = ( 0, 0, 0 );
	ent set_forward_and_up_vectors();
	i++;
	update_selected_entities();
#/
// SP = 0x0 - check OK
}

// 0x6C80
last_selected_entity_has_changed( lastselectentity )
{
/#
	return 1;
	return entities_are_selected();
	return lastselectentity != level.selected_fx_ents[level.selected_fx_ents.size - 1];
#/
// SP = 0x0 - check OK
}

// 0x6CC4
createfx_showorigin( id, org, delay, org2, type, exploder, id2, firefx, firefxdelay, firefxsound, fxsound, fxquake, fxdamage, soundalias, repeat, delay_min, delay_max, damage_radius, firefxtimeout )
{
/#
#/
// SP = 0x0 - check OK
}

// 0x6CF8
drop_selection_to_ground()
{
/#
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "drop_to_ground";
	i = 0;
	ent = level.selected_fx_ents[i];
	trace = bullettrace( ent.v["origin"], ent.v["origin"] + vector_scale( ( 0, 0, -1 ), 2048 ), 0, undefined );
	ent.v["origin"] = trace["position"];
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6D90
set_off_exploders()
{
/#
	level notify( "createfx_exploder_reset" );
	exploders = [];
	i = 0;
	ent = level.selected_fx_ents[i];
	exploders[ent.v["exploder"]] = 1;
	i++;
	keys = getarraykeys( exploders );
	i = 0;
	exploder( keys[i] );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6E20
turn_off_exploders()
{
/#
	level notify( "createfx_exploder_reset" );
	exploders = [];
	i = 0;
	ent = level.selected_fx_ents[i];
	exploders[ent.v["exploder"]] = 1;
	i++;
	keys = getarraykeys( exploders );
	i = 0;
	stop_exploder( keys[i] );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6EB0
draw_distance()
{
/#
	count = 0;
	last_pos = ( 0, 0, 0 );
	setdvar( "createfx_drawdist", "1500" );
	player = get_players()[0];
	maxdist = GetDvarInt( #"0x94DFBE78" );
	maxdistsqr = maxdist * maxdist;
	println( "Waiting for createfx to save..." );
	flag_waitopen( "createfx_saving" );
	i = 0;
	ent = level.createfxent[i];
	ent.drawn = 1;
	ent.drawn = distancesquared( player.origin, ent.v["origin"] ) <= maxdistsqr;
	count++;
	count = 0;
	wait 0.05;
	i++;
	wait 0.1;
	wait 0.1;
	last_pos = player.origin;
#/
// SP = 0x0 - check OK
}

// 0x6FEC
createfx_save( autosave )
{
/#
	flag_waitopen( "createfx_saving" );
	flag_set( "createfx_saving" );
	resettimeout();
	savemode = "AUTOSAVE";
	savemode = "USER SAVE";
	type = "server";
	old_time = GetTime();
	println( "\n^3#### CREATEFX SERVER " + savemode + " BEGIN ####" );
	file_error = generate_fx_log( type, autosave );
	println( ( ( "^3#### CREATEFX SERVER " + savemode ) + " END (Time: " ) + GetTime() - old_time * 0.001 + " seconds)####" );
	println( "^3#### CREATEFX " + savemode + " CANCELLED ####" );
	createfx_emergency_backup();
	old_time = GetTime();
	println( "\n^3#### CREATEFX CLIENT " + savemode + " BEGIN ####" );
	file_error = generate_fx_log( "client" );
	println( ( ( "^3#### CREATEFX CLIENT " + savemode ) + " END (Time: " ) + GetTime() - old_time * 0.001 + " seconds)####" );
	iprintln( "CreateFX clientscript file is not writeable! Aborting save." );
	println( "^3#### CREATEFX " + savemode + " CANCELLED ####" );
	flag_clear( "createfx_saving" );
#/
// SP = 0x0 - check OK
}

// 0x7140
createfx_autosave()
{
/#
	wait_time = GetDvarInt( #"0x6AC13DAC" );
	wait_time = 120;
	wait wait_time;
	createfx_save( 1 );
#/
// SP = 0x0 - check OK
}

// 0x719C
createfx_emergency_backup()
{
/#
	println( "^5#### CREATEFX EMERGENCY BACKUP BEGIN ####" );
	file_error = generate_fx_log( "server", 1 );
	iprintln( "Error saving to backup.gsc.  All is lost!" );
	println( "^5#### CREATEFX EMERGENCY BACKUP END ####" );
	flag_clear( "createfx_saving" );
#/
// SP = 0x0 - check OK
}

// 0x71F8
move_player_around_map_fast()
{
/#
	player = get_players()[0];
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	trace = bullettrace( eye, eye + vector_scale( direction_vec, 20000 ), 0, undefined );
	dist = distance( eye, trace["position"] );
	position = eye + vector_scale( direction_vec, dist - 64 );
	player setorigin( position );
#/
// SP = 0x0 - check OK
}

// 0x7288
move_player_to_next_same_effect( forward_search, lastselectentity )
{
/#
	player = get_players()[0];
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	forward_search = 1;
	ent = level.selected_fx_ents[level.selected_fx_ents.size - 1];
	start_index = 0;
	ent = level.cfx_next_ent;
	ent = level.cfx_previous_ent;
	index = get_ent_index( ent );
	select_entity( index, ent );
	position = ent.v["origin"] - vector_scale( direction_vec, 175 );
	player setorigin( position );
	level.cfx_previous_ent = ent;
	level.cfx_next_ent = get_next_ent_with_same_id( index, ent.v["fxid"] );
	level.cfx_next_ent = undefined;
	level.cfx_previous_ent = undefined;
	i = 0;
	start_index = i;
	deselect_entity( i, ent );
	i++;
	level.cfx_previous_ent = ent;
	ent = get_next_ent_with_same_id( i, ent.v["fxid"] );
	select_entity( level.ent_found_index, ent );
	position = ent.v["origin"] - vector_scale( direction_vec, 175 );
	player setorigin( position );
	level.cfx_next_ent = get_next_ent_with_same_id( level.ent_found_index, ent.v["fxid"] );
	level.cfx_next_ent = ent;
	ent = get_previous_ent_with_same_id( i, ent.v["fxid"] );
	select_entity( level.ent_found_index, ent );
	position = ent.v["origin"] - vector_scale( direction_vec, 175 );
	player setorigin( position );
	level.cfx_previous_ent = get_previous_ent_with_same_id( level.ent_found_index, ent.v["fxid"] );
	ent = level.last_ent_moved_to;
	i = 0;
	i++;
	i++;
	ent = level.selected_fx_ents[i];
	ent = level.selected_fx_ents[0];
	ent = level.selected_fx_ents[i - 1];
	ent = level.selected_fx_ents[level.selected_fx_ents.size - 1];
	level.last_ent_moved_to = ent;
	position = ent.v["origin"] - vector_scale( direction_vec, 175 );
	player setorigin( position );
#/
// SP = 0x0 - check OK
}

// 0x7584
get_next_ent_with_same_id( index, ent_id )
{
/#
	i = index + 1;
	level.ent_found_index = i;
	return level.createfxent[i];
	i++;
	i = 0;
	level.ent_found_index = i;
	return level.createfxent[i];
	i++;
	level.ent_found_index = index;
	return level.createfxent[index];
#/
// SP = 0x0 - check OK
}

// 0x7624
get_previous_ent_with_same_id( index, ent_id )
{
/#
	i = index - 1;
	level.ent_found_index = i;
	return level.createfxent[i];
	i--;
	i = level.createfxent.size - 1;
	level.ent_found_index = i;
	return level.createfxent[i];
	i--;
	level.ent_found_index = index;
	return level.createfxent[index];
#/
// SP = 0x0 - check OK
}

// 0x76C8
get_ent_index( ent )
{
/#
	i = 0;
	return i;
	i++;
	return -1;
#/
// SP = 0x0 - check OK
}

// 0x7704
select_ents_by_property( property, add_to_selection )
{
/#
	ent = level.selected_fx_ents[level.selected_fx_ents.size - 1];
	prop_to_match = ent.v[property];
	clear_entity_selection();
	i = 0;
	select_entity( i, level.createfxent[i] );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x77A0
print_ambient_fx_inventory()
{
/#
	fx_list = get_level_ambient_fx();
	ent_list = [];
	fx_list_count = [];
	println( "\n\n^2INVENTORY OF AMBIENT EFFECTS: " );
	i = 0;
	ent_list[i] = level.createfxent[i].v["fxid"];
	i++;
	i = 0;
	count = 0;
	j = 0;
	count++;
	ent_list[j] = "";
	j++;
	fx_list_count[i] = count;
	i++;
	i = 0;
	j = i + 1;
	temp_count = fx_list_count[i];
	temp_id = fx_list[i];
	fx_list_count[i] = fx_list_count[j];
	fx_list[i] = fx_list[j];
	fx_list_count[j] = temp_count;
	fx_list[j] = temp_id;
	j++;
	i++;
	i = 0;
	switch ( fx_list_count[i] )
	{
		case 0:
			print( "^1" );
			break;
		case 1:
			print( "^3" );
			break;
		default:
	}
	print( fx_list_count[i] + "\t" + fx_list[i] + "\n" );
	i++;
	print( "\n" );
#/
// SP = 0x0 - check OK
}

// 0x795C
vector_changed( old, new )
{
/#
	return 1;
	return 0;
#/
// SP = 0x0 - check OK
}

// 0x7984
dot_changed( old, new )
{
/#
	dot = vectordot( old, new );
	return 1;
	return 0;
#/
// SP = 0x0 - check OK
}

// 0x79B4
damage_void( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset )
{
/#
#/
// SP = 0x0 - check OK
}

// 0x79D4
handle_camera()
{
/#
	level notify( "new_camera" );
	level endon( "new_camera" );
	movement = ( 0, 0, 0 );
	level.camera = spawn( "script_origin", ( 0, 0, 0 ) );
	level.camera setmodel( "tag_origin" );
	players = get_players();
	players[0] playerlinktodelta( level.camera, "tag_origin", 1, 0, 0, 0, 0, 1 );
	players[0] disableweapons();
	level.camera_snapto = 1;
	level.stick_camera = 1;
	level.camera_prev_snapto = 0;
	level.cameravec = ( 90, 150, 20 );
	model = undefined;
	n_y_vector = 0;
	n_x_vector = 0;
	zoom_level = 300;
	b_changes_x = 0;
	b_changes_z = 0;
	b_changes_y = 0;
	test_string = "";
	originoffset = vector_scale( level.cameravec, -1 );
	temp_offset = originoffset + vector_scale( ( 0, 0, -1 ), 60 );
	anglesoffset = vectortoangles( temp_offset );
	players = get_players();
	newmovement = players[0] getnormalizedmovement();
	dolly_movement = players[0] getnormalizedcameramovement();
	n_y_vector += -0.2;
	b_changes_y = 1;
	n_y_vector += 0.2;
	b_changes_y = 1;
	b_changes_y = 0;
	n_x_vector += -0.4;
	b_changes_x = 1;
	n_x_vector += 0.4;
	b_changes_x = 1;
	b_changes_x = 0;
	zoom_level += 30;
	b_changes_z = 1;
	zoom_level += -30;
	b_changes_z = 1;
	b_changes_z = 0;
	newmovement = ( n_x_vector, n_y_vector, newmovement[2] );
	movement = ( 0, 0, 0 );
	movement = vector_scale( movement, 0.8 ) + vector_scale( newmovement, 1 - 0.8 );
	tilt = max( 0, 10 + movement[0] * 160 );
	level.cameravec = ( cos( movement[1] * 180 ) * zoom_level, sin( movement[1] * 180 ) * zoom_level, tilt );
	iprintln( level.cameravec[0] + " " + level.cameravec[1] + " " + level.cameravec[2] );
	level.camera_prev_snapto = level.camera_snapto;
	originoffset = vector_scale( level.cameravec, -1 );
	temp_offset = originoffset + vector_scale( ( 0, 0, -1 ), 60 );
	anglesoffset = vectortoangles( temp_offset );
	model = spawn( "script_origin", level.current_select_ent.v["origin"] );
	model setmodel( "tag_origin" );
	model.origin = level.current_select_ent.v["origin"];
	level.camera linkto( model, "tag_origin", level.cameravec, anglesoffset );
	wait 0.05;
	level.camera unlink();
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x7DB4
camera_hud_toggle( text )
{
/#
	level.camera_hud destroy();
	level.camera_hud = newdebughudelem();
	level.camera_hud settext( text );
	level.camera_hud.horzalign = "left";
	level.camera_hud.vertalign = "bottom";
	level.camera_hud.alignx = "left";
	level.camera_hud.aligny = "bottom";
	level.camera_hud.foreground = 1;
	level.camera_hud.fontscale = 1.1;
	level.camera_hud.sort = 21;
	level.camera_hud.alpha = 1;
	level.camera_hud.color = ( 1, 1, 1 );
#/
// SP = 0x0 - check OK
}

// 0x7E64
init_sp_paths()
{
/#
	level.cfx_server_scriptdata = "createfx/";
	level.cfx_client_scriptdata = "clientcreatefx/";
	level.cfx_server_loop = "maps\\_utility::createLoopEffect";
	level.cfx_server_oneshot = "maps\\_utility::createOneshotEffect";
	level.cfx_server_exploder = "maps\\_utility::createExploder";
	level.cfx_server_loopsound = "maps\\_createfx::createLoopSound";
	level.cfx_server_scriptgendump = "maps\\createfx\\" + level.script + "_fx::main();";
	level.cfx_client_loop = "clientscripts\\_fx::createLoopEffect";
	level.cfx_client_oneshot = "clientscripts\\_fx::createOneshotEffect";
	level.cfx_client_exploder = "clientscripts\\_fx::createExploder";
	level.cfx_client_loopsound = "clientscripts\\_fx::createLoopSound";
	level.cfx_client_scriptgendump = "clientscripts\\_createfx\\" + level.script + "_fx::main();";
	level.cfx_func_run_gump_func = maps\_load_common::run_gump_functions;
	level.cfx_func_loopfx = maps\_fx::loopfxthread;
	level.cfx_func_oneshotfx = maps\_fx::oneshotfxthread;
	level.cfx_func_soundfx = maps\_fx::create_loopsound;
	level.cfx_func_script_gen_dump = maps\_load_common::script_gen_dump;
	level.cfx_func_stop_loopsound = maps\_fx::stop_loopsound;
	level.cfx_func_create_looper = maps\_fx::create_looper;
	level.cfx_func_create_triggerfx = maps\_fx::create_triggerfx;
	level.cfx_func_create_loopsound = maps\_fx::create_loopsound;
#/
// SP = 0x0 - check OK
}

// 0x7F50
make_sp_player_invulnerable( player )
{
/#
	player thread magic_bullet_shield();
#/
// SP = 0x0 - check OK
}

// 0x7F6C
delete_arrays_in_sp()
{
	ai = getaiarray();
	i = 0;
	ai[i] delete();
	i++;
	spawners = getspawnerarray();
	i = 0;
	spawners[i] delete();
	i++;
	orgs = getentarray( "script_origin", "classname" );
	i = 0;
	orgs[i] delete();
	i++;
// SP = 0x0 - check OK
}

// 0x801C
used_in_animation( sp )
{
	a_keys = getarraykeys( level.scr_anim );
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x8084
init_mp_paths()
{
/#
#/
// SP = 0x0 - check OK
}

// 0x8090
callback_playerconnect()
{
/#
#/
// SP = 0x0 - check OK
}

// 0x809C
delete_spawns()
{
	spawn_classes = [];
	spawn_classes[spawn_classes.size] = "mp_dm_spawn";
	spawn_classes[spawn_classes.size] = "mp_tdm_spawn";
	spawn_classes[spawn_classes.size] = "mp_dom_spawn";
	spawn_classes[spawn_classes.size] = "mp_dom_spawn_axis_start";
	spawn_classes[spawn_classes.size] = "mp_dom_spawn_allies_start";
	spawn_classes[spawn_classes.size] = "mp_res_spawn_allies";
	spawn_classes[spawn_classes.size] = "mp_res_spawn_axis";
	spawn_classes[spawn_classes.size] = "mp_res_spawn_axis_start";
	foreach ( class in spawn_classes )
	{
		spawns = getentarray( class, "classname" );
		foreach ( spawn in spawns )
		{
			spawn delete();
		}
	}
// SP = 0x0 - check OK
}

// 0x8170
createfxdelay()
{
/#
	wait 10;
	level.createfx_delay_done = 1;
#/
// SP = 0x0 - check OK
}
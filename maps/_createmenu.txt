// maps/_createmenu.gsc

#include common_scripts\utility;


// 0x964
add_menu( menu_name, title )
{
/#
	println( "^1level.menu_sys[" + menu_name + "] already exists, change the menu_name" );
	level.menu_sys[menu_name] = spawnstruct();
	level.menu_sys[menu_name].title = "none";
	level.menu_sys[menu_name].title = title;
#/
// SP = 0x0 - check OK
}

// 0x9C8
add_menuoptions( menu_name, option_text, func, key )
{
/#
	level.menu_sys[menu_name].options = [];
	num = level.menu_sys[menu_name].options.size;
	level.menu_sys[menu_name].options[num] = option_text;
	level.menu_sys[menu_name].function[num] = func;
	level.menu_sys[menu_name].func_key = [];
	level.menu_sys[menu_name].func_key[num] = key;
#/
// SP = 0x0 - check OK
}

// 0xA6C
add_menu_child( parent_menu, child_menu, child_title, child_number_override, func )
{
/#
	add_menu( child_menu, child_title );
	level.menu_sys[child_menu].parent_menu = parent_menu;
	level.menu_sys[parent_menu].children_menu = [];
	size = level.menu_sys[parent_menu].children_menu.size;
	size = child_number_override;
	level.menu_sys[parent_menu].children_menu[size] = child_menu;
	level.menu_sys[parent_menu].children_func = [];
	level.menu_sys[parent_menu].children_func[size] = func;
#/
// SP = 0x0 - check OK
}

// 0xB3C
set_no_back_menu( menu_name )
{
/#
	level.menu_sys[menu_name].no_back = 1;
#/
// SP = 0x0 - check OK
}

// 0xB58
enable_menu( menu_name )
{
/#
	disable_menu( "current_menu" );
	level.menu_cursor.y = 130;
	level.menu_cursor.current_pos = 0;
	level.menu_sys["current_menu"].title = set_menu_hudelem( level.menu_sys[menu_name].title, "title" );
	level.menu_sys["current_menu"].menu_name = menu_name;
	back_option_num = 0;
	options = level.menu_sys[menu_name].options;
	i = 0;
	text = i + 1 + ". " + options[i];
	level.menu_sys["current_menu"].options[i] = set_menu_hudelem( text, "options", 20 * i );
	back_option_num = i;
	i++;
	back_option_num++;
	text = back_option_num + 1 + ". " + "Back";
	level.menu_sys["current_menu"].options[back_option_num] = set_menu_hudelem( text, "options", 20 * back_option_num );
#/
// SP = 0x0 - check OK
}

// 0xCA0
disable_menu( menu_name )
{
/#
	level.menu_sys[menu_name].title destroy();
	options = level.menu_sys[menu_name].options;
	i = 0;
	options[i] destroy();
	i++;
	level.menu_sys[menu_name].title = undefined;
	level.menu_sys[menu_name].options = [];
#/
// SP = 0x0 - check OK
}

// 0xD40
set_menu_hudelem( text, type, y_offset )
{
/#
	y = 100;
	scale = 2;
	scale = 1.3;
	y += 30;
	y_offset = 0;
	y += y_offset;
	return set_hudelem( text, 10, y, scale );
#/
// SP = 0x0 - check OK
}

// 0xDB0
set_hudelem( text, x, y, scale, alpha, sort, debug_hudelem )
{
/#
	alpha = 1;
	scale = 1;
	sort = 20;
	hud = newclienthudelem( level.player );
	hud = newdebughudelem();
	hud.debug_hudelem = 1;
	hud.location = 0;
	hud.alignx = "left";
	hud.aligny = "middle";
	hud.foreground = 1;
	hud.fontscale = scale;
	hud.sort = sort;
	hud.alpha = alpha;
	hud.x = x;
	hud.y = y;
	hud.og_scale = scale;
	hud settext( text );
	return hud;
#/
// SP = 0x0 - check OK
}

// 0xEA8
menu_input()
{
/#
	level waittill( "menu_button_pressed", keystring );
	menu_name = level.menu_sys["current_menu"].menu_name;
	level.menu_cursor.y -= 20;
	level.menu_cursor.current_pos--;
	level.menu_cursor.y = level.menu_cursor.y + level.menu_sys["current_menu"].options.size - 1 * 20;
	level.menu_cursor.current_pos = level.menu_sys["current_menu"].options.size - 1;
	wait 0.1;
	level.menu_cursor.y += 20;
	level.menu_cursor.current_pos++;
	level.menu_cursor.y += level.menu_cursor.current_pos * -20;
	level.menu_cursor.current_pos = 0;
	wait 0.1;
	key = level.menu_cursor.current_pos;
	key = int( keystring ) - 1;
	level notify( "disable " + menu_name );
	level enable_menu( level.menu_sys[menu_name].parent_menu );
	level.menu_sys["current_menu"].options[key] thread hud_selector( level.menu_sys["current_menu"].options[key].x, level.menu_sys["current_menu"].options[key].y );
	error_msg = level [[level.menu_sys[menu_name].function[key]]]();
	error_msg = level [[level.menu_sys[menu_name].function[key]]]();
	level thread hud_selector_fade_out();
	level thread selection_error( error_msg, level.menu_sys["current_menu"].options[key].x, level.menu_sys["current_menu"].options[key].y );
	println( "^1 " + menu_name + " Menu does not have any children menus, yet" );
	println( "^1 " + menu_name + " Menu does not have a number " + key + " child menu, yet" );
	println( "^1 " + level.menu_sys[menu_name].options[key] + " Menu does not exist, yet" );
	func = level.menu_sys[menu_name].children_func[key];
	error_msg = [[func]]();
	level thread selection_error( error_msg, level.menu_sys["current_menu"].options[key].x, level.menu_sys["current_menu"].options[key].y );
	level enable_menu( level.menu_sys[menu_name].children_menu[key] );
	wait 0.1;
#/
// SP = 0x0 - check OK
}

// 0x1320
force_menu_back( waittill_msg )
{
/#
	level waittill( waittill_msg );
	wait 0.1;
	menu_name = level.menu_sys["current_menu"].menu_name;
	key = level.menu_sys[menu_name].options.size;
	key++;
	key = "1";
	key = "2";
	key = "3";
	key = "4";
	key = "5";
	key = "6";
	key = "7";
	key = "8";
	key = "9";
	level notify( "menu_button_pressed", key );
#/
// SP = 0x0 - check OK
}

// 0x1410
list_menu( list, x, y, scale, func, sort, start_num )
{
/#
	return -1;
	hud_array = [];
	i = 0;
	alpha = 0.3;
	alpha = 0.6;
	alpha = 1;
	alpha = 0.6;
	alpha = 0.3;
	hud = set_hudelem( list[i], x, y + i - 2 * 15, scale, alpha, sort );
	hud_array[hud_array.size] = hud;
	i++;
	new_move_list_menu( hud_array, list, start_num );
	current_num = 0;
	old_num = 0;
	selected = 0;
	level.menu_list_selected = 0;
	[[func]]( list[current_num] );
	level waittill( "menu_button_pressed", key );
	level.menu_list_selected = 1;
	current_num++;
	new_move_list_menu( hud_array, list, current_num );
	current_num--;
	new_move_list_menu( hud_array, list, current_num );
	selected = 1;
	selected = 0;
	level notify( "scroll_list" );
	old_num = current_num;
	[[func]]( list[current_num] );
	wait 0.1;
	i = 0;
	hud_array[i] destroy();
	i++;
	return current_num;
#/
// SP = 0x0 - check OK
}

// 0x1658
new_move_list_menu( hud_array, list, num )
{
/#
	i = 0;
	text = list[i + ( num - 2 )];
	text = "";
	hud_array[i] settext( text );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x16C0
move_list_menu( hud_array, dir, space, num, min_alpha, num_of_fades )
{
/#
	min_alpha = 0;
	num_of_fades = 3;
	side_movement = 0;
	side_movement = 1;
	movement = space;
	side_movement = 1;
	movement = space * -1;
	movement = space;
	movement = space * -1;
	i = 0;
	hud_array[i] moveovertime( 0.1 );
	hud_array[i].x += movement;
	hud_array[i].y += movement;
	temp = i - num;
	temp *= -1;
	alpha = 1 / ( temp + 1 );
	alpha = min_alpha;
	hud_array[i] fadeovertime( 0.1 );
	hud_array[i].alpha = alpha;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1808
hud_selector( x, y )
{
/#
	level thread hud_selector_fade_out();
	level.menu_cursor.alpha = 0;
	level.hud_selector = set_hudelem( undefined, x - 10, y, 1 );
	level.hud_selector setshader( "white", 125, 20 );
	level.hud_selector.color = ( 1, 1, 0.5 );
	level.hud_selector.alpha = 0.5;
	level.hud_selector.sort = 10;
#/
// SP = 0x0 - check OK
}

// 0x1890
hud_selector_fade_out( time )
{
/#
	time = 0.25;
	level.menu_cursor.alpha = 0.5;
	hud = level.hud_selector;
	level.hud_selector = undefined;
	hud fadeovertime( time );
	hud.alpha = 0;
	wait time + 0.1;
	hud destroy();
#/
// SP = 0x0 - check OK
}

// 0x1900
selection_error( msg, x, y )
{
/#
	hud = set_hudelem( undefined, x - 10, y, 1 );
	hud setshader( "white", 125, 20 );
	hud.color = vector_scale( ( 1, 0, 0 ), 0.5 );
	hud.alpha = 0.7;
	error_hud = set_hudelem( msg, x + 125, y, 1 );
	error_hud.color = ( 1, 0, 0 );
	hud fadeovertime( 3 );
	hud.alpha = 0;
	error_hud fadeovertime( 3 );
	error_hud.alpha = 0;
	wait 3.1;
	hud destroy();
	error_hud destroy();
#/
// SP = 0x0 - check OK
}

// 0x19E0
hud_font_scaler( mult )
{
/#
	self notify( "stop_fontscaler" );
	self endon( "death" );
	self endon( "stop_fontscaler" );
	og_scale = self.og_scale;
	mult = 1.5;
	self.fontscale = og_scale * mult;
	dif = og_scale - self.fontscale;
	dif /= 1 * 20;
	i = 0;
	self.fontscale += dif;
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1A6C
menu_cursor()
{
/#
	level.menu_cursor = set_hudelem( undefined, 0, 130, 1.3 );
	level.menu_cursor setshader( "white", 125, 20 );
	level.menu_cursor.color = ( 1, 0.5, 0 );
	level.menu_cursor.alpha = 0.5;
	level.menu_cursor.sort = 1;
	level.menu_cursor.current_pos = 0;
#/
// SP = 0x0 - check OK
}

// 0x1ADC
new_hud( hud_name, msg, x, y, scale )
{
/#
	level.hud_array = [];
	level.hud_array[hud_name] = [];
	hud = set_hudelem( msg, x, y, scale );
	level.hud_array[hud_name][level.hud_array[hud_name].size] = hud;
	return hud;
#/
// SP = 0x0 - check OK
}

// 0x1B44
remove_hud( hud_name )
{
/#
	huds = level.hud_array[hud_name];
	i = 0;
	destroy_hud( huds[i] );
	i++;
	level.hud_array[hud_name] = undefined;
#/
// SP = 0x0 - check OK
}

// 0x1B98
destroy_hud( hud )
{
/#
	hud destroy();
#/
// SP = 0x0 - check OK
}

// 0x1BB8
set_menus_pos_by_num( hud_array, num, x, y, space, min_alpha, num_of_fades )
{
/#
	min_alpha = 0.1;
	num_of_fades = 3;
	i = 0;
	temp = i - num;
	hud_array[i].y = y + temp * space;
	temp *= -1;
	alpha = 1 / ( temp + 1 );
	alpha = min_alpha;
	hud_array[i].alpha = alpha;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1C5C
popup_box( x, y, width, height, time, color, alpha )
{
/#
	alpha = 0.5;
	color = vector_scale( ( 0, 0, 1 ), 0.5 );
	hud = newclienthudelem( level.player );
	hud = newdebughudelem();
	hud.debug_hudelem = 1;
	hud.alignx = "left";
	hud.aligny = "middle";
	hud.foreground = 1;
	hud.sort = 30;
	hud.x = x;
	hud.y = y;
	hud.alpha = alpha;
	hud.color = color;
	hud.background = newclienthudelem( level.player );
	hud.background = newdebughudelem();
	hud.debug_hudelem = 1;
	hud.background.alignx = "left";
	hud.background.aligny = "middle";
	hud.background.foreground = 1;
	hud.background.sort = 25;
	hud.background.x = x + 2;
	hud.background.y = y + 2;
	hud.background.alpha = 0.75;
	hud.background.color = ( 0, 0, 0 );
	hud setshader( "white", 0, 0 );
	hud scaleovertime( time, width, height );
	hud.background setshader( "white", 0, 0 );
	hud.background scaleovertime( time, width, height );
	wait time;
	return hud;
#/
// SP = 0x0 - check OK
}

// 0x1E20
destroy_popup()
{
/#
	self.background scaleovertime( 0.25, 0, 0 );
	self scaleovertime( 0.25, 0, 0 );
	wait 0.1;
	self.background destroy();
	self destroy();
#/
// SP = 0x0 - check OK
}

// 0x1E84
dialog_text_box( dialog_msg, dialog_msg2, word_length )
{
/#
	y = 100;
	hud = new_hud( "dialog_box", undefined, 320 - 300 * 0.5, y, 1 );
	hud setshader( "white", 300, 100 );
	hud.aligny = "top";
	hud.color = vector_scale( ( 0, 0, 1 ), 0.2 );
	hud.alpha = 0.85;
	hud.sort = 20;
	hud = new_hud( "dialog_box", dialog_msg, 320 - 300 * 0.5 + 10, y + 10, 1.25 );
	hud.sort = 25;
	hud = new_hud( "dialog_box", dialog_msg2, 320 - 300 * 0.5 + 10, y + 30, 1.1 );
	hud.sort = 25;
	bg2_shader_width = 300 - 20;
	y = 150;
	hud = new_hud( "dialog_box", undefined, 320 - bg2_shader_width * 0.5, y, 1 );
	hud setshader( "white", bg2_shader_width, 20 );
	hud.aligny = "top";
	hud.color = ( 0, 0, 0 );
	hud.alpha = 0.85;
	hud.sort = 30;
	cursor_x = 320 - bg2_shader_width * 0.5 + 2;
	cursor_y = y + 8;
	hud = new_hud( "dialog_box", "Ok [A]", 320 - 50, y + 30, 1.25 );
	hud.alignx = "center";
	hud.sort = 25;
	hud = new_hud( "dialog_box", "Cancel [Y]", 320 + 50, y + 30, 1.25 );
	hud.alignx = "center";
	hud.sort = 25;
	hud = new_hud( "dialog_box", "Ok [enter]", 320 - 50, y + 30, 1.25 );
	hud.alignx = "center";
	hud.sort = 25;
	hud = new_hud( "dialog_box", "Cancel [end]", 320 + 50, y + 30, 1.25 );
	hud.alignx = "center";
	hud.sort = 25;
	result = dialog_text_box_input( cursor_x, cursor_y, word_length );
	remove_hud( "dialog_box" );
	return result;
#/
// SP = 0x0 - check OK
}

// 0x2120
dialog_text_box_input( cursor_x, cursor_y, word_length )
{
/#
	level.dialog_box_cursor = new_hud( "dialog_box", "|", cursor_x, cursor_y, 1.25 );
	level.dialog_box_cursor.sort = 75;
	level thread dialog_text_box_cursor();
	dialog_text_box_buttons();
	hud_word = new_hud( "dialog_box", "", cursor_x, cursor_y, 1.25 );
	hud_word.sort = 75;
	hud_letters = [];
	word = "";
	level waittill( "dialog_box_button_pressed", button );
	word = "-1";
	new_word = "";
	i = 0;
	new_word += word[i];
	i++;
	word = new_word;
	word += button;
	hud_word settext( word );
	x = cursor_x;
	i = 0;
	x += get_letter_space( word[i] );
	i++;
	level.dialog_box_cursor.x = x;
	wait 0.05;
	level notify( "stop_dialog_text_box_cursor" );
	level notify( "stop_dialog_text_input" );
	return word;
#/
// SP = 0x0 - check OK
}

// 0x22BC
dialog_text_box_buttons()
{
/#
	clear_universal_buttons( "dialog_text_buttons" );
	add_universal_button( "dialog_box", "_" );
	add_universal_button( "dialog_box", "0" );
	add_universal_button( "dialog_box", "1" );
	add_universal_button( "dialog_box", "2" );
	add_universal_button( "dialog_box", "3" );
	add_universal_button( "dialog_box", "4" );
	add_universal_button( "dialog_box", "5" );
	add_universal_button( "dialog_box", "6" );
	add_universal_button( "dialog_box", "7" );
	add_universal_button( "dialog_box", "8" );
	add_universal_button( "dialog_box", "9" );
	add_universal_button( "dialog_box", "a" );
	add_universal_button( "dialog_box", "b" );
	add_universal_button( "dialog_box", "c" );
	add_universal_button( "dialog_box", "d" );
	add_universal_button( "dialog_box", "e" );
	add_universal_button( "dialog_box", "f" );
	add_universal_button( "dialog_box", "g" );
	add_universal_button( "dialog_box", "h" );
	add_universal_button( "dialog_box", "i" );
	add_universal_button( "dialog_box", "j" );
	add_universal_button( "dialog_box", "k" );
	add_universal_button( "dialog_box", "l" );
	add_universal_button( "dialog_box", "m" );
	add_universal_button( "dialog_box", "n" );
	add_universal_button( "dialog_box", "o" );
	add_universal_button( "dialog_box", "p" );
	add_universal_button( "dialog_box", "q" );
	add_universal_button( "dialog_box", "r" );
	add_universal_button( "dialog_box", "s" );
	add_universal_button( "dialog_box", "t" );
	add_universal_button( "dialog_box", "u" );
	add_universal_button( "dialog_box", "v" );
	add_universal_button( "dialog_box", "w" );
	add_universal_button( "dialog_box", "x" );
	add_universal_button( "dialog_box", "y" );
	add_universal_button( "dialog_box", "z" );
	add_universal_button( "dialog_box", "enter" );
	add_universal_button( "dialog_box", "kp_enter" );
	add_universal_button( "dialog_box", "end" );
	add_universal_button( "dialog_box", "backspace" );
	add_universal_button( "dialog_box", "del" );
	add_universal_button( "dialog_box", "button_a" );
	add_universal_button( "dialog_box", "button_y" );
	level thread universal_input_loop( "dialog_box", "stop_dialog_text_input", undefined, undefined );
#/
// SP = 0x0 - check OK
}

// 0x25B0
dialog_text_box_cursor()
{
/#
	level endon( "stop_dialog_text_box_cursor" );
	level.dialog_box_cursor.alpha = 0;
	wait 0.5;
	level.dialog_box_cursor.alpha = 1;
	wait 0.5;
#/
// SP = 0x0 - check OK
}

// 0x25F0
get_letter_space( letter )
{
/#
	space = 10;
	space = 7;
	space = 5;
	space = 4;
	space = 3;
	space = 6;
	return space;
#/
// SP = 0x0 - check OK
}

// 0x26C8
add_universal_button( button_group, name )
{
/#
	level.u_buttons[button_group] = [];
	level.u_buttons[button_group][level.u_buttons[button_group].size] = name;
#/
// SP = 0x0 - check OK
}

// 0x2718
clear_universal_buttons( button_group )
{
/#
	level.u_buttons[button_group] = [];
#/
// SP = 0x0 - check OK
}

// 0x2730
universal_input_loop( button_group, end_on, use_attackbutton, mod_button, no_mod_button )
{
/#
	level endon( end_on );
	use_attackbutton = 0;
	notify_name = button_group + "_button_pressed";
	buttons = level.u_buttons[button_group];
	level.u_buttons_disable[button_group] = 0;
	wait 0.05;
	wait 0.05;
	wait 0.05;
	level notify( notify_name, "fire" );
	wait 0.1;
	i = 0;
	level notify( notify_name, buttons[i] );
	wait 0.1;
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x2854
disable_buttons( button_group )
{
/#
	level.u_buttons_disable[button_group] = 1;
#/
// SP = 0x0 - check OK
}

// 0x286C
enable_buttons( button_group )
{
/#
	wait 1;
	level.u_buttons_disable[button_group] = 0;
#/
// SP = 0x0 - check OK
}

// 0x2888
any_button_hit( button_hit, type )
{
/#
	buttons = [];
	buttons[0] = "0";
	buttons[1] = "1";
	buttons[2] = "2";
	buttons[3] = "3";
	buttons[4] = "4";
	buttons[5] = "5";
	buttons[6] = "6";
	buttons[7] = "7";
	buttons[8] = "8";
	buttons[9] = "9";
	buttons = level.buttons;
	i = 0;
	return 1;
	i++;
	return 0;
#/
// SP = 0x0 - check OK
}
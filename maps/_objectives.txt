// maps/_objectives.gsc

#include maps\_utility;
#include common_scripts\utility;


// 0xBE8
init()
{
	level.a_objectives = [];
	level.n_obj_index = 0;
	level thread objectives();
// SP = 0x0 - check OK
}

// 0xC08
register_objective( str_objective )
{
	level.a_objectives = [];
	level.n_obj_index = 0;
/#
	assert( level.n_obj_index < 32, "Too many objectives. Max limit is 32." );
#/
	n_index = level.n_obj_index;
	level.a_objectives[n_index] = str_objective;
	level.n_obj_index++;
	level.a_obj_addstate[n_index] = 0;
	return n_index;
// SP = 0x0 - check OK
}

// 0xC64
set_objective( n_objective, ent_or_pos, str_obj_type, n_targets, b_show_message, n_timer )
{
	level.objective_queue = [];
	b_show_message = 1;
	s_info = spawnstruct();
	s_info.n_objective = n_objective;
	s_info.objective_pos = ent_or_pos;
	s_info.str_objective_type = str_obj_type;
	s_info.n_objective_targets = n_targets;
	s_info.b_show_message = b_show_message;
	s_info.n_timer = n_timer;
	s_info.target_id = ent_or_pos.target_id;
	level.objective_queue[level.objective_queue.size] = s_info;
/#
	assertmsg( "Undefined objective number. Make sure the objective is registered and a valid objective is passed into set_objective()." );
#/
// SP = 0x0 - check OK
}

// 0xD28
set_objective_perk( n_objective, ent_or_pos, n_fade_radius, e_volume )
{
	n_fade_radius = 1024;
/#
	assert( IsDefined( n_objective ), "Undefined objective number.  Make sure the objective is registered and a valid objective is passed into set_objective_perk()." );
#/
/#
	assert( IsDefined( ent_or_pos ), "Undefined ent_or_pos.  Make sure a valid entity or world position is passed into set_objective_perk()." );
#/
	flag_wait( "level.player" );
	v_pos = undefined;
	v_pos = ent_or_pos;
	v_pos = ent_or_pos.origin;
	e_volume = spawn( "trigger_radius", v_pos + ( 0, 0, 0 - n_fade_radius ), 0, n_fade_radius, n_fade_radius * 2 );
	e_volume.targetname = "perk_obj_trigger_" + n_objective;
	objective_add( n_objective, "current", level.a_objectives[n_objective], v_pos );
	objective_setflag( n_objective, "perk", 1 );
	setsaveddvar( "cg_objectiveIndicatorPerkFarFadeDist", 10000 );
	e_volume thread _objective_perk_volume( n_objective );
// SP = 0x0 - check OK
}

// 0xE18
remove_objective_perk( n_objective )
{
	level notify( "stop_obj_" + n_objective );
	objective_delete( n_objective );
	t_radius = getent( "perk_obj_trigger_" + n_objective, "targetname" );
	t_radius delete();
// SP = 0x0 - check OK
}

// 0xE60
_objective_perk_volume( n_objective )
{
	level endon( "stop_obj_" + n_objective );
	self endon( "death" );
	b_touching = 0;
	objective_set3d( n_objective, 1, "white", &"SP_OBJECTIVES_INTERACT" );
	b_touching = 1;
	wait 0.05;
	objective_set3d( n_objective, 0 );
	b_touching = 0;
	wait 0.05;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xF0C
skip_objective( n_objective )
{
	set_objective( n_objective, undefined, undefined, undefined, 0 );
	set_objective( n_objective, undefined, "done", undefined, 0 );
// SP = 0x0 - check OK
}

// 0xF3C
_pop_objective()
{
	wait 0.05;
	s_info = level.objective_queue[0];
	arrayremoveindex( level.objective_queue, 0 );
	return s_info;
// SP = 0x0 - check OK
}

// 0xF80
objectives()
{
	wait 0.05;
	n_current_obj = -1;
	pos = undefined;
	level.a_obj_addstate = [];
	level.a_obj_structs = [];
	i = 0;
	level.a_obj_addstate[i] = 0;
	i++;
	s_info = _pop_objective();
	level.n_objective = s_info.n_objective;
	level.objective_pos = s_info.objective_pos;
	level.target_id = s_info.target_id;
	level.str_objective_type = s_info.str_objective_type;
	level.n_objective_targets = s_info.n_objective_targets;
	level.b_show_objective_message = s_info.b_show_message;
	level.n_target_id = 0;
	n_objective = level.n_objective;
	objective_add( n_objective, "current", "", level.str_objective_type, level.objective_pos, undefined, level.b_show_objective_message );
	level.a_obj_addstate[n_objective] = 1;
	objective_position( n_objective, level.objective_pos );
	objective_string( n_objective, level.a_objectives[n_objective], level.n_objective_targets );
	b_use_pos_origin = 1;
	b_use_pos_origin = 0;
	level.n_target_id = 0;
	objective_add( n_objective, "current", level.a_objectives[n_objective], undefined, undefined, level.b_show_objective_message );
	level.a_obj_addstate[n_objective] = 1;
	objective_add( n_objective, "current", level.a_objectives[n_objective], level.objective_pos.origin, undefined, level.b_show_objective_message );
	level.a_obj_addstate[n_objective] = 1;
	level.objective_pos thread set_target_id( level.n_target_id );
	_objective_set_position( b_use_pos_origin );
	objective_state( n_objective, "current", level.b_show_objective_message );
	_objective_set_position( b_use_pos_origin );
	level.n_targets_objective = n_objective;
	level.n_target_id++;
	_objective_set_position( b_use_pos_origin );
	objective_type();
	objective_add( n_objective, "current", level.a_objectives[n_objective], undefined, undefined, level.b_show_objective_message );
	level.a_obj_addstate[n_objective] = 1;
	objective_type( s_info.n_timer );
	objective_set3d_prethink( n_objective, 1, ( 1, 1, 1 ) );
	objective_set3d_prethink( n_objective, 0 );
	objective_type();
	n_current_obj = n_objective;
	pos = level.objective_pos;
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x135C
set_vectarget_id( v_obj_pos, n_target_id )
{
	level.a_obj_structs[level.a_obj_structs.size] = spawnstruct();
	level.a_obj_structs[level.a_obj_structs.size].origin = v_obj_pos;
	level.a_obj_structs[level.a_obj_structs.size].target_id = n_target_id;
// SP = 0x0 - check OK
}

// 0x13A4
get_target_id( v_obj_pos )
{
	i = 0;
	return level.a_obj_structs[level.a_obj_structs.size].target_id;
	i++;
// SP = 0x0 - check OK
}

// 0x13F0
objective_type( n_timer )
{
	n_timer = 0;
	n_objective = level.n_objective;
	level notify( "update_objective" + n_objective );
	objective_set3d_prethink( n_objective, 1, "default", level.str_objective_type, n_timer );
	return;
	objective_setflag( n_objective, "fadeoutonscreen", 0 );
	switch ( level.str_objective_type )
	{
		case "":
			objective_add( n_objective, "current", "", undefined, undefined, level.b_show_objective_message );
			break;
		case "*":
			objective_state( n_objective, "done", level.b_show_objective_message );
			level.n_target_id = 0;
			break;
		case "-":
			objective_state( n_objective, "failed", level.b_show_objective_message );
			break;
		case "active":
			objective_delete( n_objective );
			break;
		case "breadcrumb":
			objective_additionalposition( n_objective, level.target_id, ( 0, 0, 0 ) );
			objective_set3d_prethink( n_objective, 0 );
			objective_additionalposition( n_objective, get_target_id( level.objective_pos ), ( 0, 0, 0 ) );
			objective_set3d_prethink( n_objective, 0 );
			break;
		case "deactivate":
			objective_set3d_prethink( n_objective, 1, "white", &"SP_OBJECTIVES_INTERACT", n_timer );
			setsaveddvar( "cg_objectiveIndicatorPerkFarFadeDist", 1024 );
			objective_setflag( n_objective, "perk", 1 );
			break;
		case "defend":
			objective_set3d_prethink( n_objective, 1, "default", &"SP_OBJECTIVES_DEFEND", n_timer );
			objective_setflag( n_objective, "fadeoutonscreen", 1 );
			break;
		case "delete":
			objective_set3d_prethink( n_objective, 1, "default", &"SP_OBJECTIVES_FOLLOW", n_timer );
			objective_setflag( n_objective, "fadeoutonscreen", 1 );
			break;
		case "done":
			objective_set3d_prethink( n_objective, 1, "default", "*" );
			break;
		case "failed":
		case "follow":
			objective_set3d_prethink( n_objective, 1, "default", undefined, n_timer );
			break;
		case "interact":
			objective_set3d_prethink( n_objective, 1, "default", " ", n_timer );
			break;
		case "reactivate":
			objective_state( n_objective, "done", 0 );
			break;
		case "remove":
			objective_state( n_objective, "active", 0 );
			break;
		default:
			objstring = "SP_OBJECTIVES_" + toupper( level.str_objective_type );
			objective_set3d_prethink( n_objective, 1, "default", istring( objstring ), n_timer );
			break;
	}
// SP = 0x0 - check OK
}

// 0x1704
set_target_id( n_target_id )
{
	self.target_id = n_target_id;
// SP = 0x0 - check OK
}

// 0x171C
is_objective_pos_the_same( pos1, pos2 )
{
	return 1;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1804
objective_breadcrumb( n_obj_index, str_trig_targetname )
{
	t_current = getent( str_trig_targetname, "targetname" );
	s_current = getstruct( t_current.target, "targetname" );
	set_objective( n_obj_index, s_current, "breadcrumb" );
	set_objective( n_obj_index, t_current, "breadcrumb" );
	set_objective( n_obj_index, t_current, "breadcrumb" );
	str_trig_targetname = t_current.target;
	t_current trigger_wait();
	str_trig_targetname = undefined;
// SP = 0x0 - check OK
}

// 0x18A8
objective_breadcrumb_area( n_obj_index, str_area_name, str_endon )
{
	level endon( str_endon );
/#
	assert( self != level, "objective_breadcrumb_area:: self needs to be the entity to check against, such as the player or a vehicle" );
#/
	a_e_areas = getentarray( str_area_name, "targetname" );
/#
	assert( a_e_areas.size > 1, "objective_breadcrumb_area:: there should be at least 2 areas to use this function" );
#/
	e_curr_area = undefined;
	e_last_area = undefined;
	b_area_updated = 0;
	n_curr_obj = level.n_obj_index;
	foreach ( e_area in a_e_areas )
	{
		e_curr_area = undefined;
		e_last_area = undefined;
		e_last_area = undefined;
		e_last_area = e_curr_area;
		e_curr_area = e_area;
		b_area_updated = 1;
	}
	b_area_updated = 0;
	s_dest = getstruct( e_curr_area.target, "targetname" );
	set_objective( n_obj_index, s_dest, "breadcrumb" );
	e_dest = getent( e_curr_area.target, "targetname" );
	set_objective( n_obj_index, e_dest, "breadcrumb" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x1A2C
objective_set3d_prethink( n_objective, use3d, color, alternate_text, n_timer )
{
	n_timer = 0;
	objective_set3d( n_objective, use3d );
	return;
	color = "default";
	alternate_text = "";
	position_offset = ( 0, 0, 0 );
	switch ( level.objective_pos.vehicletype )
	{
		case "apc_btr60":
		case "apc_cougar_gun_turret":
		case "apc_cougar_gun_turret_low":
		case "civ_ambulance":
			position_offset = vector_scale( ( 0, 0, 1 ), 72 );
			break;
		case "civ_van_sprinter_la2":
		case "drone_metalstorm":
		case "drone_metalstorm_karma":
		case "drone_metalstorm_rts":
		case "heli_hind_afghan":
		case "heli_hind_angola":
			position_offset = vector_scale( ( 0, 0, 1 ), 132 );
			break;
		case "heli_hip":
			position_offset = ( -24, 0, 108 );
			break;
		case "horse":
			position_offset = ( 96, 48, -75 );
			break;
		case "horse_low":
		case "horse_player":
		case "horse_player_low":
		case "plane_f35_fast_la2":
			position_offset = vector_scale( ( 0, 0, 1 ), 225 );
			break;
		case "plane_f35_fast_nocockpit":
		case "plane_x78":
			position_offset = vector_scale( ( 0, 0, 1 ), 512 );
			break;
		case "tank_t62":
		case "tank_t62_nophysics":
		case "truck_rts_convoy":
			position_offset = vector_scale( ( 0, 0, 1 ), 65 );
	}
	position_offset = ( 0, 0, level.objective_pos.height / 2 );
	position_offset = level.objective_pos.use_obj_offset;
	objective_set3d( n_objective, use3d, color, alternate_text, -1, position_offset );
	level thread _objective_set3d_prethink_flash( n_objective, use3d, color, alternate_text, position_offset, n_timer );
	return;
// SP = 0x0 - check OK
}

// 0x1C78
_objective_set3d_prethink_flash( objective_number, use3d, color, alternate_text, position_offset, n_timer )
{
	level endon( "update_objective" + objective_number );
	orig_color = color;
	s_timer = new_timer();
	n_current_time = s_timer timer_wait( 0.05 );
	n_flash_wait = lerpfloat( 1, 0.05, n_current_time / n_timer );
	objective_set3d( objective_number, use3d, "red", alternate_text, -1, position_offset );
	wait n_flash_wait;
	objective_set3d( objective_number, use3d, orig_color, alternate_text, -1, position_offset );
	wait n_flash_wait;
// SP = 0x0 - check OK
}

// 0x1D14
_objective_set_position( b_use_pos_origin )
{
	level notify( "update_objective" + level.n_objective );
	objective_pos = level.objective_pos.origin;
	objective_pos = level.objective_pos;
	n_target_id = undefined;
	i = 0;
	n_target_id = i;
	i++;
/#
	assert( IsDefined( n_target_id ), "Ran out of positions for a new objective in _objective_set_position()" );
#/
	objective_pos.n_obj_id = n_target_id;
	level notify( "multi_objective_set", n_target_id );
	n_target_id = level.n_target_id;
	objective_additionalposition( level.n_objective, n_target_id, objective_pos );
	level.objective_pos thread set_target_id( n_target_id );
	objective_position( level.n_objective, objective_pos );
	level.objective_pos.is_breadcrumb = 1;
// SP = 0x0 - check OK
}
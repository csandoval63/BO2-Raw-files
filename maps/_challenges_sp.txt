// maps/_challenges_sp.gsc

#include maps\_utility;


// 0x3E4
inc_challenge_stat( str_stat_name )
{
/#
	assert( IsDefined( level._challenge_lookup[str_stat_name] ), "Tried to increment the counter for invalid challenge " + str_stat_name + "!" );
#/
	self addsessstat( "PlayerSessionStats", "challengeCounters", level._challenge_lookup[str_stat_name], 1 );
// SP = 0x0 - check OK
}

// 0x434
get_challenge_stat( str_stat_name )
{
/#
	assert( IsDefined( level._challenge_lookup[str_stat_name] ), "Tried to get the challenge counter for invalid challenge " + str_stat_name + "!" );
#/
	return self getsessstat( "PlayerSessionStats", "challengeCounters", level._challenge_lookup[str_stat_name] );
// SP = 0x0 - check OK
}

// 0x480
get_challenge_complete( str_stat_name )
{
/#
	assert( IsDefined( level._challenge_lookup[str_stat_name] ), "Tried to get the completion status for the invalid challenge " + str_stat_name + "!" );
#/
	currval = self get_challenge_stat( str_stat_name );
	targetval = level._challenge_target[str_stat_name];
	return currval >= targetval;
// SP = 0x0 - check OK
}

// 0x4D4
register_challenge( str_stat_name, logic_func )
{
/#
	assert( isplayer( self ), "register_challenge() with stat name " + str_stat_name + " must be called on a player." );
#/
	level._challenges_complete = [];
	level._challenge_lookup = [];
	level._challenge_target = [];
	levelalias = getlevelalias();
	challengenum = tablelookup( "sp/challengeTable.csv", 1, levelalias, 2, str_stat_name, 0 );
	targetval = int( tablelookup( "sp/challengeTable.csv", 1, levelalias, 2, str_stat_name, 4 ) );
/#
	assert( challengenum != "", "Invalid challenge " + str_stat_name + " for level " + levelalias + " requested, please check challengeTable.csv!" );
#/
	level._challenge_lookup[str_stat_name] = "CHALLENGE_" + challengenum;
	level._challenge_target[str_stat_name] = targetval;
	maps\_utility::waitforstats();
	str_challenge_notify = "challenge_" + str_stat_name + "_increment";
	self thread [[logic_func]]( str_challenge_notify );
	return;
	self thread challenge_notify_listener( str_stat_name, str_challenge_notify );
// SP = 0x0 - check OK
}

// 0x604
challenge_notify_listener( str_stat_name, str_challenge_notify )
{
	self endon( "stop_" + str_stat_name );
	self waittill( str_challenge_notify );
	self inc_challenge_stat( str_stat_name );
	is_challenge_stat_complete( str_stat_name );
// SP = 0x0 - check OK
}

// 0x640
is_challenge_stat_complete( str_stat_name )
{
	level.challenge_awarded = GetTime();
	level notify( str_stat_name + "_challenge_complete" );
	dochallengecompleteui();
	level._challenges_complete[str_stat_name] = 1;
	self setsessstat( "challengeCompletion", level._challenge_lookup[str_stat_name], 1 );
// SP = 0x0 - check OK
}

// 0x6A4
challenge_stop( str_stat_name )
{
	self notify( "stop_" + str_stat_name );
// SP = 0x0 - check OK
}
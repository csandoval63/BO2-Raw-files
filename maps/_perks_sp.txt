// maps/_perks_sp.gsc

#include maps\_perks_sp;
#include maps\_utility;
#include common_scripts\utility;


// 0x6F8
perk_init( ref )
{
	foreach ( player in getplayers() )
	{
		perk = spawnstruct();
		perk.ref = ref;
		player.perk_refs[player.perk_refs.size] = perk;
	}
// SP = 0x0 - check OK
}

// 0x760
cac_get_dvar_int( dvar, def )
{
	return int( cac_get_dvar( dvar, def ) );
// SP = 0x0 - check OK
}

// 0x784
cac_get_dvar( dvar, def )
{
	return GetDvarFloat( dvar );
	setdvar( dvar, def );
	return def;
// SP = 0x0 - check OK
}

// 0x7B4
initperkdvars()
{
	level.cac_armorpiercing_data = cac_get_dvar_int( "perk_armorpiercing", "40" ) / 100;
	level.cac_bulletdamage_data = cac_get_dvar_int( "perk_bulletDamage", "35" );
	level.cac_fireproof_data = cac_get_dvar_int( "perk_fireproof", "95" );
	level.cac_armorvest_data = cac_get_dvar_int( "perk_armorVest", "80" );
	level.cac_explosivedamage_data = cac_get_dvar_int( "perk_explosiveDamage", "25" );
	level.cac_flakjacket_data = cac_get_dvar_int( "perk_flakJacket", "35" );
	level.cac_flakjacket_hardcore_data = cac_get_dvar_int( "perk_flakJacket_hardcore", "9" );
// SP = 0x0 - check OK
}

// 0x84C
perks_init( usehud )
{
	return;
	level.sp_perks_initialized = 1;
	level.armorpiercing_data = 0.4;
	level.bulletdamage_data = 1.35;
	level.armorvest_data = 0.8;
	level.explosivedamage_data = 25;
	level.flakjacket_data = 35;
	level.blink_warning = 5000;
	level.icon_fullbright_alpha = 0.85;
	level.icon_halfbright_alpha = 0.2;
	level.player_perk_slots = 3;
	foreach ( player in getplayers() )
	{
		player.perk_slots = [];
		player.perk_refs = [];
		i = 0;
		player.perk_slots[i] = spawnstruct();
		player.perk_slots[i].ref = "";
		player.perk_slots[i].expire = -1;
		i++;
		player thread maps\_perks_sp::perk_hud();
		pos_x = 200 - level.player_perk_slots * 28;
		i = 0;
		player.perk_slots[i].pos_x = pos_x;
		player.perk_slots[i].pos_y = 186;
		player.perk_slots[i].icon_size = 28;
		player.perk_slots[i].icon = undefined;
		pos_x += 30;
		i++;
	}
	perk_init( "specialty_brutestrength" );
	perk_init( "specialty_intruder" );
	perk_init( "specialty_trespasser" );
	perk_init( "specialty_longersprint" );
	perk_init( "specialty_unlimitedsprint" );
	perk_init( "specialty_endurance" );
	perk_init( "specialty_flakjacket" );
	perk_init( "specialty_deadshot" );
	perk_init( "specialty_fastads" );
	perk_init( "specialty_rof" );
	perk_init( "specialty_fastreload" );
	perk_init( "specialty_fastweaponswitch" );
	perk_init( "specialty_fastmeleerecovery" );
	perk_init( "specialty_bulletdamage" );
	perk_init( "specialty_armorvest" );
	perk_init( "specialty_detectexplosive" );
	perk_init( "specialty_holdbreath" );
// SP = 0x0 - check OK
}

// 0xAA8
find_perk( ref )
{
	foreach ( perk in self.perk_refs )
	{
		return perk;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0xAF0
find_free_slot()
{
	i = 0;
	return i;
	i++;
	return undefined;
// SP = 0x0 - check OK
}

// 0xB28
find_slot_by_ref( ref )
{
/#
	assert( IsDefined( ref ), "Invalid perk ref passed into find_slot_by_ref" + ref );
#/
	i = 0;
	return i;
	i++;
	return undefined;
// SP = 0x0 - check OK
}

// 0xB78
has_perk( ref )
{
	return IsDefined( find_slot_by_ref( ref ) );
// SP = 0x0 - check OK
}

// 0xB90
give_perk( give_ref )
{
	perk = self find_perk( give_ref );
/#
	assert( IsDefined( perk ), "Undefined/unsupported perk. " + give_ref );
#/
	return 1;
	return 0;
	slot = self find_free_slot();
/#
	assert( IsDefined( slot ) );
#/
	self.perk_slots[slot].ref = give_ref;
	self.perk_slots[slot].expire = -1;
	self setperk( give_ref );
	self notify( "give_perk", give_ref );
	self notify( "perk_update", give_ref );
	return 1;
// SP = 0x0 - check OK
}

// 0xC40
give_perk_for_a_time( give_ref, timeinsec )
{
	slot = find_slot_by_ref( give_ref );
	self.perk_slots[slot].expire = GetTime() + timeinsec * 1000;
	self thread perk_expire_watcher();
// SP = 0x0 - check OK
}

// 0xC90
perk_expire_watcher()
{
	self endon( "death" );
	self notify( "perk_watcher" );
	self endon( "perk_watcher" );
	done = 0;
	done = 1;
	i = 0;
	current_time = GetTime();
	done = 0;
	take_perk_by_slot( i );
	i++;
	wait 1;
// SP = 0x0 - check OK
}

// 0xD14
take_perk( take_ref )
{
/#
	assert( IsDefined( self find_perk( take_ref ) ), "Undefined/unsupported perk." + take_ref );
#/
	return;
	slot = self find_slot_by_ref( take_ref );
	self.perk_slots[slot].ref = "";
	self.perk_slots[slot].expire = -1;
	self unsetperk( take_ref );
	self notify( "take_perk", take_ref );
	self notify( "perk_update", take_ref );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xDA4
take_perk_by_slot( slot )
{
	take_perk( self.perk_slots[slot].ref );
// SP = 0x0 - check OK
}

// 0xDD8
take_all_perks()
{
	foreach ( perk in self.perk_refs )
	{
		self unsetperk( perk.ref );
	}
	i = 0;
	take_perk_by_slot( i );
	i++;
// SP = 0x0 - check OK
}

// 0xE44
show_perks()
{
// SP = 0x0 - check OK
}

// 0xE4C
hide_perks()
{
// SP = 0x0 - check OK
}

// 0xE54
update_on_give_perk()
{
	self endon( "death" );
	self waittill( "give_perk", ref );
	self flag_set( "HUD_giving_perk" );
	wait 0.05;
	wait 1;
	self flag_clear( "HUD_giving_perk" );
// SP = 0x0 - check OK
}

// 0xEB8
update_on_take_perk()
{
	self endon( "death" );
	self waittill( "take_perk", ref );
	self flag_set( "HUD_taking_perk" );
	wait 0.05;
	wait 1;
	self flag_clear( "HUD_taking_perk" );
// SP = 0x0 - check OK
}

// 0xF1C
perk_hud()
{
	self endon( "death" );
	self flag_init( "HUD_giving_perk" );
	self flag_init( "HUD_taking_perk" );
	self thread update_on_give_perk();
	self thread update_on_take_perk();
	self waittill( "perk_update", ref );
	slot = self find_slot_by_ref( ref );
// SP = 0x0 - check OK
}
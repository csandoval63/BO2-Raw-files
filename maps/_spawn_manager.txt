// maps/_spawn_manager.gsc

#include maps\_laststand;
#include maps\_names;
#include common_scripts\utility;
#include maps\_utility;


// 0x1924
spawn_manager_main()
{
	level.spawn_manager_max_frame_spawn = 3;
	level.spawn_manager_total_count = 0;
	level.spawn_manager_max_ai = 24;
	level.spawn_manager_active_ai = 0;
	level.spawn_manager_auto_targetname_num = 0;
	level thread spawn_manager_throttle_think();
	level.spawn_managers = [];
	trigger_spawn_manager_setup();
	array_func( getentarray( "spawn_manager", "classname" ), ::spawn_manager_create_spawn_manager_struct );
	array_thread( level.spawn_managers, ::spawn_manager_think );
	start_triggers();
/#
	level thread spawn_manager_debug();
	level thread spawn_manager_debug_spawn_manager();
	level thread spawn_manager_debug_spawner_values();
#/
// SP = 0x0 - check OK
}

// 0x19C8
trigger_spawn_manager_setup()
{
	triggers = get_triggers( "trigger_multiple", "trigger_once", "trigger_radius", "trigger_lookat", "trigger_box" );
	j = 0;
	trigger = triggers[j];
	trigger_spawn_manager_create( trigger );
	j++;
// SP = 0x0 - check OK
}

// 0x1A30
trigger_spawn_manager_create( trigger )
{
	ents = undefined;
/#
	assert( IsDefined( trigger.target ), "Trigger at " + trigger.origin + " is a spawn manager type ( TRIGGER_SPAWN_MANAGER ) but does not target any spawners" );
#/
	ents = getentarray( trigger.target, "targetname" );
	i = 0;
	ent = ents[i];
/#
	assert( ent.classname != "spawn_manager", "Trigger at " + trigger.origin + " is a spawn manager type ( TRIGGER_SPAWN_MANAGER ) and also targetting a spawn manager " + ent.targetname );
#/
/#
	assert( issubstr( ent.classname, "actor" ), "Trigger at " + trigger.origin + " is a spawn manager type ( TRIGGER_SPAWN_MANAGER ) but targets a non-actor entity" );
#/
	i++;
	spawn_manager_create_spawn_manager_struct( trigger );
// SP = 0x0 - check OK
}

// 0x1B04
spawn_manager_create_spawn_manager_struct( from_ent )
{
	from_ent = self;
	spawn_manager_ent = spawnstruct();
	spawn_manager_ent.script_noteworthy = "spawn_manager";
	is_trigger = issubstr( tolower( from_ent.classname ), "trigger" );
	from_ent.targetname = generate_targetname();
	spawn_manager_ent.sm_id = from_ent.targetname;
	spawn_manager_ent.sm_id = from_ent.name;
/#
	foreach ( sm in level.spawn_managers )
	{
/#
		assertmsg( "Multiple spawn managers wi id '" + spawn_manager_ent.sm_id + "'! If they need to have the same targetname, use the 'name' KVP to make them unique." );
#/
	}
#/
	spawn_manager_ent.targetname = from_ent.targetname;
	spawn_manager_ent.target = from_ent.target;
	from_ent.target = spawn_manager_ent.targetname;
	spawn_manager_ent.script_wait = from_ent.script_wait;
	spawn_manager_ent.script_wait_min = from_ent.script_wait_min;
	spawn_manager_ent.script_wait_max = from_ent.script_wait_max;
	spawn_manager_ent.script_delay = from_ent.script_delay;
	spawn_manager_ent.script_delay_min = from_ent.script_delay_min;
	spawn_manager_ent.script_delay_max = from_ent.script_delay_max;
	spawn_manager_ent.sm_count = from_ent.sm_count;
	spawn_manager_ent.count = from_ent.count;
	spawn_manager_ent.sm_active_count = from_ent.sm_active_count;
	spawn_manager_ent.sm_group_size = from_ent.sm_group_size;
	spawn_manager_ent.sm_spawner_count = from_ent.sm_spawner_count;
	spawn_manager_ent.sm_die = from_ent.sm_die;
	spawn_manager_ent.script_next_spawn_manager = from_ent.script_next_spawn_manager;
	from_ent delete();
	level.spawn_managers[level.spawn_managers.size] = spawn_manager_ent;
// SP = 0x0 - check OK
}

// 0x1D7C
generate_targetname()
{
	targetname = "sm_auto_" + level.spawn_manager_auto_targetname_num;
	level.spawn_manager_auto_targetname_num++;
	return targetname;
// SP = 0x0 - check OK
}

// 0x1D98
spawn_manager_setup()
{
/#
	assert( IsDefined( self ) );
#/
/#
	assert( IsDefined( self.target ) );
#/
	self.sm_group_size = 1;
	self.sm_group_size_min = get_min_value( self.sm_group_size );
	self.sm_group_size_max = get_max_value( self.sm_group_size );
/#
	assert( self.sm_group_size_max >= self.sm_group_size_min, "Max range should be greater or equal to the min value for sm_count on spawn manager " + self.sm_id );
#/
	self.sm_spawner_count = self.allspawners.size;
	self.sm_spawner_count_min = get_min_value( self.sm_spawner_count );
	self.sm_spawner_count_max = get_max_value( self.sm_spawner_count );
/#
	assert( self.sm_spawner_count_max >= self.sm_spawner_count_min, "Max range should be greater or equal to the min value for sm_count on spawn manager " + self.sm_id );
#/
	self.sm_spawner_count = spawn_manager_random_count( self.sm_spawner_count_min, self.sm_spawner_count_max + 1 );
	self calculate_count();
	self.spawners = self spawn_manager_get_spawners();
	self.sm_active_count_min = get_min_value( self.sm_active_count );
	self.sm_active_count_max = get_max_value( self.sm_active_count );
	self.sm_active_count_min = 0;
	self.sm_active_count_max = 0;
	foreach ( spawner in self.spawners )
	{
		self.sm_active_count_min += spawner.sm_active_count_min;
		self.sm_active_count_max += spawner.sm_active_count_max;
	}
/#
	assert( self.sm_active_count_max >= self.sm_group_size_max, "Max active count should be greater or equal to the max value for sm_group_size on spawn manager trigger with targetname " + self.targetname );
#/
	self.sm_active_count_min = self.sm_group_size_max;
/#
	assert( self.sm_active_count_max >= self.sm_active_count_min, "Max range should be greater or equal to the min value for sm_active_count on spawn manager trigger with targetname " + self.targetname );
#/
	self.sm_active_count = spawn_manager_random_count( self.sm_active_count_min, self.sm_active_count_max + 1 );
	self.script_forcespawn = 0;
/#
	assert( self.count >= self.count_min );
#/
/#
	assert( self.count <= self.count_max );
#/
/#
	assert( self.sm_active_count >= self.sm_active_count_min );
#/
/#
	assert( self.sm_active_count <= self.sm_active_count_max );
#/
/#
	assert( self.sm_group_size_max <= self.sm_active_count );
#/
/#
	assert( self.sm_group_size_min <= self.sm_active_count );
#/
// SP = 0x0 - check OK
}

// 0x2038
spawn_manager_can_spawn( spawngroupsize )
{
	totalfree = self.count - self.spawncount;
	activefree = self.sm_active_count - self.activeai.size;
	canspawngroup = spawngroupsize > 0;
	globalfree = level.spawn_manager_max_ai - level.spawn_manager_active_ai;
/#
	assert( self.enable == flag( "sm_" + self.sm_id + "_enabled" ), "Spawn manager flags should not be set by the level script." );
#/
	return self.enable;
	return self.enable;
// SP = 0x0 - check OK
}

// 0x20F8
spawn_manager_spawn( maxdelay )
{
	self endon( "death" );
	start = GetTime();
	level waittill( "spawn_manager_throttle_reset" );
	ai = self spawn_ai();
	ai maps\_names::get_name();
	return ai;
	return ai;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2184
spawn_manager_spawn_group( spawner, spawngroupsize )
{
	spawn_count = 0;
	i = 0;
	ai = undefined;
	ai = spawner spawn_manager_spawn( 2 );
	spawn_count++;
	level.spawn_manager_frame_spawns += 1;
	ai.script_radius = self.script_radius;
	ai.script_radius = spawner.script_radius;
	ai thread spawn_accounting( spawner, self );
	wait 0.05;
	i++;
// SP = 0x0 - check OK
}

// 0x2248
spawn_accounting( spawner, manager )
{
	targetname = manager.targetname;
	classname = spawner.classname;
	level.spawn_manager_total_count += 1;
	manager.spawncount += 1;
	level.spawn_manager_active_ai += 1;
	origin = spawner.origin;
	manager.activeai[manager.activeai.size] = self;
	spawner.activeai[spawner.activeai.size] = self;
	self waittill( "death" );
	arrayremovevalue( spawner.activeai, self );
	arrayremovevalue( manager.activeai, self );
	level.spawn_manager_active_ai -= 1;
// SP = 0x0 - check OK
}

// 0x230C
spawn_manager_think()
{
	self spawn_manager_flags_setup();
	self thread spawn_manager_enable_think();
	self thread spawn_manager_kill_think();
	self endon( "kill" );
	self.enable = 0;
	self.activeai = [];
	self.spawncount = 0;
	isfirsttime = 1;
	self.allspawners = getentarray( self.target, "targetname" );
/#
	assert( self.allspawners.size, "Spawn manager '" + self.sm_id + "' doesn't target any spawners." );
#/
	self waittill( "enable" );
	script_delay();
	self spawn_manager_setup();
	self spawn_manager_get_spawn_group_size();
	self.sm_group_size = self.count - self.spawncount;
	spawned = 0;
	cleanup_spawners();
/#
	assert( self.sm_group_size > 0 );
#/
	potential_spawners = [];
	priority_spawners = [];
	i = 0;
	current_spawner = self.spawners[i];
	spawnerfree = current_spawner.sm_active_count - current_spawner.activeai.size;
	priority_spawners[priority_spawners.size] = current_spawner;
	potential_spawners[potential_spawners.size] = current_spawner;
	i++;
	spawner = random( priority_spawners );
	spawner = random( potential_spawners );
/#
	assert( IsDefined( spawner.count ) );
#/
	self.sm_group_size = spawner.count;
	spawn_manager_wait();
	isfirsttime = 0;
	self spawn_manager_spawn_group( spawner, self.sm_group_size );
	spawned = 1;
	spawner_max_active_count = 0;
	i = 0;
	current_spawner = self.spawners[i];
	spawner_max_active_count = current_spawner.sm_active_count;
	i++;
	self.sm_group_size_max = spawner_max_active_count;
	self spawn_manager_get_spawn_group_size();
	wait 0.05;
/#
	assert( self.spawncount <= self.count, "Spawn manager spawned more then the allowed AI's" );
#/
	wait 0.05;
/#
	assert( !(flag( "sm_" + self.sm_id + "_killed" )), "Spawn manager flags should not be set by the level script." );
#/
/#
	assert( !(flag( "sm_" + self.sm_id + "_complete" )), "Spawn manager flags should not be set by the level script." );
#/
	wait maps\_laststand::player_num_in_laststand() / get_players().size * 8;
	self spawn_manager_flag_complete();
	self notify( "kill" );
// SP = 0x0 - check OK
}

// 0x265C
spawn_manager_enable_think()
{
	self endon( "kill" );
	self waittill( "enable" );
	self.enable = 1;
	self spawn_manager_flag_enabled();
	self waittill( "disable" );
	self spawn_manager_flag_disabled();
// SP = 0x0 - check OK
}

// 0x2698
spawn_manager_enable_trigger_think( spawn_manager )
{
	spawn_manager endon( "enable" );
	self waittill( "trigger" );
	spawn_manager notify( "enable" );
// SP = 0x0 - check OK
}

// 0x26B8
spawn_manager_kill_think()
{
	self waittill( "kill" );
	spawn_manager_enable( self.script_next_spawn_manager );
	self spawn_manager_flag_disabled();
	self spawn_manager_flag_killed();
	i = 0;
	self.allspawners[i] delete();
	i++;
	array_wait( self.activeai, "death" );
	self spawn_manager_flag_cleared();
	arrayremovevalue( level.spawn_managers, self );
// SP = 0x0 - check OK
}

// 0x275C
spawn_manager_kill_trigger_think()
{
/#
	assert( IsDefined( self.sm_kill ) );
#/
	sm_kill_ids = strtok( self.sm_kill, ";" );
	self waittill( "trigger" );
	id_i = 0;
	killspawner_num = int( sm_kill_ids[id_i] );
	sm_i = 0;
	level.spawn_managers[sm_i] notify( "kill" );
	level.spawn_managers[sm_i] notify( "kill" );
	sm_i++;
	id_i++;
// SP = 0x0 - check OK
}

// 0x2838
start_triggers( trigger_type )
{
	triggers = get_triggers( "trigger_multiple", "trigger_once", "trigger_use", "trigger_radius", "trigger_lookat", "trigger_damage", "trigger_box" );
	foreach ( trig in triggers )
	{
		trig thread spawn_manager_kill_trigger_think();
		targets = get_spawn_manager_array( trig.target );
		foreach ( target in targets )
		{
			trig thread spawn_manager_enable_trigger_think( target );
		}
	}
// SP = 0x0 - check OK
}

// 0x2904
spawn_manager_throttle_think()
{
	level.spawn_manager_frame_spawns = 0;
	level notify( "spawn_manager_throttle_reset" );
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x2928
spawn_manager_random_count( min, max )
{
	return randomintrange( min, max );
// SP = 0x0 - check OK
}

// 0x2944
get_spawn_manager_array( targetname )
{
	spawn_manager_array = [];
	i = 0;
	spawn_manager_array[spawn_manager_array.size] = level.spawn_managers[i];
	i++;
	return spawn_manager_array;
	return level.spawn_managers;
// SP = 0x0 - check OK
}

// 0x299C
spawn_manager_get_spawners()
{
	arrayremovevalue( self.allspawners, undefined );
	exclude = [];
	i = 0;
	exclude[exclude.size] = self.allspawners[i];
	self.allspawners[i] calculate_count();
	i++;
	self.allspawners = array_exclude( self.allspawners, exclude );
	spawner_count_with_min_active = 0;
	i = 0;
	self.allspawners[i] spawner_calculate_active_count( self );
	spawner_count_with_min_active++;
	self.allspawners[i].activeai = [];
	i++;
/#
	assert( spawner_count_with_min_active >= self.allspawners.size, "On spawn manager '" + self.sm_id + "' with a min group size of " + self.sm_group_size_min + ", you must have all spawners with an active count of at least " + self.sm_group_size_min + "." );
#/
	groupspawners = self.allspawners;
	spawner_count = self.sm_spawner_count;
	spawner_count = self.allspawners.size;
	spawners = [];
	spawner = random( groupspawners );
	spawners[spawners.size] = spawner;
	arrayremovevalue( groupspawners, spawner );
	return spawners;
// SP = 0x0 - check OK
}

// 0x2B24
spawner_calculate_active_count( spawn_manager )
{
	self.sm_active_count = level.spawn_manager_max_ai;
	self.sm_active_count_min = get_min_value( self.sm_active_count );
	self.sm_active_count_max = get_max_value( self.sm_active_count );
/#
	assert( self.sm_active_count_max >= self.sm_active_count_min, "Max value should be greater or equal to the min value for the spawner's sm_active_count on spawn manager " + spawn_manager.sm_id );
#/
	self.sm_active_count = randomintrange( self.sm_active_count_min, self.sm_active_count_max + 1 );
// SP = 0x0 - check OK
}

// 0x2B98
spawn_manager_get_spawn_group_size()
{
	self.sm_group_size = randomintrange( self.sm_group_size_min, self.sm_group_size_max + 1 );
	self.sm_group_size = self.sm_group_size_min;
	return self.sm_group_size;
// SP = 0x0 - check OK
}

// 0x2BD8
cleanup_spawners()
{
	spawners = [];
	i = 0;
	spawners[spawners.size] = self.spawners[i];
	self.spawners[i] delete();
	i++;
	self.spawners = spawners;
// SP = 0x0 - check OK
}

// 0x2C48
get_min_value( value )
{
	values = strtok( value, " " );
	num_players = get_players();
	i = num_players.size - 1;
	return int( values[i - 1] );
	return int( values[i] );
	i--;
	return undefined;
// SP = 0x0 - check OK
}

// 0x2CD0
get_max_value( value )
{
	values = strtok( value, " " );
	num_players = get_players();
	i = num_players.size;
	return int( values[i] );
	i--;
	return undefined;
// SP = 0x0 - check OK
}

// 0x2D2C
spawn_manager_sanity()
{
/#
	assert( self.activeai.size <= self.sm_active_count );
#/
/#
	assert( self.spawncount <= self.count );
#/
// SP = 0x0 - check OK
}

// 0x2D64
spawn_manager_wait()
{
	wait self.script_wait;
	self.script_wait += self.script_wait_add;
	coop_scalar = 1;
	players = get_players();
	coop_scalar = 0.7;
	coop_scalar = 0.5;
	coop_scalar = 0.3;
	diff = self.script_wait_max - self.script_wait_min;
	wait randomfloatrange( self.script_wait_min, self.script_wait_min + diff * coop_scalar );
	self.script_wait_min += self.script_wait_add;
	self.script_wait_max += self.script_wait_add;
// SP = 0x0 - check OK
}

// 0x2E4C
spawn_manager_flags_setup()
{
	flag_init( "sm_" + self.sm_id + "_enabled" );
	flag_init( "sm_" + self.sm_id + "_complete" );
	flag_init( "sm_" + self.sm_id + "_killed" );
	flag_init( "sm_" + self.sm_id + "_cleared" );
// SP = 0x0 - check OK
}

// 0x2EB4
spawn_manager_flag_enabled()
{
/#
	assert( !(flag( "sm_" + self.sm_id + "_enabled" )), "Spawn manager flags should not be set by the level script." );
#/
	flag_set( "sm_" + self.sm_id + "_enabled" );
// SP = 0x0 - check OK
}

// 0x2EF8
spawn_manager_flag_disabled()
{
	self.enable = 0;
	flag_clear( "sm_" + self.sm_id + "_enabled" );
// SP = 0x0 - check OK
}

// 0x2F1C
spawn_manager_flag_killed()
{
/#
	assert( !(flag( "sm_" + self.sm_id + "_killed" )), "Spawn manager flags should not be set by the level script." );
#/
	flag_set( "sm_" + self.sm_id + "_killed" );
// SP = 0x0 - check OK
}

// 0x2F60
spawn_manager_flag_complete()
{
/#
	assert( self.spawncount <= self.count, "Spawn manager spawned more then the allowed AI's" );
#/
/#
	assert( !(flag( "sm_" + self.sm_id + "_complete" )), "Spawn manager flags should not be set by the level script." );
#/
	flag_set( "sm_" + self.sm_id + "_complete" );
// SP = 0x0 - check OK
}

// 0x2FBC
spawn_manager_flag_cleared()
{
/#
	assert( !(flag( "sm_" + self.sm_id + "_cleared" )), "Spawn manager flags should not be set by the level script." );
#/
	flag_set( "sm_" + self.sm_id + "_cleared" );
// SP = 0x0 - check OK
}

// 0x3000
calculate_count()
{
	self.sm_count = self.count;
	self.sm_count = 9999;
	self.count_min = get_min_value( self.sm_count );
	self.count_max = get_max_value( self.sm_count );
/#
	assert( self.count_max >= self.count_min, "Max range should be greater or equal to the min value for sm_count on spawn manager " + self.sm_id );
#/
/#
	assert( self.count_max >= self.count_min, "Max range should be greater or equal to the min value for sm_count on spawner with targetname " + self.targetname );
#/
	self.count = spawn_manager_random_count( self.count_min, self.count_max + 1 );
// SP = 0x0 - check OK
}

// 0x30BC
spawn_manager_debug()
{
/#
	managers = get_spawn_manager_array();
	manageractivecount = 0;
	managerpotentialspawncount = 0;
	level.debugactivemanagers = [];
	i = 0;
	manageractivecount += 1;
	managerpotentialspawncount += managers[i].sm_active_count;
	level.debugactivemanagers[level.debugactivemanagers.size] = managers[i];
	i++;
	spawn_manager_debug_hud_update( level.spawn_manager_active_ai, level.spawn_manager_total_count, level.spawn_manager_max_ai, manageractivecount, managerpotentialspawncount );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x31D0
spawn_manager_debug_hud_update( active_ai, spawn_ai, max_ai, active_managers, potential_ai )
{
/#
	level.spawn_manager_debug_hud_title = newhudelem();
	level.spawn_manager_debug_hud_title.alignx = "left";
	level.spawn_manager_debug_hud_title.x = -75;
	level.spawn_manager_debug_hud_title.y = 40;
	level.spawn_manager_debug_hud_title.fontscale = 1.5;
	level.spawn_manager_debug_hud_title.color = ( 1, 1, 1 );
	level.spawn_manager_debug_hud = [];
	level.spawn_manager_debug_hud_title settext( "SPAWN MANAGER: Total AI: " + spawn_ai + "  Active AI: " + active_ai + "/" + potential_ai + "  Max AI: " + max_ai + "  Active Managers: " + active_managers );
	i = 0;
	level.spawn_manager_debug_hud[i] = newhudelem();
	level.spawn_manager_debug_hud[i].alignx = "left";
	level.spawn_manager_debug_hud[i].x = -70;
	level.spawn_manager_debug_hud[i].fontscale = 1;
	level.spawn_manager_debug_hud[i].y = level.spawn_manager_debug_hud_title.y + i + 1 * 15;
	level.spawn_manager_debug_hud[i].color = vector_scale( ( 0, 1, 0 ), 0.4 );
	level.spawn_manager_debug_hud[i].color = ( 0, 1, 0 );
	level.spawn_manager_debug_hud[i].color = ( 1, 1, 1 );
	level.spawn_manager_debug_hud[i].color = vector_scale( ( 1, 1, 1 ), 0.4 );
	level.spawn_manager_debug_hud[i] settext( "[  " + level.debugactivemanagers[i].sm_id + "  ]" + "       Count: " + level.debugactivemanagers[i].spawncount + "/" + level.debugactivemanagers[i].count + "(" + level.debugactivemanagers[i].count_min + "," + level.debugactivemanagers[i].count_max + ")" + "       Active Count: " + level.debugactivemanagers[i].activeai.size + "/" + level.debugactivemanagers[i].sm_active_count + "(" + level.debugactivemanagers[i].sm_active_count_min + "," + level.debugactivemanagers[i].sm_active_count_max + ")" + "       Group Size: " + level.debugactivemanagers[i].sm_group_size + "(" + level.debugactivemanagers[i].sm_group_size_min + "," + level.debugactivemanagers[i].sm_group_size_max + ")" + "       Spawners: " + level.debugactivemanagers[i].spawners.size );
	i++;
	i = level.debugactivemanagers.size;
	level.spawn_manager_debug_hud[i] destroy();
	i++;
	level.spawn_manager_debug_hud_title destroy();
	i = 0;
	level.spawn_manager_debug_hud[i] destroy();
	i++;
	level.spawn_manager_debug_hud = undefined;
#/
// SP = 0x0 - check OK
}

// 0x356C
spawn_manager_debug_spawn_manager()
{
/#
	wait_for_first_player();
	level.current_debug_spawn_manager = undefined;
	level.current_debug_spawn_manager_targetname = undefined;
	level.test_player = get_players()[0];
	current_spawn_manager_index = -1;
	old_spawn_manager_index = undefined;
	destroy_tweak_hud_elements();
	wait 0.05;
	current_spawn_manager_index = 0;
	old_spawn_manager_index = 0;
	old_spawn_manager_index = current_spawn_manager_index;
	current_spawn_manager_index--;
	current_spawn_manager_index = 0;
	current_spawn_manager_index++;
	current_spawn_manager_index = level.debugactivemanagers.size - 1;
	i = 0;
	current_spawn_manager_index = i;
	old_spawn_manager_index = i;
	i++;
	level.current_debug_spawn_manager = level.debugactivemanagers[current_spawn_manager_index];
	level.current_debug_spawn_manager_targetname = level.debugactivemanagers[current_spawn_manager_index].targetname;
	level.current_debug_spawn_manager spawn_manager_debug_spawn_manager_values_dpad();
	destroy_tweak_hud_elements();
	wait 0.25;
#/
// SP = 0x0 - check OK
}

// 0x3730
spawn_manager_debug_spawner_values()
{
/#
	spawn_manager = level.current_debug_spawn_manager;
	i = 0;
	current_spawner = spawn_manager.spawners[i];
	spawnerfree = current_spawner.sm_active_count - current_spawner.activeai.size;
	print3d( current_spawner.origin + vector_scale( ( 0, 0, 1 ), 65 ), "count:" + current_spawner.count, ( 0, 1, 0 ), 1, 1.25 );
	print3d( current_spawner.origin + vector_scale( ( 0, 0, 1 ), 85 ), "sm_active_count:" + current_spawner.activeai.size + "/" + spawnerfree + "/" + current_spawner.sm_active_count, ( 0, 1, 0 ), 1, 1.25 );
	i++;
	wait 0.05;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3848
ent_print( text )
{
/#
	self endon( "death" );
	print3d( self.origin + vector_scale( ( 0, 0, 1 ), 65 ), text, ( 0.48, 9.4, 0.76 ), 1, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x38A8
spawn_manager_debug_spawn_manager_values_dpad()
{
/#
	level.current_debug_index = 0;
	level.spawn_manager_debug_hud2 = newhudelem();
	level.spawn_manager_debug_hud2.alignx = "left";
	level.spawn_manager_debug_hud2.x = -75;
	level.spawn_manager_debug_hud2.y = 150;
	level.spawn_manager_debug_hud2.fontscale = 1.25;
	level.spawn_manager_debug_hud2.color = ( 1, 0, 0 );
	level.sm_active_count_title = newhudelem();
	level.sm_active_count_title.alignx = "left";
	level.sm_active_count_title.x = -75;
	level.sm_active_count_title.y = 165;
	level.sm_active_count_title.color = ( 1, 1, 1 );
	level.sm_active_count_min_hud = newhudelem();
	level.sm_active_count_min_hud.alignx = "left";
	level.sm_active_count_min_hud.x = -75;
	level.sm_active_count_min_hud.y = 180;
	level.sm_active_count_min_hud.color = ( 1, 1, 1 );
	level.sm_active_count_max_hud = newhudelem();
	level.sm_active_count_max_hud.alignx = "left";
	level.sm_active_count_max_hud.x = -75;
	level.sm_active_count_max_hud.y = 195;
	level.sm_active_count_max_hud.color = ( 1, 1, 1 );
	level.sm_group_size_min_hud = newhudelem();
	level.sm_group_size_min_hud.alignx = "left";
	level.sm_group_size_min_hud.x = -75;
	level.sm_group_size_min_hud.y = 210;
	level.sm_group_size_min_hud.color = ( 1, 1, 1 );
	level.sm_group_size_max_hud = newhudelem();
	level.sm_group_size_max_hud.alignx = "left";
	level.sm_group_size_max_hud.x = -75;
	level.sm_group_size_max_hud.y = 225;
	level.sm_group_size_max_hud.color = ( 1, 1, 1 );
	level.sm_spawner_count_title = newhudelem();
	level.sm_spawner_count_title.alignx = "left";
	level.sm_spawner_count_title.x = -75;
	level.sm_spawner_count_title.y = 240;
	level.sm_spawner_count_title.color = ( 1, 1, 1 );
	level.sm_spawner_count_min_hud = newhudelem();
	level.sm_spawner_count_min_hud.alignx = "left";
	level.sm_spawner_count_min_hud.x = -75;
	level.sm_spawner_count_min_hud.y = 255;
	level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
	level.sm_spawner_count_max_hud = newhudelem();
	level.sm_spawner_count_max_hud.alignx = "left";
	level.sm_spawner_count_max_hud.x = -75;
	level.sm_spawner_count_max_hud.y = 270;
	level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
	level.current_debug_index++;
	level.current_debug_index = 7;
	level.current_debug_index--;
	level.current_debug_index = 0;
	set_debug_hud_colors();
	increase_value = 0;
	decrease_value = 0;
	decrease_value = 1;
	increase_value = 1;
	should_run_set_up = 0;
	add = 1;
	add = -1;
	switch ( level.current_debug_index )
	{
		case 0:
			self.sm_active_count_max = self.sm_active_count + add;
			self.sm_active_count_min = self.sm_active_count + add;
			should_run_set_up = 1;
			self.sm_active_count += add;
			break;
		case 1:
			modify_debug_hud2( "sm_active_count_min cant be smaller than sm_group_size_max, modify sm_group_size_max and try again." );
			break;
		case 2:
			modify_debug_hud2( "sm_active_count_max cant be smaller than sm_active_count_min, modify sm_active_count_min and try again." );
			break;
		case 3:
			modify_debug_hud2( "sm_group_size_min cant be greater than sm_group_size_max, modify sm_group_size_max and try again." );
			break;
		case 4:
			modify_debug_hud2( "sm_group_size_max cant be smaller than sm_group_size_min, modify sm_group_size_min and try again." );
			break;
		case 5:
			modify_debug_hud2( "sm_spawner_count cant be greater than max possible available spawners, add more spawners in the map and try again." );
			break;
		case 6:
			modify_debug_hud2( "sm_spawner_count_min cant be greater than sm_spawner_count_max, modify sm_spawner_count_max and try again." );
			break;
		case 7:
			modify_debug_hud2( "sm_spawner_count_max cant be smaller than sm_spawner_count_min, modify sm_spawner_count_min and try again." );
			break;
	}
	level.current_debug_spawn_manager spawn_manager_debug_setup();
	level.sm_active_count_title settext( "sm_active_count: " + self.sm_active_count );
	level.sm_active_count_min_hud settext( "sm_active_count_min: " + self.sm_active_count_min );
	level.sm_active_count_max_hud settext( "sm_active_count_max: " + self.sm_active_count_max );
	level.sm_group_size_min_hud settext( "sm_group_count_min: " + self.sm_group_size_min );
	level.sm_group_size_max_hud settext( "sm_group_count_max: " + self.sm_group_size_max );
	level.sm_spawner_count_title settext( "sm_spawner_count: " + self.sm_spawner_count );
	level.sm_spawner_count_min_hud settext( "sm_spawner_count_min: " + self.sm_spawner_count_min );
	level.sm_spawner_count_max_hud settext( "sm_spawner_count_max: " + self.sm_spawner_count_max );
#/
// SP = 0x0 - check OK
}

// 0x3FE4
set_debug_hud_colors()
{
/#
	switch ( level.current_debug_index )
	{
		case 0:
			level.sm_active_count_title.color = ( 0, 1, 0 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 1:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 0, 1, 0 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 2:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 0, 1, 0 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 3:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 0, 1, 0 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 4:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 0, 1, 0 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 5:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 0, 1, 0 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 6:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 0, 1, 0 );
			level.sm_spawner_count_max_hud.color = ( 1, 1, 1 );
			break;
		case 7:
			level.sm_active_count_title.color = ( 1, 1, 1 );
			level.sm_active_count_min_hud.color = ( 1, 1, 1 );
			level.sm_active_count_max_hud.color = ( 1, 1, 1 );
			level.sm_group_size_min_hud.color = ( 1, 1, 1 );
			level.sm_group_size_max_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_title.color = ( 1, 1, 1 );
			level.sm_spawner_count_min_hud.color = ( 1, 1, 1 );
			level.sm_spawner_count_max_hud.color = ( 0, 1, 0 );
			break;
	}
#/
// SP = 0x0 - check OK
}

// 0x4354
spawn_manager_debug_setup()
{
/#
	self.sm_spawner_count = spawn_manager_random_count( self.sm_spawner_count_min, self.sm_spawner_count_max + 1 );
	self.sm_active_count = spawn_manager_random_count( self.sm_active_count_min, self.sm_active_count_max + 1 );
	self.spawners = self spawn_manager_get_spawners();
/#
	assert( self.count >= self.count_min );
#/
/#
	assert( self.count <= self.count_max );
#/
/#
	assert( self.sm_active_count >= self.sm_active_count_min );
#/
/#
	assert( self.sm_active_count <= self.sm_active_count_max );
#/
/#
	assert( self.sm_group_size_max <= self.sm_active_count );
#/
/#
	assert( self.sm_group_size_min <= self.sm_active_count );
#/
#/
// SP = 0x0 - check OK
}

// 0x4458
modify_debug_hud2( text )
{
/#
	self notify( "modified" );
	wait 0.05;
	level.spawn_manager_debug_hud2 settext( text );
	level.spawn_manager_debug_hud2 thread moniter_debug_hud2();
#/
// SP = 0x0 - check OK
}

// 0x4490
moniter_debug_hud2()
{
/#
	self endon( "modified" );
	wait 10;
	level.spawn_manager_debug_hud2 settext( "" );
#/
// SP = 0x0 - check OK
}

// 0x44B4
destroy_tweak_hud_elements()
{
/#
	level.sm_active_count_title destroy();
	level.sm_active_count_min_hud destroy();
	level.sm_active_count_max_hud destroy();
	level.sm_group_size_min_hud destroy();
	level.sm_group_size_max_hud destroy();
	level.sm_spawner_count_title destroy();
	level.sm_spawner_count_min_hud destroy();
	level.sm_spawner_count_max_hud destroy();
#/
// SP = 0x0 - check OK
}
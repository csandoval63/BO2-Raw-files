// maps/_weaponobjects.gsc

#include maps\_ballistic_knife;
#include maps\_utility;
#include common_scripts\utility;


// 0xF18
init()
{
	level thread onplayerconnect();
	level.claymorefxid = loadfx( "weapon/claymore/fx_claymore_laser" );
	level.watcherweaponnames = [];
	level.watcherweaponnames = getwatcherweapons();
	level.retrievableweapons = [];
	level.retrievableweapons = getretrievableweapons();
	setup_retrievable_hint_strings();
	level.weaponobjectexplodethisframe = 0;
// SP = 0x0 - check OK
}

// 0xF70
onplayerconnect()
{
	level waittill( "connecting", player );
	player.usedweapons = 0;
	player.hits = 0;
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0xFA4
onplayerspawned()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self create_base_watchers();
	self create_satchel_watcher();
	self create_ied_watcher();
	self create_ballistic_knife_watcher();
	self setup_retrievable_watcher();
	self thread watch_weapon_object_usage();
// SP = 0x0 - check OK
}

// 0x1004
setup_retrievable_hint_strings()
{
	create_retrievable_hint( "hatchet", &"WEAPON_HATCHET_PICKUP" );
	create_retrievable_hint( "satchel_charge", &"WEAPON_SATCHEL_CHARGE_PICKUP" );
	create_retrievable_hint( "claymore", &"WEAPON_CLAYMORE_PICKUP" );
	create_retrievable_hint( "proximity_grenade", &"WEAPON_TASER_SPIKE_PICKUP" );
// SP = 0x0 - check OK
}

// 0x104C
create_retrievable_hint( name, hint )
{
	retrievehint = spawnstruct();
	retrievehint.name = name;
	retrievehint.hint = hint;
	level.retrievehints[name] = retrievehint;
// SP = 0x0 - check OK
}

// 0x1084
create_base_watchers()
{
	i = 0;
	watchername = getsubstr( level.watcherweaponnames[i], 0, level.watcherweaponnames[i].size - 3 );
	self create_weapon_object_watcher( watchername, level.watcherweaponnames[i], self.team );
	i++;
	i = 0;
	watchername = getsubstr( level.retrievableweapons[i], 0, level.retrievableweapons[i].size - 3 );
	self create_weapon_object_watcher( watchername, level.retrievableweapons[i], self.team );
	i++;
// SP = 0x0 - check OK
}

// 0x112C
create_claymore_watcher()
{
	watcher = self create_use_weapon_object_watcher( "claymore", "claymore_sp", self.team );
	watcher.watchforfire = 1;
	watcher.detonate = ::weapon_detonate;
	watcher.onspawnfx = ::on_spawn_claymore_fx;
	watcher.activatesound = "wpn_claymore_alert";
	detectionconeangle = weapons_get_dvar_int( "scr_weaponobject_coneangle" );
	watcher.detectiondot = cos( detectionconeangle );
	watcher.detectionmindist = weapons_get_dvar_int( "scr_weaponobject_mindist" );
	watcher.detectiongraceperiod = weapons_get_dvar( "scr_weaponobject_graceperiod" );
	watcher.detonateradius = weapons_get_dvar_int( "scr_weaponobject_radius" );
	watcher = self create_use_weapon_object_watcher( "claymore_80s", "claymore_80s_sp", self.team );
	watcher.watchforfire = 1;
	watcher.detonate = ::weapon_detonate;
	watcher.onspawnfx = ::on_spawn_claymore_fx;
	watcher.activatesound = "wpn_claymore_alert";
	detectionconeangle = weapons_get_dvar_int( "scr_weaponobject_coneangle" );
	watcher.detectiondot = cos( detectionconeangle );
	watcher.detectionmindist = weapons_get_dvar_int( "scr_weaponobject_mindist" );
	watcher.detectiongraceperiod = weapons_get_dvar( "scr_weaponobject_graceperiod" );
	watcher.detonateradius = weapons_get_dvar_int( "scr_weaponobject_radius" );
// SP = 0x0 - check OK
}

// 0x1278
create_claymore_watcher_zm()
{
	watcher = self create_use_weapon_object_watcher( "claymore", "claymore_zm", self.team );
	watcher.pickup = level.pickup_claymores;
	watcher.pickup_trigger_listener = level.pickup_claymores_trigger_listener;
	watcher.skip_weapon_object_damage = 1;
// SP = 0x0 - check OK
}

// 0x12C0
on_spawn_claymore_fx()
{
	self endon( "death" );
	self waittill_not_moving();
	org = self gettagorigin( "tag_fx" );
	ang = self gettagangles( "tag_fx" );
	fx = spawnfx( level.claymorefxid, org, anglestoforward( ang ), anglestoup( ang ) );
	triggerfx( fx );
	self thread clear_fx_on_death( fx );
	originalorigin = self.origin;
	wait 0.25;
	fx delete();
// SP = 0x0 - check OK
}

// 0x1370
clear_fx_on_death( fx )
{
	fx endon( "death" );
	self waittill( "death" );
	fx delete();
// SP = 0x0 - check OK
}

// 0x1394
create_satchel_watcher()
{
	watcher = self create_use_weapon_object_watcher( "satchel_charge", "satchel_charge_sp", self.team );
	watcher.altdetonate = 1;
	watcher.watchforfire = 1;
	watcher.disarmable = 1;
	watcher.headicon = 0;
	watcher.detonate = ::weapon_detonate;
	watcher.altweapon = "satchel_charge_detonator_sp";
	watcher = self create_use_weapon_object_watcher( "satchel_charge_80s", "satchel_charge_80s_sp", self.team );
	watcher.altdetonate = 1;
	watcher.watchforfire = 1;
	watcher.disarmable = 1;
	watcher.headicon = 0;
	watcher.detonate = ::weapon_detonate;
	watcher.altweapon = "satchel_charge_detonator_sp";
// SP = 0x0 - check OK
}

// 0x1450
create_ied_watcher()
{
	watcher = self create_use_weapon_object_watcher( "ied", "ied_sp", self.team );
	watcher.altdetonate = 1;
	watcher.watchforfire = 1;
	watcher.disarmable = 0;
	watcher.headicon = 0;
	watcher.detonate = ::weapon_detonate;
	watcher.altweapon = "satchel_charge_detonator_sp";
// SP = 0x0 - check OK
}

// 0x14B0
create_ballistic_knife_watcher()
{
	watcher = self create_use_weapon_object_watcher( "knife_ballistic", "knife_ballistic_sp", self.team );
	watcher.onspawn = maps\_ballistic_knife::on_spawn;
	watcher.onspawnretrievetriggers = maps\_ballistic_knife::on_spawn_retrieve_trigger;
	watcher.storedifferentobject = 1;
	watcher = self create_use_weapon_object_watcher( "knife_ballistic_80s", "knife_ballistic_80s_sp", self.team );
	watcher.onspawn = maps\_ballistic_knife::on_spawn;
	watcher.onspawnretrievetriggers = maps\_ballistic_knife::on_spawn_retrieve_trigger;
	watcher.storedifferentobject = 1;
// SP = 0x0 - check OK
}

// 0x1534
create_ballistic_knife_watcher_zm( name, weapon )
{
	watcher = self create_use_weapon_object_watcher( name, weapon, self.team );
	watcher.onspawn = maps\_ballistic_knife::on_spawn;
	watcher.onspawnretrievetriggers = maps\_ballistic_knife::on_spawn_retrieve_trigger;
	watcher.storedifferentobject = 1;
	self notify( "zmb_lost_knife" );
// SP = 0x0 - check OK
}

// 0x1584
create_use_weapon_object_watcher( name, weapon, ownerteam )
{
	weaponobjectwatcher = create_weapon_object_watcher( name, weapon, ownerteam );
	return weaponobjectwatcher;
// SP = 0x0 - check OK
}

// 0x15A8
weapon_detonate( attacker )
{
	self detonate( attacker );
	self detonate();
// SP = 0x0 - check OK
}

// 0x15D0
create_weapon_object_watcher( name, weapon, ownerteam )
{
	self.weaponobjectwatcherarray = [];
	weaponobjectwatcher = get_weapon_object_watcher( name );
	weaponobjectwatcher = spawnstruct();
	self.weaponobjectwatcherarray[self.weaponobjectwatcherarray.size] = weaponobjectwatcher;
	setdvar( "scr_deleteexplosivesonspawn", "1" );
	weaponobjectwatcher delete_weapon_object_array();
	weaponobjectwatcher.objectarray = [];
	weaponobjectwatcher.name = name;
	weaponobjectwatcher.ownerteam = ownerteam;
	weaponobjectwatcher.type = "use";
	weaponobjectwatcher.weapon = weapon;
	weaponobjectwatcher.watchforfire = 0;
	weaponobjectwatcher.disarmable = 0;
	weaponobjectwatcher.altdetonate = 0;
	weaponobjectwatcher.detectable = 1;
	weaponobjectwatcher.headicon = 1;
	weaponobjectwatcher.activatesound = undefined;
	weaponobjectwatcher.altweapon = undefined;
	weaponobjectwatcher.onspawn = undefined;
	weaponobjectwatcher.onspawnfx = undefined;
	weaponobjectwatcher.onspawnretrievetriggers = undefined;
	weaponobjectwatcher.ondetonated = undefined;
	weaponobjectwatcher.detonate = undefined;
	return weaponobjectwatcher;
// SP = 0x0 - check OK
}

// 0x16F0
setup_retrievable_watcher()
{
	i = 0;
	watcher = get_weapon_object_watcher_by_weapon( level.retrievableweapons[i] );
	watcher.onspawnretrievetriggers = ::on_spawn_retrievable_weapon_object;
	watcher.pickup = ::pick_up;
	i++;
// SP = 0x0 - check OK
}

// 0x1758
watch_weapon_object_usage()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.weaponobjectwatcherarray = [];
	self thread watch_weapon_object_spawn();
	self thread watch_weapon_projectile_object_spawn();
	self thread watch_weapon_object_detonation();
	self thread watch_weapon_object_alt_detonation();
	self thread watch_weapon_object_alt_detonate();
	self thread delete_weapon_objects_on_disconnect();
// SP = 0x0 - check OK
}

// 0x17C0
watch_weapon_object_spawn()
{
	self endon( "disconnect" );
	self endon( "death" );
	self waittill( "grenade_fire", weapon, weapname );
	watcher = get_weapon_object_watcher_by_weapon( weapname );
	self add_weapon_object( watcher, weapon );
// SP = 0x0 - check OK
}

// 0x1814
watch_weapon_projectile_object_spawn()
{
	self endon( "disconnect" );
	self endon( "death" );
	self waittill( "missile_fire", weapon, weapname );
	watcher = get_weapon_object_watcher_by_weapon( weapname );
	self add_weapon_object( watcher, weapon );
// SP = 0x0 - check OK
}

// 0x1868
watch_weapon_object_detonation()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "detonate" );
	weap = self getcurrentweapon();
	watcher = get_weapon_object_watcher_by_weapon( weap );
	watcher detonate_weapon_object_array();
// SP = 0x0 - check OK
}

// 0x18BC
watch_weapon_object_alt_detonation()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "no_alt_detonate" );
	self waittill( "alt_detonate" );
	watcher = 0;
	self.weaponobjectwatcherarray[watcher] detonate_weapon_object_array();
	watcher++;
// SP = 0x0 - check OK
}

// 0x1924
watch_weapon_object_alt_detonate()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "detonated" );
	level endon( "game_ended" );
	self endon( "no_alt_detonate" );
	self waittill( "action_notify_use_doubletap" );
	self notify( "alt_detonate" );
// SP = 0x0 - check OK
}

// 0x195C
delete_weapon_objects_on_disconnect()
{
	self endon( "death" );
	self waittill( "disconnect" );
	return;
	watchers = [];
	watcher = 0;
	weaponobjectwatcher = spawnstruct();
	watchers[watchers.size] = weaponobjectwatcher;
	weaponobjectwatcher.objectarray = [];
	weaponobjectwatcher.objectarray = self.weaponobjectwatcherarray[watcher].objectarray;
	watcher++;
	wait 0.05;
	watcher = 0;
	watchers[watcher] delete_weapon_object_array();
	watcher++;
// SP = 0x0 - check OK
}

// 0x1A0C
on_spawn_retrievable_weapon_object( watcher, player )
{
	self endon( "death" );
	self setowner( player );
	self.owner = player;
	self waittill_not_moving();
	triggerorigin = self.origin;
	triggerparentent = undefined;
	triggerparentent = self.stucktoplayer;
	triggerparentent = self.stucktoplayer.body;
	triggerorigin = triggerparentent.origin + vector_scale( ( 0, 0, 1 ), 10 );
	up = anglestoup( self.angles );
	triggerorigin = self.origin + up;
	self.pickuptrigger = spawn( "trigger_radius_use", triggerorigin );
	self.pickuptrigger setcursorhint( "HINT_NOICON" );
	self.pickuptrigger sethintstring( level.retrievehints[watcher.name].hint );
	self.pickuptrigger sethintstring( &"WEAPON_GENERIC_PICKUP" );
	player clientclaimtrigger( self.pickuptrigger );
	self.pickuptrigger enablelinkto();
	self.pickuptrigger linkto( self );
	thread watch_use_trigger( self.pickuptrigger, watcher.pickup );
	self thread [[watcher.pickup_trigger_listener]]( self.pickuptrigger, player );
	self thread watch_shutdown( player );
// SP = 0x0 - check OK
}

// 0x1B90
weapons_get_dvar_int( dvar, def )
{
	return int( weapons_get_dvar( dvar, def ) );
// SP = 0x0 - check OK
}

// 0x1BB4
weapons_get_dvar( dvar, def )
{
	return GetDvarFloat( dvar );
	setdvar( dvar, def );
	return def;
// SP = 0x0 - check OK
}

// 0x1BE4
get_weapon_object_watcher( name )
{
	return undefined;
	watcher = 0;
	return self.weaponobjectwatcherarray[watcher];
	watcher++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x1C2C
get_weapon_object_watcher_by_weapon( weapon )
{
	return undefined;
	watcher = 0;
	return self.weaponobjectwatcherarray[watcher];
	return self.weaponobjectwatcherarray[watcher];
	watcher++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x1CBC
pick_up()
{
	player = self.owner;
	self destroy_ent();
	clip_ammo = player getweaponammoclip( self.name );
	clip_max_ammo = weaponclipsize( self.name );
	clip_ammo++;
	player setweaponammoclip( self.name, clip_ammo );
// SP = 0x0 - check OK
}

// 0x1D1C
destroy_ent()
{
	self delete();
// SP = 0x0 - check OK
}

// 0x1D30
add_weapon_object( watcher, weapon )
{
	watcher.objectarray[watcher.objectarray.size] = weapon;
	weapon.owner = self;
	weapon.detonated = 0;
	weapon.name = watcher.weapon;
	weapon thread weapon_object_damage( watcher );
	weapon.owner notify( "weapon_object_placed", weapon );
	weapon thread [[watcher.onspawn]]( watcher, self );
	weapon thread [[watcher.onspawnfx]]();
	weapon thread [[watcher.onspawnretrievetriggers]]( watcher, self );
	refreshhudammocounter();
// SP = 0x0 - check OK
}

// 0x1DF0
detonate_weapon_object_array()
{
	return;
	i = 0;
	self thread wait_and_detonate( self.objectarray[i], 0.1 );
	i++;
	self.objectarray = [];
// SP = 0x0 - check OK
}

// 0x1E54
delete_weapon_object_array()
{
	i = 0;
	self.objectarray[i] delete();
	i++;
	self.objectarray = [];
// SP = 0x0 - check OK
}

// 0x1EA0
watch_use_trigger( trigger, callback )
{
	self endon( "delete" );
	self endon( "death" );
	trigger waittill( "trigger", player );
	self thread [[callback]]();
// SP = 0x0 - check OK
}

// 0x1F60
watch_shutdown( player )
{
	player endon( "disconnect" );
	pickuptrigger = self.pickuptrigger;
	self waittill( "death" );
	pickuptrigger delete();
// SP = 0x0 - check OK
}

// 0x1F8C
weapon_object_damage( watcher )
{
	self endon( "death" );
	self setcandamage( 1 );
	self.health = 100000;
	attacker = undefined;
	self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, weaponname, idflags );
	self thread disabled_by_special_grenade( watcher.specialgrenadedisabledtime );
	wait 0.1 + randomfloat( 0.4 );
	wait 0.05;
	return;
	level.weaponobjectexplodethisframe = 1;
	thread reset_weapon_object_explode_this_frame();
	self.waschained = 1;
	self.wasdamagedfrombulletpenetration = 1;
	self.wasdamaged = 1;
	watcher thread wait_and_detonate( self, 0, attacker );
// SP = 0x0 - check OK
}

// 0x20F0
wait_and_detonate( object, delay, attacker )
{
	object endon( "death" );
	wait delay;
	return;
	return;
	object.detonated = 1;
	object notify( "detonated" );
	object [[self.detonate]]( attacker );
// SP = 0x0 - check OK
}

// 0x2140
disabled_by_special_grenade( disabletime )
{
	self notify( "damagedBySpecial" );
	self endon( "damagedBySpecial" );
	self endon( "death" );
	self.disabledbyspecial = 1;
	wait disabletime;
	self.disabledbyspecial = 0;
// SP = 0x0 - check OK
}

// 0x216C
reset_weapon_object_explode_this_frame()
{
	wait 0.05;
	level.weaponobjectexplodethisframe = 0;
// SP = 0x0 - check OK
}

// 0x2180
stunstart( watcher, time )
{
	self endon( "death" );
	return;
	self.camerahead setclientflag( level.const_flag_stunned );
	self setclientflag( level.const_flag_stunned );
	self thread [[watcher.stun]]();
	wait time;
	return;
	self stunstop();
// SP = 0x0 - check OK
}

// 0x21FC
stunstop()
{
	self notify( "not_stunned" );
	self.camerahead clearclientflag( level.const_flag_stunned );
	self clearclientflag( level.const_flag_stunned );
// SP = 0x0 - check OK
}

// 0x2234
weaponstun()
{
	self endon( "death" );
	self endon( "not_stunned" );
	origin = self gettagorigin( "tag_fx" );
	origin = self.origin + vector_scale( ( 0, 0, 1 ), 10 );
	self.stun_fx = spawn( "script_model", origin );
	self.stun_fx setmodel( "tag_origin" );
	self thread stunfxthink( self.stun_fx );
	wait 0.1;
	playfxontag( level._equipment_spark_fx, self.stun_fx, "tag_origin" );
	self.stun_fx playsound( "dst_disable_spark" );
// SP = 0x0 - check OK
}

// 0x22D0
stunfxthink( fx )
{
	fx endon( "death" );
	self waittill_any( "death", "not_stunned" );
	fx delete();
// SP = 0x0 - check OK
}

// 0x2300
isstunned()
{
	return IsDefined( self.stun_fx );
// SP = 0x0 - check OK
}
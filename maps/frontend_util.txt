// maps/frontend_util.gsc

#include maps\_osprey;
#include maps\_vehicle;
#include maps\createart\frontend_art;
#include maps\frontend_sf_c;
#include maps\frontend_sf_b;
#include maps\frontend_sf_a;
#include maps\_glasses;
#include maps\_patrol;
#include maps\_anim;
#include maps\_music;
#include maps\war_room_util;
#include common_scripts\utility;
#include maps\_endmission;
#include maps\_utility;
#include maps\_scene;
#include maps\_objectives;
#include maps\_dialog;


// 0x2B50
setup_basic_scene()
{
	ambient_scene_list = [];
	i = 1;
	ambient_scene_list[ambient_scene_list.size] = "ambient_0" + i;
	i++;
	level.m_bridge_workers = [];
	num_worker_scenes = 3;
	num_worker_scenes = 4;
	i = 0;
	ambient_scene = random( ambient_scene_list );
	arrayremovevalue( ambient_scene_list, ambient_scene );
	level thread run_scene( ambient_scene );
	drone_list = get_model_or_models_from_scene( ambient_scene );
	level.m_bridge_workers = arraycombine( level.m_bridge_workers, drone_list, 1, 0 );
	i++;
	level_num = get_level_number_completed();
	setup_war_map( level_num + 1 );
	level_list = get_strikeforce_available_level_list( level_num + 1 );
	level thread run_scene( "sf_briggs_idle" );
	use_vtol = frontend_should_use_vtol( level_num + 1 );
	level thread run_scene( "vtol_ambient_00" );
	level.vtol_scene_running = 1;
	warp_to_player_start( "vtol_player_start" );
	frontend_run_ospreys();
	level.menustate = 1;
	toggle_main_menu();
	warp_to_player_start();
	warp_to_random_player_start();
	player_body = getent( "player_body", "targetname" );
	old_blend_time = 0.1;
	old_blend_time = player_body._anim_blend_in_time;
	player_body maps\_anim::anim_set_blend_in_time( 0.1 );
	end_scene( "data_glove_idle" );
	wait_network_frame();
	level thread run_scene( "data_glove_idle" );
	wait 0.1;
	player_body maps\_anim::anim_set_blend_in_time( old_blend_time );
	wait_network_frame();
	show_globe( 1, 0, 1 );
	show_holotable_fuzz( 0 );
	level thread frontend_rts_level_respond();
// SP = 0x0 - check OK
}

// 0x2DF0
frontend_rts_level_respond()
{
	run_scene_first_frame( "player_look_at_war_map" );
	level thread run_scene( "sf_briggs_idle" );
	flag_wait( "strikeforce_stats_loaded" );
	last_level = get_level_number_completed();
	cur_level = last_level + 1;
	map_list = get_strikeforce_available_level_list( cur_level );
	last_map = GetDvar( #"0xD614D075" );
	success = rts_map_completed( last_map );
	color_id = 2;
	color_id = 3;
	warmap_offset = level.m_rts_warmap_offset[last_map];
	map_id = level.m_rts_map_id[last_map];
	set_world_map_marker( map_id, 1 );
	set_world_map_widget( map_id, 0 );
	level thread war_map_blink_country( map_id, color_id, "stop_war_blink" );
	world_map_zoom_to( warmap_offset[0], warmap_offset[1], warmap_offset[2] );
	positive_lines = array( "brig_nice_work_mason_0", "brig_i_knew_i_could_rely_0", "brig_hell_of_a_job_there_0", "brig_that_s_what_i_like_t_0", "brig_that_s_how_we_get_sh_0", "brig_that_was_one_for_the_0" );
	negative_lines = array( "brig_what_the_fuck_was_th_0", "brig_i_ve_never_seen_such_0", "brig_that_was_a_full_scal_0", "brig_what_the_hell_went_w_0", "brig_we_ll_talk_about_thi_0", "brig_i_m_disappointed_and_0" );
	response_line = undefined;
	response_line = random( positive_lines );
	response_line = random( negative_lines );
	level.player thread say_dialog( response_line, 2 );
	wait 2;
	run_scene( "player_look_at_war_map" );
	level notify( "stop_war_blink" );
	set_world_map_marker( map_id, 0 );
	set_world_map_widget( map_id, 1 );
	world_map_zoom_to( 0, 0, 1 );
	toggle_main_menu();
// SP = 0x0 - check OK
}

// 0x2FD8
hide_holo_table_props()
{
	props = getentarray( "holo_table_prop", "script_noteworthy" );
	foreach ( prop in props )
	{
		prop hide();
	}
// SP = 0x0 - check OK
}

// 0x302C
frontend_do_save( force )
{
	force = 0;
	do_frontend_save = GetDvarInt( #"0xE42F28A4" );
	stats_only = do_frontend_save == 0;
	savegame( "auto", stats_only );
	level waittill( "savegame_done" );
	setdvarint( "ui_dofrontendsave", 0 );
	flag_set( "save_complete" );
// SP = 0x0 - check OK
}

// 0x30A8
frontend_just_finished_rts()
{
	str_prev_level = GetDvar( #"0xD614D075" );
	return 0;
	return issubstr( str_prev_level, "so_rts" );
// SP = 0x0 - check OK
}

// 0x30D4
rts_map_completed( str_map_name )
{
	str_stat_name = level.m_rts_stats[str_map_name];
/#
	assert( IsDefined( str_stat_name ) );
#/
	stat_val = level.player get_story_stat( str_stat_name );
	return stat_val != 0;
// SP = 0x0 - check OK
}

// 0x3110
warp_to_random_player_start()
{
	start_list = array( "player_start_01", "player_start_02", "player_start_03", "player_start_04" );
	warp_to_player_start( random( start_list ) );
// SP = 0x0 - check OK
}

// 0x314C
warp_to_player_start( warp_targetname )
{
	warp_targetname = "default_player_start";
	s_warp = getstruct( warp_targetname );
	skipto_teleport_players( warp_targetname );
	wait_network_frame();
	level.player.origin = s_warp.origin;
	level.player.angles = ( s_warp.angles[0], s_warp.angles[1], 0 );
	level.e_player_align.origin = s_warp.origin;
	level.e_player_align.angles = ( s_warp.angles[0], s_warp.angles[1], 0 );
// SP = 0x0 - check OK
}

// 0x31DC
get_level_number_completed()
{
	return level.player getdstat( "PlayerStatsList", "HIGHESTLEVELCOMPLETED", "statValue" );
// SP = 0x0 - check OK
}

// 0x31FC
start_patrollers()
{
	patrollers = simple_spawn( "idle_patroller" );
	foreach ( ai in patrollers )
	{
		ai.disable_melee = 1;
		ai thread maps\_patrol::patrol( ai.target );
	}
// SP = 0x0 - check OK
}

// 0x3258
init_viewarm()
{
	self.is_glove_shown = 0;
// SP = 0x0 - check OK
}

// 0x3264
data_glove_input_button()
{
	pressed = 0;
	pressed = level.player buttonpressed( "ENTER" );
	pressed = level.player buttonpressed( "BUTTON_Y" );
	return pressed;
// SP = 0x0 - check OK
}

// 0x3318
data_glove_input()
{
	self endon( "menu_closed" );
	run_scene( "data_glove_input" );
	wait_network_frame();
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x3368
strikeforce_get_num_levels_till_gone( campaign_level_num, rts_level_name )
{
	end_level = int( tablelookup( "sp/levelLookup.csv", 1, rts_level_name, 14 ) );
	return -1;
	cur_level_type = "";
	chances_remaining = 0;
	cur_level = campaign_level_num;
	cur_level_type = tablelookup( "sp/levelLookup.csv", 0, cur_level, 8 );
	chances_remaining++;
	cur_level++;
	return chances_remaining;
// SP = 0x0 - check OK
}

// 0x33F8
frontend_should_use_vtol( cur_level )
{
	last_level_num = int( tablelookup( "sp/levelLookup.csv", 0, "last_campaign_level", 1 ) );
/#
	println( "vtollevel: last_level: " + last_level_num );
#/
/#
	println( "vtollevel: cur_level: " + cur_level );
#/
	return 0;
	blackout_level_num = int( tablelookup( "sp/levelLookup.csv", 1, "blackout", 0 ) );
	return cur_level > blackout_level_num;
// SP = 0x0 - check OK
}

// 0x3480
get_campaign_state()
{
	campaign_state = GetDvarInt( #"0x1E1641E3" );
	return campaign_state;
// SP = 0x0 - check OK
}

// 0x3498
stop_credits_button()
{
	pressed = 0;
	pressed = level.player buttonpressed( "MOUSE1" );
	pressed = level.player buttonpressed( getenterbutton() );
	return pressed;
// SP = 0x0 - check OK
}

// 0x34F0
run_glasses_input()
{
	level endon( "disconnect" );
	switch ( level.menustate )
	{
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			level notify( "credits_skip" );
			break;
	}
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x35A0
scene_glasses_on()
{
	level run_scene_first_frame( "glasses_on" );
	flag_wait_any( "lockout_screen_passed", "lockout_screen_skipped", "lockout_screen_skipped_freeroam" );
	level thread run_scene( "glasses_on" );
	wait_network_frame();
	glasses = get_model_or_models_from_scene( "glasses_on", "glasses" );
	glasses setviewmodelrenderflag( 1 );
// SP = 0x0 - check OK
}

// 0x3604
turn_on_glasses( glasses_on )
{
	glasses_on = 1;
	level endon( "disconnect" );
	flag_wait( "frontend_scene_ready" );
	level.e_player_align.origin = level.player.origin;
	level.e_player_align.angles = ( level.player.angles[0], level.player.angles[1], 0 );
	level thread scene_glasses_on();
	level thread control_vision_set_glasses();
	flag_wait_any( "lockout_screen_passed", "lockout_screen_skipped", "lockout_screen_skipped_freeroam" );
	wait 1;
	flag_wait( "headsupdisplay" );
	wait 0.5;
	level.player setblur( 1.6, 2.5 );
	maps\_glasses::play_bootup();
	skipanim = GetDvar( #"0xD614D075" ) != "";
	level.player toggle_viewarm( 1, skipanim );
	level thread run_glasses_input();
// SP = 0x0 - check OK
}

// 0x3744
attach_data_glove()
{
	self setviewmodelrenderflag( 1 );
	self attach( "c_usa_cia_frnd_viewbody_vson", "J_WristTwist_LE" );
	self.m_data_glove_attached = 1;
	self notify( "stop_glove_fx" );
	self.glove_fx_on = 0;
	self play_fx( "data_glove_glow", undefined, undefined, "stop_glove_fx", 1, "J_WristTwist_LE" );
	self.glove_fx_on = 1;
// SP = 0x0 - check OK
}

// 0x37E4
attach_data_pads()
{
	drone_names = array( "troop_01_drone", "troop_02_drone" );
	foreach ( name in drone_names )
	{
		drone = getent( name, "targetname" );
		drone attach( "p6_anim_sf_tablet", "tag_weapon_left", 1 );
		drone.has_tablet = 1;
	}
// SP = 0x0 - check OK
}

// 0x3874
toggle_viewarm( do_show, skipanim )
{
	skipanim = 0;
	return;
	do_show = !(self.is_glove_shown);
	return;
	level_num = get_level_number_completed();
	use_vtol = frontend_should_use_vtol( level_num + 1 );
	visionsetnaked( "sp_front_end_menu_vtol", 1 );
	visionsetnaked( "sp_front_end_menu", 1 );
	level.e_player_align.origin = level.player.origin;
	level.e_player_align.angles = ( level.player.angles[0], level.player.angles[1], 0 );
	level.player setblur( 1.6, 2.5 );
	level thread run_scene( "data_glove_start" );
	wait_network_frame();
	player_body = get_model_or_models_from_scene( "data_glove_start", "player_body" );
	player_body attach_data_glove();
	scene_wait( "data_glove_start" );
	end_scene( "data_glove_idle" );
	wait_network_frame();
	level thread run_scene( "data_glove_idle" );
	end_scene( "data_glove_idle" );
	wait_network_frame();
	level thread run_scene( "data_glove_idle" );
	wait_network_frame();
	player_body = get_model_or_models_from_scene( "data_glove_idle", "player_body" );
	player_body attach_data_glove();
	level.player thread data_glove_input();
	visionsetnaked( "sp_frontend_bridge", 1 );
	level.player notify( "menu_closed" );
	run_scene( "data_glove_finish" );
	level.player setblur( 0, 0.5 );
	self.is_glove_shown = do_show;
// SP = 0x0 - check OK
}

// 0x3A60
toggle_main_menu()
{
	luinotifyevent( &"toggle_glasses" );
	wait_network_frame();
	level.player toggle_viewarm();
// SP = 0x0 - check OK
}

// 0x3A88
control_vision_set_glasses()
{
	flag_wait( "glasses_tint" );
	level.player visionsetnaked( "sp_front_end_glasses_up", 0.05 );
	wait 0.15;
	level.player visionsetnaked( "sp_frontend_bridge", 2 );
// SP = 0x0 - check OK
}

// 0x3AD4
watch_for_lockout_screen()
{
	flag_wait( "level.player" );
	level.player waittill( "menuresponse", str_menu_action, str_action_arg );
	switch ( str_action_arg )
	{
		case "activated":
			level.menustate = 4;
			level notify( "frontend_refresh_scene" );
			level clientnotify( "sndNOAMB" );
			setmusicstate( "FRONT_END_START" );
			break;
		case "deactivated":
			flag_set( "bootup_sequence_done_first_time" );
			level.menustate = 1;
			level clientnotify( "sndAMB" );
			setmusicstate( "FRONT_END_MAIN" );
			break;
		case "glasses_boot_complete":
			level notify( "frontend_refresh_scene" );
			flag_set( "lockout_screen_skipped" );
			level.menustate = 1;
			level clientnotify( "sndAMB" );
			setmusicstate( "FRONT_END_MAIN" );
			break;
		case "need_glasses":
			level notify( "frontend_refresh_scene" );
			flag_set( "lockout_screen_skipped_freeroam" );
			level.menustate = 0;
			level clientnotify( "sndAMB" );
			setmusicstate( "FRONT_END_MAIN" );
			break;
		case "skipped":
			level notify( "frontend_refresh_scene" );
			flag_set( "lockout_screen_passed" );
			level.menustate = -1;
			level clientnotify( "sndAMB" );
			setmusicstate( "FRONT_END_MAIN" );
			break;
		case "skipped_freeroam":
			level clientnotify( "sndAMB" );
			setmusicstate( "FRONT_END_MAIN" );
			break;
		case "start_credits":
			level notify( "frontend_refresh_scene" );
			flag_set( "lockout_screen_skipped_freeroam" );
			level.menustate = 5;
			level clientnotify( "sndNOAMB" );
			level thread credits_scroll_with_movies_sequence();
			break;
	}
// SP = 0x0 - check OK
}

// 0x3CB0
listen_for_luisystem_messages()
{
	self waittill( "menuresponse", str_menu_action, str_action_arg );
	switch ( str_action_arg )
	{
		case "cm_start":
			level.luimodal = 1;
			break;
		case "cm_stop":
			level.luimodal = 0;
			break;
		case "modal_start":
			level thread cm_input_watcher();
			break;
		case "modal_stop":
			level notify( "terminate_cm_watcher" );
			break;
	}
// SP = 0x0 - check OK
}

// 0x3D34
play_phase_intro()
{
	last_level = get_level_number_completed();
	hub_num = frontend_get_hub_number( last_level + 1 );
	switch ( hub_num )
	{
		case 1:
			maps\frontend_sf_a::scene_pre_briefing();
			break;
		case 2:
			maps\frontend_sf_b::scene_pre_briefing();
			break;
		case 3:
			maps\frontend_sf_c::scene_pre_briefing();
			break;
		case 4:
			maps\frontend_sf_c::scene_pre_briefing_phase4();
			break;
	}
// SP = 0x0 - check OK
}

// 0x3E08
briefing_fade_up()
{
	setmusicstate( "MUS_FE_STRIKEFORCE" );
	wait 0.5;
	attach_data_pads();
	fade_in( 0.5 );
// SP = 0x0 - check OK
}

// 0x3E3C
listen_for_launchlevel_messages()
{
	self waittill( "menuresponse", str_menu_action, str_action_arg );
	get_players()[0] strikeforce_decrement_unit_tokens();
	fade_out( 0.5 );
	toggle_main_menu();
	level thread maps\createart\frontend_art::run_war_room_mixers();
	flag_set( "briefing_active" );
	level_for_briefing = GetDvar( #"0xD614D075" );
	level_for_briefing = str_action_arg;
	show_holotable_fuzz( 1 );
	show_globe( 0, 1 );
	holo_table_exploder_switch( 117 );
	level thread frontend_watch_scene_skip( str_action_arg );
	switch ( level_for_briefing )
	{
		case "so_rts_afghanistan":
			level.player set_story_stat( "SO_WAR_SINGAPORE_INTRO", 1 );
			break;
		case "so_rts_mp_dockside":
			level.player set_story_stat( "SO_WAR_DRONE_INTRO", 1 );
			break;
		case "so_rts_mp_drone":
			level.player set_story_stat( "SO_WAR_PAKISTAN_INTRO", 1 );
			break;
		case "so_rts_mp_overflow":
			level.player set_story_stat( "SO_WAR_SOCOTRA_INTRO", 1 );
			break;
		case "so_rts_mp_socotra":
			level.player set_story_stat( "SO_WAR_AFGHANISTAN_INTRO", 1 );
			break;
	}
	level thread briefing_fade_up();
	play_phase_intro();
	switch ( level_for_briefing )
	{
		case "so_rts_afghanistan":
			maps\frontend_sf_a::scene_dockside_briefing();
			break;
		case "so_rts_mp_dockside":
			maps\frontend_sf_a::scene_drone_briefing();
			break;
		case "so_rts_mp_drone":
			maps\frontend_sf_c::scene_overflow_briefing();
			break;
		case "so_rts_mp_overflow":
			maps\frontend_sf_c::scene_socotra_briefing();
			break;
		case "so_rts_mp_socotra":
			maps\frontend_sf_b::scene_afghanistan_briefing();
			break;
	}
	launchlevel( str_action_arg );
// SP = 0x0 - check OK
}

// 0x4024
cm_input_watcher()
{
	level endon( "terminate_cm_watcher" );
	lvl = array( 1, 5, 3, 4, 3, 1, 1 );
	unit = array( 1, 2, 3, 4, 5 );
	version = array( 5, 0, 2, 4, 1, 3 );
	buttons = array( "BUTTON_RTRIG", "BUTTON_LTRIG", "BUTTON_RSHLDR", "BUTTON_LSHLDR", "BUTTON_X", "BUTTON_Y" );
	lvl_index = 0;
	unit_index = 0;
	version_index = 0;
	i = 0;
	wait 0.05;
	lvl_index++;
	lvl_index = 0;
	unit_index++;
	unit_index = 0;
	version_index++;
	version_index = 0;
	i++;
	lvl_index = 0;
	unit_index = 0;
	return;
	saved_num = get_strikeforce_tokens_remaining();
	saved_num += 5;
	return;
	iprintln( GetDvar( #"0x73006C4B" ) );
	return;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x41B4
listen_for_campaign_state_change()
{
	self waittill( "menuresponse", str_menu_action, str_action_arg );
	switch ( str_action_arg )
	{
		case "start":
			level notify( "frontend_refresh_scene" );
			break;
		case "start_difficulty":
			level thread play_intro_movie();
			break;
		case "stop":
			setdvar( "ui_aarmapname", "" );
			setdvar( "ui_mapname", "" );
			break;
	}
// SP = 0x0 - check OK
}

// 0x4244
play_intro_movie()
{
	level endon( "intro_movie_abort" );
	rpc( "clientscripts/frontend", "stop_env_movie" );
	setmusicstate( "FRONT_END_NO_MUSIC" );
	wait 0.05;
	level thread movie_hide_hud();
	check_for_webm = 1;
	level.iscinematicwebm = 1;
	level.intro_cin_id = play_movie_async( "prologue", 0, 0, undefined, 0, "intro_movie_done", undefined, undefined, 0, check_for_webm );
	level thread skip_intro_prompt();
	level waittill( "intro_movie_done" );
	level.intro_cin_id = undefined;
	rpc( "clientscripts/frontend", "start_env_movie" );
	wait 0.05;
	level.player show_hud();
	luinotifyevent( &"intro_complete" );
	level notify( "intro_movie_prompt_abort" );
	setmusicstate( "FRONT_END_MAIN" );
	level thread frontend_do_save( 1 );
// SP = 0x0 - check OK
}

// 0x4314
movie_hide_hud()
{
	level waittill( "movie_started" );
	level.player hide_hud();
// SP = 0x0 - check OK
}

// 0x4330
skip_intro_prompt()
{
	level endon( "intro_movie_prompt_abort" );
	wait 2;
	flag_clear( "frontend_scene_ready" );
	teardown_basic_scene();
	setup_basic_scene();
	flag_set( "frontend_scene_ready" );
	wait 8;
	luinotifyevent( &"show_skip_prompt" );
	wait 0.05;
	level notify( "intro_movie_abort" );
	stop3dcinematic( level.intro_cin_id );
	rpc( "clientscripts/frontend", "start_env_movie" );
	setmusicstate( "FRONT_END_MAIN" );
	wait 0.05;
	level.player show_hud();
	luinotifyevent( &"intro_complete" );
	level thread frontend_do_save( 1 );
// SP = 0x0 - check OK
}

// 0x4440
credits_scroll_with_movies_sequence()
{
	level endon( "credits_abort" );
	flag_wait( "save_complete" );
	luinotifyevent( &"start_credits" );
	setdvar( "r_loadingScreen", 1 );
	setculldist( 0.1 );
	menendez_alive = !(level.player get_story_stat( "MENENDEZ_DEAD_IN_HAITI" ));
	jr_alive = !(level.player get_story_stat( "MASONJR_DEAD_IN_HAITI" ));
	sr_alive = !(level.player get_story_stat( "MASON_SR_DEAD" ));
	karma_alive = level.player get_story_stat( "SO_WAR_SOCOTRA_SUCCESS" );
	music_num = 0;
	str_movie_1_name = "a3_grave_jr_alive_1";
	str_movie_2_name = "a3_grave_jr_alive_2";
	str_movie_3_name = "a3_grave_jr_alive_3";
	str_movie_4_name = "a3_grave_jr_alive_4";
	str_movie_5_name = "a3_grave_jr_alive_5";
	str_movie_6_name = "a3_grave_jr_alive_6";
	str_movie_7_name = "a3_grave_jr_alive_7";
	str_movie_8_name = "c3_dead";
	str_movie_9_name = "a7x";
	music_num = 0;
	str_movie_1_name = "a2_vault_reunite_1";
	str_movie_2_name = "a2_vault_reunite_2";
	str_movie_3_name = "a2_vault_reunite_3";
	str_movie_4_name = "a2_vault_reunite_4";
	str_movie_5_name = "a2_vault_reunite_5";
	str_movie_6_name = "a2_vault_reunite_6";
	str_movie_7_name = "a2_vault_reunite_7";
	str_movie_8_name = "c3_dead";
	str_movie_9_name = "a7x";
	music_num = 1;
	str_movie_1_name = "a3_grave_jr_alive_1";
	str_movie_2_name = "a3_grave_jr_alive_2";
	str_movie_3_name = "a3_grave_jr_alive_3";
	str_movie_4_name = "a3_grave_jr_alive_4";
	str_movie_5_name = "a3_grave_jr_alive_5";
	str_movie_6_name = "a3_grave_jr_alive_6";
	str_movie_7_name = "a3_grave_jr_alive_7";
	str_movie_8_name = "c1_karma_alive";
	str_movie_9_name = "a7x";
	music_num = 0;
	str_movie_1_name = "a1_vault_menendez_1";
	str_movie_2_name = "a1_vault_menendez_2";
	str_movie_3_name = "a1_vault_menendez_3";
	str_movie_4_name = "a1_vault_menendez_4";
	str_movie_5_name = "a1_vault_menendez_5";
	str_movie_6_name = "a1_vault_menendez_6";
	str_movie_7_name = "a1_vault_menendez_7";
	str_movie_8_name = "c2_karma_alive";
	str_movie_9_name = "a7x";
	music_num = 2;
	str_movie_1_name = "a2_vault_reunite_1";
	str_movie_2_name = "a2_vault_reunite_2";
	str_movie_3_name = "a2_vault_reunite_3";
	str_movie_4_name = "a2_vault_reunite_4";
	str_movie_5_name = "a2_vault_reunite_5";
	str_movie_6_name = "a2_vault_reunite_6";
	str_movie_7_name = "a2_vault_reunite_7";
	str_movie_8_name = "c1_karma_alive";
	str_movie_9_name = "a7x";
	music_num = 1;
	str_movie_1_name = "a1_vault_menendez_1";
	str_movie_2_name = "a1_vault_menendez_2";
	str_movie_3_name = "a1_vault_menendez_3";
	str_movie_4_name = "a1_vault_menendez_4";
	str_movie_5_name = "a1_vault_menendez_5";
	str_movie_6_name = "a1_vault_menendez_6";
	str_movie_7_name = "a1_vault_menendez_7";
	str_movie_8_name = "c2_karma_alive";
	str_movie_9_name = "a7x";
	music_num = 2;
/#
	assert( IsDefined( str_movie_1_name ) );
#/
/#
	assert( IsDefined( str_movie_2_name ) );
#/
/#
	assert( IsDefined( str_movie_3_name ) );
#/
/#
	assert( IsDefined( str_movie_4_name ) );
#/
/#
	assert( IsDefined( str_movie_5_name ) );
#/
/#
	assert( IsDefined( str_movie_6_name ) );
#/
/#
	assert( IsDefined( str_movie_7_name ) );
#/
/#
	assert( IsDefined( str_movie_8_name ) );
#/
/#
	assert( IsDefined( str_movie_9_name ) );
#/
	rpc( "clientscripts/frontend", "stop_env_movie" );
	level.iscinematicwebm = 1;
	check_for_webm = 1;
	level thread credits_sequence1_abort();
	level thread credits_sequence1( str_movie_1_name, str_movie_2_name, str_movie_3_name, str_movie_4_name, str_movie_5_name, str_movie_6_name, str_movie_7_name, music_num, check_for_webm );
	level waittill( "credits_sequence1_done" );
	level thread credits_sequence1a_abort();
	level thread credits_sequence1a();
	level waittill( "credits_sequence1a_done" );
	level thread credits_sequence2_abort();
	level thread credits_sequence2( str_movie_8_name, music_num, check_for_webm );
	level waittill( "credits_sequence2_done" );
	level thread credits_sequence2a_abort();
	level thread credits_sequence2a();
	level waittill( "credits_sequence2a_done" );
	level thread credits_sequence3_abort();
	level thread credits_sequence3( str_movie_9_name, music_num, check_for_webm );
	level waittill( "credits_sequence3_done" );
	level notify( "credits_movie_complete" );
	rpc( "clientscripts/frontend", "start_env_movie" );
	level thread waitforendcreditschangemusic();
	level.iscinematicwebm = 0;
	wait 0.1;
	luinotifyevent( &"stop_credits" );
	setdvar( "r_loadingScreen", 0 );
	level.menustate = 1;
	toggle_main_menu();
	setculldist( 10000 );
	frontend_do_save();
// SP = 0x0 - check OK
}

// 0x4898
credits_sequence1( str_movie_1_name, str_movie_2_name, str_movie_3_name, str_movie_4_name, str_movie_5_name, str_movie_6_name, str_movie_7_name, music_num, check_for_webm )
{
	level endon( "credits_sequence1_skip" );
	level waittill( "credits_movie_1" );
	setmusicstate( "FRONT_END_NO_MUSIC" );
	rpc( "clientscripts/frontend_amb", "sndCreditsMusic", music_num, 1 );
	level.credits_cin_id = play_movie_async( str_movie_1_name, 0, 0, undefined, 1, "credits_movie1_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie1_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_2" );
	level.credits_cin_id = play_movie_async( str_movie_2_name, 0, 0, undefined, 1, "credits_movie2_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie2_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_3" );
	level.credits_cin_id = play_movie_async( str_movie_3_name, 0, 0, undefined, 1, "credits_movie3_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie3_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_4" );
	level.credits_cin_id = play_movie_async( str_movie_4_name, 0, 0, undefined, 1, "credits_movie4_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie4_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_5" );
	level.credits_cin_id = play_movie_async( str_movie_5_name, 0, 0, undefined, 1, "credits_movie5_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie5_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_6" );
	level.credits_cin_id = play_movie_async( str_movie_6_name, 0, 0, undefined, 1, "credits_movie6_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie6_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level waittill( "credits_movie_7" );
	level.credits_cin_id = play_movie_async( str_movie_7_name, 0, 0, undefined, 1, "credits_movie7_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie7_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level notify( "credits_sequence1_done" );
// SP = 0x0 - check OK
}

// 0x4A84
credits_sequence1a()
{
	level endon( "credits_sequence1a_skip" );
	level notify( "credits_sequence1a" );
	level waittill( "credits_movie_8" );
	level notify( "credits_sequence1a_done" );
// SP = 0x0 - check OK
}

// 0x4AA4
credits_sequence2( str_movie_8_name, music_num, check_for_webm )
{
	level endon( "credits_sequence2_skip" );
	level notify( "credits_sequence2" );
	rpc( "clientscripts/frontend_amb", "sndStopCreditsMusic" );
	setmusicstate( "FRONT_END_NO_MUSIC" );
	level.credits_cin_id = play_movie_async( str_movie_8_name, 0, 0, undefined, 1, "credits_movie8_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie8_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level notify( "credits_sequence2_done" );
// SP = 0x0 - check OK
}

// 0x4B18
credits_sequence2a()
{
	level endon( "credits_sequence2a_skip" );
	level notify( "credits_sequence2a" );
	rpc( "clientscripts/frontend_amb", "sndPlayCreditsMusic", 2 );
	level waittill( "credits_movie_9" );
	level notify( "credits_sequence2a_done" );
// SP = 0x0 - check OK
}

// 0x4B48
credits_sequence3( str_movie_9_name, music_num, check_for_webm )
{
	level notify( "credits_sequence3" );
	rpc( "clientscripts/frontend_amb", "sndStopCreditsMusic" );
	setmusicstate( "FRONT_END_NO_MUSIC" );
	level.credits_cin_id = play_movie_async( str_movie_9_name, 0, 0, undefined, 1, "credits_movie9_done", undefined, undefined, 0, check_for_webm );
	level waittill( "credits_movie9_done" );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	level notify( "credits_sequence3_done" );
// SP = 0x0 - check OK
}

// 0x4BB4
waitforendcreditschangemusic()
{
	level waittill_either( "credits_abort", "credits_done" );
	level notify( "credits_abort" );
	setculldist( 10000 );
	wait 0.1;
	luinotifyevent( &"stop_credits" );
	level.iscinematicwebm = 0;
	level.menustate = 1;
	toggle_main_menu();
	frontend_do_save();
	rpc( "clientscripts/frontend_amb", "sndStopCreditsMusic" );
	setmusicstate( "FRONT_END_MAIN" );
	level clientnotify( "sndAMB" );
// SP = 0x0 - check OK
}

// 0x4C50
credits_sequence1_abort()
{
	level endon( "credits_movie_complete" );
	level endon( "credits_sequence1a" );
	level waittill( "credits_skip" );
	level notify( "credits_sequence1_skip" );
	stop3dcinematic( level.credits_cin_id );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	setdvar( "ui_creditSkipTo", "scroll_sequence_1" );
	level notify( "credits_sequence1_done" );
// SP = 0x0 - check OK
}

// 0x4CB4
credits_sequence1a_abort()
{
	level endon( "credits_movie_complete" );
	level endon( "credits_sequence2" );
	level waittill( "credits_skip" );
	level notify( "credits_sequence1a_skip" );
	setdvar( "ui_creditSkipTo", "credits_movie_8" );
	level notify( "credits_sequence1a_done" );
// SP = 0x0 - check OK
}

// 0x4CEC
credits_sequence2_abort()
{
	level endon( "credits_movie_complete" );
	level endon( "credits_sequence2a" );
	level waittill( "credits_skip" );
	level notify( "credits_sequence2_skip" );
	stop3dcinematic( level.credits_cin_id );
	level.credits_cin_id = undefined;
	setdvarint( "ui_creditMovieNack", 1 );
	setdvar( "ui_creditSkipTo", "scroll_sequence_2" );
	level notify( "credits_sequence2_done" );
// SP = 0x0 - check OK
}

// 0x4D50
credits_sequence2a_abort()
{
	level endon( "credits_movie_complete" );
	level endon( "credits_sequence3" );
	level waittill( "credits_skip" );
	level notify( "credits_sequence2a_skip" );
	setdvar( "ui_creditSkipTo", "credits_movie_9" );
	level notify( "credits_sequence2a_done" );
// SP = 0x0 - check OK
}

// 0x4D88
credits_sequence3_abort()
{
	level endon( "credits_movie_complete" );
	level waittill( "credits_skip" );
	stop3dcinematic( level.credits_cin_id );
	rpc( "clientscripts/frontend", "start_env_movie" );
	setmusicstate( "FRONT_END_MAIN" );
	level clientnotify( "sndAMB" );
	rpc( "clientscripts/frontend_amb", "sndStopCreditsMusic" );
	level.iscinematicwebm = 0;
// SP = 0x0 - check OK
}

// 0x4DF4
build_globe()
{
	globe = getent( "world_globe", "targetname" );
	countries = getentarray( globe.target, "targetname" );
	foreach ( country in countries )
	{
		country linkto( globe );
		country hide();
		country ignorecheapentityflag( 1 );
		country clearclientflag( 14 );
	}
	level.m_rts_map_angle["so_rts_mp_dockside"] = ( 0, 210, 30 );
	level.m_rts_map_angle["so_rts_afghanistan"] = ( 0, 220, 40 );
	level.m_rts_map_angle["so_rts_mp_drone"] = ( 0, 190, 30 );
	level.m_rts_map_angle["so_rts_mp_socotra"] = ( 0, 245, 20 );
	level.m_rts_map_angle["so_rts_mp_overflow"] = ( 0, 225, 35 );
	return globe;
// SP = 0x0 - check OK
}

// 0x4ED4
toggle_hologram_fx( fx_on )
{
	holo_table_exploder_switch( 113 );
	holo_table_exploder_switch( undefined );
// SP = 0x0 - check OK
}

// 0x4EFC
process_globe_glow()
{
	return;
	self.camera_facing = 1;
	self endon( "death" );
	globe = getent( "world_globe", "targetname" );
	self.angles = globe.angles;
	self.origin = globe.origin;
	cam_pos = level.player getplayercamerapos();
	self_to_camera = cam_pos - self.origin;
	newangles = vectortoangles( self_to_camera );
	newangles = ( newangles[0], newangles[1] + 90, newangles[2] );
	self rotateto( newangles, 0.05, 0, 0 );
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x4FB4
show_holotable_fuzz( do_show )
{
	do_show = 1;
	fuzz = getent( "holotable_static", "targetname" );
	return;
	fuzz ignorecheapentityflag( 1 );
	fuzz setclientflag( 15 );
	fuzz clearclientflag( 15 );
	fuzz.shown = do_show;
// SP = 0x0 - check OK
}

// 0x5048
show_globe( do_show, toggle_countries, ambient_spin )
{
	do_show = 1;
	toggle_countries = 0;
	ambient_spin = 0;
	globe = getent( "world_globe", "targetname" );
	globe.glow_ring = getent( "world_globe_ring", "targetname" );
	globe.glow_ring thread process_globe_glow();
	globe notify( "stop_spinning" );
	globe notify( "kill_globe_marker_fx" );
	globe thread rotate_indefinitely( 120 );
	level.m_globe_shown = !(do_show);
	globe setclientflag( 15 );
	globe.glow_ring show();
	globe play_fx( "globe_satellite_fx", globe.origin, globe.angles, "kill_globe_satellite_fx", 1 );
	globe notify( "kill_globe_satellite_fx" );
	globe notify( "kill_globe_marker_fx" );
	globe clearclientflag( 15 );
	globe.glow_ring hide();
	level.m_globe_shown = do_show;
	countries = getentarray( globe.target, "targetname" );
	foreach ( country in countries )
	{
		country show();
		country hide();
	}
// SP = 0x0 - check OK
}

// 0x51E8
globe_show_map( map_name )
{
	angles = level.m_rts_map_angle[map_name];
	angles = ( 0, 0, 0 );
	globe = getent( "world_globe", "targetname" );
	disputed_territory = level.m_rts_territory[map_name];
	city_marker = level.m_rts_city_tag[map_name];
	wait_network_frame();
	territories = getentarray( globe.target, "targetname" );
	foreach ( territory in territories )
	{
		hide = 1;
		hide = 0;
		territory hide();
		territory show();
	}
/#
	tweak_x = angles[0];
	tweak_y = angles[1];
	tweak_z = angles[2];
	angles = ( tweak_x, tweak_y, tweak_z );
#/
	globe notify( "kill_globe_marker_fx" );
	globe play_fx( "globe_city_marker", globe.origin, globe.angles, "kill_globe_marker_fx", 1, city_marker );
	globe rotateto( angles, 0.5, 0, 0 );
// SP = 0x0 - check OK
}

// 0x5330
frontend_get_hub_number( current_level )
{
	hub_number = int( tablelookup( "sp/levelLookup.csv", 0, current_level, 17 ) );
	hub_number = 0;
	hub_number = 0;
	return hub_number;
// SP = 0x0 - check OK
}

// 0x5378
teardown_basic_scene()
{
	level notify( "teardown_basic_scene" );
	hide_holo_table_props();
	briggs = getent( "briggs_ai", "targetname" );
	briggs delete();
	briggs_spawner = getent( "briggs", "targetname" );
	briggs_spawner.count = 1;
	array_delete( level.m_mission_team );
	level.m_mission_team = undefined;
	show_globe( 1, 0 );
	show_holotable_fuzz( 0 );
	frontend_delete_ospreys();
// SP = 0x0 - check OK
}

// 0x5410
frontend_run_scene()
{
	level waittill( "frontend_refresh_scene" );
	setup_basic_scene();
	level_num = int( tablelookup( "sp/levelLookup.csv", 1, GetDvar( #"0x32F384A1" ), 0 ) );
	luinotifyevent( &"frontend_restore2", 1, 0, 1 );
	flag_set( "frontend_scene_ready" );
	wait 0.5;
	fade_in( 0.5 );
	level waittill( "frontend_refresh_scene" );
	flag_clear( "frontend_scene_ready" );
	fade_out( 0.5 );
	teardown_basic_scene();
// SP = 0x0 - check OK
}

// 0x5504
frontend_watch_resume()
{
	level waittill( "frontend_resume" );
	fade_out( 0.5 );
	luinotifyevent( &"frontend_restore" );
// SP = 0x0 - check OK
}

// 0x5538
flag_is_set_and_defined( flag_name )
{
	return 0;
	return flag( flag_name );
// SP = 0x0 - check OK
}

// 0x555C
frontend_platform_skip_button_check()
{
	return level.player buttonpressed( "ESCAPE" );
	return level.player buttonpressed( getenterbutton() );
// SP = 0x0 - check OK
}

// 0x55D0
frontend_watch_scene_skip( level_name )
{
	wait 4;
	luinotifyevent( &"show_skip_prompt" );
	wait_network_frame();
	wait_network_frame();
	wait_network_frame();
	level thread fade_out( 0.5 );
	wait 0.7;
	launchlevel( level_name );
// SP = 0x0 - check OK
}

// 0x5668
fade_out( n_time )
{
	n_time = 1;
	level.hudalpha = 0;
	hud = get_fade_hud( "black" );
	hud.foreground = 1;
	hud.alpha = 0;
	hud fadeovertime( n_time );
	hud.alpha = 1;
	wait n_time;
	hud.alpha = 1;
	level.hudalpha = 1;
// SP = 0x0 - check OK
}

// 0x56F4
fade_in( n_time )
{
	n_time = 1;
	level.hudalpha = 0;
	hud = get_fade_hud( "black" );
	hud.foreground = 1;
	hud.alpha = 1;
	hud fadeovertime( n_time );
	hud.alpha = 0;
	wait n_time;
	hud.alpha = 0;
	level.hudalpha = 0;
	level.fade_hud destroy();
// SP = 0x0 - check OK
}

// 0x5794
setup_war_map( cur_level )
{
	map_names = getarraykeys( level.m_rts_map_id );
	num_tokens = level.player get_strikeforce_tokens_remaining();
	num_claimed = 0;
	num_fallen = 0;
	flag_wait( "strikeforce_stats_loaded" );
	campaign_state = get_campaign_state();
	i = 0;
	map_name = map_names[i];
	map_id = level.m_rts_map_id[map_name];
	stat_id = level.m_rts_stats[map_name];
	color_id = 4;
	map_done = level.player get_story_stat( stat_id );
	color_id = 4;
	color_id = 3;
	num_claimed++;
	color_id = 2;
	levels_left = strikeforce_get_num_levels_till_gone( cur_level, map_name );
	color_id = 2;
	num_fallen++;
	color_id = 0;
	set_world_map_tint( map_id, color_id );
	set_world_map_marker( map_id, 0 );
	set_world_map_widget( map_id, 0 );
	i++;
	set_world_map_tint( 4, 4 );
	set_world_map_tint( 4, 2 );
	set_world_map_tint( 4, 3 );
	set_world_map_tint( 4, 0 );
	set_world_map_marker( 4, 0 );
	set_world_map_widget( 4, 0 );
	refresh_war_map_shader();
// SP = 0x0 - check OK
}

// 0x593C
frontend_run_ospreys()
{
	osprey_name_list = array( "frontend_osprey1", "frontend_osprey2", "frontend_osprey3", "frontend_osprey4" );
	level.m_ospreys = [];
	foreach ( name in osprey_name_list )
	{
		osprey = maps\_vehicle::spawn_vehicle_from_targetname( name );
		osprey thread frontend_run_osprey();
		level.m_ospreys[level.m_ospreys.size] = osprey;
	}
// SP = 0x0 - check OK
}

// 0x59BC
frontend_delete_ospreys()
{
	array_delete( level.m_ospreys );
	level.m_ospreys = undefined;
// SP = 0x0 - check OK
}

// 0x59E0
player_boat_sim( angle_min, angle_max, time )
{
	angle_min = 0.5;
	angle_max = 1;
	time = 4;
	wait 1;
	self notify( "stop_boat_sim" );
	self endon( "stop_boat_sim" );
	self.m_ground_ref = spawn_model( "tag_origin", self.origin );
	self playersetgroundreferenceent( self.m_ground_ref );
	n_time = time;
	n_angle = randomfloatrange( angle_min, angle_max );
	self.m_ground_ref rotateto( ( n_angle, 0, 0 ), n_time, n_time / 2, n_time / 2 );
	self.m_ground_ref waittill( "rotatedone" );
	self.m_ground_ref rotateto( ( n_angle * -1, 0, 0 ), n_time, n_time / 2, n_time / 2 );
	self.m_ground_ref waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0x5AD0
stop_player_boat_sim()
{
	self notify( "stop_boat_sim" );
	self.m_ground_ref rotateto( ( 0, 0, 0 ), 4, 2, 2 );
// SP = 0x0 - check OK
}

// 0x5B0C
frontend_run_osprey()
{
	self endon( "death" );
	wait_network_frame();
	self setclientflag( 11 );
	self thread maps\_osprey::close_hatch();
	fvec = anglestoforward( self.angles );
	uvec = anglestoup( self.angles );
	self.look_target = spawn( "script_origin", self.origin + fvec * 2048 );
	self setlookatent( self.look_target );
	self setturningability( 0.1 );
	self sethoverparams( 512, 0.01 );
	original_pos = self.origin;
	self setvehgoalpos( ( original_pos + randomfloatrange( -128, 128 ) * fvec ) + randomfloatrange( -128, 128 ) * uvec, 0 );
	self setvehmaxspeed( 1 );
	self setspeed( 1 );
	self waittill( "goal" );
// SP = 0x0 - check OK
}

// 0x5C20
frontend_setup_devgui()
{
/#
	setdvar( "cmd_skipto", "" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Toggle Freeroam:1\" \"cmd_skipto freeroam\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Phase Intro:2/None:1\" \"cmd_skipto hub_none\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Phase Intro:2/HUB A:2\" \"cmd_skipto hub_a\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Phase Intro:2/HUB B:3\" \"cmd_skipto hub_b\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Phase Intro:2/HUB C:4\" \"cmd_skipto hub_c\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Phase Intro:2/HUB D:5\" \"cmd_skipto hub_d\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Mission Briefing:3/Dockside:1\" \"cmd_skipto so_rts_mp_dockside\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Mission Briefing:3/Drone:2\" \"cmd_skipto so_rts_mp_drone\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Mission Briefing:3/Afghanistan:3\" \"cmd_skipto so_rts_afghanistan\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Mission Briefing:3/Socotra:4\" \"cmd_skipto so_rts_mp_socotra\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Mission Briefing:3/Overflow:5\" \"cmd_skipto so_rts_mp_overflow\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Stats:4/Toggle Iran Safe:1\" \"cmd_skipto toggle_iran_safe\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Stats:4/Toggle India Safe:2\" \"cmd_skipto toggle_india_safe\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Stats:4/Toggle Afghanistan Safe:3\" \"cmd_skipto toggle_afghan_safe\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Stats:4/Toggle Pakistan Intel:4\" \"cmd_skipto toggle_pak_intel\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Stats:4/Toggle Karma Captured:5\" \"cmd_skipto toggle_karma_captured\"\n" );
	adddebugcommand( "devgui_cmd \"|Frontend|/Toggle Globe:5\" \"cmd_skipto toggle_globe\"\n" );
	level thread frontend_watch_devgui();
#/
// SP = 0x0 - check OK
}

// 0x5D14
frontend_watch_devgui()
{
/#
	level.m_debug_phase = "hub_none";
	cmd_skipto = GetDvar( #"0x4D60CDD2" );
	toggle_main_menu();
	fade_out( 0 );
	show_globe( 0, 1 );
	show_holotable_fuzz( 1 );
	holo_table_exploder_switch( 117 );
	flag_set( "briefing_active" );
	level thread maps\createart\frontend_art::run_war_room_mixers();
	wait 2;
	level thread briefing_fade_up();
	switch ( level.m_debug_phase )
	{
		case "hub_a":
			maps\frontend_sf_a::scene_pre_briefing();
			break;
		case "hub_b":
			maps\frontend_sf_b::scene_pre_briefing();
			break;
		case "hub_c":
			maps\frontend_sf_c::scene_pre_briefing();
			break;
		case "hub_d":
			maps\frontend_sf_c::scene_pre_briefing_phase4();
			break;
		default:
	}
	switch ( cmd_skipto )
	{
		case "so_rts_afghanistan":
			level.player set_story_stat( "SO_WAR_SINGAPORE_INTRO", 0 );
			maps\frontend_sf_a::scene_dockside_briefing();
			break;
		case "so_rts_mp_dockside":
			level.player set_story_stat( "SO_WAR_DRONE_INTRO", 0 );
			maps\frontend_sf_a::scene_drone_briefing();
			break;
		case "so_rts_mp_drone":
			level.player set_story_stat( "SO_WAR_PAKISTAN_INTRO", 0 );
			maps\frontend_sf_c::scene_overflow_briefing();
			break;
		case "so_rts_mp_overflow":
			level.player set_story_stat( "SO_WAR_SOCOTRA_INTRO", 0 );
			maps\frontend_sf_c::scene_socotra_briefing();
			break;
		case "so_rts_mp_socotra":
			level.player set_story_stat( "SO_WAR_AFGHANISTAN_INTRO", 0 );
			maps\frontend_sf_b::scene_afghanistan_briefing();
			break;
		default:
	}
	level notify( "frontend_reset_mixers" );
	wait 2;
	flag_clear( "briefing_active" );
	show_globe( 1, 1, 1 );
	show_holotable_fuzz( 0 );
	toggle_main_menu();
	fade_in( 0.5 );
	level.m_debug_phase = cmd_skipto;
	iprintlnbold( "Now select a briefing." );
	stat_to_swap = undefined;
	switch ( cmd_skipto )
	{
		case "freeroam":
			stat_to_swap = "SO_WAR_SINGAPORE_SUCCESS";
			break;
		case "toggle_afghan_safe":
			stat_to_swap = "SO_WAR_DRONE_SUCCESS";
			break;
		case "toggle_globe":
			stat_to_swap = "SO_WAR_AFGHANISTAN_SUCCESS";
			break;
		case "toggle_india_safe":
			stat_to_swap = "ALL_PAKISTAN_RECORDINGS";
			break;
		case "toggle_iran_safe":
			stat_to_swap = "KARMA_CAPTURED";
			break;
		case "toggle_karma_captured":
			level.menustate = 1;
			toggle_main_menu();
			level.player freezecontrols( 1 );
			level.menustate = 0;
			toggle_main_menu();
			level.player freezecontrols( 0 );
			break;
		case "toggle_pak_intel":
			setmusicstate( "FRONT_END_NO_MUSIC" );
			show_holotable_fuzz( 0 );
			show_globe( 0, 1 );
			show_holotable_fuzz( 1 );
			show_globe( 1, 0, 1 );
			break;
		default:
	}
	cur_val = level.player get_story_stat( stat_to_swap ) != 0;
	level.player set_story_stat( stat_to_swap, !(cur_val) );
	iprintlnbold( "Stat now FALSE" );
	iprintlnbold( "Stat now TRUE" );
	setdvar( "cmd_skipto", "" );
	wait 0.05;
#/
// SP = 0x0 - check OK
}
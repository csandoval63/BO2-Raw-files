// maps/_gameskill.gsc

#include maps\_damagefeedback;
#include maps\_gameskill;
#include animscripts\weaponlist;
#include animscripts\combat_utility;
#include common_scripts\utility;
#include animscripts\utility;
#include maps\_utility;


// 0x1700
setskill( reset, skill_override )
{
	level.script = tolower( GetDvar( #"0xB4B895C4" ) );
	return;
	level.global_damage_func_ads = ::empty_kill_func;
	level.global_damage_func = ::empty_kill_func;
	level.global_kill_func = ::empty_kill_func;
	set_console_status();
	flag_init( "player_has_red_flashing_overlay" );
	flag_init( "player_is_invulnerable" );
	level thread update_skill_on_change();
	thread playerhealthdebug();
	level.invultime_onshield_multiplier = 1;
	level.player_attacker_accuracy_multiplier = 1;
	level.gameskill = getlocalprofileint( "g_gameskill" );
	level.gameskill = skill_override;
	replay_single_mission = GetDvarInt( #"0xF241E06" );
	single_mission_difficulty = GetDvarInt( #"0x1DFA0958" );
	level.gameskill = single_mission_difficulty;
	setdvar( "saved_gameskill", level.gameskill );
	switch ( level.gameskill )
	{
		case 0:
			setdvar( "currentDifficulty", "easy" );
			level.currentdifficulty = "easy";
			break;
		case 1:
			setdvar( "currentDifficulty", "normal" );
			level.currentdifficulty = "normal";
			break;
		case 2:
			setdvar( "currentDifficulty", "hardened" );
			level.currentdifficulty = "hardened";
			break;
		case 3:
			setdvar( "currentDifficulty", "veteran" );
			level.currentdifficulty = "veteran";
			break;
	}
	anim.run_accuracy = 0.5;
	logstring( "difficulty: " + level.gameskill );
	level.auto_adjust_threatbias = 1;
	level.difficultysettings["playerGrenadeBaseTime"]["easy"] = 40000;
	level.difficultysettings["playerGrenadeBaseTime"]["normal"] = 25000;
	level.difficultysettings["playerGrenadeBaseTime"]["hardened"] = 10000;
	level.difficultysettings["playerGrenadeBaseTime"]["veteran"] = 0;
	level.difficultysettings["playerGrenadeRangeTime"]["easy"] = 20000;
	level.difficultysettings["playerGrenadeRangeTime"]["normal"] = 15000;
	level.difficultysettings["playerGrenadeRangeTime"]["hardened"] = 5000;
	level.difficultysettings["playerGrenadeRangeTime"]["veteran"] = 1;
	level.difficultysettings["playerDoubleGrenadeTime"]["easy"] = 3600000;
	level.difficultysettings["playerDoubleGrenadeTime"]["normal"] = 120000;
	level.difficultysettings["playerDoubleGrenadeTime"]["hardened"] = 15000;
	level.difficultysettings["playerDoubleGrenadeTime"]["veteran"] = 0;
	level.difficultysettings["double_grenades_allowed"]["easy"] = 0;
	level.difficultysettings["double_grenades_allowed"]["normal"] = 1;
	level.difficultysettings["double_grenades_allowed"]["hardened"] = 1;
	level.difficultysettings["double_grenades_allowed"]["veteran"] = 1;
	level.difficultysettings["player_deathInvulnerableTime"]["easy"] = 4000;
	level.difficultysettings["player_deathInvulnerableTime"]["normal"] = 1700;
	level.difficultysettings["player_deathInvulnerableTime"]["hardened"] = 600;
	level.difficultysettings["player_deathInvulnerableTime"]["veteran"] = 300;
	level.difficultysettings["threatbias"]["easy"] = 100;
	level.difficultysettings["threatbias"]["normal"] = 150;
	level.difficultysettings["threatbias"]["hardened"] = 200;
	level.difficultysettings["threatbias"]["veteran"] = 400;
	level.difficultysettings["longRegenTime"]["easy"] = 5000;
	level.difficultysettings["longRegenTime"]["normal"] = 5000;
	level.difficultysettings["longRegenTime"]["hardened"] = 5000;
	level.difficultysettings["longRegenTime"]["veteran"] = 5000;
	level.difficultysettings["healthOverlayCutoff"]["easy"] = 0.01;
	level.difficultysettings["healthOverlayCutoff"]["normal"] = 0.2;
	level.difficultysettings["healthOverlayCutoff"]["hardened"] = 0.3;
	level.difficultysettings["healthOverlayCutoff"]["veteran"] = 0.5;
	level.difficultysettings["base_enemy_accuracy"]["easy"] = 1;
	level.difficultysettings["base_enemy_accuracy"]["normal"] = 1;
	level.difficultysettings["base_enemy_accuracy"]["hardened"] = 1.3;
	level.difficultysettings["base_enemy_accuracy"]["veteran"] = 1.3;
	level.difficultysettings["accuracyDistScale"]["easy"] = 1;
	level.difficultysettings["accuracyDistScale"]["normal"] = 1;
	level.difficultysettings["accuracyDistScale"]["hardened"] = 1;
	level.difficultysettings["accuracyDistScale"]["veteran"] = 0.5;
	level.difficultysettings["playerDifficultyHealth"]["easy"] = 475;
	level.difficultysettings["playerDifficultyHealth"]["normal"] = 310;
	level.difficultysettings["playerDifficultyHealth"]["hardened"] = 165;
	level.difficultysettings["playerDifficultyHealth"]["veteran"] = 115;
	level.difficultysettings["min_sniper_burst_delay_time"]["easy"] = 3;
	level.difficultysettings["min_sniper_burst_delay_time"]["normal"] = 2;
	level.difficultysettings["min_sniper_burst_delay_time"]["hardened"] = 1.5;
	level.difficultysettings["min_sniper_burst_delay_time"]["veteran"] = 1.1;
	level.difficultysettings["max_sniper_burst_delay_time"]["easy"] = 4;
	level.difficultysettings["max_sniper_burst_delay_time"]["normal"] = 3;
	level.difficultysettings["max_sniper_burst_delay_time"]["hardened"] = 2;
	level.difficultysettings["max_sniper_burst_delay_time"]["veteran"] = 1.5;
	level.difficultysettings["dog_health"]["easy"] = 0.25;
	level.difficultysettings["dog_health"]["normal"] = 0.75;
	level.difficultysettings["dog_health"]["hardened"] = 1;
	level.difficultysettings["dog_health"]["veteran"] = 1;
	level.difficultysettings["dog_presstime"]["easy"] = 415;
	level.difficultysettings["dog_presstime"]["normal"] = 375;
	level.difficultysettings["dog_presstime"]["hardened"] = 250;
	level.difficultysettings["dog_presstime"]["veteran"] = 225;
	level.difficultysettings["dog_hits_before_kill"]["easy"] = 2;
	level.difficultysettings["dog_hits_before_kill"]["normal"] = 1;
	level.difficultysettings["dog_hits_before_kill"]["hardened"] = 0;
	level.difficultysettings["dog_hits_before_kill"]["veteran"] = 0;
	level.difficultysettings["pain_test"]["easy"] = ::always_pain;
	level.difficultysettings["pain_test"]["normal"] = ::always_pain;
	level.difficultysettings["pain_test"]["hardened"] = ::pain_protection;
	level.difficultysettings["pain_test"]["veteran"] = ::pain_protection;
	anim.pain_test = level.difficultysettings["pain_test"][level.currentdifficulty];
	level.difficultysettings["missTimeConstant"]["easy"] = 1;
	level.difficultysettings["missTimeConstant"]["normal"] = 0.05;
	level.difficultysettings["missTimeConstant"]["hardened"] = 0;
	level.difficultysettings["missTimeConstant"]["veteran"] = 0;
	level.difficultysettings["missTimeDistanceFactor"]["easy"] = 0.0008;
	level.difficultysettings["missTimeDistanceFactor"]["normal"] = 0.0001;
	level.difficultysettings["missTimeDistanceFactor"]["hardened"] = 5e-005;
	level.difficultysettings["missTimeDistanceFactor"]["veteran"] = 0;
	level.difficultysettings["flashbangedInvulFactor"]["easy"] = 0.25;
	level.difficultysettings["flashbangedInvulFactor"]["normal"] = 0;
	level.difficultysettings["flashbangedInvulFactor"]["hardened"] = 0;
	level.difficultysettings["flashbangedInvulFactor"]["veteran"] = 0;
	level.difficultysettings["invulTime_preShield"]["easy"] = 0.6;
	level.difficultysettings["invulTime_preShield"]["normal"] = 0.35;
	level.difficultysettings["invulTime_preShield"]["hardened"] = 0.1;
	level.difficultysettings["invulTime_preShield"]["veteran"] = 0;
	level.difficultysettings["invulTime_onShield"]["easy"] = 0.8;
	level.difficultysettings["invulTime_onShield"]["normal"] = 0.5;
	level.difficultysettings["invulTime_onShield"]["hardened"] = 0.1;
	level.difficultysettings["invulTime_onShield"]["veteran"] = 0.05;
	level.difficultysettings["invulTime_postShield"]["easy"] = 0.5;
	level.difficultysettings["invulTime_postShield"]["normal"] = 0.3;
	level.difficultysettings["invulTime_postShield"]["hardened"] = 0.1;
	level.difficultysettings["invulTime_postShield"]["veteran"] = 0;
	level.difficultysettings["playerHealth_RegularRegenDelay"]["easy"] = 3000;
	level.difficultysettings["playerHealth_RegularRegenDelay"]["normal"] = 2400;
	level.difficultysettings["playerHealth_RegularRegenDelay"]["hardened"] = 1200;
	level.difficultysettings["playerHealth_RegularRegenDelay"]["veteran"] = 1200;
	level.difficultysettings["worthyDamageRatio"]["easy"] = 0;
	level.difficultysettings["worthyDamageRatio"]["normal"] = 0.1;
	level.difficultysettings["worthyDamageRatio"]["hardened"] = 0.1;
	level.difficultysettings["worthyDamageRatio"]["veteran"] = 0.1;
	level.difficultysettings["explosivePlantTime"]["easy"] = 10;
	level.difficultysettings["explosivePlantTime"]["normal"] = 10;
	level.difficultysettings["explosivePlantTime"]["hardened"] = 5;
	level.difficultysettings["explosivePlantTime"]["veteran"] = 5;
	level.explosiveplanttime = level.difficultysettings["explosivePlantTime"][level.currentdifficulty];
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["easy"][0] = 1;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["easy"][1] = 0.9;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["easy"][2] = 0.8;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["easy"][3] = 0.7;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["normal"][0] = 1;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["normal"][1] = 0.9;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["normal"][2] = 0.8;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["normal"][3] = 0.7;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["hardened"][0] = 1;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["hardened"][1] = 0.9;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["hardened"][2] = 0.8;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["hardened"][3] = 0.7;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["veteran"][0] = 1;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["veteran"][1] = 0.9;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["veteran"][2] = 0.8;
	level.difficultysettings["coopPlayer_deathInvulnerableTime"]["veteran"][3] = 0.7;
	level.difficultysettings["coopPlayerDifficultyHealth"]["easy"][0] = 1;
	level.difficultysettings["coopPlayerDifficultyHealth"]["easy"][1] = 0.95;
	level.difficultysettings["coopPlayerDifficultyHealth"]["easy"][2] = 0.8;
	level.difficultysettings["coopPlayerDifficultyHealth"]["easy"][3] = 0.75;
	level.difficultysettings["coopPlayerDifficultyHealth"]["normal"][0] = 1;
	level.difficultysettings["coopPlayerDifficultyHealth"]["normal"][1] = 0.9;
	level.difficultysettings["coopPlayerDifficultyHealth"]["normal"][2] = 0.8;
	level.difficultysettings["coopPlayerDifficultyHealth"]["normal"][3] = 0.7;
	level.difficultysettings["coopPlayerDifficultyHealth"]["hardened"][0] = 1;
	level.difficultysettings["coopPlayerDifficultyHealth"]["hardened"][1] = 0.85;
	level.difficultysettings["coopPlayerDifficultyHealth"]["hardened"][2] = 0.7;
	level.difficultysettings["coopPlayerDifficultyHealth"]["hardened"][3] = 0.65;
	level.difficultysettings["coopPlayerDifficultyHealth"]["veteran"][0] = 1;
	level.difficultysettings["coopPlayerDifficultyHealth"]["veteran"][1] = 0.8;
	level.difficultysettings["coopPlayerDifficultyHealth"]["veteran"][2] = 0.6;
	level.difficultysettings["coopPlayerDifficultyHealth"]["veteran"][3] = 0.5;
	level.difficultysettings["coopEnemyAccuracyScalar"]["easy"][0] = 1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["easy"][1] = 1.1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["easy"][2] = 1.2;
	level.difficultysettings["coopEnemyAccuracyScalar"]["easy"][3] = 1.3;
	level.difficultysettings["coopEnemyAccuracyScalar"]["normal"][0] = 1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["normal"][1] = 1.1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["normal"][2] = 1.3;
	level.difficultysettings["coopEnemyAccuracyScalar"]["normal"][3] = 1.5;
	level.difficultysettings["coopEnemyAccuracyScalar"]["hardened"][0] = 1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["hardened"][1] = 1.2;
	level.difficultysettings["coopEnemyAccuracyScalar"]["hardened"][2] = 1.4;
	level.difficultysettings["coopEnemyAccuracyScalar"]["hardened"][3] = 1.6;
	level.difficultysettings["coopEnemyAccuracyScalar"]["veteran"][0] = 1;
	level.difficultysettings["coopEnemyAccuracyScalar"]["veteran"][1] = 1.3;
	level.difficultysettings["coopEnemyAccuracyScalar"]["veteran"][2] = 1.6;
	level.difficultysettings["coopEnemyAccuracyScalar"]["veteran"][3] = 2;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["easy"][0] = 1;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["easy"][1] = 0.9;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["easy"][2] = 0.8;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["easy"][3] = 0.7;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["normal"][0] = 1;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["normal"][1] = 0.8;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["normal"][2] = 0.7;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["normal"][3] = 0.6;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["hardened"][0] = 1;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["hardened"][1] = 0.7;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["hardened"][2] = 0.5;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["hardened"][3] = 0.5;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["veteran"][0] = 1;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["veteran"][1] = 0.7;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["veteran"][2] = 0.5;
	level.difficultysettings["coopFriendlyAccuracyScalar"]["veteran"][3] = 0.4;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["easy"][0] = 1;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["easy"][1] = 1.1;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["easy"][2] = 1.2;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["easy"][3] = 1.3;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["normal"][0] = 1;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["normal"][1] = 2;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["normal"][2] = 3;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["normal"][3] = 4;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["hardened"][0] = 1;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["hardened"][1] = 3;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["hardened"][2] = 6;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["hardened"][3] = 9;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["veteran"][0] = 1;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["veteran"][1] = 10;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["veteran"][2] = 20;
	level.difficultysettings["coopFriendlyThreatBiasScalar"]["veteran"][3] = 30;
	level.difficultysettings["lateralAccuracyModifier"]["easy"] = 300;
	level.difficultysettings["lateralAccuracyModifier"]["normal"] = 700;
	level.difficultysettings["lateralAccuracyModifier"]["hardened"] = 1000;
	level.difficultysettings["lateralAccuracyModifier"]["veteran"] = 2500;
	set_difficulty_from_locked_settings();
	thread coop_player_threat_bias_adjuster();
	thread coop_enemy_accuracy_scalar_watcher();
	thread coop_friendly_accuracy_scalar_watcher();
// SP = 0x0 - check OK
}

// 0x283C
apply_difficulty_var_with_func( difficulty_func )
{
	level.invultime_preshield = [[difficulty_func]]( "invulTime_preShield" );
	level.invultime_onshield = [[difficulty_func]]( "invulTime_onShield" ) * level.invultime_onshield_multiplier;
	level.invultime_postshield = [[difficulty_func]]( "invulTime_postShield" );
	level.playerhealth_regularregendelay = [[difficulty_func]]( "playerHealth_RegularRegenDelay" );
	level.worthydamageratio = [[difficulty_func]]( "worthyDamageRatio" );
	thread apply_threat_bias_to_all_players( difficulty_func );
	level.longregentime = [[difficulty_func]]( "longRegenTime" );
	level.healthoverlaycutoff = [[difficulty_func]]( "healthOverlayCutoff" );
	anim.player_attacker_accuracy = [[difficulty_func]]( "base_enemy_accuracy" ) * level.player_attacker_accuracy_multiplier;
	anim.misstimeconstant = [[difficulty_func]]( "missTimeConstant" );
	anim.misstimedistancefactor = [[difficulty_func]]( "missTimeDistanceFactor" );
	anim.dog_hits_before_kill = [[difficulty_func]]( "dog_hits_before_kill" );
	anim.double_grenades_allowed = [[difficulty_func]]( "double_grenades_allowed" );
	anim.playergrenadebasetime = int( [[difficulty_func]]( "playerGrenadeBaseTime" ) );
	anim.playergrenaderangetime = int( [[difficulty_func]]( "playerGrenadeRangeTime" ) );
	anim.playerdoublegrenadetime = int( [[difficulty_func]]( "playerDoubleGrenadeTime" ) );
	anim.min_sniper_burst_delay_time = [[difficulty_func]]( "min_sniper_burst_delay_time" );
	anim.max_sniper_burst_delay_time = [[difficulty_func]]( "max_sniper_burst_delay_time" );
	anim.dog_health = [[difficulty_func]]( "dog_health" );
	anim.dog_presstime = [[difficulty_func]]( "dog_presstime" );
	setsaveddvar( "ai_accuracyDistScale", [[difficulty_func]]( "accuracyDistScale" ) );
	thread coop_damage_and_accuracy_scaling( difficulty_func );
// SP = 0x0 - check OK
}

// 0x29A4
apply_threat_bias_to_all_players( difficulty_func )
{
	wait 0.05;
	flag_wait( "all_players_connected" );
	players = get_players();
	i = 0;
	players[i].threatbias = int( [[difficulty_func]]( "threatbias" ) );
	i++;
// SP = 0x0 - check OK
}

// 0x2A20
coop_damage_and_accuracy_scaling( difficulty_func )
{
	wait 0.05;
	wait 0.05;
	flag_wait( "all_players_spawned" );
	players = get_players();
	coop_healthscalar = getcoopvalue( "coopPlayerDifficultyHealth", players.size );
	setsaveddvar( "player_meleeDamageMultiplier", 0.4 );
	setsaveddvar( "player_damageMultiplier", 100 / ( [[difficulty_func]]( "playerDifficultyHealth" ) * coop_healthscalar ) );
	coop_invuln_remover = getcoopvalue( "coopPlayer_deathInvulnerableTime", players.size );
	setsaveddvar( "player_deathInvulnerableTime", int( [[difficulty_func]]( "player_deathInvulnerableTime" ) * coop_invuln_remover ) );
// SP = 0x0 - check OK
}

// 0x2AE8
set_difficulty_from_locked_settings()
{
	apply_difficulty_var_with_func( ::get_locked_difficulty_val );
// SP = 0x0 - check OK
}

// 0x2B00
getcurrentdifficultysetting( msg )
{
	return level.difficultysettings[msg][level.currentdifficulty];
// SP = 0x0 - check OK
}

// 0x2B18
getcoopvalue( msg, numplayers )
{
	numplayers = 1;
	return level.difficultysettings[msg][GetDvar( #"0xDA8CD87B" )][numplayers - 1];
// SP = 0x0 - check OK
}

// 0x2B48
get_locked_difficulty_val( msg, ignored )
{
	return level.difficultysettings[msg][level.currentdifficulty];
// SP = 0x0 - check OK
}

// 0x2B60
always_pain()
{
	return 0;
// SP = 0x0 - check OK
}

// 0x2B68
pain_protection()
{
	return 0;
	return randomint( 100 ) > 25;
// SP = 0x0 - check OK
}

// 0x2B88
pain_protection_check()
{
	return 0;
	return 0;
	level.painai = self;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x2C10
playerhealthdebug()
{
/#
	setdvar( "scr_health_debug", "1" );
	waittillframeend;
	wait 0.5;
	thread printhealthdebug();
	wait 0.5;
	level notify( "stop_printing_grenade_timers" );
	destroyhealthdebug();
#/
// SP = 0x0 - check OK
}

// 0x2C98
printhealthdebug()
{
	level notify( "stop_printing_health_bars" );
	level endon( "stop_printing_health_bars" );
	y = 40;
	level.healthbarhudelems = [];
	level.healthbarkeys[0] = "Health";
	level.healthbarkeys[1] = "No Hit Time";
	level.healthbarkeys[2] = "No Die Time";
	level.playerinvultimeend = 0;
	level.player_deathinvulnerabletimeout = 0;
	i = 0;
	key = level.healthbarkeys[i];
	textelem = newhudelem();
	textelem.x = 40;
	textelem.y = y;
	textelem.alignx = "left";
	textelem.aligny = "top";
	textelem.horzalign = "fullscreen";
	textelem.vertalign = "fullscreen";
	textelem settext( key );
	bgbar = newhudelem();
	bgbar.x = 40 + 79;
	bgbar.y = y + 1;
	bgbar.z = 1;
	bgbar.alignx = "left";
	bgbar.aligny = "top";
	bgbar.horzalign = "fullscreen";
	bgbar.vertalign = "fullscreen";
	bgbar.maxwidth = 3;
	bgbar setshader( "white", bgbar.maxwidth, 10 );
	bgbar.color = vector_scale( ( 1, 1, 1 ), 0.5 );
	bar = newhudelem();
	bar.x = 40 + 80;
	bar.y = y + 2;
	bar.alignx = "left";
	bar.aligny = "top";
	bar.horzalign = "fullscreen";
	bar.vertalign = "fullscreen";
	bar setshader( "black", 1, 8 );
	textelem.bar = bar;
	textelem.bgbar = bgbar;
	textelem.key = key;
	y += 10;
	level.healthbarhudelems[key] = textelem;
	i++;
	flag_wait( "all_players_spawned" );
	wait 0.05;
	players = get_players();
	i = 0;
	key = level.healthbarkeys[i];
	player = players[0];
	width = 0;
	width = player.health / player.maxhealth * 300;
	width = ( level.playerinvultimeend - GetTime() ) / 1000 * 40;
	width = ( level.player_deathinvulnerabletimeout - GetTime() ) / 1000 * 40;
	width = int( max( width, 1 ) );
	width = int( min( width, 300 ) );
	bar = level.healthbarhudelems[key].bar;
	bar setshader( "black", width, 8 );
	bgbar = level.healthbarhudelems[key].bgbar;
	bgbar.maxwidth = width + 2;
	bgbar setshader( "white", bgbar.maxwidth, 10 );
	bgbar.color = vector_scale( ( 1, 1, 1 ), 0.5 );
	i++;
// SP = 0x0 - check OK
}

// 0x2FF4
destroyhealthdebug()
{
	level notify( "stop_printing_health_bars" );
	return;
	i = 0;
	level.healthbarhudelems[level.healthbarkeys[i]].bgbar destroy();
	level.healthbarhudelems[level.healthbarkeys[i]].bar destroy();
	level.healthbarhudelems[level.healthbarkeys[i]] destroy();
	i++;
// SP = 0x0 - check OK
}

// 0x3078
axisaccuracycontrol()
{
	self endon( "long_death" );
	self endon( "death" );
	self coop_axis_accuracy_scaler();
// SP = 0x0 - check OK
}

// 0x3094
alliesaccuracycontrol()
{
	self endon( "long_death" );
	self endon( "death" );
	self coop_allies_accuracy_scaler();
// SP = 0x0 - check OK
}

// 0x30B0
set_accuracy_based_on_situation()
{
	self setsniperaccuracy();
	return;
	resetmissdebouncetime();
	self.accuracy = 0;
	return;
	self.accuracy = anim.run_accuracy * self.baseaccuracy;
	return;
	self.accuracy = anim.run_accuracy * self.baseaccuracy;
	return;
	self.accuracy = self.baseaccuracy;
// SP = 0x0 - check OK
}

// 0x3160
setsniperaccuracy()
{
	self.snipershotcount = 0;
	self.sniperhitcount = 0;
	self.snipershotcount++;
	self.accuracy = 0;
	self.lastmissedenemy = self.enemy;
	return;
	self.accuracy = ( 1 + 1 * self.sniperhitcount ) * self.baseaccuracy;
	self.sniperhitcount++;
	self.lastmissedenemy = undefined;
// SP = 0x0 - check OK
}

// 0x3214
didsomethingotherthanshooting()
{
	self.a.misstimedebounce = 0;
// SP = 0x0 - check OK
}

// 0x3224
resetmisstime()
{
	return;
	return;
	self.misstime = 0;
	return;
	self.a.nonstopfire = 0;
	return;
	self.accuracy = self.baseaccuracy;
	return;
	dist = distance( self.enemy.origin, self.origin );
	self setmisstime( anim.misstimeconstant + dist * anim.misstimedistancefactor );
// SP = 0x0 - check OK
}

// 0x32D0
resetmissdebouncetime()
{
	self.a.misstimedebounce = GetTime() + 3000;
// SP = 0x0 - check OK
}

// 0x32E8
setmisstime( howlong )
{
/#
	assert( self.team == "axis", "Non axis tried to set misstime" );
#/
	return;
	self.accuracy = 0;
	howlong *= 1000;
	self.a.misstime = GetTime() + howlong;
	self.a.accuracygrowthmultiplier = 1;
// SP = 0x0 - check OK
}

// 0x334C
playerhurtcheck()
{
	self.hurtagain = 0;
	self waittill( "damage", amount, attacker, dir, point, mod );
	self.hurtagain = 1;
	self.damagepoint = point;
	self.damageattacker = attacker;
	self setburn( 0.5 );
	self playsound( "chr_burn" );
// SP = 0x0 - check OK
}

// 0x33E8
playerhealthregen()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.flag = [];
	self.flags_lock = [];
	self player_flag_init( "player_has_red_flashing_overlay" );
	self player_flag_init( "player_is_invulnerable" );
	self player_flag_clear( "player_has_red_flashing_overlay" );
	self player_flag_clear( "player_is_invulnerable" );
	self thread increment_take_cover_warnings_on_death();
	self settakecoverwarnings();
	self thread healthoverlay();
	oldratio = 1;
	health_add = 0;
	veryhurt = 0;
	playerjustgotredflashing = 0;
	invultime = 0;
	hurttime = 0;
	newhealth = 0;
	lastinvulratio = 1;
	self thread playerhurtcheck();
	self.veryhurt = 0;
	self.bolthit = 0;
	wait 0.05;
	waittillframeend;
	player_flag_clear( "player_has_red_flashing_overlay" );
	lastinvulratio = 1;
	playerjustgotredflashing = 0;
	veryhurt = 0;
	return;
	wasveryhurt = veryhurt;
	health_ratio = self.health / self.maxhealth;
	veryhurt = 1;
	self thread cover_warning_check();
	hurttime = GetTime();
	self startfadingblur( 3.6, 2 );
	self player_flag_set( "player_has_red_flashing_overlay" );
	playerjustgotredflashing = 1;
	hurttime = GetTime();
	self.hurtagain = 0;
	self.veryhurt = 1;
	newhealth = health_ratio;
	newhealth += 0.1;
	reducetakecoverwarnings();
	newhealth = 1;
	self.veryhurt = 0;
	newhealth = 1;
	return;
	self setnormalhealth( newhealth );
	oldratio = self.health / self.maxhealth;
	invulworthyhealthdrop = lastinvulratio - health_ratio > level.worthydamageratio;
	self setnormalhealth( 2 / self.maxhealth );
	invulworthyhealthdrop = 1;
	level.player_deathinvulnerabletimeout = 0;
	level.player_deathinvulnerabletimeout = GetTime() + GetDvarInt( #"0x4E44E32D" );
	oldratio = self.health / self.maxhealth;
	level notify( "hit_again" );
	health_add = 0;
	hurttime = GetTime();
	self startfadingblur( 3, 0.8 );
	self player_flag_set( "player_is_invulnerable" );
	level notify( "player_becoming_invulnerable" );
	invultime = level.invultime_onshield;
	playerjustgotredflashing = 0;
	invultime = level.invultime_postshield;
	invultime = level.invultime_preshield;
	lastinvulratio = self.health / self.maxhealth;
	self thread playerinvul( invultime );
// SP = 0x0 - check OK
}

// 0x3750
reducetakecoverwarnings()
{
	players = get_players();
	takecoverwarnings = getlocalprofileint( "takeCoverWarnings" );
	takecoverwarnings--;
	setlocalprofilevar( "takeCoverWarnings", takecoverwarnings );
/#
	debugtakecoverwarnings();
#/
// SP = 0x0 - check OK
}

// 0x37B8
debugtakecoverwarnings()
{
/#
	setdvar( "scr_debugtakecover", "0" );
	iprintln( "Warnings remaining: ", getlocalprofileint( "takeCoverWarnings" ) - 3 );
#/
// SP = 0x0 - check OK
}

// 0x3810
playerinvul( timer )
{
	self endon( "death" );
	self endon( "disconnect" );
	timer *= getcurrentdifficultysetting( "flashbangedInvulFactor" );
	self.attackeraccuracy = 0;
	self.ignorerandombulletdamage = 1;
	level.playerinvultimeend = GetTime() + timer * 1000;
	wait timer;
	self.attackeraccuracy = anim.player_attacker_accuracy;
	self.ignorerandombulletdamage = 0;
	self player_flag_clear( "player_is_invulnerable" );
// SP = 0x0 - check OK
}

// 0x3890
grenadeawareness()
{
	self.grenadeawareness = 0.9;
	return;
	self.grenadeawareness = 0.2;
	self.grenadeawareness = 0.5;
	self.grenadeawareness = 0;
	self.grenadeawareness = 0.2;
// SP = 0x0 - check OK
}

// 0x3920
playerheartbeatloop( healthcap )
{
	self endon( "disconnect" );
	self endon( "killed_player" );
	wait 2;
	player = self;
	ent = undefined;
	wait 0.2;
	ent stoploopsound( 1.5 );
	level thread delayed_delete( ent, 1.5 );
	ent = spawn( "script_origin", self.origin );
	ent playloopsound( "", 0.5 );
// SP = 0x0 - check OK
}

// 0x39B4
delayed_delete( ent, time )
{
	wait time;
	ent delete();
	ent = undefined;
// SP = 0x0 - check OK
}

// 0x39D4
healthfadeoffwatcher( overlay, timetofadeout )
{
	self notify( "new_style_health_overlay_done" );
	self endon( "new_style_health_overlay_done" );
	wait 0.05;
	timetofadeout -= 0.05;
	overlay.alpha = 0;
	overlay fadeovertime( 0.05 );
// SP = 0x0 - check OK
}

// 0x3A48
new_style_health_overlay()
{
	overlay = newclienthudelem( self );
	overlay.x = 0;
	overlay.y = 0;
	overlay setshader( "overlay_low_health_splat", 640, 960 );
	overlay.y -= 120;
	overlay setshader( "overlay_low_health_splat", 640, 480 );
	overlay.splatter = 1;
	overlay.alignx = "left";
	overlay.aligny = "top";
	overlay.sort = 1;
	overlay.foreground = 0;
	overlay.horzalign = "fullscreen";
	overlay.vertalign = "fullscreen";
	overlay.alpha = 0;
	thread healthoverlay_remove( overlay );
	wait 0.05;
	targetdamagealpha = 0;
	overlay.alpha = 0;
	targetdamagealpha = 1 - self.health / self.maxhealth;
	overlay.alpha = targetdamagealpha;
	level thread healthfadeoffwatcher( overlay, 0.75 );
	overlay fadeovertime( 0.75 );
	overlay.alpha = 0;
// SP = 0x0 - check OK
}

// 0x3BBC
healthoverlay()
{
	self endon( "disconnect" );
	self endon( "noHealthOverlay" );
	new_style_health_overlay();
// SP = 0x0 - check OK
}

// 0x3BD8
add_hudelm_position_internal( aligny )
{
	self.fontscale = 2;
	self.fontscale = 1.6;
	self.x = 0;
	self.y = -36;
	self.alignx = "center";
	self.aligny = "bottom";
	self.horzalign = "center";
	self.vertalign = "middle";
	return;
	self.background.x = 0;
	self.background.y = -40;
	self.background.alignx = "center";
	self.background.aligny = "middle";
	self.background.horzalign = "center";
	self.background.vertalign = "middle";
	self.background setshader( "popmenu_bg", 650, 52 );
	self.background setshader( "popmenu_bg", 650, 42 );
	self.background.alpha = 0.5;
// SP = 0x0 - check OK
}

// 0x3CC4
create_warning_elem( player )
{
	level notify( "hud_elem_interupt" );
	hudelem = newhudelem();
	hudelem maps\_gameskill::add_hudelm_position_internal();
	hudelem thread maps\_gameskill::destroy_warning_elem_when_mission_failed( player );
	hudelem settext( &"GAME_GET_TO_COVER" );
	hudelem.fontscale = 1.85;
	hudelem.alpha = 1;
	hudelem.color = ( 1, 0.6, 0 );
	return hudelem;
// SP = 0x0 - check OK
}

// 0x3D34
play_hurt_vox()
{
	playsoundatposition( "chr_breathing_hurt_start", self.origin );
// SP = 0x0 - check OK
}

// 0x3D74
waittillplayerishitagain()
{
	level endon( "hit_again" );
	self waittill( "damage" );
// SP = 0x0 - check OK
}

// 0x3D88
destroy_warning_elem_when_mission_failed( player )
{
	self endon( "being_destroyed" );
	self endon( "death" );
	flag_wait( "missionfailed" );
	self thread destroy_warning_elem( 1 );
// SP = 0x0 - check OK
}

// 0x3DB8
destroy_warning_elem( fadeout )
{
	self notify( "being_destroyed" );
	self.beingdestroyed = 1;
	self fadeovertime( 0.5 );
	self.alpha = 0;
	wait 0.5;
	self death_notify_wrapper();
	self destroy();
// SP = 0x0 - check OK
}

// 0x3E08
maychangecoverwarningalpha( coverwarning )
{
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x3E28
fontscaler( scale, timer )
{
	self endon( "death" );
	scale *= 2;
	dif = scale - self.fontscale;
	self changefontscaleovertime( timer );
	self.fontscale += dif;
// SP = 0x0 - check OK
}

// 0x3E68
cover_warning_check()
{
	level endon( "missionfailed" );
	coverwarning = create_warning_elem( self );
	level.cover_warning_hud = coverwarning;
	coverwarning endon( "death" );
	stopflashingbadlytime = GetTime() + level.longregentime;
	yellow_fac = 0.7;
	i = 0;
	yellow_fac += 0.03;
	coverwarning.color = ( 1, yellow_fac, 0 );
	wait 0.05;
	i++;
	i = 0;
	yellow_fac -= 0.03;
	coverwarning.color = ( 1, yellow_fac, 0 );
	wait 0.05;
	i++;
	coverwarning fadeovertime( 0.5 );
	coverwarning.alpha = 0;
	wait 0.5;
	wait 5;
	coverwarning destroy();
// SP = 0x0 - check OK
}

// 0x3F78
shouldshowcoverwarning()
{
	return 0;
	return level.enable_cover_warning;
	return 0;
	return 0;
	return 0;
	return 0;
	takecoverwarnings = getlocalprofileint( "takeCoverWarnings" );
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x3FF4
redflashingoverlay( overlay )
{
	self endon( "hit_again" );
	self endon( "damage" );
	self endon( "death" );
	self endon( "disconnect" );
	coverwarning = undefined;
	coverwarning = create_warning_elem( self );
	stopflashingbadlytime = GetTime() + level.longregentime;
	fadefunc( overlay, coverwarning, 1, 1, 0 );
	fadefunc( overlay, coverwarning, 0.9, 1, 0 );
	fadefunc( overlay, coverwarning, 0.65, 0.8, 0 );
	coverwarning fadeovertime( 1 );
	coverwarning.alpha = 0;
	fadefunc( overlay, coverwarning, 0, 0.6, 1 );
	overlay fadeovertime( 0.5 );
	overlay.alpha = 0;
	self player_flag_clear( "player_has_red_flashing_overlay" );
	wait 0.5;
	self notify( "hit_again" );
// SP = 0x0 - check OK
}

// 0x4120
fadefunc( overlay, coverwarning, severity, mult, hud_scaleonly )
{
	fadeintime = 0.8 * 0.1;
	stayfulltime = 0.8 * ( 0.1 + ( severity * 0.2 ) );
	fadeouthalftime = 0.8 * ( 0.1 + ( severity * 0.1 ) );
	fadeoutfulltime = 0.8 * 0.3;
	remainingtime = 0.8 - fadeintime - stayfulltime - fadeouthalftime - fadeoutfulltime;
/#
	assert( remainingtime >= -0.001 );
#/
	remainingtime = 0;
	halfalpha = 0.8 + severity * 0.1;
	leastalpha = 0.5 + severity * 0.3;
	overlay fadeovertime( fadeintime );
	overlay.alpha = mult * 1;
	coverwarning fadeovertime( fadeintime );
	coverwarning.alpha = mult * 1;
	coverwarning thread fontscaler( 1, fadeintime );
	wait fadeintime + stayfulltime;
	overlay fadeovertime( fadeouthalftime );
	overlay.alpha = mult * halfalpha;
	coverwarning fadeovertime( fadeouthalftime );
	coverwarning.alpha = mult * halfalpha;
	wait fadeouthalftime;
	overlay fadeovertime( fadeoutfulltime );
	overlay.alpha = mult * leastalpha;
	coverwarning fadeovertime( fadeoutfulltime );
	coverwarning.alpha = mult * leastalpha;
	coverwarning thread fontscaler( 0.9, fadeoutfulltime );
	wait fadeoutfulltime;
	wait remainingtime;
// SP = 0x0 - check OK
}

// 0x4324
healthoverlay_remove( overlay )
{
	self endon( "disconnect" );
	self waittill_any( "noHealthOverlay", "death" );
	overlay fadeovertime( 3.5 );
	overlay.alpha = 0;
// SP = 0x0 - check OK
}

// 0x4360
settakecoverwarnings()
{
	ispregameplaylevel = level.script == "coup";
	setlocalprofilevar( "takeCoverWarnings", 9 );
/#
	debugtakecoverwarnings();
#/
// SP = 0x0 - check OK
}

// 0x43C0
increment_take_cover_warnings_on_death()
{
	return;
	level notify( "new_cover_on_death_thread" );
	level endon( "new_cover_on_death_thread" );
	self waittill( "death" );
	return;
	return;
	warnings = getlocalprofileint( "takeCoverWarnings" );
	setlocalprofilevar( "takeCoverWarnings", warnings + 1 );
/#
	debugtakecoverwarnings();
#/
// SP = 0x0 - check OK
}

// 0x4440
empty_kill_func( type, loc, point, attacker, amount )
{
// SP = 0x0 - check OK
}

// 0x4454
update_skill_on_change()
{
	level endon( "stop_update_skill_on_change" );
	waittillframeend;
	level waittill( "difficulty_change" );
	level notify( "new_difficulty_request" );
	level thread difficulty_pump_thread();
// SP = 0x0 - check OK
}

// 0x447C
difficulty_pump_thread()
{
	level endon( "new_difficulty_request" );
	i = 0;
	lowest_current_skill = GetDvarInt( #"0x10BB950" );
	gameskill = getlocalprofileint( "g_gameskill" );
	lowest_current_skill = gameskill;
	setskill( 1, lowest_current_skill );
	wait_network_frame();
	i++;
// SP = 0x0 - check OK
}

// 0x44E0
coop_enemy_accuracy_scalar_watcher()
{
	level waittill( "load main complete" );
	flag_wait( "all_players_connected" );
	players = get_players( "allies" );
	level.coop_enemy_accuracy_scalar = getcoopvalue( "coopEnemyAccuracyScalar", players.size );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x453C
coop_friendly_accuracy_scalar_watcher()
{
	level waittill( "load main complete" );
	flag_wait( "all_players_connected" );
	players = get_players( "allies" );
	level.coop_friendly_accuracy_scalar = getcoopvalue( "coopFriendlyAccuracyScalar", players.size );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x4598
coop_axis_accuracy_scaler()
{
	self endon( "death" );
	initialvalue = self.baseaccuracy;
	wait 0.5;
	self.baseaccuracy = initialvalue * level.coop_enemy_accuracy_scalar;
	wait randomfloatrange( 3, 5 );
// SP = 0x0 - check OK
}

// 0x45F0
coop_allies_accuracy_scaler()
{
	self endon( "death" );
	initialvalue = self.baseaccuracy;
	wait 0.5;
	self.baseaccuracy = initialvalue * level.coop_friendly_accuracy_scalar;
	wait randomfloatrange( 3, 5 );
// SP = 0x0 - check OK
}

// 0x4648
coop_player_threat_bias_adjuster()
{
	wait 5;
	players = get_players( "allies" );
	i = 0;
	enable_auto_adjust_threatbias( players[i] );
	i++;
// SP = 0x0 - check OK
}

// 0x469C
toggle_health_overlay( b_indicator_active )
{
	b_indicator_active = 1;
	setdvar( "scr_damagefeedback", "1" );
	level.disable_damage_overlay = undefined;
	setdvar( "scr_damagefeedback", "0" );
	self maps\_damagefeedback::updatedamagefeedback();
	level.disable_damage_overlay = 1;
// SP = 0x0 - check OK
}
// maps/_lights.gsc

#include maps\_utility;
#include common_scripts\utility;


// 0x3BC
generic_pulsing()
{
	self setlightintensity( 0 );
	return;
	on = self getlightintensity();
	curr = on;
	increment_on = ( on - 0.05 ) / ( 0.3 / 0.05 );
	increment_off = ( on - 0.05 ) / ( 0.6 / 0.05 );
	time = 0;
	curr -= increment_off;
	self setlightintensity( curr );
	time += 0.05;
	wait 0.05;
	wait 1;
	time = 0;
	curr += increment_on;
	self setlightintensity( curr );
	time += 0.05;
	wait 0.05;
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x4C4
generic_double_strobe()
{
	self setlightintensity( 0 );
	return;
	on = self getlightintensity();
	linked_models = 0;
	lit_model = undefined;
	unlit_model = undefined;
	linked_lights = 0;
	linked_light_ents = [];
	linked_things = getentarray( self.script_noteworthy, "targetname" );
	i = 0;
	linked_lights = 1;
	linked_light_ents[linked_light_ents.size] = linked_things[i];
	lit_model = linked_things[i];
	unlit_model = getent( lit_model.target, "targetname" );
	linked_models = 1;
	i++;
	self setlightintensity( 0.05 );
	lit_model hide();
	unlit_model show();
	wait 0.8;
	self setlightintensity( on );
	lit_model show();
	unlit_model hide();
	wait 0.1;
	self setlightintensity( 0.05 );
	lit_model hide();
	unlit_model show();
	wait 0.12;
	self setlightintensity( on );
	lit_model show();
	unlit_model hide();
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x66C
getclosests_flickering_model( origin )
{
	array = getentarray( "light_flicker_model", "targetname" );
	return_array = [];
	model = getclosest( origin, array );
	return_array[0] = model;
	return return_array;
// SP = 0x0 - check OK
}

// 0x6B0
generic_flickering()
{
	self setlightintensity( 0 );
	return;
	min_flickerless_time = 0.2;
	max_flickerless_time = 1.5;
	min_flickerless_time = self.script_wait_min;
	max_flickerless_time = self.script_wait_max;
	min_flicker_delay = 0.05;
	max_flicker_delay = 0.1;
	min_flicker_delay = self.script_delay_min;
	max_flicker_delay = self.script_delay_max;
	min_intensity = 0;
	max_intensity = 0.3;
	min_intensity = self.script_intensity_min;
	max_intensity = self.script_intensity_max;
	min_burst = 1;
	max_burst = 10;
	min_burst = self.script_burst_min;
	max_burst = self.script_burst_max;
	on = self getlightintensity();
	curr = on;
	num = 0;
	linked_models = 0;
	lit_model = undefined;
	unlit_model = undefined;
	linked_lights = 0;
	linked_light_ents = [];
	linked_things = [];
	linked_things = getentarray( self.script_noteworthy, "targetname" );
	linked_things = getclosests_flickering_model( self.origin );
	i = 0;
	linked_lights = 1;
	linked_light_ents[linked_light_ents.size] = linked_things[i];
	lit_model = linked_things[i];
	unlit_model = getent( lit_model.target, "targetname" );
	linked_models = 1;
	i++;
	num = randomintrange( min_burst, max_burst );
	wait randomfloatrange( min_flicker_delay, max_flicker_delay );
	curr = randomfloatrange( min_intensity, max_intensity );
	lit_model hide();
	unlit_model show();
	curr = on;
	lit_model show();
	unlit_model hide();
	self setlightintensity( curr );
	i = 0;
	linked_light_ents[i] setlightintensity( curr );
	i++;
	num--;
	self setlightintensity( on );
	i = 0;
	linked_light_ents[i] setlightintensity( on );
	i++;
	lit_model show();
	unlit_model hide();
	wait randomfloatrange( min_flickerless_time, max_flickerless_time );
// SP = 0x0 - check OK
}

// 0x9A0
fire_flicker()
{
/#
#/
	min_delay = 0.1;
	max_delay = 0.5;
	min_delay = self.script_delay_min;
	max_delay = self.script_delay_max;
	min_intensity = 0.25;
	max_intensity = 1;
	min_intensity = self.script_intensity_min;
	max_intensity = self.script_intensity_max;
	intensity = self getlightintensity();
	curr_intensity = intensity;
	temp_intensity = intensity * randomfloatrange( min_intensity, max_intensity );
	time = randomfloatrange( min_delay, max_delay );
	steps = time * 20;
	div = ( curr_intensity - temp_intensity ) / steps;
	i = 0;
	curr_intensity -= div;
	curr_intensity = 0;
	self setlightintensity( curr_intensity );
	wait 0.05;
	i++;
	curr_intensity = temp_intensity;
// SP = 0x0 - check OK
}
// maps/_createfxmenu.gsc

#include maps\_createfxundo;
#include maps\_createfx;
#include maps\_utility;
#include common_scripts\utility;


// 0xB50
menu( name )
{
/#
	return level.create_fx_menu == name;
#/
// SP = 0x0 - check OK
}

// 0xB68
setmenu( name )
{
/#
	level.create_fx_menu = name;
#/
// SP = 0x0 - check OK
}

// 0xB7C
create_fx_menu()
{
/#
	exit_menu();
	setmenu( "create_oneshot" );
	draw_effects_list();
	setmenu( "create_loopfx" );
	draw_effects_list();
	setmenu( "create_exploder" );
	draw_effects_list();
	setmenu( "create_loopsound" );
	ent = createloopsound();
	finish_creating_entity( ent );
	setmenu( "none" );
	increment_list_offset();
	draw_effects_list();
	decrement_list_offset();
	draw_effects_list();
	menu_fx_creation();
	menu_change_selected_fx();
	display_fx_info( get_last_selected_entity() );
	clear_settable_fx();
	setmenu( "add_options" );
	clear_fx_hudelements();
	setmenu( "none" );
	display_fx_add_options( get_last_selected_entity() );
	increment_list_offset();
	decrement_list_offset();
	increment_list_offset();
	draw_effects_list( "Select effect to jump to:" );
	decrement_list_offset();
	draw_effects_list( "Select effect to jump to:" );
	jump_to_effect();
	menu_selection();
	increment_list_offset();
	decrement_list_offset();
	clear_fx_hudelements();
	setmenu( "none" );
	menu_fx_type();
#/
// SP = 0x0 - check OK
}

// 0xEB0
exit_menu()
{
/#
	clear_fx_hudelements();
	clear_entity_selection();
	update_selected_entities();
	setmenu( "none" );
#/
// SP = 0x0 - check OK
}

// 0xEE0
get_last_selected_entity()
{
/#
	return level.selected_fx_ents[level.selected_fx_ents.size - 1];
#/
// SP = 0x0 - check OK
}

// 0xEF8
menu_fx_creation()
{
/#
	count = 0;
	picked_fx = undefined;
	keys = get_level_ambient_fx();
	i = level.effect_list_offset;
	count += 1;
	button_to_check = count;
	button_to_check = 0;
	picked_fx = keys[i];
	i++;
	apply_option_to_selected_fx( get_option( "fxid" ), picked_fx );
	level.effect_list_offset = 0;
	clear_fx_hudelements();
	setmenu( "none" );
	ent = undefined;
	ent = createloopeffect( picked_fx );
	ent = createoneshoteffect( picked_fx );
	delay_min = GetDvarInt( #"0x72501C7" );
	delay_max = GetDvarInt( #"0xA6DCBA49" );
	temp = delay_min;
	delay_min = delay_max;
	delay_max = temp;
	ent.v["delay"] = randomintrange( delay_min, delay_max );
	ent = createexploder( picked_fx );
	finish_creating_entity( ent );
	store_undo_state( "edit", level.selected_fx_ents );
	store_undo_state( "add", level.createfxent[level.createfxent.size - 1] );
	level.cfx_last_action = "none";
	setmenu( "none" );
#/
// SP = 0x0 - check OK
}

// 0x10E0
finish_creating_entity( ent )
{
/#
	ent.v["angles"] = vectortoangles( ent.v["origin"] + vector_scale( ( 0, 0, 1 ), 100 ) - ent.v["origin"] );
/#
	assert( IsDefined( ent ) );
#/
	ent post_entity_creation_function();
	clear_entity_selection();
	select_last_entity( "skip_undo" );
	move_selection_to_cursor( "skip_undo" );
	update_selected_entities();
#/
// SP = 0x0 - check OK
}

// 0x1160
change_effect_to_oneshot( ent )
{
/#
	ent.v["exploder"] = undefined;
	ent.v["exploder_type"] = undefined;
	ent.v["soundalias"] = undefined;
	delay_min = GetDvarInt( #"0x72501C7" );
	delay_max = GetDvarInt( #"0xA6DCBA49" );
	temp = delay_min;
	delay_min = delay_max;
	delay_max = temp;
	ent.v["delay"] = randomintrange( delay_min, delay_max );
	ent.v["type"] = "oneshotfx";
#/
// SP = 0x0 - check OK
}

// 0x1230
change_effect_to_loop( ent )
{
/#
	ent.v["exploder"] = undefined;
	ent.v["exploder_type"] = undefined;
	ent.v["soundalias"] = undefined;
	ent.v["delay"] = 1;
	ent.v["type"] = "loopfx";
#/
// SP = 0x0 - check OK
}

// 0x12C0
change_effect_to_exploder( ent )
{
/#
	ent.v["type"] = "exploder";
	ent.v["delay"] = 0;
	ent.v["exploder"] = 1;
	ent.v["exploder_type"] = "normal";
#/
// SP = 0x0 - check OK
}

// 0x133C
change_ent_type( newtype )
{
/#
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = "ent_type";
	i = 0;
	change_effect_to_oneshot( level.selected_fx_ents[i] );
	i++;
	i = 0;
	change_effect_to_loop( level.selected_fx_ents[i] );
	i++;
	i = 0;
	change_effect_to_exploder( level.selected_fx_ents[i] );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x140C
menu_init()
{
/#
	level.createfx_options = [];
	addoption( "string", "type", "Type", "oneshotfx", "fx" );
	addoption( "string", "fxid", "Name", "nil", "fx" );
	addoption( "float", "delay", "Repeat rate/start delay", 0.5, "fx" );
	addoption( "int", "repeat", "Number of times to repeat", 5, "exploder" );
	addoption( "float", "primlightfrac", "Primary light fraction", 1, "fx" );
	addoption( "int", "lightoriginoffs", "Light origin offset", 64, "fx" );
	addoption( "float", "delay_min", "Minimum time between repeats", 1, "exploder" );
	addoption( "float", "delay_max", "Maximum time between repeats", 2, "exploder" );
	addoption( "float", "fire_range", "Fire damage range", 0, "fx" );
	addoption( "string", "firefx", "2nd FX id", "nil", "exploder" );
	addoption( "float", "firefxdelay", "2nd FX id repeat rate", 0.5, "exploder" );
	addoption( "float", "firefxtimeout", "2nd FX timeout", 5, "exploder" );
	addoption( "string", "firefxsound", "2nd FX soundalias", "nil", "exploder" );
	addoption( "string", "ender", "Level notify for ending 2nd FX", "nil", "exploder" );
	addoption( "string", "rumble", "Rumble", "nil", "exploder" );
	addoption( "float", "damage", "Radius damage", 150, "exploder" );
	addoption( "float", "damage_radius", "Radius of radius damage", 250, "exploder" );
	addoption( "int", "exploder", "Exploder", 1, "exploder" );
	addoption( "string", "earthquake", "Earthquake", "nil", "exploder" );
	addoption( "string", "soundalias", "Soundalias", "nil", "all" );
	addoption( "int", "stoppable", "Can be stopped from script", "1", "all" );
	level.effect_list_offset = 0;
	level.effect_list_offset_max = 9;
	level.createfxmasks = [];
	level.createfxmasks["all"] = [];
	level.createfxmasks["all"]["exploder"] = 1;
	level.createfxmasks["all"]["oneshotfx"] = 1;
	level.createfxmasks["all"]["loopfx"] = 1;
	level.createfxmasks["all"]["soundfx"] = 1;
	level.createfxmasks["fx"] = [];
	level.createfxmasks["fx"]["exploder"] = 1;
	level.createfxmasks["fx"]["oneshotfx"] = 1;
	level.createfxmasks["fx"]["loopfx"] = 1;
	level.createfxmasks["exploder"] = [];
	level.createfxmasks["exploder"]["exploder"] = 1;
	level.createfxmasks["loopfx"] = [];
	level.createfxmasks["loopfx"]["loopfx"] = 1;
	level.createfxmasks["oneshotfx"] = [];
	level.createfxmasks["oneshotfx"]["oneshotfx"] = 1;
	level.createfxmasks["soundfx"] = [];
	level.createfxmasks["soundfx"]["soundalias"] = 1;
#/
// SP = 0x0 - check OK
}

// 0x1780
get_last_selected_ent()
{
/#
	return level.selected_fx_ents[level.selected_fx_ents.size - 1];
#/
// SP = 0x0 - check OK
}

// 0x1798
entities_are_selected()
{
/#
	return level.selected_fx_ents.size > 0;
#/
// SP = 0x0 - check OK
}

// 0x17AC
menu_change_selected_fx()
{
/#
	count = 0;
	drawncount = 0;
	ent = get_last_selected_ent();
	i = 0;
	option = level.createfx_options[i];
	count++;
	drawncount++;
	button_to_check = drawncount;
	button_to_check = 0;
	prepare_option_for_change( option, drawncount );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1884
prepare_option_for_change( option, drawncount )
{
/#
	setmenu( "change_fxid" );
	draw_effects_list();
	setmenu( "change_type" );
	level.createfx_inputlocked = 1;
	set_option_index( option["name"] );
	setdvar( "fx", "nil" );
	level.createfxhudelements[drawncount + 3][0].color = ( 1, 1, 0 );
#/
// SP = 0x0 - check OK
}

// 0x1910
menu_fx_option_set()
{
/#
	option = get_selected_option();
	setting = undefined;
	setting = GetDvar( #"0x5977E3" );
	setting = GetDvarInt( #"0x5977E3" );
	setting = GetDvarFloat( #"0x5977E3" );
	apply_option_to_selected_fx( option, setting );
#/
// SP = 0x0 - check OK
}

// 0x1994
menu_fx_type()
{
/#
	clear_fx_hudelements();
	set_fx_hudelement( "Change effect type to:" );
	set_fx_hudelement( " (1) Oneshot" );
	set_fx_hudelement( " (2) Looped" );
	set_fx_hudelement( " (3) Exploder" );
	set_fx_hudelement( "(x) Exit >" );
	change_ent_type( "oneshotfx" );
	setmenu( "none" );
	change_ent_type( "loopfx" );
	setmenu( "none" );
	change_ent_type( "exploder" );
	setmenu( "none" );
	update_selected_entities();
#/
// SP = 0x0 - check OK
}

// 0x1AAC
menu_selection()
{
/#
	clear_fx_hudelements();
	set_fx_hudelement( "Select all by property:" );
	drawncount = 0;
	option_number = 0;
	ent = level.selected_fx_ents[level.selected_fx_ents.size - 1];
	set_fx_hudelement( "No ent is selected." );
	i = level.effect_list_offset;
	prop_name = level.createfx_options[i]["name"];
	option_number = drawncount + 1;
	level.cfx_selected_prop = prop_name;
	menunone();
	level.effect_list_offset = 0;
	prop_desc = level.createfx_options[i]["description"];
	set_fx_hudelement( option_number + ". " + prop_desc + ": " + ent.v[prop_name] );
	drawncount++;
	i++;
	pages = ceil( ent.v.size / level.effect_list_offset_max );
	current_page = level.effect_list_offset / level.effect_list_offset_max + 1;
	set_fx_hudelement( "(<-) Page " + current_page + " of " + pages + " (->)" );
	set_fx_hudelement( "(x) Exit >" );
#/
// SP = 0x0 - check OK
}

// 0x1C44
apply_option_to_selected_fx( option, setting )
{
/#
	store_undo_state( "edit", level.selected_fx_ents );
	level.cfx_last_action = option["name"];
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v[option["name"]] = setting;
	i++;
	update_selected_entities();
	clear_settable_fx();
#/
// SP = 0x0 - check OK
}

// 0x1CE8
set_option_index( name )
{
/#
	i = 0;
	level.selected_fx_option_index = i;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1D2C
get_selected_option()
{
/#
	return level.createfx_options[level.selected_fx_option_index];
#/
// SP = 0x0 - check OK
}

// 0x1D40
mask( type, name )
{
/#
	return IsDefined( level.createfxmasks[type][name] );
#/
// SP = 0x0 - check OK
}

// 0x1D5C
addoption( type, name, description, defaultsetting, mask )
{
/#
	option = [];
	option["type"] = type;
	option["name"] = name;
	option["description"] = description;
	option["default"] = defaultsetting;
	option["mask"] = mask;
	level.createfx_options[level.createfx_options.size] = option;
#/
// SP = 0x0 - check OK
}

// 0x1DB8
get_option( name )
{
/#
	i = 0;
	return level.createfx_options[i];
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1DF8
display_fx_info( ent )
{
/#
	clear_fx_hudelements();
	set_fx_hudelement( "Selected: " + level.selected_fx_ents.size + "   Distance: " + get_distance_from_ent( ent ) );
	level.createfxhudelements[0][0].color = ( 1, 1, 0 );
	set_fx_hudelement( "Name: " + ent.v["fxid"] );
	set_fx_hudelement( "Origin: " + ent.v["origin"] );
	set_fx_hudelement( "Angles: " + ent.v["angles"] );
	count = 0;
	drawncount = 0;
	i = 0;
	option = level.createfx_options[i];
	count++;
	drawncount++;
	set_fx_hudelement( drawncount + ". " + option["description"] + ": " + ent.v[option["name"]] );
	more = 1;
	i++;
	pages = ceil( level.createfx_options.size / level.effect_list_offset_max );
	current_page = level.effect_list_offset / level.effect_list_offset_max + 1;
	set_fx_hudelement( "(<-) Page " + current_page + " of " + pages + " (->)" );
	set_fx_hudelement( "(a) Add >" );
	set_fx_hudelement( "(x) Exit >" );
#/
// SP = 0x0 - check OK
}

// 0x1FB4
display_fx_add_options( ent )
{
/#
/#
	assert( menu( "add_options" ) );
#/
/#
	assert( entities_are_selected() );
#/
	clear_fx_hudelements();
	set_fx_hudelement( "Selected: " + level.selected_fx_ents.size + "   Distance: " + get_distance_from_ent( ent ) );
	level.createfxhudelements[0][0].color = ( 1, 1, 0 );
	set_fx_hudelement( "Name: " + ent.v["fxid"] );
	set_fx_hudelement( "Origin: " + ent.v["origin"] );
	set_fx_hudelement( "Angles: " + ent.v["angles"] );
	count = 0;
	drawncount = 0;
	level.effect_list_offset = 0;
	i = 0;
	option = level.createfx_options[i];
	count++;
	drawncount++;
	button_to_check = drawncount;
	button_to_check = 0;
	add_option_to_selected_entities( option );
	menunone();
	set_fx_hudelement( button_to_check + ". " + option["description"] );
	i++;
	pages = ceil( level.createfx_options.size / level.effect_list_offset_max );
	current_page = level.effect_list_offset / level.effect_list_offset_max + 1;
	set_fx_hudelement( "(<-) Page " + current_page + " of " + pages + " (->)" );
	set_fx_hudelement( "(x) Exit >" );
#/
// SP = 0x0 - check OK
}

// 0x21E0
add_option_to_selected_entities( option )
{
/#
	i = 0;
	ent = level.selected_fx_ents[i];
	ent.v[option["name"]] = option["default"];
	i++;
#/
// SP = 0x0 - check OK
}

// 0x2248
menunone()
{
/#
	level.effect_list_offset = 0;
	clear_fx_hudelements();
	setmenu( "none" );
#/
// SP = 0x0 - check OK
}

// 0x2270
draw_effects_list( title )
{
/#
	clear_fx_hudelements();
	title = "Pick an effect:";
	set_fx_hudelement( title );
	count = 0;
	more = 0;
	keys = get_level_ambient_fx();
	level.effect_list_offset = 0;
	level.effect_list_offset = int( floor( keys.size / level.effect_list_offset_max ) * level.effect_list_offset_max );
	i = level.effect_list_offset;
	count += 1;
	set_fx_hudelement( count + ". " + keys[i] );
	more = 1;
	i++;
	pages = ceil( keys.size / level.effect_list_offset_max );
	current_page = level.effect_list_offset / level.effect_list_offset_max + 1;
	set_fx_hudelement( "(<-) Page " + current_page + " of " + pages + " (->)" );
#/
// SP = 0x0 - check OK
}

// 0x239C
increment_list_offset()
{
/#
	level.effect_list_offset += level.effect_list_offset_max;
#/
// SP = 0x0 - check OK
}

// 0x23B4
decrement_list_offset()
{
/#
	level.effect_list_offset -= level.effect_list_offset_max;
#/
// SP = 0x0 - check OK
}

// 0x23CC
jump_to_effect()
{
/#
	count = 0;
	picked_fxid = undefined;
	keys = get_level_ambient_fx();
	i = level.effect_list_offset;
	count += 1;
	button_to_check = count;
	button_to_check = 0;
	picked_fxid = keys[i];
	i++;
	clear_entity_selection();
	ent = get_next_ent_with_same_id( -1, picked_fxid );
	level.cfx_next_ent = ent;
	move_player_to_next_same_effect( 1 );
	iprintln( "Effect " + picked_fxid + " has not been placed." );
	level.effect_list_offset = 0;
	clear_fx_hudelements();
	setmenu( "none" );
#/
// SP = 0x0 - check OK
}

// 0x24D4
get_level_ambient_fx()
{
/#
	keys = getarraykeys( level._effect );
	level._effect_keys = [];
	k = 0;
	i = 0;
	level._effect_keys[k] = keys[i];
	k++;
	i++;
	level._effect_keys = keys;
	return level._effect_keys;
#/
// SP = 0x0 - check OK
}

// 0x2558
get_distance_from_ent( ent )
{
/#
	player = get_players()[0];
	return distance( player geteye(), ent.v["origin"] );
#/
// SP = 0x0 - check OK
}
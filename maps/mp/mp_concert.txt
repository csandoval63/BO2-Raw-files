// maps/mp/mp_concert.gsc

#include maps\mp\gametypes\_spawning;
#include maps\mp\_compass;
#include maps\mp\mp_concert_amb;
#include maps\mp\_load;
#include maps\mp\mp_concert_fx;
#include maps\mp\_utility;


// 0x528
main()
{
	level.levelspawndvars = ::levelspawndvars;
	level.overrideplayerdeathwatchtimer = ::leveloverridetime;
	level.useintermissionpointsonwavespawn = ::useintermissionpointsonwavespawn;
	maps\mp\mp_concert_fx::main();
	maps\mp\_load::main();
	maps\mp\mp_concert_amb::main();
	maps\mp\_compass::setupminimap( "compass_map_mp_concert" );
	setdvar( "compassmaxrange", "2100" );
	game["strings"]["war_callsign_a"] = &"MPUI_CALLSIGN_MAPNAME_A";
	game["strings"]["war_callsign_b"] = &"MPUI_CALLSIGN_MAPNAME_B";
	game["strings"]["war_callsign_c"] = &"MPUI_CALLSIGN_MAPNAME_C";
	game["strings"]["war_callsign_d"] = &"MPUI_CALLSIGN_MAPNAME_D";
	game["strings"]["war_callsign_e"] = &"MPUI_CALLSIGN_MAPNAME_E";
	game["strings_menu"]["war_callsign_a"] = "@MPUI_CALLSIGN_MAPNAME_A";
	game["strings_menu"]["war_callsign_b"] = "@MPUI_CALLSIGN_MAPNAME_B";
	game["strings_menu"]["war_callsign_c"] = "@MPUI_CALLSIGN_MAPNAME_C";
	game["strings_menu"]["war_callsign_d"] = "@MPUI_CALLSIGN_MAPNAME_D";
	game["strings_menu"]["war_callsign_e"] = "@MPUI_CALLSIGN_MAPNAME_E";
	maps\mp\gametypes\_spawning::level_use_unified_spawning( 1 );
	level.remotemotarviewup = 18;
	level thread water_trigger_init();
// SP = 0x0 - check OK
}

// 0x648
levelspawndvars( reset_dvars )
{
	ss = level.spawnsystem;
	ss.enemy_influencer_radius = set_dvar_float_if_unset( "scr_spawn_enemy_influencer_radius", "2300", reset_dvars );
// SP = 0x0 - check OK
}

// 0x674
water_trigger_init()
{
	wait 3;
	triggers = getentarray( "trigger_hurt", "classname" );
	foreach ( trigger in triggers )
	{
		trigger thread water_trigger_think();
	}
	triggers = getentarray( "water_killbrush", "targetname" );
	foreach ( trigger in triggers )
	{
		trigger thread player_splash_think();
	}
// SP = 0x0 - check OK
}

// 0x72C
player_splash_think()
{
	self waittill( "trigger", entity );
	self thread trigger_thread( entity, ::player_water_fx );
// SP = 0x0 - check OK
}

// 0x778
player_water_fx( player, endon_condition )
{
	maxs = self.origin + self getmaxs();
	maxs += vector_scale( ( 0, 0, 1 ), 10 );
	origin = ( player.origin[0], player.origin[1], maxs[2] );
	playfx( level._effect["water_splash_sm"], origin );
// SP = 0x0 - check OK
}

// 0x7E4
water_trigger_think()
{
	self waittill( "trigger", entity );
	entity playsound( "mpl_splash_death" );
	playfx( level._effect["water_splash"], entity.origin + vector_scale( ( 0, 0, 1 ), 40 ) );
// SP = 0x0 - check OK
}

// 0x83C
leveloverridetime( defaulttime )
{
	return 0.4;
	return defaulttime;
// SP = 0x0 - check OK
}

// 0x85C
useintermissionpointsonwavespawn()
{
	return self isinwater();
// SP = 0x0 - check OK
}

// 0x870
isinwater()
{
	triggers = getentarray( "trigger_hurt", "classname" );
	foreach ( trigger in triggers )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}
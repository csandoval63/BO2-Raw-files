// maps/mp/_challenges.gsc

#include common_scripts\utility;
#include maps\mp\_utility;


// 0x26F4
init()
{
	level.challengescallbacks = [];
	waittillframeend;
	registerchallengescallback( "playerKilled", ::challengekills );
	registerchallengescallback( "gameEnd", ::challengegameend );
	registerchallengescallback( "roundEnd", ::challengeroundend );
	level thread onplayerconnect();
	foreach ( team in level.teams )
	{
		initteamchallenges( team );
	}
// SP = 0x0 - check OK
}

// 0x279C
addflyswatterstat( weapon, aircraft )
{
	self.pers["flyswattercount"] = 0;
	self addweaponstat( weapon, "destroyed_aircraft", 1 );
	self.pers["flyswattercount"]++;
	self addweaponstat( weapon, "destroyed_5_aircraft", 1 );
	self addweaponstat( weapon, "destroyed_aircraft_under20s", 1 );
	self.destroyedaircrafttime = [];
	self addweaponstat( weapon, "destroyed_2aircraft_quickly", 1 );
	self.destroyedaircrafttime[weapon] = undefined;
	self.destroyedaircrafttime[weapon] = GetTime();
// SP = 0x0 - check OK
}

// 0x2888
canprocesschallenges()
{
/#
	return 1;
#/
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x28BC
initteamchallenges( team )
{
	game["challenge"] = [];
	game["challenge"][team] = [];
	game["challenge"][team]["plantedBomb"] = 0;
	game["challenge"][team]["destroyedBombSite"] = 0;
	game["challenge"][team]["capturedFlag"] = 0;
	game["challenge"][team]["allAlive"] = 1;
// SP = 0x0 - check OK
}

// 0x292C
registerchallengescallback( callback, func )
{
	level.challengescallbacks[callback] = [];
	level.challengescallbacks[callback][level.challengescallbacks[callback].size] = func;
// SP = 0x0 - check OK
}

// 0x2960
dochallengecallback( callback, data )
{
	return;
	return;
	i = 0;
	thread [[level.challengescallbacks[callback][i]]]( data );
	i++;
	i = 0;
	thread [[level.challengescallbacks[callback][i]]]();
	i++;
// SP = 0x0 - check OK
}

// 0x29E4
onplayerconnect()
{
	level waittill( "connected", player );
	player thread initchallengedata();
	player thread spawnwatcher();
	player thread monitorreloads();
// SP = 0x0 - check OK
}

// 0x2A20
monitorreloads()
{
	self endon( "disconnect" );
	self waittill( "reload" );
	currentweapon = self getcurrentweapon();
	time = GetTime();
	self.lastreloadtime = time;
	self.crossbowclipkillcount = 0;
	self thread reloadthenkill( currentweapon );
// SP = 0x0 - check OK
}

// 0x2A98
reloadthenkill( reloadweapon )
{
	self endon( "disconnect" );
	self endon( "death" );
	self endon( "reloadThenKillTimedOut" );
	self notify( "reloadThenKillStart" );
	self endon( "reloadThenKillStart" );
	self thread reloadthenkilltimeout( 5 );
	self waittill( "killed_enemy_player", time, weapon );
	self addplayerstat( "reload_then_kill_dualclip", 1 );
// SP = 0x0 - check OK
}

// 0x2AF8
reloadthenkilltimeout( time )
{
	self endon( "disconnect" );
	self endon( "death" );
	self endon( "reloadThenKillStart" );
	wait time;
	self notify( "reloadThenKillTimedOut" );
// SP = 0x0 - check OK
}

// 0x2B20
initchallengedata()
{
	self.pers["bulletStreak"] = 0;
	self.pers["lastBulletKillTime"] = 0;
	self.pers["stickExplosiveKill"] = 0;
	self.pers["carepackagesCalled"] = 0;
	self.explosiveinfo = [];
// SP = 0x0 - check OK
}

// 0x2B58
isdamagefromplayercontrolledaitank( eattacker, einflictor, sweapon )
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2BD0
isdamagefromplayercontrolledsentry( eattacker, einflictor, sweapon )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2C24
challengekills( data, time )
{
	victim = data.victim;
	player = data.attacker;
	attacker = data.attacker;
	time = data.time;
	victim = data.victim;
	weapon = data.sweapon;
	time = data.time;
	inflictor = data.einflictor;
	meansofdeath = data.smeansofdeath;
	wasplanting = data.wasplanting;
	wasdefusing = data.wasdefusing;
	lastweaponbeforetoss = data.lastweaponbeforetoss;
	ownerweaponatlaunch = data.ownerweaponatlaunch;
	return;
	return;
	weaponclass = getweaponclass( weapon );
	game["challenge"][victim.team]["allAlive"] = 0;
	return;
	return;
	player addplayerstat( "kill_with_remote_control_ai_tank", 1 );
	inflictor.killcount = 0;
	inflictor.killcount++;
	inflictor.killcount = 0;
	player addplayerstat( "killstreak_5_with_sentry_gun", 1 );
	player addplayerstat( "kill_with_remote_control_sentry_gun", 1 );
	player.deathmachinekills++;
	player.deathmachinekills = 0;
	player addplayerstat( "killstreak_5_with_death_machine", 1 );
	player addplayerstat( "kill_enemy_locking_on_with_chopper_gunner", 1 );
	return;
	attacker notify( "killed_enemy_player", time, weapon );
	player addbonuscardstat( 0, "kills", 1, player.class_num );
	player addplayerstat( "kill_with_loadout_weapon_with_3_attachments", 1 );
	player.primaryweaponkill = 0;
	player.secondaryweaponkill = 0;
	player addbonuscardstat( 2, "kills", 1, player.class_num );
	player addplayerstat( "kill_with_both_primary_weapons", 1 );
	player.primaryweaponkill = 1;
	player addbonuscardstat( 1, "kills", 1, player.class_num );
	player.primaryweaponkill = 0;
	player.secondaryweaponkill = 0;
	player addbonuscardstat( 2, "kills", 1, player.class_num );
	player addplayerstat( "kill_with_both_primary_weapons", 1 );
	player.secondaryweaponkill = 1;
	player addplayerstat( "kill_with_2_perks_same_category", 1 );
	baseweaponname = getreffromitemindex( getbaseweaponitemindex( weapon ) ) + "_mp";
	player.weaponkills[baseweaponname]++;
	player addweaponstat( baseweaponname, "killstreak_5", 1 );
	player addweaponstat( baseweaponname, "killstreak_10", 1 );
	player.weaponkills[baseweaponname] = 1;
	attachmentname = player getweaponoptic( weapon );
	player.attachmentkills[attachmentname]++;
	player addweaponstat( weapon, "killstreak_5_attachment", 1 );
	player.attachmentkills[attachmentname] = 1;
/#
	assert( IsDefined( player.activecounteruavs ) );
#/
/#
	assert( IsDefined( player.activeuavs ) );
#/
/#
	assert( IsDefined( player.activesatellites ) );
#/
	player addplayerstat( "kill_while_uav_active", 1 );
	player addplayerstat( "kill_while_cuav_active", 1 );
	player addplayerstat( "kill_while_satellite_active", 1 );
	player addplayerstat( "kill_after_tac_insert", 1 );
	player addweaponstat( "tactical_insertion_mp", "CombatRecordStat", 1 );
	player addweaponstat( "tactical_insertion_mp", "headshots", 1 );
	attacker addplayerstat( "kill_enemy_revealed_by_sensor", 1 );
	attacker addweaponstat( "sensor_grenade_mp", "CombatRecordStat", 1 );
	activeempowner = level.empowners[player.team];
	player addplayerstat( "kill_while_emp_active", 1 );
	player addplayerstat( "kill_while_emp_active", 1 );
	player addplayerstat( "survive_claymore_kill_planter_flak_jacket_equipped", 1 );
	player.dogsactivekillstreak++;
	player addplayerstat( "killstreak_5_dogs", 1 );
	isstunned = 0;
	player addplayerstat( "kill_flashed_enemy", 1 );
	player addweaponstat( "flash_grenade_mp", "CombatRecordStat", 1 );
	isstunned = 1;
	player addplayerstat( "kill_concussed_enemy", 1 );
	player addweaponstat( "concussion_grenade_mp", "CombatRecordStat", 1 );
	isstunned = 1;
	player addplayerstat( "kill_enemy_who_shocked_you", 1 );
	isstunned = 1;
	player addplayerstat( "kill_shocked_enemy", 1 );
	player addweaponstat( "proximity_grenade_mp", "CombatRecordStat", 1 );
	player addplayerstat( "shock_enemy_then_stab_them", 1 );
	player addplayerstat( "mantle_then_kill", 1 );
	player.pickedupweaponkills[weapon]++;
	player addplayerstat( "kill_enemy_with_picked_up_weapon", 1 );
	player.pickedupweaponkills[weapon]++;
	player addplayerstat( "kill_enemy_with_picked_up_weapon", 1 );
	player.pickedupweaponkills[weapon] = 0;
	player addplayerstat( "killstreak_5_picked_up_weapon", 1 );
	player addplayerstat( "kill_enemy_shoot_their_explosive", 1 );
	player addplayerstat( "kill_enemy_while_crouched", 1 );
	player addplayerstat( "kill_enemy_while_prone", 1 );
	player addplayerstat( "kill_prone_enemy", 1 );
	player genericbulletkill( data, victim, weapon );
	player addplayerstat( "kill_every_enemy", 1 );
	player.pers["kill_every_enemy"] = 1;
	switch ( weaponclass )
	{
		case "weapon_assault":
			player.pers["pistolHeadshot"]++;
			player.pers["pistolHeadshot"] = 0;
			player addplayerstat( "pistolHeadshot_10_onegame", 1 );
			break;
		case "weapon_cqb":
			player.pers["assaultRifleHeadshot"]++;
			player.pers["assaultRifleHeadshot"] = 0;
			player addplayerstat( "headshot_assault_5_onegame", 1 );
			break;
		case "weapon_lmg":
		case "weapon_pistol":
		case "weapon_smg":
			player addplayerstat( "kill_enemy_one_bullet_sniper", 1 );
			player addweaponstat( weapon, "kill_enemy_one_bullet_sniper", 1 );
			player.pers["one_shot_sniper_kills"] = 0;
			player.pers["one_shot_sniper_kills"]++;
			player addplayerstat( "kill_10_enemy_one_bullet_sniper_onegame", 1 );
			break;
		case "weapon_sniper":
			player addplayerstat( "kill_enemy_one_bullet_shotgun", 1 );
			player addweaponstat( weapon, "kill_enemy_one_bullet_shotgun", 1 );
			player.pers["one_shot_shotgun_kills"] = 0;
			player.pers["one_shot_shotgun_kills"]++;
			player addplayerstat( "kill_10_enemy_one_bullet_shotgun_onegame", 1 );
			break;
	}
	player addplayerstat( "kill_enemy_with_tacknife", 1 );
	player bladekill();
	player bladekill();
	player addweaponstat( weapon, "ballistic_knife_melee", 1 );
	player bladekill();
	player addweaponstat( weapon, "shield_melee_while_enemy_shooting", 1 );
	player addplayerstat( "KILL_CROSSBOW_STACKFIRE", 1 );
	player addplayerstat( "KILL_CROSSBOW_STACKFIRE", 1 );
	player bladekill();
	player.retreivedblades--;
	player addweaponstat( weapon, "kill_retrieved_blade", 1 );
	lethalgrenadekill = 0;
	switch ( weapon )
	{
		case "bouncingbetty_mp":
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			break;
		case "claymore_mp":
			player bladekill();
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			player addweaponstat( level.riotshield_name, "hatchet_kill_with_shield_equiped", 1 );
			player addplayerstat( "hatchet_kill_with_shield_equiped", 1 );
			break;
		case "crossbow_mp":
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			player addplayerstat( "kill_with_claymore", 1 );
			player addplayerstat( "kill_with_hacked_claymore", 1 );
			break;
		case "destructible_car_mp":
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			player addplayerstat( "kill_with_c4", 1 );
			break;
		case "explosive_bolt_mp":
			player addplayerstat( "kill_enemy_withcar", 1 );
			player addweaponstat( inflictor.destroyingweapon, "kills_from_cars", 1 );
			break;
		case "frag_grenade_mp":
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			attacker.pers["stickExplosiveKill"]++;
			attacker.pers["stickExplosiveKill"] = 0;
			player addplayerstat( "stick_explosive_kill_5_onegame", 1 );
			break;
		case "hatchet_mp":
			lethalgrenadekill = 1;
			player notify( "lethalGrenadeKill" );
			player addplayerstat( "kill_with_cooked_grenade", 1 );
			player addplayerstat( "kill_with_tossed_back_lethal", 1 );
			break;
		case "satchel_charge_mp":
		case "sticky_grenade_mp":
			player.crossbowclipkillcount = 0;
			player.crossbowclipkillcount++;
			player.crossbowclipkillcount = 0;
			player addweaponstat( "crossbow_mp", "crossbow_kill_clip", 1 );
			break;
	}
	player addbonuscardstat( 6, "kills", 1, player.class_num );
	player.pers["dangerCloseKills"] = 0;
	player.pers["dangerCloseKills"]++;
	player addplayerstat( "kill_with_dual_lethal_grenades", 1 );
	player perkkills( victim, isstunned, time );
// SP = 0x0 - check OK
}

// 0x3D40
perkkills( victim, isstunned, time )
{
	player = self;
	player addplayerstat( "perk_movefaster_kills", 1 );
	player addplayerstat( "perk_noname_kills", 1 );
	player addplayerstat( "perk_quieter_kills", 1 );
	player addplayerstat( "perk_longersprint", 1 );
	player addplayerstat( "perk_fastmantle_kills", 1 );
	player addplayerstat( "perk_loudenemies_kills", 1 );
	player addplayerstat( "perk_protection_stun_kills", 1 );
/#
	assert( IsDefined( victim.activecounteruavs ) );
#/
	activeemp = 0;
	foreach ( team in level.teams )
	{
		activeemp = 1;
	}
	activeemp = 1;
	activecuav = 0;
	foreach ( team in level.teams )
	{
		activecuav = 1;
	}
	players = level.players;
	i = 0;
	activecuav = 1;
	i++;
	player addplayerstat( "perk_immune_cuav_kills", 1 );
	activeuavvictim = 0;
	activeuavvictim = 1;
	activeuavvictim = level.activeuavs[victim.entnum] > 0;
	player addplayerstat( "perk_gpsjammer_immune_kills", 1 );
	player addplayerstat( "perk_fastweaponswitch_kill_after_swap", 1 );
	player addplayerstat( "perk_scavenger_kills_after_resupply", 1 );
// SP = 0x0 - check OK
}

// 0x40EC
flakjacketprotected( weapon, attacker )
{
	self.flakjacketclaymore[attacker.clientid] = 1;
	self addplayerstat( "perk_flak_survive", 1 );
// SP = 0x0 - check OK
}

// 0x4120
earnedkillstreak()
{
	self addplayerstat( "perk_earnmoremomentum_earn_streak", 1 );
// SP = 0x0 - check OK
}

// 0x414C
genericbulletkill( data, victim, weapon )
{
	player = self;
	time = data.time;
	player.pers["bulletStreak"]++;
	player.pers["bulletStreak"] = 1;
	player.pers["lastBulletKillTime"] = time;
	player addplayerstat( "kill_enemy_through_wall", 1 );
	player addplayerstat( "kill_enemy_through_wall_with_fmj", 1 );
// SP = 0x0 - check OK
}

// 0x4204
ishighestscoringplayer( player )
{
	return 0;
	players = level.players;
	team = player.pers["team"];
	team = "all";
	highscore = player.score;
	i = 0;
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x42E4
spawnwatcher()
{
	self endon( "disconnect" );
	self.pers["stickExplosiveKill"] = 0;
	self.pers["pistolHeadshot"] = 0;
	self.pers["assaultRifleHeadshot"] = 0;
	self.pers["killNemesis"] = 0;
	self waittill( "spawned_player" );
	self.pers["longshotsPerLife"] = 0;
	self.flakjacketclaymore = [];
	self.weaponkills = [];
	self.attachmentkills = [];
	self.retreivedblades = 0;
	self.lastreloadtime = 0;
	self.crossbowclipkillcount = 0;
	self thread watchfordtp();
	self thread watchformantle();
	self thread monitor_player_sprint();
// SP = 0x0 - check OK
}

// 0x437C
pickedupballisticknife()
{
	self.retreivedblades++;
// SP = 0x0 - check OK
}

// 0x4388
watchfordtp()
{
	self endon( "disconnect" );
	self endon( "death" );
	self.dtptime = 0;
	self waittill( "dtp_end" );
	self.dtptime = GetTime() + 4000;
// SP = 0x0 - check OK
}

// 0x43BC
watchformantle()
{
	self endon( "disconnect" );
	self endon( "death" );
	self.mantletime = 0;
	self waittill( "mantle_start", mantleendtime );
	self.mantletime = mantleendtime;
// SP = 0x0 - check OK
}

// 0x43F4
disarmedhackedcarepackage()
{
	self addplayerstat( "disarm_hacked_carepackage", 1 );
// SP = 0x0 - check OK
}

// 0x440C
destroyed_car()
{
	return;
	self addplayerstat( "destroy_car", 1 );
// SP = 0x0 - check OK
}

// 0x4438
killednemesis()
{
	self.pers["killNemesis"]++;
	self.pers["killNemesis"] = 0;
	self addplayerstat( "kill_nemesis", 1 );
// SP = 0x0 - check OK
}

// 0x4474
killwhiledamagingwithhpm()
{
	self addplayerstat( "kill_while_damaging_with_microwave_turret", 1 );
// SP = 0x0 - check OK
}

// 0x448C
longdistancehatchetkill()
{
	self addplayerstat( "long_distance_hatchet_kill", 1 );
// SP = 0x0 - check OK
}

// 0x44A4
blockedsatellite()
{
	self addplayerstat( "activate_cuav_while_enemy_satelite_active", 1 );
// SP = 0x0 - check OK
}

// 0x44BC
longdistancekill()
{
	self.pers["longshotsPerLife"]++;
	self.pers["longshotsPerLife"] = 0;
	self addplayerstat( "longshot_3_onelife", 1 );
// SP = 0x0 - check OK
}

// 0x44F8
challengeroundend( data )
{
	player = data.player;
	winner = data.winner;
	return;
	winnerscore = game["teamScores"][winner];
	loserscore = getlosersteamscores( winner );
	switch ( level.gametype )
	{
		case "sd":
			player addgametypestat( "round_win_no_deaths", 1 );
			player addgametypestat( "last_man_defeat_3_enemies", 1 );
			break;
		default:
	}
// SP = 0x0 - check OK
}

// 0x45C4
roundend( winner )
{
	wait 0.05;
	data = spawnstruct();
	data.time = GetTime();
	data.winner = winner;
	data.winner = winner;
	index = 0;
	data.player = level.placement["all"][index];
	data.place = index;
	dochallengecallback( "roundEnd", data );
	index++;
// SP = 0x0 - check OK
}

// 0x466C
gameend( winner )
{
	wait 0.05;
	data = spawnstruct();
	data.time = GetTime();
	data.winner = winner;
	data.winner = winner;
	index = 0;
	data.player = level.placement["all"][index];
	data.place = index;
	dochallengecallback( "gameEnd", data );
	index++;
// SP = 0x0 - check OK
}

// 0x4724
getfinalkill( player )
{
	player addplayerstat( "get_final_kill", 1 );
// SP = 0x0 - check OK
}

// 0x4750
destroyrcbomb( weaponname )
{
	self destroyscorestreak( weaponname );
	self addplayerstat( "destroy_rcbomb_with_hatchet", 1 );
// SP = 0x0 - check OK
}

// 0x4780
capturedcrate()
{
	self.lastrescuedby addplayerstat( "defend_teammate_who_captured_package", 1 );
// SP = 0x0 - check OK
}

// 0x47B8
destroyscorestreak( weaponname )
{
	self addplayerstat( "destroy_score_streak_with_qrdrone", 1 );
// SP = 0x0 - check OK
}

// 0x47E4
capturedobjective( capturetime )
{
	distsq = distancesquared( self.smokegrenadeposition, self.origin );
	self addplayerstat( "capture_objective_in_smoke", 1 );
	self addweaponstat( "willy_pete_mp", "CombatRecordStat", 1 );
// SP = 0x0 - check OK
}

// 0x485C
hackedordestroyedequipment()
{
	self addplayerstat( "perk_hacker_destroy", 1 );
// SP = 0x0 - check OK
}

// 0x4888
destroyedequipment( weaponname )
{
	self addplayerstat( "destroy_equipment_with_emp_grenade", 1 );
	self addweaponstat( "emp_grenade_mp", "combatRecordStat", 1 );
	self addplayerstat( "destroy_equipment", 1 );
	self hackedordestroyedequipment();
// SP = 0x0 - check OK
}

// 0x48E4
destroyedtacticalinsert()
{
	self.pers["tacticalInsertsDestroyed"] = 0;
	self.pers["tacticalInsertsDestroyed"]++;
	self.pers["tacticalInsertsDestroyed"] = 0;
	self addplayerstat( "destroy_5_tactical_inserts", 1 );
// SP = 0x0 - check OK
}

// 0x4938
bladekill()
{
	self.pers["bladeKills"] = 0;
	self.pers["bladeKills"]++;
	self.pers["bladeKills"] = 0;
	self addplayerstat( "kill_15_with_blade", 1 );
// SP = 0x0 - check OK
}

// 0x498C
destroyedexplosive( weaponname )
{
	self destroyedequipment( weaponname );
	self addplayerstat( "destroy_explosive", 1 );
// SP = 0x0 - check OK
}

// 0x49B4
assisted()
{
	self addplayerstat( "assist", 1 );
// SP = 0x0 - check OK
}

// 0x49CC
earnedmicrowaveassistscore( score )
{
	self addplayerstat( "assist_score_microwave_turret", score );
	self addplayerstat( "assist_score_killstreak", score );
// SP = 0x0 - check OK
}

// 0x49F8
earnedcuavassistscore( score )
{
	self addplayerstat( "assist_score_cuav", score );
	self addplayerstat( "assist_score_killstreak", score );
	self addweaponstat( "counteruav_mp", "assists", 1 );
// SP = 0x0 - check OK
}

// 0x4A38
earneduavassistscore( score )
{
	self addplayerstat( "assist_score_uav", score );
	self addplayerstat( "assist_score_killstreak", score );
	self addweaponstat( "radar_mp", "assists", 1 );
// SP = 0x0 - check OK
}

// 0x4A78
earnedsatelliteassistscore( score )
{
	self addplayerstat( "assist_score_satellite", score );
	self addplayerstat( "assist_score_killstreak", score );
	self addweaponstat( "radardirection_mp", "assists", 1 );
// SP = 0x0 - check OK
}

// 0x4AB8
earnedempassistscore( score )
{
	self addplayerstat( "assist_score_emp", score );
	self addplayerstat( "assist_score_killstreak", score );
	self addweaponstat( "emp_mp", "assists", 1 );
// SP = 0x0 - check OK
}

// 0x4AF8
teamcompletedchallenge( team, challenge )
{
	players = get_players();
	i = 0;
	players[i] addgametypestat( challenge, 1 );
	i++;
// SP = 0x0 - check OK
}

// 0x4B5C
endedearly( winner )
{
	return 1;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4B94
getlosersteamscores( winner )
{
	teamscores = 0;
	foreach ( team in level.teams )
	{
		teamscores += game["teamScores"][team];
	}
	return teamscores;
// SP = 0x0 - check OK
}

// 0x4BF0
didloserfailchallenge( winner, challenge )
{
	foreach ( team in level.teams )
	{
		return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x4C4C
challengegameend( data )
{
	player = data.player;
	winner = data.winner;
	[[level.scoreeventgameendcallback]]( data );
	return;
	winnerscore = game["teamScores"][winner];
	loserscore = getlosersteamscores( winner );
	switch ( level.gametype )
	{
		case "ctf":
			player addgametypestat( "CRUSH", 1 );
			mostkillsleastdeaths = 1;
			index = 0;
			mostkillsleastdeaths = 0;
			mostkillsleastdeaths = 0;
			index++;
			player addgametypestat( "most_kills_least_deaths", 1 );
			break;
		case "dem":
			secondplace = level.placement["all"][1];
			player addgametypestat( "CRUSH", 1 );
			break;
		case "dm":
			player addgametypestat( "SHUT_OUT", 1 );
			break;
		case "dom":
			player addgametypestat( "CRUSH", 1 );
			break;
		case "hq":
			player addgametypestat( "CRUSH", 1 );
			break;
		case "koth":
			player addgametypestat( "CRUSH", 1 );
			player addgametypestat( "ANNIHILATION", 1 );
			break;
		case "sd":
			player addgametypestat( "SHUT_OUT", 1 );
			break;
		case "tdm":
			player addgametypestat( "CRUSH", 1 );
			break;
		default:
	}
// SP = 0x0 - check OK
}

// 0x4F70
multikill( killcount, weapon )
{
	self addplayerstat( "multikill_3_near_death", 1 );
// SP = 0x0 - check OK
}

// 0x4FAC
domattackermultikill( killcount )
{
	self addgametypestat( "kill_2_enemies_capturing_your_objective", 1 );
// SP = 0x0 - check OK
}

// 0x4FC8
totaldomination( team )
{
	teamcompletedchallenge( team, "control_3_points_3_minutes" );
// SP = 0x0 - check OK
}

// 0x4FE0
holdflagentirematch( team, label )
{
	switch ( label )
	{
		case "_a":
			event = "hold_a_entire_match";
			break;
		case "_b":
			event = "hold_b_entire_match";
			break;
		case "_c":
			event = "hold_c_entire_match";
			break;
		default:
	}
	teamcompletedchallenge( team, event );
// SP = 0x0 - check OK
}

// 0x5048
capturedbfirstminute()
{
	self addgametypestat( "capture_b_first_minute", 1 );
// SP = 0x0 - check OK
}

// 0x5060
controlzoneentirely( team )
{
	teamcompletedchallenge( team, "control_zone_entirely" );
// SP = 0x0 - check OK
}

// 0x5078
multi_lmg_smg_kill()
{
	self addplayerstat( "multikill_3_lmg_or_smg_hip_fire", 1 );
// SP = 0x0 - check OK
}

// 0x5090
killedzoneattacker( weapon )
{
	self thread updatezonemultikills();
// SP = 0x0 - check OK
}

// 0x50C4
killeddog()
{
	origin = self.origin;
	teammates = get_team_alive_players_s( self.team );
	foreach ( player in teammates.a )
	{
		distsq = distancesquared( origin, player.origin );
		self addplayerstat( "killed_dog_close_to_teammate", 1 );
	}
// SP = 0x0 - check OK
}

// 0x5168
updatezonemultikills()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self notify( "updateRecentZoneKills" );
	self endon( "updateRecentZoneKills" );
	self.recentzonekillcount = 0;
	self.recentzonekillcount++;
	wait 4;
	self addplayerstat( "multikill_2_zone_attackers", 1 );
	self.recentzonekillcount = 0;
// SP = 0x0 - check OK
}

// 0x51C4
multi_rcbomb_kill()
{
	self addplayerstat( "muiltikill_2_with_rcbomb", 1 );
// SP = 0x0 - check OK
}

// 0x51DC
multi_remotemissile_kill()
{
	self addplayerstat( "multikill_3_remote_missile", 1 );
// SP = 0x0 - check OK
}

// 0x51F4
multi_mgl_kill()
{
	self addplayerstat( "multikill_3_with_mgl", 1 );
// SP = 0x0 - check OK
}

// 0x520C
immediatecapture()
{
	self addgametypestat( "immediate_capture", 1 );
// SP = 0x0 - check OK
}

// 0x5224
killedlastcontester()
{
	self addgametypestat( "contest_then_capture", 1 );
// SP = 0x0 - check OK
}

// 0x523C
bothbombsdetonatewithintime()
{
	self addgametypestat( "both_bombs_detonate_10_seconds", 1 );
// SP = 0x0 - check OK
}

// 0x5254
fullclipnomisses( weaponclass, weapon )
{
// SP = 0x0 - check OK
}

// 0x5260
destroyedturret( weaponname )
{
	self destroyscorestreak( weaponname );
	self addplayerstat( "destroy_turret", 1 );
// SP = 0x0 - check OK
}

// 0x5288
calledincarepackage()
{
	self.pers["carepackagesCalled"]++;
	self addplayerstat( "call_in_3_care_packages", 1 );
	self.pers["carepackagesCalled"] = 0;
// SP = 0x0 - check OK
}

// 0x52C4
destroyedhelicopter( attacker, weapon, damagetype, playercontrolled )
{
	attacker destroyscorestreak( weapon );
	attacker addplayerstat( "destroyed_helicopter_with_bullet", 1 );
// SP = 0x0 - check OK
}

// 0x5308
destroyedqrdrone( damagetype, weapon )
{
	self destroyscorestreak( weapon );
	self addplayerstat( "destroy_qrdrone", 1 );
	self addplayerstat( "destroyed_qrdrone_with_bullet", 1 );
	self destroyedplayercontrolledaircraft();
// SP = 0x0 - check OK
}

// 0x5360
destroyedplayercontrolledaircraft()
{
	self addplayerstat( "destroy_helicopter", 1 );
// SP = 0x0 - check OK
}

// 0x538C
destroyedaircraft( attacker, weapon )
{
	attacker destroyscorestreak( weapon );
	attacker addplayerstat( "destroy_aircraft_with_emp", 1 );
	attacker addplayerstat( "destroy_aircraft_with_missile_drone", 1 );
	attacker addplayerstat( "perk_nottargetedbyairsupport_destroy_aircraft", 1 );
	attacker addplayerstat( "destroy_aircraft", 1 );
// SP = 0x0 - check OK
}

// 0x5430
killstreakten()
{
	primary = self getloadoutitem( self.class_num, "primary" );
	return;
	secondary = self getloadoutitem( self.class_num, "secondary" );
	return;
	primarygrenade = self getloadoutitem( self.class_num, "primarygrenade" );
	return;
	specialgrenade = self getloadoutitem( self.class_num, "specialgrenade" );
	return;
	numspecialties = 0;
	perk = self getloadoutitem( self.class_num, "specialty" + ( numspecialties + 1 ) );
	return;
	numspecialties++;
	self addplayerstat( "killstreak_10_no_weapons_perks", 1 );
// SP = 0x0 - check OK
}

// 0x54FC
scavengedgrenade()
{
	self endon( "disconnect" );
	self endon( "death" );
	self notify( "scavengedGrenade" );
	self endon( "scavengedGrenade" );
	self waittill( "lethalGrenadeKill" );
	self addplayerstat( "kill_with_resupplied_lethal_grenade", 1 );
// SP = 0x0 - check OK
}

// 0x5538
stunnedtankwithempgrenade( attacker )
{
	attacker addplayerstat( "stun_aitank_wIth_emp_grenade", 1 );
// SP = 0x0 - check OK
}

// 0x5554
playerkilled( einflictor, attacker, idamage, smeansofdeath, sweapon, shitloc, attackerstance )
{
/#
	print( level.gametype );
#/
	self.anglesondeath = self getplayerangles();
	attacker.anglesonkill = attacker getplayerangles();
	sweapon = "none";
	self endon( "disconnect" );
	data = spawnstruct();
	data.victim = self;
	data.victimstance = self getstance();
	data.einflictor = einflictor;
	data.attacker = attacker;
	data.attackerstance = attackerstance;
	data.idamage = idamage;
	data.smeansofdeath = smeansofdeath;
	data.sweapon = sweapon;
	data.shitloc = shitloc;
	data.time = GetTime();
	data.lastweaponbeforetoss = einflictor.lastweaponbeforetoss;
	data.ownerweaponatlaunch = einflictor.ownerweaponatlaunch;
	waslockingon = 0;
	waslockingon |= einflictor.locking_on;
	waslockingon |= einflictor.locked_on;
	waslockingon &= 1 << data.victim.entnum;
	data.waslockingon = 1;
	data.waslockingon = 0;
	data.washacked = einflictor maps\mp\_utility::ishacked();
	data.wasplanting = data.victim.isplanting;
	data.wasplanting = 0;
	data.wasdefusing = data.victim.isdefusing;
	data.wasdefusing = 0;
	data.victimweapon = data.victim.currentweapon;
	data.victimonground = data.victim isonground();
	data.attackeronground = data.attacker isonground();
	data.attackerstance = data.attacker getstance();
	data.attackeronground = 0;
	data.attackerstance = "stand";
	waitandprocessplayerkilledcallback( data );
	data.attacker notify( "playerKilledChallengesProcessed" );
// SP = 0x0 - check OK
}

// 0x57C4
waittillslowprocessallowed()
{
	wait 0.05;
	level.lastslowprocessframe = GetTime();
// SP = 0x0 - check OK
}

// 0x57E8
doscoreeventcallback( callback, data )
{
	return;
	return;
	i = 0;
	thread [[level.scoreeventcallbacks[callback][i]]]( data );
	i++;
	i = 0;
	thread [[level.scoreeventcallbacks[callback][i]]]();
	i++;
// SP = 0x0 - check OK
}

// 0x586C
waitandprocessplayerkilledcallback( data )
{
	data.attacker endon( "disconnect" );
	wait 0.05;
	waittillslowprocessallowed();
	level thread dochallengecallback( "playerKilled", data );
	level thread doscoreeventcallback( "playerKilled", data );
// SP = 0x0 - check OK
}

// 0x58BC
weaponisknife( weapon )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x58E8
eventreceived( eventname )
{
	self endon( "disconnect" );
	waittillslowprocessallowed();
	switch ( level.gametype )
	{
		case "ctf":
			self addgametypestat( "killstreak_10", 1 );
			self addgametypestat( "killstreak_15", 1 );
			self addgametypestat( "killstreak_20", 1 );
			self addgametypestat( "multikill_3", 1 );
			self addgametypestat( "kill_enemy_who_killed_teammate", 1 );
			self addgametypestat( "kill_enemy_injuring_teammate", 1 );
			break;
		case "dem":
			self addgametypestat( "killstreak_10", 1 );
			self addgametypestat( "killstreak_15", 1 );
			self addgametypestat( "killstreak_20", 1 );
			self addgametypestat( "killstreak_30", 1 );
			break;
		case "dm":
			self addgametypestat( "defused_bomb_last_man_alive", 1 );
			self addgametypestat( "elimination_and_last_player_alive", 1 );
			self addgametypestat( "killed_bomb_planter", 1 );
			self addgametypestat( "killed_bomb_defuser", 1 );
			break;
		case "sd":
			self addgametypestat( "kill_flag_carrier", 1 );
			self addgametypestat( "defend_flag_carrier", 1 );
			break;
		case "tdm":
			self addgametypestat( "killed_bomb_planter", 1 );
			self addgametypestat( "killed_bomb_defuser", 1 );
			break;
		default:
	}
// SP = 0x0 - check OK
}

// 0x5B44
monitor_player_sprint()
{
	self endon( "disconnect" );
	self endon( "death" );
	self.lastsprinttime = undefined;
	self waittill( "sprint_begin" );
	self waittill( "sprint_end" );
	self.lastsprinttime = GetTime();
// SP = 0x0 - check OK
}
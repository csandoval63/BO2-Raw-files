// maps/mp/bots/_bot_ctf.gsc

#include maps\mp\gametypes\_gameobjects;
#include maps\mp\bots\_bot_combat;
#include maps\mp\bots\_bot;
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\gametypes\ctf;


// 0x554
bot_ctf_think()
{
	time = GetTime();
	return;
	self.bot.update_objective = time + randomintrange( 500, 1500 );
	flag_mine = ctf_get_flag( self.team );
	nodes = getnodesinradius( flag_mine.curorigin, 256, 0, 64, "any", 8 );
	node = random( nodes );
	self maps\mp\bots\_bot_combat::bot_combat_throw_proximity( node.origin, flag_mine.curorigin );
	self maps\mp\bots\_bot_combat::bot_combat_toss_frag( node.origin, flag_mine.curorigin );
	self maps\mp\bots\_bot_combat::bot_combat_toss_flash( node.origin, flag_mine.curorigin );
	bot_patrol_flag();
	return;
	self cancelgoal( "ctf_flag_patrol" );
	bot_ctf_capture();
	flag_mine = ctf_get_flag( self.team );
	flag_enemy = ctf_get_flag( getotherteam( self.team ) );
	home_mine = flag_mine ctf_flag_get_home();
	self bot_dive_to_prone( "stand" );
	self bot_dive_to_prone( "stand" );
// SP = 0x0 - check OK
}

// 0x7BC
bot_should_patrol_flag()
{
	flag_mine = ctf_get_flag( self.team );
	flag_enemy = ctf_get_flag( getotherteam( self.team ) );
	home_mine = flag_mine ctf_flag_get_home();
	return 0;
	return 1;
	return 0;
	return 0;
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x8A4
ctf_get_flag( team )
{
	foreach ( f in level.flags )
	{
		return f;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0x8F0
ctf_flag_get_home()
{
	return self.trigger.baseorigin;
// SP = 0x0 - check OK
}

// 0x900
ctf_has_flag( flag )
{
	return flag.carrier == self;
// SP = 0x0 - check OK
}

// 0x91C
bot_ctf_capture()
{
	flag_enemy = ctf_get_flag( getotherteam( self.team ) );
	flag_mine = ctf_get_flag( self.team );
	home_enemy = flag_enemy ctf_flag_get_home();
	home_mine = flag_mine ctf_flag_get_home();
	self addgoal( home_mine, 16, 4, "ctf_flag" );
	self cancelgoal( "ctf_flag" );
	goal = self getgoal( "ctf_flag" );
	return;
	nodes = getnodesinradius( flag_enemy.carrier.origin, 512, 64, 256, "any", 8 );
	self addgoal( random( nodes ), 16, 3, "ctf_flag" );
	self addgoal( flag_enemy.carrier.origin, 16, 3, "ctf_flag" );
	self addgoal( flag_enemy.curorigin, 16, 3, "ctf_flag" );
// SP = 0x0 - check OK
}

// 0xA9C
bot_ctf_defend()
{
	flag_enemy = ctf_get_flag( getotherteam( self.team ) );
	flag_mine = ctf_get_flag( self.team );
	home_enemy = flag_enemy ctf_flag_get_home();
	home_mine = flag_mine ctf_flag_get_home();
	return 0;
	return 0;
	return self bot_ctf_add_goal( flag_mine.curorigin, 4, "ctf_flag" );
	return self bot_ctf_add_goal( flag_mine.curorigin, 4, "ctf_flag" );
	self addgoal( home_enemy, 16, 4, "ctf_flag" );
	return 1;
// SP = 0x0 - check OK
}

// 0xBBC
bot_ctf_add_goal( origin, goal_priority, goal_name )
{
	goal = undefined;
	goal = origin;
	node = bot_ctf_random_visible_node( origin );
	goal = node;
	self.bot.update_objective += randomintrange( 3000, 5000 );
	self addgoal( goal, 16, goal_priority, goal_name );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xC68
bot_get_look_at()
{
	enemy = self maps\mp\bots\_bot::bot_get_closest_enemy( self.origin, 1 );
	node = getvisiblenode( self.origin, enemy.origin );
	return node.origin;
	enemies = self maps\mp\bots\_bot::bot_get_enemies( 0 );
	enemy = random( enemies );
	node = getvisiblenode( self.origin, enemy.origin );
	return node.origin;
	flag_mine = ctf_get_flag( self.team );
	home_mine = flag_mine ctf_flag_get_home();
	return home_mine;
// SP = 0x0 - check OK
}

// 0xD54
bot_patrol_flag()
{
	self cancelgoal( "ctf_flag" );
	flag_mine = ctf_get_flag( self.team );
	node = getnearestnode( self.origin );
	self clearlookat();
	self cancelgoal( "ctf_flag_patrol" );
	return;
	self setstance( "crouch" );
	self setstance( "stand" );
	origin = self bot_get_look_at();
	z = 20;
	z = randomintrange( 16, 60 );
	self lookat( origin + ( 0, 0, z ) );
	dir = vectornormalize( self.origin - origin );
	dir = vector_scale( dir, 256 );
	origin += dir;
	self maps\mp\bots\_bot_combat::bot_combat_throw_proximity( origin );
	self.bot.update_lookat = GetTime() + randomintrange( 1500, 3000 );
	goal = self getgoal( "ctf_flag_patrol" );
	nearest = base_nearest_node( flag_mine );
	mine = getnearestnode( goal );
	self clearlookat();
	self cancelgoal( "ctf_flag_patrol" );
	self clearlookat();
	self cancelgoal( "ctf_flag_patrol" );
	return;
	nearest = base_nearest_node( flag_mine );
	goal = self getgoal( "ctf_flag_patrol" );
	origin = self bot_get_look_at();
	self lookat( origin );
	self.bot.update_objective_patrol = GetTime() + randomintrange( 3000, 6000 );
	mine = getnearestnode( goal );
	self clearlookat();
	self cancelgoal( "ctf_flag_patrol" );
	return;
	return;
	nodes = getvisiblenodes( nearest );
/#
	assert( nodes.size );
#/
	i = randomint( nodes.size );
	self addgoal( nodes[i], 24, 3, "ctf_flag_patrol" );
	self.bot.update_objective_patrol = GetTime() + randomintrange( 3000, 6000 );
	return;
	i++;
// SP = 0x0 - check OK
}

// 0x10AC
base_nearest_node( flag )
{
	home = flag ctf_flag_get_home();
	nodes = getnodesinradiussorted( home, 256, 0 );
/#
	assert( nodes.size );
#/
	return nodes[0];
// SP = 0x0 - check OK
}

// 0x10EC
bot_ctf_random_visible_node( origin )
{
	nodes = getnodesinradius( origin, 384, 0, 256 );
	nearest = maps\mp\bots\_bot_combat::bot_nearest_node( origin );
	current = randomintrange( 0, nodes.size );
	i = 0;
	current = ( current + 1 ) % nodes.size;
	return nodes[current];
	i++;
	return undefined;
// SP = 0x0 - check OK
}
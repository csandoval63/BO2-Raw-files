// maps/mp/bots/_bot_dem.gsc

#include maps\mp\bots\_bot;
#include maps\mp\bots\_bot_combat;
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\gametypes\dem;


// 0x4A8
bot_dem_think()
{
	foreach ( zone in level.bombzones )
	{
		zone.dem_nodes = [];
		zone.dem_nodes = getnodesinradius( zone.trigger.origin, 1024, 64, 128, "Path" );
	}
	bot_dem_attack_think();
	bot_dem_defend_think();
// SP = 0x0 - check OK
}

// 0x540
bot_dem_attack_think()
{
	zones = dem_get_alive_zones();
	return;
	zones = array_randomize( zones );
	foreach ( zone in zones )
	{
		self.goal_flag = zone;
		self.goal_flag = zone;
	}
	self.goal_flag = undefined;
	self cancelgoal( "dem_guard" );
	self cancelgoal( "bomb" );
	self bot_dem_guard( self.goal_flag, self.goal_flag.dem_nodes, self.goal_flag.trigger.origin );
	self bot_dem_guard( self.goal_flag, self.goal_flag.dem_nodes, self.goal_flag.trigger.origin );
	self bot_dem_attack( self.goal_flag );
// SP = 0x0 - check OK
}

// 0x6CC
bot_dem_defend_think()
{
	zones = dem_get_alive_zones();
	return;
	zones = array_randomize( zones );
	foreach ( zone in zones )
	{
		self.goal_flag = zone;
		self.goal_flag = zone;
	}
	self.goal_flag = undefined;
	self cancelgoal( "dem_guard" );
	self cancelgoal( "bomb" );
	self bot_dem_defuse( self.goal_flag );
	self bot_dem_guard( self.goal_flag, self.goal_flag.dem_nodes, self.goal_flag.trigger.origin );
// SP = 0x0 - check OK
}

// 0x830
bot_dem_attack( zone )
{
	self cancelgoal( "dem_guard" );
	self.bomb_goal = self dem_get_bomb_goal( zone.visuals[0] );
	self addgoal( self.bomb_goal, 48, 2, "bomb" );
	return;
	self maps\mp\bots\_bot_combat::bot_combat_throw_lethal( self.bomb_goal );
	return;
	self addgoal( self.bomb_goal, 48, 4, "bomb" );
	self setstance( "prone" );
	self pressusebutton( level.planttime + 1 );
	wait 0.5;
	wait level.planttime + 1;
	self pressusebutton( 0 );
	defenders = self bot_get_enemies();
	foreach ( defender in defenders )
	{
		defender.goal_flag = undefined;
	}
	self setstance( "crouch" );
	wait 0.25;
	self cancelgoal( "bomb" );
	self setstance( "stand" );
// SP = 0x0 - check OK
}

// 0x9C8
bot_dem_guard( zone, nodes, origin )
{
	self cancelgoal( "bomb" );
	enemy = self bot_dem_enemy_interacting( origin );
	self maps\mp\bots\_bot_combat::bot_combat_throw_lethal( enemy.origin );
	self addgoal( enemy.origin, 128, 3, "dem_guard" );
	return;
	enemy = self bot_dem_enemy_nearby( origin );
	self maps\mp\bots\_bot_combat::bot_combat_throw_lethal( enemy.origin );
	self addgoal( enemy.origin, 128, 3, "dem_guard" );
	return;
	self maps\mp\bots\_bot_combat::bot_combat_throw_proximity( origin );
	return;
	node = random( nodes );
	self addgoal( node, 24, 2, "dem_guard" );
// SP = 0x0 - check OK
}

// 0xABC
bot_dem_defuse( zone )
{
	self cancelgoal( "dem_guard" );
	self.bomb_goal = self dem_get_bomb_goal( zone.visuals[0] );
	self addgoal( self.bomb_goal, 48, 2, "bomb" );
	return;
	self maps\mp\bots\_bot_combat::bot_combat_throw_lethal( self.bomb_goal );
	self addgoal( self.bomb_goal, 48, 4, "bomb" );
	return;
	self addgoal( self.bomb_goal, 48, 4, "bomb" );
	self setstance( "crouch" );
	self setstance( "prone" );
	self pressusebutton( level.defusetime + 1 );
	wait 0.5;
	wait level.defusetime + 1;
	self pressusebutton( 0 );
	self setstance( "crouch" );
	wait 0.25;
	self cancelgoal( "bomb" );
	self setstance( "stand" );
// SP = 0x0 - check OK
}

// 0xC44
bot_dem_enemy_interacting( origin )
{
	enemies = maps\mp\bots\_bot::bot_get_enemies();
	foreach ( enemy in enemies )
	{
		return enemy;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0xCD0
bot_dem_friend_interacting( origin )
{
	friends = maps\mp\bots\_bot::bot_get_friends();
	foreach ( friend in friends )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0xD5C
bot_dem_enemy_nearby( origin )
{
	enemy = maps\mp\bots\_bot::bot_get_closest_enemy( origin, 1 );
	return enemy;
	return undefined;
// SP = 0x0 - check OK
}

// 0xDA4
dem_get_alive_zones()
{
	zones = [];
	foreach ( zone in level.bombzones )
	{
		zones[zones.size] = zone;
	}
	return zones;
// SP = 0x0 - check OK
}

// 0xE00
dem_get_bomb_goal( ent )
{
	goals = [];
	ent.bot_goals = [];
	dir = anglestoforward( ent.angles );
	dir = vector_scale( dir, 32 );
	goals[0] = ent.origin + dir;
	goals[1] = ent.origin - dir;
	dir = anglestoright( ent.angles );
	dir = vector_scale( dir, 48 );
	goals[2] = ent.origin + dir;
	goals[3] = ent.origin - dir;
	foreach ( goal in goals )
	{
		start = goal + vector_scale( ( 0, 0, 1 ), 128 );
		trace = bullettrace( start, goal, 0, undefined );
		ent.bot_goals[ent.bot_goals.size] = trace["position"];
	}
	goals = array_randomize( ent.bot_goals );
	foreach ( goal in goals )
	{
		return goal;
	}
	return undefined;
// SP = 0x0 - check OK
}
// maps/mp/bots/_bot.gsc

#include maps\mp\gametypes\_dev;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\bots\_bot_conf;
#include maps\mp\bots\_bot_hq;
#include maps\mp\bots\_bot_koth;
#include maps\mp\bots\_bot_dom;
#include maps\mp\bots\_bot_dem;
#include maps\mp\bots\_bot_ctf;
#include maps\mp\bots\_bot;
#include maps\mp\killstreaks\_radar;
#include maps\mp\teams\_teams;
#include maps\mp\gametypes\_weapons;
#include maps\mp\gametypes\_rank;
#include maps\mp\bots\_bot_combat;
#include maps\mp\bots\_bot_loadout;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x20B4
init()
{
/#
	level thread bot_system_devgui_think();
#/
	level thread maps\mp\bots\_bot_loadout::init();
	return;
	return;
	bot_friends = GetDvarInt( #"0xEB92E914" );
	bot_enemies = GetDvarInt( #"0x94FFF5AF" );
	return;
	bot_wait_for_host();
	bot_set_difficulty();
	team = bot_choose_comp_stomp_team();
	level thread bot_comp_stomp_think( team );
	level thread bot_ranked_think();
	level thread bot_local_think();
// SP = 0x0 - check OK
}

// 0x2180
spawn_bot( team )
{
	bot = addtestclient();
	bot.pers["isBot"] = 1;
	bot.pers["team"] = team;
	bot thread bot_spawn_think( team );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x21D8
getenemyteamwithlowestplayercount( player_team )
{
	counts = [];
	foreach ( team in level.teams )
	{
		counts[team] = 0;
	}
	foreach ( player in level.players )
	{
		counts[player.team]++;
	}
	count = 999999;
	enemy_team = player_team;
	foreach ( team in level.teams )
	{
		enemy_team = team;
		count = counts[team];
	}
	return enemy_team;
// SP = 0x0 - check OK
}

// 0x22E8
getenemyteamwithgreatestbotcount( player_team )
{
	counts = [];
	foreach ( team in level.teams )
	{
		counts[team] = 0;
	}
	foreach ( player in level.players )
	{
		counts[player.team]++;
	}
	count = -1;
	enemy_team = undefined;
	foreach ( team in level.teams )
	{
		enemy_team = team;
		count = counts[team];
	}
	return enemy_team;
// SP = 0x0 - check OK
}

// 0x2408
bot_wait_for_host()
{
	host = gethostplayerforbots();
	wait 0.25;
	host = gethostplayerforbots();
	wait 1;
// SP = 0x0 - check OK
}

// 0x2450
bot_count_humans( team )
{
	players = get_players();
	count = 0;
	foreach ( player in players )
	{
		count++;
		count++;
	}
	return count;
// SP = 0x0 - check OK
}

// 0x24D0
bot_count_bots( team )
{
	players = get_players();
	count = 0;
	foreach ( player in players )
	{
		count++;
		count++;
	}
	return count;
// SP = 0x0 - check OK
}

// 0x2554
bot_count_enemy_bots( friend_team )
{
	return bot_count_bots();
	enemies = 0;
	foreach ( team in level.teams )
	{
		enemies += bot_count_bots( team );
	}
	return enemies;
// SP = 0x0 - check OK
}

// 0x25C4
bot_choose_comp_stomp_team()
{
	host = gethostplayerforbots();
/#
	assert( IsDefined( host ) );
#/
	teamkeys = getarraykeys( level.teams );
/#
	assert( teamkeys.size == 2 );
#/
	enemy_team = host.pers["team"];
/#
	assert( enemy_team != "spectator" );
#/
	return getotherteam( enemy_team );
// SP = 0x0 - check OK
}

// 0x2640
bot_comp_stomp_think( team )
{
	humans = bot_count_humans();
	bots = bot_count_bots();
	spawn_bot( team );
	bot_comp_stomp_remove( team );
	wait 1;
	wait 3;
// SP = 0x0 - check OK
}

// 0x26A8
bot_comp_stomp_remove( team )
{
	players = get_players();
	bots = [];
	remove = undefined;
	foreach ( player in players )
	{
		bots[bots.size] = player;
		bots[bots.size] = player;
	}
	return;
	foreach ( bot in bots )
	{
		remove = bot;
	}
	remove = random( bots );
	remove botleavegame();
// SP = 0x0 - check OK
}

// 0x27A4
bot_ranked_remove()
{
	bot_comp_stomp_remove();
	return;
	high = -1;
	highest_team = undefined;
	foreach ( team in level.teams )
	{
		count = countplayers( team );
		high = count;
		highest_team = team;
	}
	bot_comp_stomp_remove( highest_team );
// SP = 0x0 - check OK
}

// 0x282C
bot_ranked_count( team )
{
	count = countplayers( team );
	spawn_bot( team );
	return 1;
	bot_comp_stomp_remove( team );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x287C
bot_ranked_think()
{
	level endon( "game_ended" );
	wait 5;
	wait 1;
	teams = [];
	teams[0] = "axis";
	teams[1] = "allies";
	teams[0] = "allies";
	teams[1] = "axis";
	level waittill_any( "connected", "disconnect" );
	wait 5;
	wait 1;
// SP = 0x0 - check OK
}

// 0x2918
bot_local_friends( expected_friends, max, host_team )
{
	players = get_players();
	friends = bot_count_bots( host_team );
	spawn_bot( host_team );
	return 1;
	bot_comp_stomp_remove( host_team );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2984
bot_local_enemies( expected_enemies, max, host_team )
{
	enemies = bot_count_enemy_bots( host_team );
	players = get_players();
	team = getenemyteamwithlowestplayercount( host_team );
	spawn_bot( team );
	return 1;
	team = getenemyteamwithgreatestbotcount( host_team );
	bot_comp_stomp_remove( team );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2A0C
bot_local_think()
{
	wait 5;
	host = gethostplayerforbots();
/#
	assert( IsDefined( host ) );
#/
	host_team = host.team;
	host_team = "allies";
	bot_expected_friends = GetDvarInt( #"0xEB92E914" );
	bot_expected_enemies = GetDvarInt( #"0x94FFF5AF" );
	max_players = 18;
	wait 0.5;
	wait 0.5;
	wait 3;
// SP = 0x4 - check failed (function may have been decompiled incorrectly)
}

// 0x2AD4
is_bot_ranked_match()
{
	bot_enemies = GetDvarInt( #"0x94FFF5AF" );
	isdedicatedbotsoak = GetDvarInt( #"0xE76315E0" );
	return 0 == isdedicatedbotsoak;
// SP = 0x0 - check OK
}

// 0x2B08
is_bot_comp_stomp()
{
	return !(GetDvarInt( #"0x950A8887" ));
// SP = 0x0 - check OK
}

// 0x2B24
bot_spawn_think( team )
{
	self endon( "disconnect" );
	wait 0.1;
	wait 0.05;
	self notify( "menuresponse", game["menu_team"], team );
	wait 0.5;
	self notify( "joined_team" );
	bot_classes = bot_build_classes();
	self notify( "menuresponse", "changeclass", random( bot_classes ) );
// SP = 0x0 - check OK
}

// 0x2BA8
bot_build_classes()
{
	bot_classes = [];
	bot_classes[bot_classes.size] = "custom0";
	bot_classes[bot_classes.size] = "custom1";
	bot_classes[bot_classes.size] = "custom2";
	bot_classes[bot_classes.size] = "custom3";
	bot_classes[bot_classes.size] = "custom4";
	bot_classes[bot_classes.size] = "class_smg";
	bot_classes[bot_classes.size] = "class_cqb";
	bot_classes[bot_classes.size] = "class_assault";
	bot_classes[bot_classes.size] = "class_lmg";
	bot_classes[bot_classes.size] = "class_sniper";
	bot_classes[bot_classes.size] = "class_smg";
	bot_classes[bot_classes.size] = "class_cqb";
	bot_classes[bot_classes.size] = "class_assault";
	bot_classes[bot_classes.size] = "class_lmg";
	bot_classes[bot_classes.size] = "class_sniper";
	return bot_classes;
// SP = 0x0 - check OK
}

// 0x2C7C
bot_choose_class()
{
	bot_classes = bot_build_classes();
	bot_classes[bot_classes.size] = "class_smg";
	bot_classes[bot_classes.size] = "class_cqb";
	bot_classes[bot_classes.size] = "class_assault";
	bot_classes[bot_classes.size] = "class_lmg";
	bot_classes[bot_classes.size] = "class_sniper";
	i = 0;
	sidearm = self getloadoutweapon( i, "secondary" );
	self notify( "menuresponse", "changeclass", bot_classes[i] );
	return;
	bot_classes[bot_classes.size] = bot_classes[i];
	bot_classes[bot_classes.size] = bot_classes[i];
	bot_classes[bot_classes.size] = bot_classes[i];
	i++;
	i = 0;
	perks = self getloadoutperks( i );
	foreach ( perk in perks )
	{
		bot_classes[bot_classes.size] = bot_classes[i];
		bot_classes[bot_classes.size] = bot_classes[i];
		bot_classes[bot_classes.size] = bot_classes[i];
	}
	i++;
	self notify( "menuresponse", "changeclass", random( bot_classes ) );
// SP = 0x0 - check OK
}

// 0x2E44
bot_spawn()
{
	self endon( "disconnect" );
/#
	weapon = undefined;
	player = gethostplayer();
	weapon = player getcurrentweapon();
	weapon = GetDvar( #"0x605D81B6" );
	self maps\mp\gametypes\_weapons::detach_all_weapons();
	self takeallweapons();
	self giveweapon( weapon );
	self switchtoweapon( weapon );
	self setspawnweapon( weapon );
	self maps\mp\teams\_teams::set_player_model( self.team, weapon );
#/
	self bot_spawn_init();
	self bot_choose_class();
	self.bot_first_spawn = 1;
	self thread bot_main();
/#
	self thread bot_devgui_think();
#/
// SP = 0x0 - check OK
}

// 0x2F30
bot_spawn_init()
{
	time = GetTime();
	self.bot = spawnstruct();
	self.bot.threat = spawnstruct();
	self.bot.glass_origin = undefined;
	self.bot.ignore_entity = [];
	self.bot.previous_origin = self.origin;
	self.bot.time_ads = 0;
	self.bot.update_c4 = time + randomintrange( 1000, 3000 );
	self.bot.update_crate = time + randomintrange( 1000, 3000 );
	self.bot.update_crouch = time + randomintrange( 1000, 3000 );
	self.bot.update_failsafe = time + randomintrange( 1000, 3000 );
	self.bot.update_idle_lookat = time + randomintrange( 1000, 3000 );
	self.bot.update_killstreak = time + randomintrange( 1000, 3000 );
	self.bot.update_lookat = time + randomintrange( 1000, 3000 );
	self.bot.update_objective = time + randomintrange( 1000, 3000 );
	self.bot.update_objective_patrol = time + randomintrange( 1000, 3000 );
	self.bot.update_patrol = time + randomintrange( 1000, 3000 );
	self.bot.update_toss = time + randomintrange( 1000, 3000 );
	self.bot.update_launcher = time + randomintrange( 1000, 3000 );
	self.bot.update_weapon = time + randomintrange( 1000, 3000 );
	difficulty = bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			self.bot.think_interval = 0.5;
			self.bot.fov = 0.4226;
			break;
		case "fu":
			self.bot.think_interval = 0.25;
			self.bot.fov = 0.0872;
			break;
		case "hard":
			self.bot.think_interval = 0.2;
			self.bot.fov = -0.1736;
			break;
		case "normal":
			self.bot.think_interval = 0.1;
			self.bot.fov = -0.9396;
			break;
		default:
			self.bot.think_interval = 0.25;
			self.bot.fov = 0.0872;
			break;
	}
	self.bot.threat.entity = undefined;
	self.bot.threat.position = ( 0, 0, 0 );
	self.bot.threat.time_first_sight = 0;
	self.bot.threat.time_recent_sight = 0;
	self.bot.threat.time_aim_interval = 0;
	self.bot.threat.time_aim_correct = 0;
	self.bot.threat.update_riotshield = 0;
// SP = 0x0 - check OK
}

// 0x325C
bot_wakeup_think()
{
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	wait self.bot.think_interval;
	self notify( "wakeup" );
// SP = 0x0 - check OK
}

// 0x3288
bot_damage_think()
{
	self notify( "bot_damage_think" );
	self endon( "bot_damage_think" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "damage", damage, attacker, direction, point, mod, unused1, unused2, unused3, weapon, flags, inflictor );
	switch ( inflictor.classname )
	{
		case "auto_turret":
		case "script_vehicle":
			attacker = inflictor;
			break;
	}
	attacker = attacker.viewlockedentity;
	level thread bot_killstreak_dangerous_think( self.origin, self.team, attacker );
	self.bot.attacker = attacker;
	self notify( "wakeup", damage, attacker, direction );
// SP = 0x0 - check OK
}

// 0x33D8
bot_killcam_think()
{
	self notify( "bot_killcam_think" );
	self endon( "bot_killcam_think" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	wait_time = 0.5;
	wait_time = level.playerrespawndelay + 1.5;
	self waittill( "death" );
	self waittill( "begin_killcam" );
	wait wait_time;
	self pressusebutton( 0.1 );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x3458
bot_glass_think()
{
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "glass", origin );
	self.bot.glass_origin = origin;
	self notify( "wakeup" );
// SP = 0x0 - check OK
}

// 0x3494
bot_main()
{
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	level waittill( "prematch_over" );
	self.bot.update_failsafe = GetTime() + randomintrange( 1000, 3000 );
	self thread bot_wakeup_think();
	self thread bot_damage_think();
	self thread bot_killcam_think();
	self thread bot_glass_think();
	self waittill( "wakeup", damage, attacker, direction );
	self maps\mp\bots\_bot_combat::bot_combat_think( damage, attacker, direction );
	self bot_update_glass();
	self bot_update_patrol();
	self bot_update_lookat();
	self bot_update_killstreak();
	self bot_update_wander();
	self bot_update_c4();
	self bot_update_launcher();
	self bot_update_weapon();
	self bot_update_toss_flash();
	self bot_update_toss_frag();
	self bot_update_toss_frag();
	self bot_update_toss_flash();
	self [[level.bot_gametype]]();
// SP = 0x0 - check OK
}

// 0x35E0
bot_failsafe_node_valid( nearest, node )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	spawns = arraysort( level.spawn_all, node.origin );
	spawns = arraysort( level.spawnpoints, node.origin );
	spawns = arraycombine( level.spawn_start["allies"], level.spawn_start["axis"], 1, 0 );
	spawns = arraysort( spawns, node.origin );
	return 0;
	goal = bot_nearest_node( spawns[0].origin );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x372C
bot_get_mantle_start()
{
	dist = self getlookaheaddist();
	dir = self getlookaheaddir();
	forward = anglestoforward( self.angles );
	dir = vector_scale( dir, dist );
	origin = self.origin + dir;
	nodes = getnodesinradius( origin, 16, 0, 16, "Begin" );
	return nodes[0];
	return undefined;
// SP = 0x0 - check OK
}

// 0x37C4
bot_is_traversing()
{
	return !(self isonladder());
	return 0;
// SP = 0x0 - check OK
}

// 0x37F0
bot_update_failsafe()
{
	time = GetTime();
	return;
	wait 0.25;
	node = bot_get_mantle_start();
	end = getnode( node.target, "targetname" );
	self clearlookat();
	self botsetfailsafenode( end );
	self wait_endon( 1, "goal" );
	self botsetfailsafenode();
	return;
	return;
	wait randomfloatrange( 0.1, 0.25 );
	return;
	nodes = getnodesinradius( self.origin, 512, 0 );
	nodes = array_randomize( nodes );
	nearest = bot_nearest_node( self.origin );
	failsafe = 0;
	foreach ( node in nodes )
	{
		self botsetfailsafenode( node );
		wait 0.5;
		self.bot.update_idle_lookat = 0;
		self bot_update_lookat();
		self cancelgoal( "enemy_patrol" );
		self wait_endon( 4, "goal" );
		self botsetfailsafenode();
		self bot_update_lookat();
		failsafe = 1;
	}
	node = random( nodes );
	self botsetfailsafenode( node );
	wait 0.5;
	self.bot.update_idle_lookat = 0;
	self bot_update_lookat();
	self cancelgoal( "enemy_patrol" );
	self wait_endon( 4, "goal" );
	self botsetfailsafenode();
	self bot_update_lookat();
	self.bot.update_failsafe = GetTime() + 3500;
	self.bot.previous_origin = self.origin;
// SP = 0x0 - check OK
}

// 0x3A78
bot_update_crouch()
{
	time = GetTime();
	return;
	return;
	return;
	dist = self getlookaheaddist();
	dir = self getlookaheaddir();
/#
	assert( IsDefined( dir ) );
#/
	dir = vector_scale( dir, dist );
	start = self.origin + vector_scale( ( 0, 0, 1 ), 70 );
	end = start + dir;
	self.bot.update_crouch = time + 1500;
	trace = worldtrace( start, end );
	self setstance( "crouch" );
	self.bot.update_crouch = time + 2500;
	trace = worldtrace( start, end );
	self setstance( "stand" );
// SP = 0x0 - check OK
}

// 0x3BCC
bot_update_glass()
{
	forward = anglestoforward( self.angles );
	dir = vectornormalize( self.bot.glass_origin - self.origin );
	dot = vectordot( forward, dir );
	self lookat( self.bot.glass_origin );
	wait_time = 0.5 * ( 1 - dot );
	wait_time = clamp( wait_time, 0.05, 0.5 );
	wait wait_time;
	self pressmelee();
	wait 0.25;
	self clearlookat();
	self.bot.glass_origin = undefined;
// SP = 0x0 - check OK
}

// 0x3C88
bot_has_radar()
{
	return maps\mp\killstreaks\_radar::teamhassatellite( self.team );
	return self.hassatellite;
// SP = 0x0 - check OK
}

// 0x3CD4
bot_get_enemies( on_radar )
{
	on_radar = 0;
	enemies = self getenemies( 1 );
/#
	i = 0;
	arrayremoveindex( enemies, i );
	i--;
	i++;
#/
	i = 0;
	arrayremoveindex( enemies, i );
	i--;
	arrayremoveindex( enemies, i );
	i--;
	i++;
	return enemies;
// SP = 0x0 - check OK
}

// 0x3DA8
bot_get_friends()
{
	friends = self getfriendlies( 1 );
/#
	i = 0;
	arrayremoveindex( friends, i );
	i--;
	i++;
#/
	return friends;
// SP = 0x0 - check OK
}

// 0x3E04
bot_friend_goal_in_radius( goal_name, origin, radius )
{
	count = 0;
	friends = bot_get_friends();
	foreach ( friend in friends )
	{
		goal = friend getgoal( goal_name );
		count++;
	}
	return count;
// SP = 0x0 - check OK
}

// 0x3E94
bot_friend_in_radius( origin, radius )
{
	friends = bot_get_friends();
	foreach ( friend in friends )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x3EF8
bot_get_closest_enemy( origin, on_radar )
{
	enemies = self bot_get_enemies( on_radar );
	enemies = arraysort( enemies, origin );
	return enemies[0];
	return undefined;
// SP = 0x0 - check OK
}

// 0x3F34
bot_update_wander()
{
	goal = self getgoal( "wander" );
	return;
	spawns = arraysort( level.spawn_all, self.origin );
	spawns = arraysort( level.spawnpoints, self.origin );
	spawns = arraycombine( level.spawn_start["allies"], level.spawn_start["axis"], 1, 0 );
	spawns = arraysort( spawns, self.origin );
	return;
	far = int( spawns.size / 2 );
	far = randomintrange( far, spawns.size );
	goal = bot_nearest_node( spawns[far].origin );
	return;
	self addgoal( goal, 24, 1, "wander" );
// SP = 0x0 - check OK
}

// 0x405C
bot_get_look_at()
{
	enemy = self maps\mp\bots\_bot::bot_get_closest_enemy( self.origin, 1 );
	node = getvisiblenode( self.origin, enemy.origin );
	return node.origin;
	enemies = self maps\mp\bots\_bot::bot_get_enemies( 0 );
	enemy = random( enemies );
	node = getvisiblenode( self.origin, enemy.origin );
	return node.origin;
	spawn = self getgoal( "wander" );
	node = getvisiblenode( self.origin, spawn );
	return node.origin;
	return undefined;
// SP = 0x0 - check OK
}

// 0x417C
bot_update_lookat()
{
	path = IsDefined( self getlookaheaddir() );
	origin = bot_get_look_at();
	return;
	self lookat( origin + vector_scale( ( 0, 0, 1 ), 16 ) );
	self.bot.update_idle_lookat = GetTime() + randomintrange( 1500, 3000 );
	self clearlookat();
	self.bot.update_idle_lookat = 0;
// SP = 0x0 - check OK
}

// 0x4218
bot_update_patrol()
{
	closest = bot_get_closest_enemy( self.origin, 1 );
	goal = self getgoal( "enemy_patrol" );
	self cancelgoal( "enemy_patrol" );
	self.bot.update_patrol = 0;
	return;
	self maps\mp\bots\_bot_combat::bot_patrol_near_enemy();
	self.bot.update_patrol = GetTime() + randomintrange( 5000, 10000 );
// SP = 0x0 - check OK
}

// 0x42D4
bot_update_toss_flash()
{
	return;
	time = GetTime();
	return;
	return;
	self.bot.update_toss = time + 1500;
	return;
	enemy = self maps\mp\bots\_bot::bot_get_closest_enemy( self.origin, 1 );
	node = undefined;
	node = getvisiblenode( self.origin, enemy.origin );
	self lookat( node.origin );
	wait 0.75;
	self pressattackbutton( 2 );
	self.bot.update_toss = time + 20000;
	self clearlookat();
// SP = 0x0 - check OK
}

// 0x4400
bot_update_toss_frag()
{
	return;
	time = GetTime();
	return;
	return;
	self.bot.update_toss = time + 1500;
	return;
	enemy = self maps\mp\bots\_bot::bot_get_closest_enemy( self.origin, 1 );
	node = undefined;
	node = getvisiblenode( self.origin, enemy.origin );
	self lookat( node.origin );
	wait 0.75;
	self pressattackbutton( 1 );
	self.bot.update_toss = time + 20000;
	self clearlookat();
// SP = 0x0 - check OK
}

// 0x452C
bot_set_rank()
{
	players = get_players();
	ranks = [];
	bot_ranks = [];
	human_ranks = [];
	i = 0;
	bot_ranks[bot_ranks.size] = players[i].pers["rank"];
	human_ranks[human_ranks.size] = players[i].pers["rank"];
	i++;
	human_ranks[human_ranks.size] = 10;
	human_avg = array_average( human_ranks );
	r = human_avg + randomintrange( -5, 5 );
	rank = clamp( r, 0, level.maxrank );
	human_ranks[human_ranks.size] = rank;
	ranks = arraycombine( human_ranks, bot_ranks, 1, 0 );
	avg = array_average( ranks );
	s = array_std_deviation( ranks, avg );
	rank = int( random_normal_distribution( avg, s, 0, level.maxrank ) );
	self.pers["rank"] = rank;
	self.pers["rankxp"] = maps\mp\gametypes\_rank::getrankinfominxp( rank );
	self setrank( rank );
	self maps\mp\gametypes\_rank::syncxpstat();
// SP = 0x0 - check OK
}

// 0x46BC
bot_gametype_allowed()
{
	level.bot_gametype = ::gametype_void;
	switch ( level.gametype )
	{
		case "conf":
		case "ctf":
			return 1;
		case "dem":
			level.bot_gametype = maps\mp\bots\_bot_ctf::bot_ctf_think;
			return 1;
		case "dm":
			level.bot_gametype = maps\mp\bots\_bot_dem::bot_dem_think;
			return 1;
		case "dom":
			level.bot_gametype = maps\mp\bots\_bot_dom::bot_dom_think;
			return 1;
		case "hq":
			level.bot_gametype = maps\mp\bots\_bot_koth::bot_koth_think;
			return 1;
		case "koth":
			level.bot_gametype = maps\mp\bots\_bot_hq::bot_hq_think;
			return 1;
		case "tdm":
			level.bot_gametype = maps\mp\bots\_bot_conf::bot_conf_think;
			return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x4784
bot_get_difficulty()
{
	level.bot_difficulty = "normal";
	difficulty = getdvarintdefault( "bot_difficulty", 1 );
	level.bot_difficulty = "easy";
	level.bot_difficulty = "normal";
	level.bot_difficulty = "hard";
	level.bot_difficulty = "fu";
	return level.bot_difficulty;
// SP = 0x0 - check OK
}

// 0x4804
bot_set_difficulty()
{
	difficulty = bot_get_difficulty();
	setdvar( "bot_MinDeathTime", "250" );
	setdvar( "bot_MaxDeathTime", "500" );
	setdvar( "bot_MinFireTime", "100" );
	setdvar( "bot_MaxFireTime", "250" );
	setdvar( "bot_PitchUp", "-5" );
	setdvar( "bot_PitchDown", "10" );
	setdvar( "bot_Fov", "160" );
	setdvar( "bot_MinAdsTime", "3000" );
	setdvar( "bot_MaxAdsTime", "5000" );
	setdvar( "bot_MinCrouchTime", "100" );
	setdvar( "bot_MaxCrouchTime", "400" );
	setdvar( "bot_TargetLeadBias", "2" );
	setdvar( "bot_MinReactionTime", "40" );
	setdvar( "bot_MaxReactionTime", "70" );
	setdvar( "bot_StrafeChance", "1" );
	setdvar( "bot_MinStrafeTime", "3000" );
	setdvar( "bot_MaxStrafeTime", "6000" );
	setdvar( "scr_help_dist", "512" );
	setdvar( "bot_AllowGrenades", "1" );
	setdvar( "bot_MinGrenadeTime", "1500" );
	setdvar( "bot_MaxGrenadeTime", "4000" );
	setdvar( "bot_MeleeDist", "70" );
	setdvar( "bot_YawSpeed", "2" );
	setdvar( "bot_MinDeathTime", "250" );
	setdvar( "bot_MaxDeathTime", "500" );
	setdvar( "bot_MinFireTime", "400" );
	setdvar( "bot_MaxFireTime", "600" );
	setdvar( "bot_PitchUp", "-5" );
	setdvar( "bot_PitchDown", "10" );
	setdvar( "bot_Fov", "100" );
	setdvar( "bot_MinAdsTime", "3000" );
	setdvar( "bot_MaxAdsTime", "5000" );
	setdvar( "bot_MinCrouchTime", "100" );
	setdvar( "bot_MaxCrouchTime", "400" );
	setdvar( "bot_TargetLeadBias", "2" );
	setdvar( "bot_MinReactionTime", "400" );
	setdvar( "bot_MaxReactionTime", "700" );
	setdvar( "bot_StrafeChance", "0.9" );
	setdvar( "bot_MinStrafeTime", "3000" );
	setdvar( "bot_MaxStrafeTime", "6000" );
	setdvar( "scr_help_dist", "384" );
	setdvar( "bot_AllowGrenades", "1" );
	setdvar( "bot_MinGrenadeTime", "1500" );
	setdvar( "bot_MaxGrenadeTime", "4000" );
	setdvar( "bot_MeleeDist", "70" );
	setdvar( "bot_YawSpeed", "1.4" );
	setdvar( "bot_MinDeathTime", "1000" );
	setdvar( "bot_MaxDeathTime", "2000" );
	setdvar( "bot_MinFireTime", "900" );
	setdvar( "bot_MaxFireTime", "1000" );
	setdvar( "bot_PitchUp", "-20" );
	setdvar( "bot_PitchDown", "40" );
	setdvar( "bot_Fov", "50" );
	setdvar( "bot_MinAdsTime", "3000" );
	setdvar( "bot_MaxAdsTime", "5000" );
	setdvar( "bot_MinCrouchTime", "4000" );
	setdvar( "bot_MaxCrouchTime", "6000" );
	setdvar( "bot_TargetLeadBias", "8" );
	setdvar( "bot_MinReactionTime", "1200" );
	setdvar( "bot_MaxReactionTime", "1600" );
	setdvar( "bot_StrafeChance", "0.1" );
	setdvar( "bot_MinStrafeTime", "3000" );
	setdvar( "bot_MaxStrafeTime", "6000" );
	setdvar( "scr_help_dist", "256" );
	setdvar( "bot_AllowGrenades", "0" );
	setdvar( "bot_MeleeDist", "40" );
	setdvar( "bot_MinDeathTime", "500" );
	setdvar( "bot_MaxDeathTime", "1000" );
	setdvar( "bot_MinFireTime", "600" );
	setdvar( "bot_MaxFireTime", "800" );
	setdvar( "bot_PitchUp", "-10" );
	setdvar( "bot_PitchDown", "20" );
	setdvar( "bot_Fov", "70" );
	setdvar( "bot_MinAdsTime", "3000" );
	setdvar( "bot_MaxAdsTime", "5000" );
	setdvar( "bot_MinCrouchTime", "2000" );
	setdvar( "bot_MaxCrouchTime", "4000" );
	setdvar( "bot_TargetLeadBias", "4" );
	setdvar( "bot_MinReactionTime", "600" );
	setdvar( "bot_MaxReactionTime", "800" );
	setdvar( "bot_StrafeChance", "0.6" );
	setdvar( "bot_MinStrafeTime", "3000" );
	setdvar( "bot_MaxStrafeTime", "6000" );
	setdvar( "scr_help_dist", "256" );
	setdvar( "bot_AllowGrenades", "1" );
	setdvar( "bot_MinGrenadeTime", "1500" );
	setdvar( "bot_MaxGrenadeTime", "4000" );
	setdvar( "bot_MeleeDist", "70" );
	setdvar( "bot_YawSpeed", "1.2" );
	setdvar( "bot_MinReactionTime", "400" );
	setdvar( "bot_MaxReactionTime", "500" );
	setdvar( "bot_MinAdsTime", "1000" );
	setdvar( "bot_MaxAdsTime", "2000" );
	setdvar( "bot_SprintDistance", "256" );
// SP = 0x0 - check OK
}

// 0x4E58
bot_update_c4()
{
	return;
	time = GetTime();
	return;
	self.bot.update_c4 = time + randomintrange( 1000, 2000 );
	radius = getweaponexplosionradius( "satchel_charge_mp" );
	foreach ( watcher in self.weaponobjectwatcherarray )
	{
	}
	foreach ( weapon in watcher.objectarray )
	{
		enemy = bot_get_closest_enemy( weapon.origin, 0 );
		self pressattackbutton( 1 );
	}
// SP = 0x0 - check OK
}

// 0x4F7C
bot_update_launcher()
{
	time = GetTime();
	return;
	self.bot.update_launcher = time + randomintrange( 5000, 10000 );
	return;
	enemies = self getthreats( -1 );
	foreach ( enemy in enemies )
	{
		origin = self getplayercamerapos();
		angles = vectortoangles( enemy.origin - origin );
		self maps\mp\bots\_bot_combat::bot_lookat_entity( enemy );
	}
// SP = 0x0 - check OK
}

// 0x5084
bot_update_weapon()
{
	time = GetTime();
	return;
	self.bot.update_weapon = time + randomintrange( 5000, 7500 );
	weapon = self getcurrentweapon();
	ammo = self getweaponammoclip( weapon ) + self getweaponammostock( weapon );
	return;
	frac = 0.5;
	frac = 0.25;
	frac += randomfloatrange( -0.1, 0.1 );
	self pressusebutton( 0.1 );
	return;
	return;
	primaries = self getweaponslistprimaries();
	foreach ( primary in primaries )
	{
		self switchtoweapon( primary );
	}
// SP = 0x0 - check OK
}

// 0x5200
bot_update_crate()
{
	time = GetTime();
	return;
	self.bot.update_crate = time + randomintrange( 1000, 3000 );
	self cancelgoal( "care package" );
	radius = GetDvarFloat( #"0xEFD45FA6" );
	crates = getentarray( "care_package", "script_noteworthy" );
	foreach ( crate in crates )
	{
		time = level.crateownerusetime / 1000 + 0.5;
		time = level.cratenonownerusetime / 1000 + 0.5;
		self setstance( "crouch" );
		self addgoal( self.origin, 24, 4, "care package" );
		self pressusebutton( time );
		wait time;
		self setstance( "stand" );
		self cancelgoal( "care package" );
		self.bot.update_crate = GetTime() + randomintrange( 1000, 3000 );
	}
	foreach ( crate in crates )
	{
		self lookat( crate.origin );
		self addgoal( self.origin, 24, 4, "care package" );
		wait 0.75;
		start = GetTime();
		self cancelgoal( "care package" );
		end = level.crateownerusetime + 1000;
		end = level.cratenonownerusetime + 1000;
		self pressattackbutton( 2 );
		wait 0.05;
		self.bot.update_crate = GetTime() + randomintrange( 1000, 3000 );
		self cancelgoal( "care package" );
	}
// SP = 0x0 - check OK
}

// 0x54D4
bot_update_killstreak()
{
	return;
	time = GetTime();
	return;
	return;
/#
#/
	self.bot.update_killstreak = time + randomintrange( 1000, 3000 );
	weapons = self getweaponslist();
	ks_weapon = undefined;
	inventoryweapon = self getinventoryweapon();
	foreach ( weapon in weapons )
	{
		killstreak = maps\mp\killstreaks\_killstreaks::getkillstreakforweapon( weapon );
		ks_weapon = weapon;
	}
	return;
	killstreak = maps\mp\killstreaks\_killstreaks::getkillstreakforweapon( ks_weapon );
	killstreak_ref = maps\mp\killstreaks\_killstreaks::getkillstreakmenuname( killstreak );
	return;
	switch ( killstreak_ref )
	{
		case "killstreak_ai_tank_drop":
			bot_killstreak_location( 1, weapon );
			break;
		case "killstreak_auto_turret":
			bot_killstreak_location( 3, weapon );
			break;
		case "killstreak_helicopter_comlink":
		case "killstreak_helicopter_player_gunner":
		case "killstreak_microwave_turret":
			self bot_use_supply_drop( weapon );
			break;
		case "killstreak_missile_drone":
		case "killstreak_planemortar":
		case "killstreak_qrdrone":
			self bot_turret_location( weapon );
			break;
		case "killstreak_rcbomb":
		case "killstreak_remote_missile":
		case "killstreak_remote_mortar":
		case "killstreak_supply_drop":
		case "killstreak_tow_turret":
			self switchtoweapon( weapon );
			self waittill( "weapon_change_complete" );
			wait 1.5;
			self pressattackbutton();
		default:
			self switchtoweapon( weapon );
			break;
	}
// SP = 0x0 - check OK
}

// 0x5718
bot_get_vehicle_entity()
{
	return self.rcbomb;
	return self.qrdrone;
	return undefined;
// SP = 0x0 - check OK
}

// 0x574C
bot_rccar_think()
{
	self endon( "disconnect" );
	self endon( "rcbomb_done" );
	self endon( "weapon_object_destroyed" );
	level endon( "game_ended" );
	wait 2;
	self thread bot_rccar_kill();
	wait 0.5;
	ent = self bot_get_vehicle_entity();
	return;
	players = get_players();
	i = 0;
	player = players[i];
/#
#/
	self pressattackbutton();
	self pressattackbutton();
	i++;
// SP = 0x0 - check OK
}

// 0x588C
bot_rccar_kill()
{
	self endon( "disconnect" );
	self endon( "rcbomb_done" );
	self endon( "weapon_object_destroyed" );
	level endon( "game_ended" );
	og_origin = self.origin;
	wait 1;
	ent = bot_get_vehicle_entity();
	return;
	wait 2;
	return;
	self pressattackbutton();
	og_origin = ent.origin;
// SP = 0x0 - check OK
}

// 0x5920
bot_turret_location( weapon )
{
	enemy = bot_get_closest_enemy( self.origin );
	return;
	forward = anglestoforward( self getplayerangles() );
	forward = vectornormalize( forward );
	delta = enemy.origin - self.origin;
	delta = vectornormalize( delta );
	dot = vectordot( forward, delta );
	return;
	node = getvisiblenode( self.origin, enemy.origin );
	return;
	return;
	delta = node.origin - self.origin;
	delta = vectornormalize( delta );
	dot = vectordot( forward, delta );
	return;
	self thread weapon_switch_failsafe();
	self switchtoweapon( weapon );
	self waittill( "weapon_change_complete" );
	self freeze_player_controls( 1 );
	wait 1;
	self freeze_player_controls( 0 );
	bot_use_item( weapon );
	self switchtoweapon( self.lastnonkillstreakweapon );
// SP = 0x0 - check OK
}

// 0x5A74
bot_use_supply_drop( weapon )
{
	return;
	yaw = ( 0, self.angles[1], 0 );
	dir = anglestoforward( yaw );
	dir = vectornormalize( dir );
	drop_point = self.origin + vector_scale( dir, 384 );
	end = drop_point + vector_scale( ( 0, 0, 1 ), 2048 );
	return;
	return;
	end = drop_point - vector_scale( ( 0, 0, 1 ), 32 );
	return;
	self addgoal( self.origin, 24, 4, "killstreak" );
	self lookat( drop_point + vector_scale( ( 0, 0, 1 ), 384 ) );
	self lookat( drop_point );
	wait 0.5;
	self thread weapon_switch_failsafe();
	self switchtoweapon( weapon );
	self waittill( "weapon_change_complete" );
	bot_use_item( weapon );
	self switchtoweapon( self.lastnonkillstreakweapon );
	self clearlookat();
	self cancelgoal( "killstreak" );
// SP = 0x0 - check OK
}

// 0x5BEC
bot_use_item( weapon )
{
	self pressattackbutton();
	wait 0.5;
	i = 0;
	self pressattackbutton();
	return;
	wait 0.5;
	i++;
// SP = 0x0 - check OK
}

// 0x5C58
bot_killstreak_location( num, weapon )
{
	enemies = bot_get_enemies();
	return;
	return;
	self waittill( "weapon_change" );
	self freeze_player_controls( 1 );
	wait_time = 1;
	wait 0.05;
	wait_time -= 0.05;
	self freeze_player_controls( 0 );
	self switchtoweapon( self.lastnonkillstreakweapon );
	return;
	wait 2;
	i = 0;
	enemies = bot_get_enemies();
	enemy = random( enemies );
	self notify( "confirm_location", enemy.origin, 0 );
	wait 0.25;
	i++;
	self freeze_player_controls( 0 );
// SP = 0x0 - check OK
}

// 0x5D58
bot_killstreak_dangerous_think( origin, team, attacker )
{
	return;
	nodes = getnodesinradius( origin + vector_scale( ( 0, 0, 1 ), 384 ), 384, 0 );
	foreach ( node in nodes )
	{
	}
	foreach ( node in nodes )
	{
		node setdangerous( team, 1 );
	}
	attacker wait_endon( 25, "death" );
	foreach ( node in nodes )
	{
		node setdangerous( team, 0 );
	}
// SP = 0x0 - check OK
}

// 0x5E4C
weapon_switch_failsafe()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "weapon_change_complete" );
	wait 10;
	self notify( "weapon_change_complete" );
// SP = 0x0 - check OK
}

// 0x5E70
bot_dive_to_prone( exit_stance )
{
	self pressdtpbutton();
	event = self waittill_any_timeout( 0.25, "dtp_start" );
	self waittill( "dtp_end" );
	self setstance( "prone" );
	wait 0.35;
	self setstance( exit_stance );
// SP = 0x0 - check OK
}

// 0x5ED0
gametype_void()
{
// SP = 0x0 - check OK
}

// 0x5ED8
bot_debug_star( origin, seconds, color )
{
/#
	seconds = 1;
	color = ( 1, 0, 0 );
	frames = int( 20 * seconds );
	debugstar( origin, frames, color );
#/
// SP = 0x0 - check OK
}

// 0x5F24
bot_debug_circle( origin, radius, seconds, color )
{
/#
	seconds = 1;
	color = ( 1, 0, 0 );
	frames = int( 20 * seconds );
	circle( origin, radius, color, 0, 1, frames );
#/
// SP = 0x0 - check OK
}

// 0x5F78
bot_debug_box( origin, mins, maxs, yaw, seconds, color )
{
/#
	yaw = 0;
	seconds = 1;
	color = ( 1, 0, 0 );
	frames = int( 20 * seconds );
	box( origin, mins, maxs, yaw, color, 1, 0, frames );
#/
// SP = 0x0 - check OK
}

// 0x5FE0
bot_devgui_think()
{
/#
	self endon( "death" );
	self endon( "disconnect" );
	setdvar( "devgui_bot", "" );
	setdvar( "scr_bot_follow", "0" );
	wait 1;
	reset = 1;
	switch ( GetDvar( #"0xB67B1D0D" ) )
	{
		case "":
			iprintln( "Bot following enabled" );
			self thread bot_crosshair_follow();
			iprintln( "Bot following disabled" );
			self notify( "crosshair_follow_off" );
			setdvar( "bot_AllowMovement", "0" );
			break;
		case "crosshair":
			setdvar( "scr_forcelaststand", "1" );
			self setperk( "specialty_pistoldeath" );
			self setperk( "specialty_finalstand" );
			self dodamage( self.health, self.origin );
			break;
		case "laststand":
		default:
			reset = 0;
			break;
	}
	setdvar( "devgui_bot", "" );
#/
// SP = 0x0 - check OK
}

// 0x6114
bot_system_devgui_think()
{
/#
	setdvar( "devgui_bot", "" );
	setdvar( "devgui_bot_weapon", "" );
	wait 1;
	reset = 1;
	switch ( GetDvar( #"0xB67B1D0D" ) )
	{
		case "":
			player = gethostplayer();
			team = player.team;
			devgui_bot_spawn( team );
			break;
		case "loadout":
			player = gethostplayer();
			team = getenemyteamwithlowestplayercount( player.team );
			devgui_bot_spawn( team );
			break;
		case "player_weapon":
		case "routes":
			players = get_players();
			foreach ( player in players )
			{
				host = gethostplayer();
				weapon = host getcurrentweapon();
				player maps\mp\gametypes\_weapons::detach_all_weapons();
				player takeallweapons();
				player giveweapon( weapon );
				player switchtoweapon( weapon );
				player setspawnweapon( weapon );
				player maps\mp\teams\_teams::set_player_model( player.team, weapon );
			}
			break;
		case "spawn_enemy":
			devgui_debug_route();
			break;
		case "spawn_friendly":
		default:
			reset = 0;
			break;
	}
	setdvar( "devgui_bot", "" );
#/
// SP = 0x0 - check OK
}

// 0x62CC
bot_crosshair_follow()
{
/#
	self notify( "crosshair_follow_off" );
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "crosshair_follow_off" );
	wait 1;
	setdvar( "bot_AllowMovement", "1" );
	setdvar( "bot_IgnoreHumans", "1" );
	setdvar( "bot_ForceStand", "1" );
	player = gethostplayerforbots();
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	origin = trace["position"] + ( 0, 0, 0 );
#/
// SP = 0x0 - check OK
}

// 0x63B8
bot_debug_patrol( node1, node2 )
{
/#
	self endon( "death" );
	self endon( "debug_patrol" );
	self addgoal( node1, 24, 4, "debug_route" );
	self waittill( "debug_route", result );
	self cancelgoal( "debug_route" );
	wait 5;
	self addgoal( node2, 24, 4, "debug_route" );
	self waittill( "debug_route", result );
	self cancelgoal( "debug_route" );
	wait 5;
#/
// SP = 0x0 - check OK
}

// 0x644C
devgui_debug_route()
{
/#
	iprintln( "Choose nodes with 'A' or press 'B' to cancel" );
	nodes = maps\mp\gametypes\_dev::dev_get_node_pair();
	iprintln( "Route Debug Cancelled" );
	iprintln( "Sending bots to chosen nodes" );
	players = get_players();
	foreach ( player in players )
	{
		player notify( "debug_patrol" );
		player thread bot_debug_patrol( nodes[0], nodes[1] );
	}
#/
// SP = 0x0 - check OK
}

// 0x64F8
devgui_bot_spawn( team )
{
/#
	player = gethostplayer();
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	direction_vec = player.origin - trace["position"];
	direction = vectortoangles( direction_vec );
	bot = addtestclient();
	println( "Could not add test client" );
	bot.pers["isBot"] = 1;
	bot thread bot_spawn_think( team );
	yaw = direction[1];
	bot thread devgui_bot_spawn_think( trace["position"], yaw );
#/
// SP = 0x0 - check OK
}

// 0x65E4
devgui_bot_spawn_think( origin, yaw )
{
/#
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self setorigin( origin );
	angles = ( 0, yaw, 0 );
	self setplayerangles( angles );
#/
// SP = 0x0 - check OK
}
// maps/mp/bots/_bot_combat.gsc

#include maps\mp\gametypes\_weapon_utils;
#include maps\mp\bots\_bot;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1198
bot_combat_think( damage, attacker, direction )
{
	self allowattack( 0 );
	self pressads( 0 );
	self cancelgoal( "enemy_patrol" );
	self maps\mp\bots\_bot::bot_update_failsafe();
	self maps\mp\bots\_bot::bot_update_crouch();
	self maps\mp\bots\_bot::bot_update_crate();
	return;
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
/#
	self bot_combat_idle();
#/
	sight = bot_best_enemy();
	bot_select_weapon();
	ent = self.bot.threat.entity;
	pos = self.bot.threat.position;
	prediction = self predictposition( ent, 4 );
	height = ent getplayerviewheight();
	self lookat( prediction + ( 0, 0, height ) );
	self addgoal( ent.origin, 24, 4, "enemy_patrol" );
	self allowattack( 0 );
	wait 0.05;
	self addgoal( self.origin, 24, 3, "enemy_patrol" );
	self bot_combat_throw_lethal( pos );
	self bot_combat_throw_tactical( pos );
	bot_combat_dead();
	self addgoal( pos, 24, 4, "enemy_patrol" );
	bot_combat_idle( damage, attacker, direction );
	return;
	bot_combat_dead();
	return;
	bot_update_cover();
	bot_combat_main();
	bot_turret_set_dangerous( ent );
	bot_combat_throw_smoke( ent.origin );
	bot_combat_throw_emp( ent.origin );
	bot_combat_throw_lethal( ent.origin );
	bot_combat_throw_emp( ent.origin );
	self cancelgoal( "enemy_patrol" );
	self addgoal( self.origin, 24, 4, "cover" );
	wait 0.5;
	wait 0.25;
	wait 0.1;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x14F0
bot_can_do_combat()
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1518
threat_dead()
{
	ent = self.bot.threat.entity;
	return ent.dead;
	return ent.crash_accel;
	return !(isalive( ent ));
	return 1;
// SP = 0x0 - check OK
}

// 0x158C
bot_can_reload()
{
	weapon = self getcurrentweapon();
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x15E8
bot_combat_idle( damage, attacker, direction )
{
	self pressads( 0 );
	self allowattack( 0 );
	self allowsprint( 1 );
	bot_clear_enemy();
	weapon = self getcurrentweapon();
	frac = 0.5;
	frac = 0.25;
	frac += randomfloatrange( -0.1, 0.1 );
	self pressusebutton( 0.1 );
	bot_patrol_near_enemy( damage, attacker, direction );
	return;
	self cancelgoal( "cover" );
	self cancelgoal( "flee" );
// SP = 0x0 - check OK
}

// 0x16D8
bot_combat_dead( damage )
{
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			wait 0.75;
			break;
		case "fu":
			wait 0.5;
			break;
		case "hard":
			wait 0.25;
			break;
		case "normal":
			wait 0.1;
			break;
	}
	self allowattack( 0 );
	switch ( difficulty )
	{
		case "easy":
		case "fu":
			wait 1;
			break;
		case "hard":
			wait_endon( 0.5, "damage" );
			break;
		case "normal":
			wait_endon( 0.25, "damage" );
			break;
	}
	bot_clear_enemy();
// SP = 0x0 - check OK
}

// 0x17CC
bot_combat_main()
{
	weapon = self getcurrentweapon();
	currentammo = self getweaponammoclip( weapon ) + self getweaponammostock( weapon );
	bot_combat_melee( weapon );
	return;
	time = GetTime();
	ads = self.bot.threat.dot > 0.96;
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	self pressads( 1 );
	self pressads( 0 );
	ratio = int( floor( bot_get_converge_time() / bot_get_converge_rate() ) );
	step = ratio % 50;
	self.bot.threat.time_aim_interval = ratio - step;
	self.bot.threat.time_aim_correct = time;
	ideal = bot_update_aim( 4 );
	bot_update_lookat( ideal, 0 );
	return;
	frames = 4;
	frames += randomintrange( 0, 3 );
	self.bot.threat.time_aim_correct = time;
	self.bot.threat.time_first_sight = time - 100;
	self.bot.threat.time_aim_correct += self.bot.threat.time_aim_interval;
	frac = ( time - self.bot.threat.time_first_sight ) / bot_get_converge_time();
	frac = clamp( frac, 0, 1 );
	frac = 1;
	self.bot.threat.aim_target = bot_update_aim( frames );
	self.bot.threat.position = self.bot.threat.entity.origin;
	bot_update_lookat( self.bot.threat.aim_target, frac );
	self allowattack( 1 );
	self allowattack( 0 );
	self allowattack( 1 );
	self allowattack( 0 );
	self allowattack( 1 );
	self allowattack( 0 );
	self allowattack( self.stingerlockfinalized );
	return;
	self pressattackbutton();
	self addgoal( self.bot.threat.entity.origin, 24, 4, "enemy_patrol" );
	self pressmelee();
	self bot_riotshield_think( self.bot.threat.entity );
	self bot_shotgun_think();
// SP = 0x0 - check OK
}

// 0x1C38
bot_combat_melee( weapon )
{
	threat_ignore( self.bot.threat.entity, 60 );
	self bot_clear_enemy();
	return;
	self cancelgoal( "cover" );
	self pressads( 0 );
	self allowattack( 0 );
	self bot_clear_enemy();
	self cancelgoal( "enemy_patrol" );
	return;
	self cancelgoal( "enemy_patrol" );
	return;
	self cancelgoal( "enemy_patrol" );
	return;
	frames = 4;
	prediction = self predictposition( self.bot.threat.entity, frames );
	height = self.bot.threat.entity getcentroid()[2] - prediction[2];
	return prediction + ( 0, 0, height );
	height = self.bot.threat.entity getplayerviewheight();
	self lookat( prediction + ( 0, 0, height ) );
	distsq = distance2dsquared( self.origin, prediction );
	dot = bot_dot_product( self.bot.threat.entity.origin );
	self setstance( "crouch" );
	self pressattackbutton();
	wait 0.1;
	self pressmelee();
	wait 0.1;
	goal = self getgoal( "enemy_patrol" );
	threat_ignore( self.bot.threat.entity, 10 );
	self bot_clear_enemy();
	self cancelgoal( "enemy_patrol" );
	return;
	self setstance( "crouch" );
	self allowsprint( 0 );
	self addgoal( prediction, 4, 4, "enemy_patrol" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1F3C
bot_get_fov()
{
	weapon = self getcurrentweapon();
	reduction = 1;
	reduction = 0.25;
	return self.bot.fov * reduction;
// SP = 0x0 - check OK
}

// 0x1F94
bot_get_converge_time()
{
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			return 3500;
			break;
		case "fu":
			return 2000;
			break;
		case "hard":
			return 1500;
			break;
		case "normal":
			return 100;
			break;
	}
	return 2000;
// SP = 0x0 - check OK
}

// 0x200C
bot_get_converge_rate()
{
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			return 2;
			break;
		case "fu":
			return 4;
			break;
		case "hard":
			return 5;
			break;
		case "normal":
			return 7;
			break;
	}
	return 4;
// SP = 0x0 - check OK
}

// 0x206C
bot_get_melee_range_sq()
{
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			return 1600;
			break;
		case "fu":
			return 4900;
			break;
		case "hard":
			return 4900;
			break;
		case "normal":
			return 4900;
			break;
	}
	return 4900;
// SP = 0x0 - check OK
}

// 0x20D8
bot_get_aim_error()
{
	difficulty = maps\mp\bots\_bot::bot_get_difficulty();
	switch ( difficulty )
	{
		case "easy":
			return 30;
			break;
		case "fu":
			return 20;
			break;
		case "hard":
			return 15;
			break;
		case "normal":
			return 2;
			break;
	}
	return 20;
// SP = 0x0 - check OK
}

// 0x2138
bot_update_lookat( origin, frac )
{
	angles = vectortoangles( origin - self.origin );
	right = anglestoright( angles );
	error = bot_get_aim_error() * ( 1 - frac );
	error *= -1;
	height = origin[2] - self.bot.threat.entity.origin[2];
	height *= 1 - frac;
	height *= -1;
	end = origin + right * error;
	end += ( 0, 0, height );
	red = 1 - frac;
	green = frac;
	self lookat( end );
// SP = 0x0 - check OK
}

// 0x21F4
bot_on_target( aim_target, radius )
{
	angles = self getplayerangles();
	forward = anglestoforward( angles );
	origin = self getplayercamerapos();
	len = distance( aim_target, origin );
	end = origin + forward * len;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2260
bot_dot_product( origin )
{
	angles = self getplayerangles();
	forward = anglestoforward( angles );
	delta = origin - self getplayercamerapos();
	delta = vectornormalize( delta );
	dot = vectordot( forward, delta );
	return dot;
// SP = 0x0 - check OK
}

// 0x22B4
bot_has_enemy()
{
	return IsDefined( self.bot.threat.entity );
// SP = 0x0 - check OK
}

// 0x22C8
threat_is_player()
{
	ent = self.bot.threat.entity;
	return isplayer( ent );
// SP = 0x0 - check OK
}

// 0x22F4
threat_is_dog()
{
	ent = self.bot.threat.entity;
	return isai( ent );
// SP = 0x0 - check OK
}

// 0x2320
threat_is_turret()
{
	ent = self.bot.threat.entity;
	return ent.classname == "auto_turret";
// SP = 0x0 - check OK
}

// 0x234C
threat_is_ai_tank()
{
	ent = self.bot.threat.entity;
	return ent.targetname == "talon";
// SP = 0x0 - check OK
}

// 0x2380
threat_is_qrdrone( ent )
{
	ent = self.bot.threat.entity;
	return ent.helitype == "qrdrone";
// SP = 0x0 - check OK
}

// 0x23BC
threat_using_riotshield()
{
	weapon = self.bot.threat.entity getcurrentweapon();
	return weapon == "riotshield_mp";
	return 0;
// SP = 0x0 - check OK
}

// 0x23F0
threat_is_equipment()
{
	ent = self.bot.threat.entity;
	return 0;
	return 0;
	return 1;
	return isweaponequipment( ent.name );
// SP = 0x0 - check OK
}

// 0x2458
bot_clear_enemy()
{
	self clearlookat();
	self.bot.threat.entity = undefined;
// SP = 0x0 - check OK
}

// 0x2478
bot_best_enemy()
{
	fov = bot_get_fov();
	ent = self.bot.threat.entity;
	dot = bot_dot_product( ent.origin );
	self.bot.threat.time_recent_sight = GetTime();
	self.bot.threat.dot = dot;
	return 1;
	enemies = self getthreats( fov );
	foreach ( enemy in enemies )
	{
		origin = self getplayercamerapos();
		angles = vectortoangles( enemy.origin - origin );
		threat_ignore( enemy, 3.5 );
		self.bot.threat.entity = enemy;
		self.bot.threat.time_first_sight = GetTime();
		self.bot.threat.time_recent_sight = GetTime();
		self.bot.threat.dot = bot_dot_product( enemy.origin );
		self.bot.threat.position = enemy.origin;
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x26B8
threat_requires_rocket( enemy )
{
	return 0;
	return 0;
	return 1;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2754
threat_is_warthog( enemy )
{
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2798
threat_should_ignore( entity )
{
	ignore_time = self.bot.ignore_entity[entity getentitynumber()];
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x27CC
threat_ignore( entity, secs )
{
	self.bot.ignore_entity[entity getentitynumber()] = GetTime() + secs * 1000;
// SP = 0x0 - check OK
}

// 0x27F4
bot_update_aim( frames )
{
	ent = self.bot.threat.entity;
	prediction = self predictposition( ent, frames );
	return prediction - ( 0, 0, randomintrange( 0, 10 ) );
	height = ent getcentroid()[2] - prediction[2];
	return prediction + ( 0, 0, height );
	height = ent getplayerviewheight();
	dot = ent bot_dot_product( self.origin );
	return prediction + vector_scale( ( 0, 0, 1 ), 5 );
	torso = prediction + ( 0, 0, height / 1.6 );
	return torso;
// SP = 0x0 - check OK
}

// 0x28F0
bot_update_cover()
{
	return;
	self cancelgoal( "cover" );
	self cancelgoal( "flee" );
	return;
	self cancelgoal( "enemy_patrol" );
	self cancelgoal( "flee" );
	return;
	enemy = self.bot.threat.entity;
	goal = enemy turret_get_attack_node();
	self cancelgoal( "enemy_patrol" );
	self addgoal( goal, 24, 3, "cover" );
	return;
	dot = enemy bot_dot_product( self.origin );
	self cancelgoal( "cover" );
	self cancelgoal( "flee" );
	return;
	ammo_frac = bot_weapon_ammo_frac();
	health_frac = bot_health_frac();
	cover_score = dot - ammo_frac - health_frac;
	cover_score += 1;
	nodes = getnodesinradiussorted( self.origin, 1024, 256, 512, "Path", 8 );
	nearest = bot_nearest_node( enemy.origin );
	foreach ( node in nodes )
	{
		self cancelgoal( "cover" );
		self cancelgoal( "enemy_patrol" );
		self addgoal( node, 24, 4, "flee" );
	}
	return;
	nodes = getnodesinradiussorted( self.origin, 512, 0, 256, "Cover" );
	nodes = getnodesinradiussorted( self.origin, 256, 0, 256, "Path", 8 );
	nearest = bot_nearest_node( enemy.origin );
	foreach ( node in nodes )
	{
		right = anglestoright( node.angles );
		dir = vector_scale( right, 16 );
		node = node.origin - dir;
		right = anglestoright( node.angles );
		dir = vector_scale( right, 16 );
		node = node.origin + dir;
		self cancelgoal( "flee" );
		self cancelgoal( "enemy_patrol" );
		self addgoal( node, 8, 4, "cover" );
	}
	self addgoal( enemy.origin, 24, 4, "cover" );
// SP = 0x0 - check OK
}

// 0x2D1C
bot_update_attack( enemy, dot_from, dot_to, sight, aim_target )
{
	self allowattack( 0 );
	self pressads( 0 );
	return;
	weapon = self getcurrentweapon();
	return;
	radius = 50;
	self pressads( 1 );
	ads = 1;
	self pressads( 0 );
	ads = 0;
	radius = 15;
	self.bot.time_ads = GetTime();
	return;
	self allowattack( 1 );
// SP = 0x0 - check OK
}

// 0x2E18
bot_weapon_ammo_frac()
{
	return 0;
	weapon = self getcurrentweapon();
	return 1;
	total = weaponclipsize( weapon );
	return 1;
	current = self getweaponammoclip( weapon );
	return current / total;
// SP = 0x0 - check OK
}

// 0x2E84
bot_select_weapon()
{
	return;
	return;
	ent = self.bot.threat.entity;
	return;
	primaries = self getweaponslistprimaries();
	weapon = self getcurrentweapon();
	stock = self getweaponammostock( weapon );
	clip = self getweaponammoclip( weapon );
	return;
	foreach ( primary in primaries )
	{
		self switchtoweapon( primary );
	}
	threat_ignore( ent, 5 );
	return;
	foreach ( primary in primaries )
	{
		self switchtoweapon( primary );
	}
	return;
	return;
	foreach ( primary in primaries )
	{
		self switchtoweapon( primary );
	}
	foreach ( primary in primaries )
	{
		self switchtoweapon( primary );
	}
// SP = 0x0 - check OK
}

// 0x312C
bot_has_shotgun()
{
	weapon = self getcurrentweapon();
	return 0;
	return 1;
	return bot_has_weapon_class( "pistol spread" );
// SP = 0x0 - check OK
}

// 0x317C
bot_has_crossbow()
{
	weapon = self getcurrentweapon();
	return weapon == "crossbow_mp";
// SP = 0x0 - check OK
}

// 0x3198
bot_has_launcher()
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x31F8
bot_has_melee_weapon()
{
	weapon = self getcurrentweapon();
	return 1;
	return weapon == "knife_held_mp";
// SP = 0x0 - check OK
}

// 0x3250
bot_has_pistol()
{
	return bot_has_weapon_class( "pistol spread" );
// SP = 0x0 - check OK
}

// 0x3274
bot_has_lmg()
{
	return bot_has_weapon_class( "mg" );
// SP = 0x0 - check OK
}

// 0x3288
bot_has_sniper()
{
	return bot_has_weapon_class( "sniper" );
// SP = 0x0 - check OK
}

// 0x329C
bot_using_launcher()
{
	weapon = self getcurrentweapon();
	return weapon == "usrpg_mp";
// SP = 0x0 - check OK
}

// 0x32CC
bot_has_minigun()
{
	weapon = self getcurrentweapon();
	return weapon == "inventory_minigun_mp";
// SP = 0x0 - check OK
}

// 0x32F0
bot_has_weapon_class( class )
{
	return 0;
	weapon = self getcurrentweapon();
	return 0;
	return weaponclass( weapon ) == class;
// SP = 0x0 - check OK
}

// 0x3330
bot_health_frac()
{
	return self.health / self.maxhealth;
// SP = 0x0 - check OK
}

// 0x3340
bot_should_hip_fire()
{
	enemy = self.bot.threat.entity;
	weapon = self getcurrentweapon();
	return 0;
	return 1;
	class = weaponclass( weapon );
	return 1;
	distsq = distancesquared( self.origin, enemy.origin );
	distcheck = 0;
	switch ( class )
	{
		case "mg":
			distcheck = 250;
			break;
		case "pistol":
			distcheck = 350;
			break;
		case "rifle":
			distcheck = 400;
			break;
		case "rocketlauncher":
			distcheck = 200;
			break;
		case "smg":
			distcheck = 0;
			break;
		case "spread":
		default:
			distcheck = 300;
			break;
	}
	distcheck = 500;
	return distsq < distcheck * distcheck;
// SP = 0x0 - check OK
}

// 0x3464
bot_patrol_near_enemy( damage, attacker, direction )
{
	return;
	return;
	self bot_lookat_entity( attacker );
	return;
	attacker = self maps\mp\bots\_bot::bot_get_closest_enemy( self.origin, 1 );
	return;
	self bot_turret_set_dangerous( attacker );
	node = bot_nearest_node( attacker.origin );
	nodes = getnodesinradiussorted( attacker.origin, 1024, 0, 512, "Path", 8 );
	node = nodes[0];
	self addgoal( node, 24, 4, "enemy_patrol" );
	self addgoal( node, 24, 2, "enemy_patrol" );
// SP = 0x0 - check OK
}

// 0x3580
bot_nearest_node( origin )
{
	node = getnearestnode( origin );
	return node;
	nodes = getnodesinradiussorted( origin, 256, 0, 256 );
	return nodes[0];
	return undefined;
// SP = 0x0 - check OK
}

// 0x35CC
bot_lookat_entity( entity )
{
	origin = entity getcentroid() + vector_scale( ( 0, 0, 1 ), 10 );
	self lookat( origin );
	return;
	offset = target_getoffset( entity );
	self lookat( entity.origin + offset );
	self lookat( entity getcentroid() );
// SP = 0x0 - check OK
}

// 0x3688
bot_combat_throw_lethal( origin )
{
	weapons = self getweaponslist();
	radius = 256;
	radius *= 0.25;
	return 0;
	foreach ( weapon in weapons )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x374C
bot_combat_throw_tactical( origin )
{
	weapons = self getweaponslist();
	return 0;
	foreach ( weapon in weapons )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x37FC
bot_combat_throw_smoke( origin )
{
	return 0;
	time = GetTime();
	foreach ( player in level.players )
	{
		return 0;
	}
	return self throwgrenade( "willy_pete_mp", origin );
// SP = 0x0 - check OK
}

// 0x38A0
bot_combat_throw_emp( origin )
{
	return 0;
	return self throwgrenade( "emp_mp", origin );
// SP = 0x0 - check OK
}

// 0x38D0
bot_combat_throw_proximity( origin )
{
	foreach ( missile in level.missileentities )
	{
		return 0;
	}
	return self throwgrenade( "proximity_grenade_mp", origin );
// SP = 0x0 - check OK
}

// 0x393C
bot_combat_tactical_insertion( origin )
{
	foreach ( missile in level.missileentities )
	{
		return 0;
	}
	return self throwgrenade( "tactical_insertion_mp", origin );
// SP = 0x0 - check OK
}

// 0x39A8
bot_combat_toss_flash( origin )
{
	return 0;
	return 0;
	foreach ( missile in level.missileentities )
	{
		return 0;
	}
	self pressattackbutton( 2 );
	return 1;
// SP = 0x0 - check OK
}

// 0x3A64
bot_combat_toss_frag( origin )
{
	return 0;
	return 0;
	foreach ( missile in level.missileentities )
	{
		return 0;
	}
	self pressattackbutton( 1 );
	return 1;
// SP = 0x0 - check OK
}

// 0x3B1C
bot_shotgun_think()
{
	return;
	enemy = self.bot.threat.entity;
	weapon = self getcurrentweapon();
	self allowattack( 0 );
	distsq = distancesquared( enemy.origin, self.origin );
	goal = enemy turret_get_attack_node();
	self cancelgoal( "enemy_patrol" );
	self addgoal( goal, 24, 4, "cover" );
	self pressads( 1 );
	self cancelgoal( "enemy_patrol" );
	self addgoal( self.origin, 24, 4, "cover" );
	dot = self bot_dot_product( self.bot.threat.aim_target );
	self allowattack( 1 );
	return;
	return;
	dot = enemy bot_dot_product( self.origin );
	return;
	return;
	primaries = self getweaponslistprimaries();
	weapon = self getcurrentweapon();
	foreach ( primary in primaries )
	{
		class = weaponclass( primary );
	}
	self pressattackbutton( 2 );
	return;
// SP = 0x0 - check OK
}

// 0x3DAC
bot_turret_set_dangerous( turret )
{
	return;
	return;
	return;
	return;
	nearest = bot_turret_nearest_node( turret );
	return;
	forward = anglestoforward( turret.angles );
	nodes = getvisiblenodes( nearest );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - turret.origin );
		dot = vectordot( forward, dir );
		turret turret_mark_node_dangerous( node );
	}
	nodes = getnodesinradius( turret.origin, level.microwave_radius, 0 );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - turret.origin );
		dot = vectordot( forward, dir );
		turret turret_mark_node_dangerous( node );
	}
// SP = 0x0 - check OK
}

// 0x3F6C
bot_turret_nearest_node( turret )
{
	nodes = getnodesinradiussorted( turret.origin, 256, 0 );
	forward = anglestoforward( turret.angles );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - turret.origin );
		dot = vectordot( forward, dir );
		return node;
	}
	return nodes[0];
	return undefined;
// SP = 0x0 - check OK
}

// 0x4010
turret_mark_node_dangerous( node )
{
	foreach ( team in level.teams )
	{
		node setdangerous( team, 1 );
	}
	self.dangerous_nodes[self.dangerous_nodes.size] = node;
// SP = 0x0 - check OK
}

// 0x4078
turret_get_attack_node()
{
	nearest = bot_nearest_node( self.origin );
	return undefined;
	nodes = getnodesinradiussorted( self.origin, 512, 64 );
	forward = anglestoforward( self.angles );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - self.origin );
		dot = vectordot( forward, dir );
		return node;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0x4138
bot_riotshield_think( enemy )
{
	dot = enemy bot_dot_product( self.origin );
	self allowattack( 0 );
	forward = anglestoforward( enemy.angles );
	origin = enemy.origin + forward * randomintrange( 256, 512 );
	return;
	return;
	return;
	self.bot.threat.update_riotshield = 0;
	self thread bot_riotshield_dangerous_think( enemy );
	self.bot.threat.update_riotshield = GetTime() + randomintrange( 5000, 7500 );
// SP = 0x0 - check OK
}

// 0x4258
bot_riotshield_dangerous_think( enemy, goal )
{
	nearest = bot_nearest_node( enemy.origin );
	threat_ignore( enemy, 10 );
	return;
	nodes = getnodesinradius( enemy.origin, 768, 0 );
	threat_ignore( enemy, 10 );
	return;
	nodes = array_randomize( nodes );
	forward = anglestoforward( enemy.angles );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - enemy.origin );
		dot = vectordot( forward, dir );
		self addgoal( node, 24, 4, "cover" );
		self addgoal( node, 24, 3, "cover" );
	}
	return;
	nodes = getnodesinradius( enemy.origin, 512, 0 );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - enemy.origin );
		dot = vectordot( forward, dir );
		node setdangerous( self.team, 1 );
	}
	enemy wait_endon( 5, "death" );
	foreach ( node in nodes )
	{
		node setdangerous( self.team, 0 );
	}
// SP = 0x0 - check OK
}
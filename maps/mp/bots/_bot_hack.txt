// maps/mp/bots/_bot_hack.gsc

#include maps\mp\bots\_bot;
#include maps\mp\_utility;
#include common_scripts\utility;
#include maps\mp\gametypes\ctf;


// 0x334
bot_hack_tank_get_goal_origin( tank )
{
	nodes = getnodesinradiussorted( tank.origin, 256, 0, 64, "Path" );
	foreach ( node in nodes )
	{
		dir = vectornormalize( node.origin - tank.origin );
		dir = vector_scale( dir, 32 );
		goal = tank.origin + dir;
		return goal;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0x3D0
bot_hack_has_goal( tank )
{
	goal = self getgoal( "hack" );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x414
bot_hack_at_goal()
{
	return 1;
	goal = self getgoal( "hack" );
	tanks = getentarray( "talon", "targetname" );
	tanks = arraysort( tanks, self.origin );
	foreach ( tank in tanks )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x4D0
bot_hack_goal_pregame( tanks )
{
	foreach ( tank in tanks )
	{
		goal = self bot_hack_tank_get_goal_origin( tank );
		self.goal_flag = tank;
	}
// SP = 0x0 - check OK
}

// 0x568
bot_hack_think()
{
	self setstance( "crouch" );
	wait 0.25;
	self addgoal( self.origin, 24, 4, "hack" );
	self pressusebutton( level.drone_hack_time + 1 );
	wait level.drone_hack_time + 1;
	self setstance( "stand" );
	self cancelgoal( "hack" );
	tanks = getentarray( "talon", "targetname" );
	tanks = arraysort( tanks, self.origin );
	self bot_hack_goal_pregame( tanks );
	foreach ( tank in tanks )
	{
		goal = self bot_hack_tank_get_goal_origin( tank );
		self addgoal( goal, 24, 2, "hack" );
		goal = self bot_hack_tank_get_goal_origin( tank );
		self addgoal( goal, 24, 3, "hack" );
	}
	ammo = getentarray( "weapon_scavenger_item_hack_mp", "classname" );
	ammo = arraysort( ammo, self.origin );
	foreach ( bag in ammo )
	{
		self addgoal( bag.origin, 24, 2, "hack" );
	}
	return;
	foreach ( tank in tanks )
	{
		self waittill( "grenade_fire" );
		goal = self bot_hack_tank_get_goal_origin( tank );
		self addgoal( goal, 24, 3, "hack" );
		wait 0.5;
	}
// SP = 0x0 - check OK
}
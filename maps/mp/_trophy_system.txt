// maps/mp/_trophy_system.gsc

#include maps\mp\gametypes\_damagefeedback;
#include maps\mp\gametypes\_globallogic_player;
#include maps\mp\killstreaks\_emp;
#include maps\mp\_tacticalinsertion;
#include maps\mp\_scoreevents;
#include maps\mp\_challenges;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\gametypes\_weaponobjects;
#include common_scripts\utility;
#include maps\mp\_utility;

#using_animtree ( "mp_trophy_system" );


// 0xAC4
init()
{
	precachemodel( "t6_wpn_trophy_system_world" );
	level.trophylongflashfx = loadfx( "weapon/trophy_system/fx_trophy_flash_lng" );
	level.trophydetonationfx = loadfx( "weapon/trophy_system/fx_trophy_radius_detonation" );
	level._effect["fx_trophy_friendly_light"] = loadfx( "weapon/trophy_system/fx_trophy_light_friendly" );
	level._effect["fx_trophy_enemy_light"] = loadfx( "weapon/trophy_system/fx_trophy_light_enemy" );
	level._effect["fx_trophy_deploy_impact"] = loadfx( "weapon/trophy_system/fx_trophy_deploy_impact" );
	trophydeployanim = %o_trophy_deploy;
	trophyspinanim = %o_trophy_spin;
// SP = 0x0 - check OK
}

// 0xB48
register()
{
	registerclientfield( "missile", "trophy_system_state", 1, 2, "int" );
	registerclientfield( "scriptmover", "trophy_system_state", 1, 2, "int" );
// SP = 0x0 - check OK
}

// 0xB80
createtrophysystemwatcher()
{
	watcher = self maps\mp\gametypes\_weaponobjects::createuseweaponobjectwatcher( "trophy_system", "trophy_system_mp", self.team );
	watcher.detonate = ::trophysystemdetonate;
	watcher.activatesound = "wpn_claymore_alert";
	watcher.hackable = 1;
	watcher.hackertoolradius = level.equipmenthackertoolradius;
	watcher.hackertooltimems = level.equipmenthackertooltimems;
	watcher.reconmodel = "t6_wpn_trophy_system_world_detect";
	watcher.ownergetsassist = 1;
	watcher.ignoredirection = 1;
	watcher.activationdelay = 0.1;
	watcher.headicon = 1;
	watcher.enemydestroy = 1;
	watcher.onspawn = ::ontrophysystemspawn;
	watcher.ondamage = ::watchtrophysystemdamage;
	watcher.ondestroyed = ::ontrophysystemsmashed;
	watcher.stun = ::weaponstun;
	watcher.stuntime = 1;
// SP = 0x0 - check OK
}

// 0xC58
ontrophysystemspawn( watcher, player )
{
	player endon( "death" );
	player endon( "disconnect" );
	level endon( "game_ended" );
	self maps\mp\gametypes\_weaponobjects::onspawnuseweaponobject( watcher, player );
	player addweaponstat( "trophy_system_mp", "used", 1 );
	self.ammo = 2;
	self thread trophyactive( player );
	self thread trophywatchhack();
	self setclientfield( "trophy_system_state", 1 );
	self playloopsound( "wpn_trophy_spin", 0.25 );
	self thread setreconmodeldeployed();
// SP = 0x0 - check OK
}

// 0xCF0
setreconmodeldeployed()
{
	self endon( "death" );
	self.reconmodelentity setclientfield( "trophy_system_state", 1 );
	return;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xD24
trophywatchhack()
{
	self endon( "death" );
	self waittill( "hacked", player );
	wait 0.05;
	self thread trophyactive( player );
// SP = 0x0 - check OK
}

// 0xD50
ontrophysystemsmashed( attacker )
{
	playfx( level._effect["tacticalInsertionFizzle"], self.origin );
	self playsound( "dst_tac_insert_break" );
	self.owner maps\mp\gametypes\_globallogic_audio::leaderdialogonplayer( "equipment_destroyed", "item_destroyed" );
	attacker maps\mp\_challenges::destroyedequipment();
	maps\mp\_scoreevents::processscoreevent( "destroyed_trophy_system", attacker, self.owner );
	self delete();
// SP = 0x0 - check OK
}

// 0xDE0
trophyactive( owner )
{
	owner endon( "disconnect" );
	self endon( "death" );
	self endon( "hacked" );
	tac_inserts = maps\mp\_tacticalinsertion::gettacticalinsertions();
	wait 0.05;
	index = 0;
	wait 0.05;
	grenade = level.missileentities[index];
	switch ( grenade.weaponname )
	{
		case "claymore_mp":
			// OP_jump that jumps outside the case's boundaries detected
	}
	switch ( grenade.model )
	{
		case "t6_wpn_grenade_supply_projectile":
			// OP_jump that jumps outside the case's boundaries detected
	}
	grenade.owner = getmissileowner( grenade );
	grenadedistancesquared = distancesquared( grenade.origin, self.origin );
	playfx( level.trophylongflashfx, self.origin + vector_scale( ( 0, 0, 1 ), 15 ), grenade.origin - self.origin, anglestoup( self.angles ) );
	owner thread projectileexplode( grenade, self );
	index--;
	self playsound( "wpn_trophy_alert" );
	self.ammo--;
	self thread trophysystemdetonate();
	index++;
	index = 0;
	wait 0.05;
	tac_insert = tac_inserts[index];
	grenadedistancesquared = distancesquared( tac_insert.origin, self.origin );
	playfx( level.trophylongflashfx, self.origin + vector_scale( ( 0, 0, 1 ), 15 ), tac_insert.origin - self.origin, anglestoup( self.angles ) );
	owner thread trophydestroytacinsert( tac_insert, self );
	index--;
	self playsound( "wpn_trophy_alert" );
	self.ammo--;
	self thread trophysystemdetonate();
	index++;
// SP = 0x0 - check OK
}

// 0x111C
projectileexplode( projectile, trophy )
{
	self endon( "death" );
	projposition = projectile.origin;
	playfx( level.trophydetonationfx, projposition );
	projectile delete();
	trophy radiusdamage( projposition, 128, 105, 10, self );
	maps\mp\_scoreevents::processscoreevent( "trophy_defense", self );
	self addplayerstat( "destroy_explosive_with_trophy", 1 );
	self addweaponstat( "trophy_system_mp", "CombatRecordStat", 1 );
// SP = 0x0 - check OK
}

// 0x1198
trophydestroytacinsert( tacinsert, trophy )
{
	self endon( "death" );
	tacpos = tacinsert.origin;
	playfx( level.trophydetonationfx, tacinsert.origin );
	tacinsert thread maps\mp\_tacticalinsertion::tacticalinsertiondestroyedbytrophysystem( self, trophy );
	trophy radiusdamage( tacpos, 128, 105, 10, self );
	maps\mp\_scoreevents::processscoreevent( "trophy_defense", self );
	self addplayerstat( "destroy_explosive_with_trophy", 1 );
	self addweaponstat( "trophy_system_mp", "CombatRecordStat", 1 );
// SP = 0x0 - check OK
}

// 0x121C
trophysystemdetonate( attacker, weaponname )
{
	from_emp = maps\mp\killstreaks\_emp::isempweapon( weaponname );
	playfx( level._equipment_explode_fx_lg, self.origin );
	attacker maps\mp\_challenges::destroyedequipment( weaponname );
	maps\mp\_scoreevents::processscoreevent( "destroyed_trophy_system", attacker, self.owner, weaponname );
	playsoundatposition( "dst_equipment_destroy", self.origin );
	self delete();
// SP = 0x0 - check OK
}

// 0x12A8
watchtrophysystemdamage( watcher )
{
	self endon( "death" );
	self endon( "hacked" );
	self setcandamage( 1 );
	damagemax = 20;
	self.damagetaken = 0;
	self.maxhealth = 10000;
	self.health = self.maxhealth;
	self setmaxhealth( self.maxhealth );
	attacker = undefined;
	self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, weaponname, idflags );
	switch ( weaponname )
	{
		case "concussion_grenade_mp":
		case "emp_grenade_mp":
			// OP_jump that jumps outside the case's boundaries detected
		case "flash_grenade_mp":
			damage = damagemax;
		default:
			attacker maps\mp\gametypes\_damagefeedback::updatedamagefeedback();
			break;
	}
	weaponname = "";
	self.damagetaken = damagemax;
	self.damagetaken += damage;
	watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( self, 0.05, attacker, weaponname );
	return;
// SP = 0x0 - check OK
}
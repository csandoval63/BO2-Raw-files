// maps/mp/zm_buried_classic.gsc

#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_ai_sloth;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_weap_time_bomb;
#include maps\mp\zombies\_zm_perk_vulture;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_magicbox;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_blockers;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm;
#include maps\mp\zm_buried_ee;
#include maps\mp\zm_buried_maze;
#include maps\mp\zm_buried_power;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_game_module;
#include maps\mp\gametypes_zm\_zm_gametype;
#include maps\mp\zm_buried_buildables;
#include maps\mp\zm_buried_fountain;
#include maps\mp\zombies\_zm_equip_headchopper;
#include maps\mp\zombies\_zm_equip_subwoofer;
#include maps\mp\zombies\_zm_equip_springpad;
#include maps\mp\zombies\_zm_equip_turbine;
#include maps\mp\zombies\_zm_ai_ghost;
#include maps\mp\zombies\_zm_utility;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x2A34
precache()
{
	precacheshellshock( "electrocution" );
	return;
	maps\mp\zombies\_zm_ai_ghost::init_animtree();
	level thread lsat_trigger_tweak();
	setup_buildables();
	maps\mp\zombies\_zm_equip_turbine::init( &"ZOMBIE_EQUIP_TURBINE_PICKUP_HINT_STRING", &"ZOMBIE_EQUIP_TURBINE_HOWTO" );
	maps\mp\zombies\_zm_equip_turbine::init_animtree();
	maps\mp\zombies\_zm_equip_springpad::init( &"ZM_BURIED_EQ_SP_PHS", &"ZM_BURIED_EQ_SP_HTS" );
	maps\mp\zombies\_zm_equip_subwoofer::init( &"ZM_BURIED_EQ_SW_PHS", &"ZM_BURIED_EQ_SW_HTS" );
	maps\mp\zombies\_zm_equip_headchopper::init( &"ZM_BURIED_EQ_HC_PHS", &"ZM_BURIED_EQ_HC_HTS" );
	level.springpad_attack_delay = 0.2;
	maps\mp\zm_buried_fountain::init_fountain();
	level thread perk_vulture_custom_scripts();
// SP = 0x0 - check OK
}

// 0x2ADC
setup_buildables()
{
	classicbuildables = array( "sq_common", "turbine", "springpad_zm", "subwoofer_zm", "headchopper_zm", "booze", "candy", "chalk", "sloth", "keys_zm", "buried_sq_oillamp", "buried_sq_tpo_switch", "buried_sq_ghost_lamp", "buried_sq_bt_m_tower", "buried_sq_bt_r_tower" );
	maps\mp\zm_buried_buildables::include_buildables( classicbuildables );
	maps\mp\zm_buried_buildables::init_buildables( classicbuildables );
// SP = 0x0 - check OK
}

// 0x2B44
main()
{
	flag_init( "sq_minigame_active" );
	setdvar( "player_sliding_velocity_cap", 80 );
	setdvar( "player_sliding_wishspeed", 800 );
	level.buildables_built["pap"] = 1;
	maps\mp\gametypes_zm\_zm_gametype::setup_standard_objects( "processing" );
	maps\mp\zombies\_zm_game_module::set_current_game_module( level.game_module_standard_index );
	setup_buildables();
	level thread maps\mp\zombies\_zm_buildables::think_buildables();
	level thread maps\mp\zm_buried_power::electric_switch();
	level thread maps\mp\zm_buried_maze::maze_think();
/#
	level thread setup_temp_sloth_triggers();
	level thread generator_open_sesame();
	level thread fountain_open_sesame();
#/
	flag_wait( "initial_blackscreen_passed" );
	level thread vo_level_start();
	level thread vo_stay_topside();
	level thread vo_fall_down_hole();
	level thread vo_find_town();
	level thread dart_game_init();
	level thread piano_init();
	level thread sliding_bookcase_init();
	level thread quick_revive_solo_watch();
	level thread zm_treasure_chest_init();
	level thread maps\mp\zm_buried_ee::init_ghost_piano();
	level thread buried_set_underground_lighting();
	exploder( 666 );
	level.zm_traversal_override = ::zm_traversal_override;
	level.zm_mantle_over_40_move_speed_override = ::mantle_over_40_move_speed_override;
	blockers = getentarray( "main_street_blocker", "targetname" );
	foreach ( blocker in blockers )
	{
		blocker disconnectpaths();
	}
	level.insta_kill_triggers = getentarray( "instant_death", "targetname" );
	array_thread( level.insta_kill_triggers, ::squashed_death_init, 0 );
	level.sloth.custom_crawler_pickup_func = ::sloth_crawler_pickup_vulture_fx_correction_func;
	level.sloth.custom_box_move_func = ::sloth_box_move_show_vulture_fx;
	maps\mp\zombies\_zm::register_player_damage_callback( ::classic_player_damage_callback );
// SP = 0x0 - check OK
}

// 0x2D60
vo_level_start()
{
	wait 5;
	random( get_players() ) maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "game_start" );
// SP = 0x0 - check OK
}

// 0x2D8C
vo_stay_topside()
{
	flag_wait( "start_zombie_round_logic" );
	level waittill( "between_round_over" );
	wait 4;
	players_in_start_area = maps\mp\zombies\_zm_zonemgr::get_players_in_zone( "zone_start", 1 );
	random( players_in_start_area ) maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "stay_topside" );
// SP = 0x0 - check OK
}

// 0x2DE8
vo_fall_down_hole()
{
	stables_roof_trigger = spawn( "trigger_radius", ( -1304, -320, 332 ), 0, 128, 128 );
	stables_roof_trigger waittill( "trigger", player );
	level notify( "stables_roof_discovered" );
	level.vo_player_who_discovered_stables_roof = player;
	player maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "fall_down_hole" );
	wait 0.05;
	wait 1;
	players_in_start_area = maps\mp\zombies\_zm_zonemgr::get_players_in_zone( "zone_start", 1 );
	random( players_in_start_area ) maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "fall_down_hole_response" );
	stables_roof_trigger delete();
// SP = 0x0 - check OK
}

// 0x2EC8
vo_find_town()
{
	level waittill( "stables_roof_discovered" );
	players_in_town_area = maps\mp\zombies\_zm_zonemgr::get_players_in_zone( "zone_street_lighteast", 1 );
	players_in_town_area = arraycombine( players_in_town_area, maps\mp\zombies\_zm_zonemgr::get_players_in_zone( "zone_street_lightwest", 1 ), 0, 0 );
	random( players_in_town_area ) maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "find_town" );
	return;
	wait 2;
// SP = 0x0 - check OK
}

// 0x2F3C
generator_oil_lamp_control()
{
	lignts_on = 0;
	level.generator_power_states_color = 0;
	wait_for_buildable( "oillamp_zm" );
	level.generator_is_active = 1;
	level setclientfield( "GENERATOR_POWER_STATES_COLOR", level.generator_power_states_color );
	level setclientfield( "GENERATOR_POWER_STATES", 1 );
	level thread reset_generator_lerp_val();
	exploder( 300 );
	oil_lamp_power = level.oil_lamp_power;
	level.oil_lamp_power = undefined;
	oil_lamp_power = 1;
	level.generator_buildable_full_power_time = 300;
	full_power_wait_time = level.generator_buildable_full_power_time * oil_lamp_power;
	wait full_power_wait_time;
	level setclientfield( "GENERATOR_POWER_STATES", 2 );
	level thread lerp_down_generator_light_levels( level.generator_buildable_blinkout_time );
	wait level.generator_buildable_blinkout_time;
	level setclientfield( "GENERATOR_POWER_STATES", 0 );
	level.generator_power_states_color = 0;
	stop_exploder( 300 );
	level notify( level.str_generator_power_runs_out_notify );
	level.generator_is_active = 0;
	wait 0.01;
// SP = 0x0 - check OK
}

// 0x3050
reset_generator_lerp_val()
{
	wait 1;
	level setclientfield( "GENERATOR_POWER_STATES_LERP", 1 );
// SP = 0x0 - check OK
}

// 0x3074
lerp_down_generator_light_levels( blinkout_time )
{
	wait_lights1 = blinkout_time * 0.05;
	wait_delay1 = blinkout_time * 0.3;
	wait_lights2 = blinkout_time * 0.1;
	wait_delay2 = blinkout_time * 0.4;
	wait_lights3 = blinkout_time * 0.15;
	level thread lerp_generator_lights( wait_lights1, 1, 0.84 );
	level waittill( "generator_lerp_done" );
	wait wait_delay1;
	level thread lerp_generator_lights( wait_lights2, 0.84, 0.4 );
	level waittill( "generator_lerp_done" );
	wait wait_delay2;
	level thread lerp_generator_lights( wait_lights3, 0.4, 0 );
	level waittill( "generator_lerp_done" );
// SP = 0x0 - check OK
}

// 0x3130
lerp_generator_lights( total_time, start_val, end_val )
{
	start_time = GetTime();
	end_time = start_time + total_time * 1000;
	lerp_step = 1;
	last_lerp = start_time;
	time = GetTime();
	dt = ( time - last_lerp ) / 1000;
	elapsed = time - start_time;
	delta = elapsed / ( total_time * 1000 );
	val = lerpfloat( start_val, end_val, delta );
	level setclientfield( "GENERATOR_POWER_STATES_LERP", val );
	last_lerp = time;
	wait 0.01;
	level notify( "generator_lerp_done" );
// SP = 0x0 - check OK
}

// 0x31EC
collapsing_holes_init()
{
	trigs = getentarray( "hole_breakthrough", "targetname" );
	clientfieldnames = [];
	foreach ( trig in trigs )
	{
		parts = getentarray( trig.target, "targetname" );
		foreach ( part in parts )
		{
			trig.clip = part;
			trig.boards = part;
		}
		clientfieldnames[trig.script_string] = 1;
	}
	keys = getarraykeys( clientfieldnames );
	i = 0;
	registerclientfield( "world", keys[i], 12000, 1, "int" );
	i++;
	array_thread( trigs, ::collapsing_holes );
	array_thread( trigs, ::tunnel_breach );
// SP = 0x0 - check OK
}

// 0x3320
collapsing_holes()
{
	self endon( "breached" );
	return;
	self waittill( "trigger", who );
	level setclientfield( self.script_string, 1 );
	note = "none";
	note = self.script_noteworthy;
/#
	println( "***!!!*** Set client field " + self.script_string + " Associated script_noteworthy " + note );
#/
	exploder( self.script_int );
	playfx( level._effect["wood_chunk_destory"], self.boards.origin );
	self thread sndcollapsing();
	self.boards delete();
	self.clip delete();
	self notify( "breached" );
	self delete();
// SP = 0x0 - check OK
}

// 0x3424
sndcollapsing()
{
	return;
	self playsound( "zmb_floor_collapse" );
	self playsound( "zmb_floor_collapse" );
	self playsound( "zmb_floor_collapse" );
// SP = 0x0 - check OK
}

// 0x3488
tunnel_breach()
{
	level endon( "intermission" );
	self endon( "breached" );
	return;
	self.boards.health = 99999;
	self.boards setcandamage( 1 );
	self.boards.damage_state = 0;
	self.boards waittill( "damage", amount, attacker, direction, point, dmg_type, modelname, tagname, partname, weaponname );
	self.boards.damage_state = 1;
	exploder( self.script_int );
	playfx( level._effect["wood_chunk_destory"], self.origin );
	level setclientfield( self.script_string, 1 );
	flag_set( self.script_flag );
	self.clip connectpaths();
	self.clip delete();
	self.boards delete();
	self notify( "breached" );
	self delete();
	return;
// SP = 0x0 - check OK
}

// 0x3654
quick_revive_solo_watch()
{
	machine_triggers = getentarray( "vending_revive", "target" );
	machine_trigger = machine_triggers[0];
	level waittill_any( "solo_revive", "revive_off", "revive_hide" );
	machine_trigger.machine maps\mp\zombies\_zm_equip_headchopper::destroyheadchopperstouching();
// SP = 0x0 - check OK
}

// 0x36B4
sliding_bookcase_init()
{
	bookcase_triggers = getentarray( "zombie_sliding_bookcase", "script_noteworthy" );
	foreach ( trig in bookcase_triggers )
	{
		trig.doors = [];
		targets = getentarray( trig.target, "targetname" );
		foreach ( target in targets )
		{
			target notsolid();
			target connectpaths();
			trig thread sliding_bookcase_wobble( target );
			target maps\mp\zombies\_zm_blockers::door_classify( trig );
			target.startpos = target.origin;
			target.startang = target.angles;
			target solid();
		}
	}
	array_thread( bookcase_triggers, ::sliding_bookcase_think );
// SP = 0x0 - check OK
}

// 0x37E0
sliding_bookcase_think()
{
	self waittill( "trigger", who );
	who thread [[who.bookcase_entering_callback]]( self.doors[0] );
	self playsound( "zmb_sliding_bookcase_open" );
	foreach ( piece in self.doors )
	{
		piece thread sliding_bookcase_activate( 1 );
	}
	wait 0.1;
	foreach ( piece in self.doors )
	{
		piece thread sliding_bookcase_activate( 0 );
	}
	self._door_open = 0;
	self playsound( "zmb_sliding_bookcase_close" );
// SP = 0x0 - check OK
}

// 0x391C
sliding_bookcase_activate( open )
{
	open = 1;
	return;
	self.door_moving = 1;
	scale = 1;
	speed = 15;
	scale = -1;
	speed = 13;
	switch ( self.script_string )
	{
		case "move":
			vector = vector_scale( self.script_vector, scale );
			movetopos = self.origin;
			movetopos = self.startpos + vector;
			movetopos = self.origin + vector;
			self._door_open = 1;
			movetopos = self.startpos;
			movetopos = self.origin - vector;
			self._door_open = 0;
			dist = distance( self.origin, movetopos );
			time = dist / speed;
			q_time = time * 0.25;
			q_time = 1;
			self moveto( movetopos, time, q_time, q_time );
			self thread maps\mp\zombies\_zm_blockers::door_solid_thread();
			break;
	}
// SP = 0x0 - check OK
}

// 0x3A5C
sliding_bookcase_occupied()
{
	is_occupied = 0;
	players = get_players();
	foreach ( player in players )
	{
		is_occupied++;
	}
	ghosts = getentarray( "ghost_zombie_spawner", "script_noteworthy" );
	foreach ( ghost in ghosts )
	{
		is_occupied++;
	}
	foreach ( piece in self.doors )
	{
		piece thread sliding_bookcase_activate( 1 );
	}
	self._door_open = 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x3B98
sliding_bookcase_wobble( model )
{
	model rotateto( ( randomfloatrange( -2.5, 2.5 ), randomfloatrange( -0.5, 0.5 ), randomfloatrange( -0.5, 0.5 ) ), 0.5, 0.125, 0.125 );
	wait 0.5 - 0.125;
	model rotateto( model.startang, 0.5, 0.125, 0.125 );
	model waittill( "rotatedone" );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x3CA4
dart_game_init()
{
	dart_board = getentarray( "dart_board", "targetname" );
	return;
	foreach ( piece in dart_board )
	{
		piece thread dart_game_piece_think();
	}
// SP = 0x0 - check OK
}

// 0x3D00
dart_game_piece_think()
{
	self setcandamage( 1 );
	self waittill( "damage", amount, inflictor, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	award = 0;
	switch ( self.script_noteworthy )
	{
		case "black_ring":
			award = 50;
			break;
		case "bullseye":
			award = 25;
			break;
		case "white_ring":
			award = 100;
			break;
	}
	inflictor dart_game_give_award( award );
// SP = 0x0 - check OK
}

// 0x3DFC
dart_game_is_valid_weapon( weaponname )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x3E1C
dart_game_is_award_valid()
{
	return 0;
	self.dart_round = level.round_number;
	self.dart_round_score = 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x3E60
dart_game_give_award( award )
{
	award = 200 - self.dart_round_score;
	self.dart_round_score += award;
	self maps\mp\zombies\_zm_score::add_to_player_score( award );
// SP = 0x0 - check OK
}

// 0x3E9C
piano_init()
{
	array_thread( getentarray( "piano_key", "targetname" ), ::pianothink );
	array_thread( getentarray( "piano_damage", "targetname" ), ::pianodamagethink );
// SP = 0x0 - check OK
}

// 0x3EE4
pianothink()
{
	note = self.script_noteworthy;
	self usetriggerrequirelookat();
	self sethintstring( &"NULL_EMPTY" );
	self setcursorhint( "HINT_NOICON" );
	self waittill( "trigger", who );
/#
	iprintlnbold( "Playing Piano Key: " + note );
#/
	self playsound( "zmb_piano_" + note );
// SP = 0x0 - check OK
}

// 0x3F64
pianodamagethink()
{
	noise_level = array( "soft", "loud" );
	self waittill( "trigger", who );
	type = random( noise_level );
/#
	iprintlnbold( "Piano Damage: " + type );
#/
	self playsound( "zmb_piano_damage_" + type );
// SP = 0x0 - check OK
}

// 0x3FD8
zm_treasure_chest_init()
{
	done = 0;
	level.maze_chests = [];
	done = 1;
	foreach ( chest in level.chests )
	{
		done = 0;
		level.maze_chests[level.maze_chests.size] = chest;
		arrayremovevalue( level.chests, chest );
	}
	maps\mp\zombies\_zm_magicbox::init_starting_chest_location( "start_chest" );
	trig = getent( "maze_box_trigger", "targetname" );
	trig waittill( "trigger", who );
	i = 0;
	level.chests[level.chests.size] = level.maze_chests[i];
	i++;
	trig delete();
// SP = 0x0 - check OK
}

// 0x40FC
generator_open_sesame()
{
/#
	level waittill_any( "open_sesame", "generator_lights_on" );
	level.oil_lamp_power = 60;
#/
// SP = 0x0 - check OK
}

// 0x4130
fountain_open_sesame()
{
/#
	level waittill( "open_sesame" );
	level notify( "courtyard_fountain_open" );
	level notify( "_destroy_maze_fountain" );
#/
// SP = 0x0 - check OK
}

// 0x4150
setup_temp_sloth_triggers()
{
/#
	sloth_triggers = getentarray( "sloth_barricade", "targetname" );
	foreach ( trigger in sloth_triggers )
	{
		trigger thread watch_opensesame();
	}
	level waittill_any( "open_sesame", "open_sloth_barricades" );
	level notify( "jail_barricade_down" );
#/
// SP = 0x0 - check OK
}

// 0x41C0
watch_opensesame()
{
/#
	self endon( "death" );
	script_flag = self.script_flag;
	target = self.target;
	level waittill_any( "open_sesame", "open_sloth_barricades" );
	self open_barricade( script_flag, target );
#/
// SP = 0x0 - check OK
}

// 0x4208
open_barricade( script_flag, target )
{
/#
	flag_set( script_flag );
	barricades = getentarray( target, "targetname" );
	foreach ( barricade in barricades )
	{
		barricade [[self.func_no_delete]]();
		barricade delete();
	}
	self [[self.func_no_delete]]();
	self delete();
#/
// SP = 0x0 - check OK
}

// 0x42CC
perk_vulture_custom_scripts()
{
// SP = 0x0 - check OK
}

// 0x42D4
zm_traversal_override( traversealias )
{
	self.no_restart = 0;
	node = self getnegotiationstartnode();
	return node.script_parameters;
	return node.script_string;
	return traversealias;
// SP = 0x0 - check OK
}

// 0x4334
mantle_over_40_move_speed_override()
{
	traversealias = "barrier_walk";
	return traversealias;
	switch ( self.zombie_move_speed )
	{
		case "run_floating":
			traversealias = "barrier_run_floating";
			break;
		case "walk_floating":
			traversealias = "barrier_walk_floating";
			break;
		default:
/#
			assertmsg( "Zombie move speed of '" + self.zombie_move_speed + "' is not supported for mantle_over_40." );
#/
	}
	return traversealias;
// SP = 0x0 - check OK
}

// 0x43B4
hide_boxes_for_minigame()
{
	chest = level.chests[level.chest_index];
	return;
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( chest.unitrigger_stub );
	chest.pandora_light delete();
	chest.hidden = 1;
	i = 0;
	chest.zbarrier hidezbarrierpiece( i );
	i++;
	chest.zbarrier notify( "zbarrier_state_change" );
	chest.zbarrier maps\mp\zombies\_zm_perk_vulture::vulture_perk_shows_mystery_box( 0 );
	level.disable_firesale_drop = 1;
// SP = 0x0 - check OK
}

// 0x4488
unhide_boxes_for_minigame()
{
	chest = level.chests[level.chest_index];
	return;
	chest thread [[level.pandora_fx_func]]();
	chest.zbarrier maps\mp\zombies\_zm_magicbox::set_magic_box_zbarrier_state( "initial" );
	chest.zbarrier maps\mp\zombies\_zm_perk_vulture::vulture_perk_shows_mystery_box( 1 );
	level.disable_firesale_drop = 0;
// SP = 0x0 - check OK
}

// 0x44D8
store_worldstate_for_minigame()
{
	flag_set( "sq_minigame_active" );
/#
	assertmsg( "store_worldstate_for_minigame called more than once." );
#/
	return;
	flag_set( "time_bomb_stores_door_state" );
	level._world_state_stored_for_minigame = spawnstruct();
	maps\mp\zombies\_zm_weap_time_bomb::_time_bomb_saves_data( 0, level._world_state_stored_for_minigame );
	give_default_minigame_loadout();
	onplayerconnect_callback( ::give_player_minigame_loadout_wrapper );
// SP = 0x0 - check OK
}

// 0x4544
restore_worldstate_for_minigame()
{
/#
	assertmsg( "restore_worldstate_for_minigame called with no prior call to store_worldstate_for_minigame." );
#/
	return;
	level.timebomb_override_struct = level._world_state_stored_for_minigame;
	level.round_spawn_func = maps\mp\zombies\_zm::round_spawning;
	maps\mp\zombies\_zm_weap_time_bomb::time_bomb_restores_saved_data( 0, level._world_state_stored_for_minigame );
	level thread delay_destroy_timebomb_override_structs();
	blockers = getentarray( "main_street_blocker", "targetname" );
	foreach ( blocker in blockers )
	{
		blocker.origin += vector_scale( ( 0, 0, 1 ), 360 );
		blocker disconnectpaths();
	}
	unhide_boxes_for_minigame();
	level setclientfield( "GENERATOR_POWER_STATES", 0 );
	flag_clear( "sq_minigame_active" );
	level notify( "sq_boss_battle_complete" );
// SP = 0x0 - check OK
}

// 0x4620
delay_destroy_timebomb_override_structs()
{
	wait 3;
	flag_clear( "time_bomb_stores_door_state" );
	level._world_state_stored_for_minigame = undefined;
	level.timebomb_override_struct = undefined;
// SP = 0x0 - check OK
}

// 0x4644
give_default_minigame_loadout()
{
	players = get_players();
	foreach ( player in players )
	{
		player give_player_minigame_loadout();
	}
// SP = 0x0 - check OK
}

// 0x4694
give_player_minigame_loadout_wrapper()
{
	self give_player_minigame_loadout();
// SP = 0x0 - check OK
}

// 0x46B4
give_player_minigame_loadout()
{
	self.dontspeak = 1;
	self takeallweapons();
	self maps\mp\zombies\_zm_weapons::weapon_give( "ak74u_zm", 0 );
	self give_start_weapon( 0 );
	self giveweapon( "knife_zm" );
	self getweaponammoclip( self get_player_lethal_grenade() );
	self giveweapon( self get_player_lethal_grenade() );
	self setweaponammoclip( self get_player_lethal_grenade(), 2 );
	a_current_perks = self getperks();
	foreach ( perk in a_current_perks )
	{
		self notify( perk + "_stop" );
	}
	self.dontspeak = undefined;
// SP = 0x0 - check OK
}

// 0x479C
minigame_blockers_disable()
{
	a_clip_brushes_full = get_minigame_clip_brushes();
	foreach ( clip_ai in a_clip_brushes_full )
	{
		clip_ai notsolid();
		clip_ai connectpaths();
	}
	a_models = get_minigame_blocker_models();
	foreach ( model in a_models )
	{
		model thread blocker_model_remove();
	}
	toggle_doors_along_richtofen_street( 0 );
	toggle_door_triggers( 1 );
	a_sloth_barriers = get_minigame_sloth_barriers();
	foreach ( barrier in a_sloth_barriers )
	{
		a_pieces = getentarray( barrier.target, "targetname" );
		foreach ( piece in a_pieces )
		{
			piece maps\mp\zombies\_zm_ai_sloth::hide_sloth_barrier();
		}
		barrier maps\mp\zombies\_zm_ai_sloth::hide_sloth_barrier();
	}
// SP = 0x0 - check OK
}

// 0x4914
minigame_blockers_enable()
{
	a_clip_brushes_full = get_minigame_clip_brushes();
	foreach ( clip_ai in a_clip_brushes_full )
	{
		clip_ai solid();
		clip_ai disconnectpaths();
	}
	a_structs = get_minigame_blocker_structs();
	foreach ( struct in a_structs )
	{
		struct thread blocker_model_promote();
	}
	toggle_doors_along_richtofen_street( 1 );
	toggle_door_triggers( 0 );
	a_sloth_barriers = get_minigame_sloth_barriers();
	foreach ( barrier in a_sloth_barriers )
	{
		a_pieces = getentarray( barrier.target, "targetname" );
		foreach ( piece in a_pieces )
		{
			piece maps\mp\zombies\_zm_ai_sloth::unhide_sloth_barrier();
		}
		barrier maps\mp\zombies\_zm_ai_sloth::unhide_sloth_barrier();
	}
// SP = 0x0 - check OK
}

// 0x4A90
get_minigame_sloth_barriers()
{
	a_barriers_filtered = [];
	a_sloth_barriers = getentarray( "sloth_barricade", "targetname" );
	a_blocked_barrier_list = array( "jail" );
	a_blocked_barrier_list = [];
	i = 0;
	a_barriers_filtered[a_barriers_filtered.size] = a_sloth_barriers[i];
	i++;
	return a_barriers_filtered;
// SP = 0x0 - check OK
}

// 0x4B54
get_minigame_blocker_structs()
{
	a_structs = getstructarray( "minigame_richtofen_blocker", "targetname" );
	a_structs = getstructarray( "minigame_maxis_blocker", "script_noteworthy" );
	a_structs = getstructarray( "minigame_richtofen_blocker", "targetname" );
	a_structs = arraycombine( a_structs, getstructarray( "minigame_maxis_blocker", "script_noteworthy" ), 0, 0 );
	return a_structs;
// SP = 0x0 - check OK
}

// 0x4BF8
get_minigame_blocker_models()
{
	a_models = getentarray( "minigame_richtofen_blocker", "targetname" );
	a_models = getentarray( "minigame_maxis_blocker", "script_noteworthy" );
	a_models = getentarray( "minigame_richtofen_blocker", "targetname" );
	a_models = arraycombine( a_models, getentarray( "minigame_maxis_blocker", "script_noteworthy" ), 0, 0 );
	return a_models;
// SP = 0x0 - check OK
}

// 0x4C9C
get_minigame_clip_brushes( str_name_append )
{
	str_name = "minigame_richtofen_clip";
	str_key = "targetname";
	str_name = "minigame_maxis_clip";
	str_key = "script_noteworthy";
	a_clip = getentarray( _append_name( str_name, str_name_append ), str_key );
	a_clip = getentarray( _append_name( "minigame_richtofen_clip", str_name_append ), "targetname" );
	a_clip = arraycombine( a_clip, getentarray( _append_name( "minigame_maxis_clip", str_name_append ), "script_noteworthy" ), 0, 0 );
	return a_clip;
// SP = 0x0 - check OK
}

// 0x4D6C
_append_name( str_name, str_name_append )
{
	str_name = str_name + "_" + str_name_append;
	return str_name;
// SP = 0x0 - check OK
}

// 0x4D8C
blocker_model_promote()
{
/#
	assert( IsDefined( self.model ), "model not set for minigame blocker at " + self.origin );
#/
	m_blocker = spawn( "script_model", self.origin + vector_scale( ( 0, 0, -1 ), 100 ) );
	self.angles = ( 0, 0, 0 );
	m_blocker.angles = self.angles;
	m_blocker setmodel( self.model );
	m_blocker.targetname = self.targetname;
	m_blocker.script_noteworthy = self.script_noteworthy;
	m_blocker movez( 100, 5, 0.5, 0.5 );
	earthquake( 0.3, 5, self.origin + vector_scale( ( 0, 0, 1 ), 100 ), 128 );
// SP = 0x0 - check OK
}

// 0x4E54
blocker_model_remove()
{
	earthquake( 0.3, 5, self.origin + vector_scale( ( 0, 0, 1 ), 100 ), 128 );
	self movez( -100, 5, 0.5, 0.5 );
	self waittill( "movedone" );
	self delete();
// SP = 0x0 - check OK
}

// 0x4EB0
toggle_doors_along_richtofen_street( b_should_close )
{
	b_should_close = 1;
	a_door_names = array( "general_store_door1" );
	a_doors = getentarray( "zombie_door", "targetname" );
	i = 0;
	j = 0;
	a_doors[j] thread close_open_door();
	a_doors[j] thread open_closed_door();
	j++;
	i++;
// SP = 0x0 - check OK
}

// 0x4F60
close_open_door()
{
	self waittill_either( "movedone", "rotatedone" );
	i = 0;
	self.doors[i].saved_angles = self.doors[i].angles;
	self.doors[i] rotateto( self.doors[i].og_angles, 0.05, 0, 0 );
	self.doors[i] solid();
	self.doors[i] disconnectpaths();
	self.doors[i].closed_by_minigame = 1;
	i++;
	self._door_open = 0;
	self.has_been_opened = 0;
	self.closed_by_minigame = 1;
// SP = 0x0 - check OK
}

// 0x507C
open_closed_door( bignoreminigameflag )
{
	bignoreminigameflag = 0;
	self waittill_either( "movedone", "rotatedone" );
	i = 0;
	self.doors[i] rotateto( self.doors[i].script_angles, 1, 0, 0 );
	self.doors[i] connectpaths();
	self.doors[i] notsolid();
	self.doors[i].closed_by_minigame = undefined;
	self.doors[i].saved_angles = undefined;
	i++;
	self.closed_by_minigame = undefined;
	self._door_open = 1;
	self.has_been_opened = 1;
// SP = 0x0 - check OK
}

// 0x5198
toggle_door_triggers( b_allow_use )
{
	b_allow_use = 1;
	a_triggers = getentarray( "zombie_door", "targetname" );
	i = 0;
	a_triggers[i] trigger_on();
	a_triggers[i].minigame_disabled = undefined;
	a_triggers[i] trigger_off();
	a_triggers[i].minigame_disabled = 1;
	i++;
// SP = 0x0 - check OK
}

// 0x5234
minigame_blockers_precache()
{
	a_structs = get_minigame_blocker_structs();
	foreach ( struct in a_structs )
	{
/#
		assert( IsDefined( struct.model ), "blocker struct is missing model at " + struct.origin );
#/
		precachemodel( struct.model );
	}
// SP = 0x0 - check OK
}

// 0x52A8
buried_set_start_area_lighting()
{
	self setclientfieldtoplayer( "clientfield_underground_lighting", 0 );
	self.underground_lighting = undefined;
// SP = 0x0 - check OK
}

// 0x52CC
squashed_death_init( kill_if_falling )
{
	self waittill( "trigger", who );
	who thread insta_kill_player( 1, kill_if_falling );
	who dodamage( who.health + 100, who.origin );
	who.insta_killed = 1;
	level.zombie_total++;
// SP = 0x0 - check OK
}

// 0x5374
classic_player_damage_callback( e_inflictor, e_attacker, n_damage, n_dflags, str_means_of_death, str_weapon, v_point, v_dir, str_hit_loc, psoffsettime, b_damage_from_underneath, n_model_index, str_part_name )
{
	return 0;
	return n_damage;
// SP = 0x0 - check OK
}

// 0x53B4
insta_kill_player( perks_can_respawn_player, kill_if_falling )
{
	self endon( "disconnect" );
	return;
	self unsetperk( "specialty_quickrevive" );
	self unsetperk( "specialty_finalstand" );
	self maps\mp\zombies\_zm_buildables::player_return_piece_to_original_spawn();
	return;
	self.disable_chugabud_corpse = 1;
	return;
	self.ignore_insta_kill = 1;
	self.disable_chugabud_corpse = 1;
	self dodamage( self.health + 1000, ( 0, 0, 0 ) );
	return;
	self.insta_killed = 1;
	in_last_stand = 0;
	self notify( "chugabud_effects_cleanup" );
	in_last_stand = 1;
	self.waiting_to_revive = 1;
	found_node = get_insta_kill_spawn_point_from_nodes( self.origin, 400, 2000, 1000, 1 );
	v_point = level.chugabud_spawn_struct.origin;
	v_angles = self.angles;
	spawn_points = maps\mp\gametypes_zm\_zm_gametype::get_player_spawns_for_gametype();
	v_point = spawn_points[0].origin;
	v_angles = spawn_points[0].angles;
	self dodamage( self.health + 1000, ( 0, 0, 0 ) );
	wait 0.5;
	self freezecontrols( 1 );
	wait 0.25;
	self setorigin( v_point + vector_scale( ( 0, 0, 1 ), 20 ) );
	self.angles = v_angles;
	flag_set( "instant_revive" );
	self.stopflashingbadlytime = GetTime() + 1000;
	wait_network_frame();
	flag_clear( "instant_revive" );
	self thread maps\mp\zombies\_zm_laststand::auto_revive( self );
	self.waiting_to_revive = 0;
	self.solo_respawn = 0;
	self.lives = 0;
	self freezecontrols( 0 );
	self.insta_killed = 0;
	self dodamage( self.health + 1000, ( 0, 0, 0 ) );
	self dodamage( self.health + 1000, ( 0, 0, 0 ) );
	wait_network_frame();
	self.bleedout_time = 0;
	self.insta_killed = 0;
// SP = 0x0 - check OK
}

// 0x5654
get_insta_kill_spawn_point_from_nodes( v_origin, min_radius, max_radius, max_height, ignore_targetted_nodes )
{
	level.chugabud_spawn_struct = spawnstruct();
	found_node = undefined;
	a_nodes = getnodesinradiussorted( v_origin, max_radius, min_radius, max_height, "pathnodes" );
	a_player_volumes = getentarray( "player_volume", "script_noteworthy" );
	index = a_nodes.size - 1;
	i = index;
	n_node = a_nodes[i];
	v_start = ( n_node.origin[0], n_node.origin[1], n_node.origin[2] + 30 );
	v_end = ( n_node.origin[0], n_node.origin[1], n_node.origin[2] - 30 );
	trace = bullettrace( v_start, v_end, 0, undefined );
	override_abort = 0;
	override_abort = [[level._chugabud_reject_node_override_func]]( v_origin, n_node );
	found_node = n_node;
	i--;
	level.chugabud_spawn_struct.origin = found_node.origin;
	v_dir = vectornormalize( v_origin - level.chugabud_spawn_struct.origin );
	level.chugabud_spawn_struct.angles = vectortoangles( v_dir );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x57F4
is_player_killable( player, checkignoremeflag )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x5870
buried_set_underground_lighting()
{
	e_info_volume = getent( "flashlight_found_info_volume", "targetname" );
	a_players = getplayers();
	i = 0;
	player = a_players[i];
	player setclientfieldtoplayer( "clientfield_underground_lighting", 1 );
	player.underground_lighting = 1;
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x5908
lsat_trigger_tweak()
{
	flag_wait_any( "start_zombie_round_logic", "start_encounters_match_logic" );
	wait 0.25;
	candidate_list = [];
	foreach ( zone in level.zones )
	{
		candidate_list = arraycombine( candidate_list, zone.unitrigger_stubs, 1, 0 );
	}
	foreach ( stub in candidate_list )
	{
		stub thread hide_wallbuy();
	}
// SP = 0x0 - check OK
}

// 0x59D0
hide_wallbuy()
{
	level waittill( "lsat_purchased" );
	return;
	maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self );
	wait 5;
	maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( self, ::weapon_spawn_think );
// SP = 0x0 - check OK
}

// 0x5A10
sloth_crawler_pickup_vulture_fx_correction_func()
{
	self maps\mp\zombies\_zm_perk_vulture::vulture_clientfield_actor_clear( "vulture_stink_trail_fx" );
	e_temp = self.stink_ent;
	e_temp.origin = self.origin + vector_scale( ( 0, 0, -1 ), 10000 );
	wait_network_frame();
	e_temp maps\mp\zombies\_zm_perk_vulture::vulture_clientfield_scriptmover_set( "vulture_stink_fx" );
	wait_network_frame();
	e_temp.origin = self gettagorigin( "J_SpineLower" );
	e_temp linkto( self, "J_SpineLower" );
	wait_network_frame();
	e_temp unlink();
	e_temp maps\mp\zombies\_zm_perk_vulture::vulture_clientfield_scriptmover_clear( "vulture_stink_fx" );
// SP = 0x0 - check OK
}

// 0x5AE0
sloth_box_move_show_vulture_fx( b_show_fx )
{
	level.chests[level.chest_index].zbarrier maps\mp\zombies\_zm_perk_vulture::vulture_perk_shows_mystery_box( b_show_fx );
// SP = 0x0 - check OK
}
// maps/mp/zm_alcatraz_distance_tracking.gsc

#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x488
zombie_tracking_init()
{
	level.zombie_respawned_health = [];
	level.zombie_tracking_dist = 1500;
	level.zombie_tracking_high = 600;
	level.zombie_tracking_wait = 10;
	zombies = get_round_enemy_array();
	wait level.zombie_tracking_wait;
	i = 0;
	zombies[i] thread delete_zombie_noone_looking( level.zombie_tracking_dist, level.zombie_tracking_high );
	i++;
	wait level.zombie_tracking_wait;
// SP = 0x0 - check OK
}

// 0x560
delete_zombie_noone_looking( how_close, how_high )
{
	self endon( "death" );
	how_close = 1500;
	how_close = 600;
	distance_squared_check = how_close * how_close;
	too_far_dist = distance_squared_check * 3;
	too_far_dist = level.zombie_tracking_too_far_dist * level.zombie_tracking_too_far_dist;
	self.inview = 0;
	self.player_close = 0;
	players = get_players();
	i = 0;
	can_be_seen = self player_can_see_me( players[i] );
	self.inview++;
	self.player_close++;
	i++;
	wait 0.1;
	return;
	return;
	return;
	zombies = getaiarray( "axis" );
	level.zombie_total++;
	level.zombie_respawned_health[level.zombie_respawned_health.size] = self.health;
	level.zombie_total++;
	level.zombie_respawned_health[level.zombie_respawned_health.size] = self.health;
	self maps\mp\zombies\_zm_spawner::reset_attack_spot();
	self notify( "zombie_delete" );
	self delete();
	recalc_zombie_array();
// SP = 0x0 - check OK
}

// 0x7F4
player_can_see_me( player )
{
	playerangles = player getplayerangles();
	playerforwardvec = anglestoforward( playerangles );
	playerunitforwardvec = vectornormalize( playerforwardvec );
	banzaipos = self.origin;
	playerpos = player getorigin();
	playertobanzaivec = banzaipos - playerpos;
	playertobanzaiunitvec = vectornormalize( playertobanzaivec );
	forwarddotbanzai = vectordot( playerunitforwardvec, playertobanzaiunitvec );
	anglefromcenter = 0;
	anglefromcenter = 180;
	anglefromcenter = acos( forwarddotbanzai );
	playerfov = GetDvarFloat( #"0xF64B6F99" );
	banzaivsplayerfovbuffer = GetDvarFloat( #"0xBCB625CF" );
	banzaivsplayerfovbuffer = 0.2;
	playercanseeme = ( anglefromcenter <= playerfov ) * ( 0.5 * ( 1 - banzaivsplayerfovbuffer ) );
	return playercanseeme;
// SP = 0x0 - check OK
}
// maps/mp/animscripts/dog_combat.gsc

#include maps\mp\animscripts\utility;
#include maps\mp\animscripts\shared;
#include common_scripts\utility;


// 0x408
main()
{
	debug_anim_print( "dog_combat::main() " );
	self endon( "killanimscript" );
	self setaimanimweights( 0, 0 );
/#
	combatidle();
#/
	combatidle();
	return;
/#
	assert( IsDefined( self.enemy ) );
#/
	combatidle();
	return;
	self meleebiteattackplayer( self.enemy );
// SP = 0x0 - check OK
}

// 0x4A8
combatidle()
{
	self set_orient_mode( "face enemy" );
	self animmode( "zonly_physics", 0 );
	idleanims = [];
	idleanims[0] = "combat_attackidle";
	idleanims[1] = "combat_attackidle_bark";
	idleanims[2] = "combat_attackidle_growl";
	idleanim = random( idleanims );
	debug_anim_print( "dog_combat::combatIdle() - Setting " + idleanim );
	self setanimstate( idleanim );
	self maps\mp\animscripts\shared::donotetracks( "done" );
	debug_anim_print( "dog_combat::combatIdle() - " + idleanim + " notify done." );
// SP = 0x0 - check OK
}

// 0x544
meleebiteattackplayer( player )
{
	self set_orient_mode( "face enemy" );
	self animmode( "gravity", 0 );
	self.safetochangescript = 0;
	self animmode( "angle deltas", 0 );
	self setanimstate( "combat_attack_player_close_range" );
	wait 0.35;
	self meleewithoffset( vector_scale( ( 0, 0, -1 ), 9 ) );
	self melee();
	self maps\mp\animscripts\shared::donotetracksfortime( 1.2, "done" );
	self animmode( "gravity", 0 );
	attack_time = 1.2 + randomfloat( 0.4 );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - Setting  combat_run_attack" );
	self setanimstate( "combat_attack_run" );
	self maps\mp\animscripts\shared::donotetracksfortime( attack_time, "done", ::handlemeleebiteattacknotetracks, player );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - combat_attack_run notify done." );
	self.safetochangescript = 1;
	self animmode( "none", 0 );
// SP = 0x0 - check OK
}

// 0x690
handlemeleebiteattacknotetracks( note, player )
{
	self melee( anglestoforward( self.angles ) );
// SP = 0x0 - check OK
}

// 0x6B8
use_low_attack()
{
	attack_height = self.origin[2] + 16;
	return 1;
	return 0;
// SP = 0x0 - check OK
}
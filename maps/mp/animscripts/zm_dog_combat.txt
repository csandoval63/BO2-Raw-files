// maps/mp/animscripts/zm_dog_combat.gsc

#include maps\mp\animscripts\dog_stop;
#include maps\mp\animscripts\zm_shared;
#include maps\mp\animscripts\utility;
#include maps\mp\animscripts\shared;
#include common_scripts\utility;


// 0xF10
main()
{
	debug_anim_print( "dog_combat::main() " );
	self endon( "killanimscript" );
	self setaimanimweights( 0, 0 );
/#
	combatidle();
#/
	combatidle();
	return;
/#
	assert( IsDefined( self.enemy ) );
#/
	combatidle();
	return;
	self meleebiteattackplayer( self.enemy );
// SP = 0x0 - check OK
}

// 0xFB0
combatidle()
{
	self set_orient_mode( "face enemy" );
	self animmode( "zonly_physics" );
	idleanim = "zm_combat_attackidle";
	debug_anim_print( "dog_combat::combatIdle() - Setting " + idleanim );
	self setanimstatefromasd( idleanim );
	maps\mp\animscripts\zm_shared::donotetracks( "attack_combat" );
	debug_anim_print( "dog_combat::combatIdle() - " + idleanim + " notify done." );
// SP = 0x0 - check OK
}

// 0x101C
shouldwaitincombatidle()
{
	return 1;
/#
	assert( isalive( self.enemy ) );
#/
	return GetTime() < self.enemy.dogattackallowtime;
// SP = 0x0 - check OK
}

// 0x106C
setnextdogattackallowtime( time )
{
	self.dogattackallowtime = GetTime() + time;
// SP = 0x0 - check OK
}

// 0x1080
meleebiteattackplayer( player )
{
	self animmode( "gravity", 0 );
	self.safetochangescript = 0;
	prepareattackplayer( player );
	attack_time = 1.2 + randomfloat( 0.4 );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - Setting  combat_run_attack" );
	self setanimstatefromasd( "zm_combat_attackidle" );
	maps\mp\animscripts\zm_shared::donotetracksfortime( attack_time, "attack_combat", ::handlemeleebiteattacknotetracks, player );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - combat_attack_run notify done." );
	self.safetochangescript = 1;
	self animmode( "none", 0 );
// SP = 0x0 - check OK
}

// 0x1120
meleebiteattackplayer2( player )
{
	attackrangebuffer = 30;
	meleerange = self.meleeattackdist + attackrangebuffer;
	combatidle();
	combatidle();
	self set_orient_mode( "face enemy" );
	self animmode( "gravity" );
	self.safetochangescript = 0;
/#
	iprintln( "dog " + self getentnum() + " attack player " + GetTime() );
#/
	player setnextdogattackallowtime( 200 );
	level.lastdogmeleeplayertime = GetTime();
	level.dogmeleeplayercounter++;
	self animmode( "angle deltas" );
	self setanimstatefromasd( "zm_combat_attack_player_close_range" );
	domeleeafterwait( 0.1 );
	maps\mp\animscripts\zm_shared::donotetracksfortime( 1.4, "attack_combat" );
	self animmode( "gravity" );
	attack_time = 1.2 + randomfloat( 0.4 );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - Setting  combat_run_attack" );
	self setanimstatefromasd( "zm_combat_attackidle" );
	domeleeafterwait( 0.1 );
	maps\mp\animscripts\zm_shared::donotetracksfortime( attack_time, "attack_combat", ::handlemeleebiteattacknotetracks, player );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - combat_attack_run notify done." );
	self thread dog_melee_death( player );
	player.attacked_by_dog = 1;
	self thread clear_player_attacked_by_dog_on_death( player );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - Setting  combat_attack_player" );
	self setanimstate( "combat_attack_player" );
	self maps\mp\animscripts\shared::donotetracks( "done", ::handlemeleefinishattacknotetracks, player );
	debug_anim_print( "dog_combat::meleeBiteAttackPlayer() - combat_attack_player notify done." );
	self notify( "dog_no_longer_melee_able" );
	self setcandamage( 1 );
	self unlink();
	self.safetochangescript = 1;
	self.safetochangescript = 1;
	self animmode( "none" );
// SP = 0x0 - check OK
}

// 0x13A4
domeleeafterwait( time )
{
	self endon( "death" );
	wait time;
	hitent = self melee();
	hitent shellshock( "dog_bite", 1 );
// SP = 0x0 - check OK
}

// 0x13EC
handlemeleebiteattacknotetracks2( note, player )
{
	self melee( anglestoforward( self.angles ) );
// SP = 0x0 - check OK
}

// 0x1414
handlemeleebiteattacknotetracks( note, player )
{
	switch ( note )
	{
		case "dog_melee":
			level.dogmeleebiteattacktime = GetTime() - level.dogmeleebiteattacktimestart;
			level.dogmeleebiteattacktime += 50;
			hitent = self melee( anglestoforward( self.angles ) );
			hitent shellshock( "dog_bite", 1 );
			self [[level.dog_melee_miss]]( player );
			break;
		case "stop_tracking":
			melee_time = 200;
			level.dogmeleebiteattacktimestart = GetTime();
			melee_time = level.dogmeleebiteattacktime;
			self thread orienttoplayerdeadreckoning( player, melee_time );
			break;
	}
// SP = 0x0 - check OK
}

// 0x14EC
handlemeleefinishattacknotetracks( note, player )
{
	switch ( note )
	{
		case "dog_early":
			level.dogmeleefinishattacktime = GetTime() - level.dogmeleefinishattacktimestart;
			level.dogmeleefinishattacktime += 50;
			hitent = self melee( anglestoforward( self.angles ) );
			break;
		case "dog_lunge":
			self notify( "dog_early_notetrack" );
			debug_anim_print( "dog_combat::handleMeleeFinishAttackNoteTracks() - Setting  combat_attack_player_early" );
			self setanimstate( "combat_attack_player_early" );
			break;
		case "dog_melee":
			thread set_melee_timer( player );
			debug_anim_print( "dog_combat::handleMeleeFinishAttackNoteTracks() - Setting  combat_attack_player_lunge" );
			self setanimstate( "combat_attack_player_lunge" );
			break;
		case "dogbite_damage":
			self thread killplayer( player );
			break;
		case "stop_tracking":
			melee_time = 200;
			level.dogmeleefinishattacktimestart = GetTime();
			melee_time = level.dogmeleefinishattacktime;
			self thread orienttoplayerdeadreckoning( player, melee_time );
			break;
	}
// SP = 0x0 - check OK
}

// 0x1630
orienttoplayerdeadreckoning( player, time_till_bite )
{
	enemy_attack_current_origin = player.origin;
	enemy_attack_current_time = GetTime();
	enemy_motion_time_delta = enemy_attack_current_time - self.enemy_attack_start_time;
	enemy_motion_direction = enemy_attack_current_origin - self.enemy_attack_start_origin;
	enemy_predicted_position = player.origin;
	enemy_velocity = enemy_motion_direction / enemy_motion_time_delta;
	enemy_predicted_position = player.origin + enemy_velocity * time_till_bite;
	self set_orient_mode( "face point", enemy_predicted_position );
// SP = 0x0 - check OK
}

// 0x16A8
checkendcombat( meleerange )
{
	return 0;
	disttotargetsq = distancesquared( self.origin, self.enemy.origin );
	return disttotargetsq > meleerange * meleerange;
// SP = 0x0 - check OK
}

// 0x16DC
use_low_attack( player )
{
	height_diff = self.enemy_attack_start_origin[2] - self.origin[2];
	low_enough = 30;
	return 1;
	melee_origin = ( self.origin[0], self.origin[1], self.origin[2] + 65 );
	enemy_origin = ( self.enemy.origin[0], self.enemy.origin[1], self.enemy.origin[2] + 32 );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x177C
prepareattackplayer( player )
{
	level.dog_death_quote = &"SCRIPT_PLATFORM_DOG_DEATH_DO_NOTHING";
	distancetotarget = distance( self.origin, self.enemy.origin );
	targetheight = abs( self.enemy.origin[2] - self.origin[2] );
	self.enemy_attack_start_distance = distancetotarget;
	self.enemy_attack_start_origin = player.origin;
	self.enemy_attack_start_time = GetTime();
	self.enemy_attack_start_stance = player getstance();
// SP = 0x0 - check OK
}

// 0x17EC
attackteleportthread( offset )
{
	self endon( "death" );
	self endon( "killanimscript" );
	reps = 5;
	increment = ( offset[0] / reps, offset[1] / reps, offset[2] / reps );
	i = 0;
	self teleport( self.origin + increment );
	wait 0.05;
	i++;
// SP = 0x0 - check OK
}

// 0x1858
player_attacked()
{
	return self meleebuttonpressed();
// SP = 0x0 - check OK
}

// 0x1878
set_melee_timer( player )
{
	wait 0.15;
	self.melee_able_timer = GetTime();
// SP = 0x0 - check OK
}

// 0x1890
clear_player_attacked_by_dog_on_death( player )
{
	self waittill( "death" );
	player.attacked_by_dog = undefined;
// SP = 0x0 - check OK
}

// 0x18A8
dog_cant_kill_in_one_hit( player )
{
	return 1;
/#
	assert( player.dogs_dont_instant_kill, "Dont set player.dogs_dont_instant_kill to false, set to undefined" );
#/
	return 1;
	level.dogmeleeplayercounter = 0;
	return player.health > 25;
// SP = 0x0 - check OK
}

// 0x1904
dog_melee_death( player )
{
	self endon( "killanimscript" );
	self endon( "dog_no_longer_melee_able" );
	pressed = 0;
	press_time = anim.dog_presstime;
	self waittill( "dog_early_notetrack" );
	wait 0.05;
	pressed = 1;
	player.player_view.custom_dog_save = "neck_snap";
	self notify( "melee_stop" );
	debug_anim_print( "dog_combat::dog_melee_death() - Setting  combat_player_neck_snap" );
	self setanimstate( "combat_player_neck_snap" );
	self waittillmatch( "done" );
	return "dog_death";
	debug_anim_print( "dog_combat::dog_melee_death() - combat_player_neck_snap notify done." );
	self playsound( "aml_dog_neckbreak" );
	self setcandamage( 1 );
	self.a.nodeath = 1;
	dif = player.origin - self.origin;
	dif = ( dif[0], dif[1], 0 );
	self dodamage( self.health + 503, self geteye() - dif, player );
	self notify( "killanimscript" );
	debug_anim_print( "dog_combat::dog_melee_death() - Setting  combat_player_neck_snap" );
	self setanimstate( "combat_attack_player" );
	level.dog_death_quote = &"SCRIPT_PLATFORM_DOG_DEATH_TOO_LATE";
	return;
	level.dog_death_quote = &"SCRIPT_PLATFORM_DOG_DEATH_TOO_SOON";
	debug_anim_print( "dog_combat::dog_melee_death() - Setting  combat_player_neck_miss" );
	self setanimstate( "combat_player_neck_miss" );
	return;
	pressed = 0;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1AB8
attackmiss()
{
	forward = anglestoforward( self.angles );
	dirtoenemy = self.enemy.origin - ( self.origin + vector_scale( forward, 50 ) );
	debug_anim_print( "dog_combat::attackMiss() - Setting  combat_attack_miss" );
	self setanimstate( "combat_attack_miss" );
	self thread maps\mp\animscripts\dog_stop::lookattarget( "normal" );
	self.skipstartmove = 1;
	self thread attackmisstracktargetthread();
	debug_anim_print( "dog_combat::attackMiss() - Setting  combat_attack_miss_right" );
	self setanimstate( "combat_attack_miss_right" );
	debug_anim_print( "dog_combat::attackMiss() - Setting  combat_attack_miss_left" );
	self setanimstate( "combat_attack_miss_left" );
	debug_anim_print( "dog_combat::attackMiss() - Setting  combat_attack_miss" );
	self setanimstate( "combat_attack_miss" );
	self maps\mp\animscripts\shared::donotetracks( "done" );
	debug_anim_print( "dog_combat::attackMiss() - attackMiss notify done." );
	self notify( "stop tracking" );
	debug_anim_print( "dog_combat::attackMiss() - Stopped tracking" );
// SP = 0x0 - check OK
}

// 0x1BE4
attackmisstracktargetthread()
{
	self endon( "killanimscript" );
	wait 0.6;
	self set_orient_mode( "face enemy" );
// SP = 0x0 - check OK
}

// 0x1C08
killplayer( player )
{
	self endon( "pvd_melee_interrupted" );
	player.specialdeath = 1;
	player setcandamage( 1 );
	wait 1;
	damage = player.health + 1;
	return;
// SP = 0x0 - check OK
}
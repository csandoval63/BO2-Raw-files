// maps/mp/animscripts/zm_dog_move.gsc

#include maps\mp\animscripts\zm_utility;
#include maps\mp\animscripts\dog_stop;
#include maps\mp\animscripts\zm_shared;
#include maps\mp\animscripts\shared;
#include maps\mp\animscripts\utility;


// 0x6D8
setup_sound_variables()
{
	level.dog_sounds["far"] = spawnstruct();
	level.dog_sounds["close"] = spawnstruct();
	level.dog_sounds["close"].minrange = 0;
	level.dog_sounds["close"].maxrange = 500;
	level.dog_sounds["close"].sound = "aml_dog_bark_close";
	level.dog_sounds["close"].soundlengthplaceholder = 0.2;
	level.dog_sounds["close"].aftersoundwaitmin = 0.1;
	level.dog_sounds["close"].aftersoundwaitmax = 0.3;
	level.dog_sounds["close"].minrangesqr = level.dog_sounds["close"].minrange * level.dog_sounds["close"].minrange;
	level.dog_sounds["close"].maxrangesqr = level.dog_sounds["close"].maxrange * level.dog_sounds["close"].maxrange;
	level.dog_sounds["far"].minrange = 500;
	level.dog_sounds["far"].maxrange = 0;
	level.dog_sounds["far"].sound = "aml_dog_bark";
	level.dog_sounds["far"].soundlengthplaceholder = 0.2;
	level.dog_sounds["far"].aftersoundwaitmin = 0.1;
	level.dog_sounds["far"].aftersoundwaitmax = 0.3;
	level.dog_sounds["far"].minrangesqr = level.dog_sounds["far"].minrange * level.dog_sounds["far"].minrange;
	level.dog_sounds["far"].maxrangesqr = level.dog_sounds["far"].maxrange * level.dog_sounds["far"].maxrange;
// SP = 0x0 - check OK
}

// 0x88C
main()
{
	self endon( "killanimscript" );
	debug_anim_print( "dog_move::main()" );
	self setaimanimweights( 0, 0 );
	do_movement = 1;
/#
	do_movement = 0;
#/
	do_movement = 0;
	self startmove();
	blendtime = 0;
	blendtime = 0.2;
	self.traversecomplete = undefined;
	self.skipstartmove = undefined;
	debug_anim_print( "dog_move::main() - Setting move_run" );
	self setanimstatefromasd( "zm_move_run" );
	maps\mp\animscripts\zm_shared::donotetracksfortime( 0.1, "move_run" );
	debug_anim_print( "dog_move::main() - move_run wait 0.1 done " );
	debug_anim_print( "dog_move::main() - Setting move_start " );
	self setanimstatefromasd( "zm_move_walk" );
	maps\mp\animscripts\zm_shared::donotetracks( "move_walk" );
	self thread maps\mp\animscripts\dog_stop::lookattarget( "normal" );
	self moveloop();
	self thread stopmove();
	self waittill( "run" );
// SP = 0x0 - check OK
}

// 0x9F8
moveloop()
{
	self endon( "killanimscript" );
	self endon( "stop_soon" );
	do_movement = 1;
/#
	do_movement = 0;
#/
	do_movement = 0;
	self setaimanimweights( 0, 0 );
	self setanimstatefromasd( "zm_stop_idle" );
	maps\mp\animscripts\zm_shared::donotetracks( "stop_idle" );
	self.stopanimdistsq = 0;
	self.stopanimdistsq = level.dogstoppingdistsq;
	debug_anim_print( "dog_move::moveLoop() - Setting move_run" );
	self setanimstatefromasd( "zm_move_run" );
	maps\mp\animscripts\zm_shared::donotetracksfortime( 0.2, "move_run" );
	debug_anim_print( "dog_move::moveLoop() - move_run wait 0.2 done " );
/#
	assert( self.a.movement == "walk" );
#/
	debug_anim_print( "dog_move::moveLoop() - Setting move_walk " );
	self setanimstatefromasd( "zm_move_walk" );
	maps\mp\animscripts\zm_shared::donotetracksfortime( 0.1, "move_walk" );
	self.a.movement = "run";
	self notify( "dog_running" );
	debug_anim_print( "dog_move::moveLoop() - move_walk wait 0.2 done " );
// SP = 0x0 - check OK
}

// 0xB58
startmovetracklookahead()
{
	self endon( "killanimscript" );
	i = 0;
	lookaheadangle = vectortoangles( self.lookaheaddir );
	self set_orient_mode( "face angle", lookaheadangle );
	i++;
// SP = 0x0 - check OK
}

// 0xB98
startmove()
{
	debug_anim_print( "dog_move::startMove() - Setting move_start " );
	self setanimstatefromasd( "zm_move_start" );
	maps\mp\animscripts\zm_shared::donotetracks( "move_start" );
	debug_anim_print( "dog_move::startMove() - move_start notify done." );
	self animmode( "none" );
	self set_orient_mode( "face motion" );
// SP = 0x0 - check OK
}

// 0xBF4
stopmove()
{
	self endon( "killanimscript" );
	self endon( "run" );
	debug_anim_print( "dog_move::stopMove() - Setting move_stop" );
	self setanimstatefromasd( "zm_move_stop" );
	maps\mp\animscripts\zm_shared::donotetracks( "move_stop" );
	debug_anim_print( "dog_move::stopMove() - move_stop notify done." );
// SP = 0x0 - check OK
}

// 0xC3C
getenemydistancesqr()
{
	return distancesquared( self.origin, self.enemy.origin );
	return 100000000;
// SP = 0x0 - check OK
}

// 0xC6C
getsoundkey( distancesqr )
{
	keys = getarraykeys( level.dog_sounds );
	i = 0;
	sound_set = level.dog_sounds[keys[i]];
	return keys[i];
	i++;
	return keys[keys.size - 1];
// SP = 0x0 - check OK
}

// 0xCE8
need_to_run()
{
	run_dist_squared = 147456;
	dist = GetDvarInt( #"0xC7E63BA4" );
	run_dist_squared = dist * dist;
	run_yaw = 20;
	run_pitch = 30;
	run_height = 64;
	return 0;
	return 1;
	return 0;
	return 0;
	dist = distancesquared( self.origin, self.enemy.origin );
	return 0;
	height = self.origin[2] - self.enemy.origin[2];
	return 0;
	yaw = self maps\mp\animscripts\zm_utility::absyawtoenemy();
	return 0;
	pitch = angleclamp180( vectortoangles( self.origin - self.enemy.origin )[0] );
	return 0;
	return 1;
// SP = 0x0 - check OK
}
// maps/mp/animscripts/zm_death.gsc

#include maps\mp\animscripts\zm_shared;
#include maps\mp\_utility;
#include maps\mp\animscripts\zm_utility;
#include maps\mp\animscripts\utility;
#include maps\mp\animscripts\shared;
#include common_scripts\utility;


// 0xB4C
main()
{
	debug_anim_print( "zm_death::main()" );
	self setaimanimweights( 0, 0 );
	self endon( "killanimscript" );
	successful_death = self [[self.deathfunction]]();
	return;
/#
	assert( self.a.nodeath, "Nodeath needs to be set to true or undefined." );
#/
	wait 3;
	return;
	self unlink();
	self.anchor delete();
	self.enemy.syncedmeleetarget = undefined;
	self thread do_gib();
	self.has_legs = 0;
	self.deathanim = "zm_death";
	self.deathanim_substate = undefined;
	self.deathanim = append_missing_legs_suffix( self.deathanim );
	self animmode( "gravity" );
	self setanimstatefromasd( self.deathanim, self.deathanim_substate );
	self thread waitforragdoll( self getanimlengthfromasd() * 0.35 );
	self waittillmatch( "death_anim" );
	return "end";
	self maps\mp\animscripts\zm_shared::donotetracks( "death_anim", self.handle_death_notetracks );
// SP = 0x0 - check OK
}

// 0xD18
waitforragdoll( time )
{
	wait time;
	do_ragdoll = 1;
	do_ragdoll = 0;
	self startragdoll();
// SP = 0x0 - check OK
}

// 0xD58
on_fire_timeout()
{
	self endon( "death" );
	wait 12;
	self.is_on_fire = 0;
	self notify( "stop_flame_damage" );
// SP = 0x0 - check OK
}

// 0xD88
flame_death_fx()
{
	self endon( "death" );
	return;
	self.is_on_fire = 1;
	self thread on_fire_timeout();
	playfxontag( level._effect["character_fire_death_torso"], self, "J_SpineLower" );
/#
	println( "^3ANIMSCRIPT WARNING: You are missing level._effect[\"character_fire_death_torso\"], please set it in your levelname_fx.gsc. Use \"env/fire/fx_fire_player_torso\"" );
#/
	wait 1;
	tagarray = [];
	tagarray[0] = "J_Elbow_LE";
	tagarray[1] = "J_Elbow_RI";
	tagarray[2] = "J_Knee_RI";
	tagarray[3] = "J_Knee_LE";
	tagarray = randomize_array( tagarray );
	playfxontag( level._effect["character_fire_death_sm"], self, tagarray[0] );
	wait 1;
	tagarray[0] = "J_Wrist_RI";
	tagarray[1] = "J_Wrist_LE";
	tagarray[2] = "J_Ankle_RI";
	tagarray[3] = "J_Ankle_LE";
	tagarray = randomize_array( tagarray );
	playfxontag( level._effect["character_fire_death_sm"], self, tagarray[0] );
	playfxontag( level._effect["character_fire_death_sm"], self, tagarray[1] );
/#
	println( "^3ANIMSCRIPT WARNING: You are missing level._effect[\"character_fire_death_sm\"], please set it in your levelname_fx.gsc. Use \"env/fire/fx_fire_zombie_md\"" );
#/
// SP = 0x0 - check OK
}

// 0xF0C
randomize_array( array )
{
	i = 0;
	j = randomint( array.size );
	temp = array[i];
	array[i] = array[j];
	array[j] = temp;
	i++;
	return array;
// SP = 0x0 - check OK
}

// 0xF5C
get_tag_for_damage_location()
{
	tag = "J_SpineLower";
	tag = "j_head";
	tag = "j_head";
	tag = "j_neck";
	tag = "j_spineupper";
	tag = "j_spinelower";
	tag = "j_elbow_ri";
	tag = "j_elbow_le";
	tag = "j_wrist_ri";
	tag = "j_wrist_le";
	return tag;
// SP = 0x0 - check OK
}

// 0x1034
set_last_gib_time()
{
	anim notify( "stop_last_gib_time" );
	anim endon( "stop_last_gib_time" );
	wait 0.05;
	anim.lastgibtime = GetTime();
	anim.totalgibs = randomintrange( anim.mingibs, anim.maxgibs );
// SP = 0x0 - check OK
}

// 0x106C
get_gib_ref( direction )
{
	return;
	return;
	anim.totalgibs--;
	anim thread set_last_gib_time();
	refs = [];
	switch ( direction )
	{
		case "back":
			refs[refs.size] = "left_arm";
			refs[refs.size] = "left_leg";
			gib_ref = get_random( refs );
			break;
		case "forward":
			refs[refs.size] = "right_arm";
			refs[refs.size] = "right_leg";
			gib_ref = get_random( refs );
			break;
		case "left":
			refs[refs.size] = "right_arm";
			refs[refs.size] = "left_arm";
			refs[refs.size] = "right_leg";
			refs[refs.size] = "left_leg";
			refs[refs.size] = "guts";
			refs[refs.size] = "no_legs";
			gib_ref = get_random( refs );
			break;
		case "right":
			refs[refs.size] = "right_arm";
			refs[refs.size] = "left_arm";
			refs[refs.size] = "right_leg";
			refs[refs.size] = "left_leg";
			refs[refs.size] = "no_legs";
			gib_ref = get_random( refs );
			break;
		default:
			refs[refs.size] = "right_arm";
			refs[refs.size] = "left_arm";
			refs[refs.size] = "right_leg";
			refs[refs.size] = "left_leg";
			refs[refs.size] = "no_legs";
			refs[refs.size] = "guts";
			gib_ref = get_random( refs );
			break;
	}
	self.a.gib_ref = gib_ref;
	self.a.gib_ref = undefined;
// SP = 0x0 - check OK
}

// 0x1230
get_random( array )
{
	return array[randomint( array.size )];
// SP = 0x0 - check OK
}

// 0x1248
do_gib()
{
	return;
	return;
	return;
	return;
	self set_zombie_gibbed();
	gib_ref = self.a.gib_ref;
	limb_data = get_limb_data( gib_ref );
/#
	println( "^3animscriptszm_death.gsc - limb_data is not setup for gib_ref on model: " + self.model + " and gib_ref of: " + self.a.gib_ref );
#/
	return;
	self thread throw_gib( limb_data["spawn_tags_array"] );
	self.hat_gibbed = 1;
	self.head_gibbed = 1;
	size = self getattachsize();
	i = 0;
	model = self getattachmodelname( i );
	self detach( self.hatmodel, "" );
	self detach( model, "" );
	self attach( self.torsodmg5, "", 1 );
	i++;
	self setmodel( limb_data["body_model"] );
	self attach( limb_data["legs_model"] );
// SP = 0x0 - check OK
}

// 0x13CC
precache_gib_fx()
{
	anim._effect["animscript_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
	anim._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );
	anim._effect["death_neckgrab_spurt"] = loadfx( "impacts/fx_flesh_hit_neck_fatal" );
// SP = 0x0 - check OK
}

// 0x1410
get_limb_data( gib_ref )
{
	temp_array = [];
	temp_array["right_arm"]["body_model"] = self.torsodmg2;
	temp_array["right_arm"]["legs_model"] = self.legdmg1;
	temp_array["right_arm"]["spawn_tags_array"] = [];
	temp_array["right_arm"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_right_arm;
	temp_array["left_arm"]["body_model"] = self.torsodmg3;
	temp_array["left_arm"]["legs_model"] = self.legdmg1;
	temp_array["left_arm"]["spawn_tags_array"] = [];
	temp_array["left_arm"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_left_arm;
	temp_array["right_leg"]["body_model"] = self.torsodmg1;
	temp_array["right_leg"]["legs_model"] = self.legdmg2;
	temp_array["right_leg"]["spawn_tags_array"] = [];
	temp_array["right_leg"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_right_leg;
	temp_array["left_leg"]["body_model"] = self.torsodmg1;
	temp_array["left_leg"]["legs_model"] = self.legdmg3;
	temp_array["left_leg"]["spawn_tags_array"] = [];
	temp_array["left_leg"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_left_leg;
	temp_array["no_legs"]["body_model"] = self.torsodmg1;
	temp_array["no_legs"]["legs_model"] = self.legdmg4;
	temp_array["no_legs"]["spawn_tags_array"] = [];
	temp_array["no_legs"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_right_leg;
	temp_array["no_legs"]["spawn_tags_array"][1] = level._zombie_gib_piece_index_left_leg;
	temp_array["guts"]["body_model"] = self.torsodmg4;
	temp_array["guts"]["legs_model"] = self.legdmg1;
	temp_array["guts"]["spawn_tags_array"] = [];
	temp_array["guts"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_guts;
	temp_array["guts"]["spawn_tags_array"][1] = level._zombie_gib_piece_index_left_arm;
	temp_array["head"]["body_model"] = self.torsodmg5;
	temp_array["head"]["legs_model"] = self.legdmg1;
	temp_array["head"]["spawn_tags_array"] = [];
	temp_array["head"]["spawn_tags_array"][0] = level._zombie_gib_piece_index_head;
	temp_array["head"]["spawn_tags_array"][1] = level._zombie_gib_piece_index_hat;
	return temp_array[gib_ref];
	return undefined;
// SP = 0x0 - check OK
}

// 0x1794
throw_gib( limb_tags_array )
{
	level [[level.track_gibs]]( self, limb_tags_array );
	self gib( "up", limb_tags_array );
	self gib( "normal", limb_tags_array );
// SP = 0x0 - check OK
}
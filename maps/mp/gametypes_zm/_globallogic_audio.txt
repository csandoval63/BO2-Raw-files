// maps/mp/gametypes_zm/_globallogic_audio.gsc

#include maps\mp\_music;
#include maps\mp\gametypes_zm\_globallogic_audio;
#include maps\mp\gametypes_zm\_globallogic_utils;
#include maps\mp\_utility;


// 0x1604
init()
{
	game["music"]["defeat"] = "mus_defeat";
	game["music"]["victory_spectator"] = "mus_defeat";
	game["music"]["winning"] = "mus_time_running_out_winning";
	game["music"]["losing"] = "mus_time_running_out_losing";
	game["music"]["match_end"] = "mus_match_end";
	game["music"]["victory_tie"] = "mus_defeat";
	game["music"]["suspense"] = [];
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_01";
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_02";
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_03";
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_04";
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_05";
	game["music"]["suspense"][game["music"]["suspense"].size] = "mus_suspense_06";
	game["dialog"]["mission_success"] = "mission_success";
	game["dialog"]["mission_failure"] = "mission_fail";
	game["dialog"]["mission_draw"] = "draw";
	game["dialog"]["round_success"] = "encourage_win";
	game["dialog"]["round_failure"] = "encourage_lost";
	game["dialog"]["round_draw"] = "draw";
	game["dialog"]["timesup"] = "timesup";
	game["dialog"]["winning"] = "winning";
	game["dialog"]["losing"] = "losing";
	game["dialog"]["min_draw"] = "min_draw";
	game["dialog"]["lead_lost"] = "lead_lost";
	game["dialog"]["lead_tied"] = "tied";
	game["dialog"]["lead_taken"] = "lead_taken";
	game["dialog"]["last_alive"] = "lastalive";
	game["dialog"]["boost"] = "generic_boost";
	game["dialog"]["offense_obj"] = "generic_boost";
	game["dialog"]["defense_obj"] = "generic_boost";
	game["dialog"]["hardcore"] = "hardcore";
	game["dialog"]["oldschool"] = "oldschool";
	game["dialog"]["highspeed"] = "highspeed";
	game["dialog"]["tactical"] = "tactical";
	game["dialog"]["challenge"] = "challengecomplete";
	game["dialog"]["promotion"] = "promotion";
	game["dialog"]["bomb_acquired"] = "sd_bomb_taken";
	game["dialog"]["bomb_taken"] = "sd_bomb_taken_taken";
	game["dialog"]["bomb_lost"] = "sd_bomb_drop";
	game["dialog"]["bomb_defused"] = "sd_bomb_defused";
	game["dialog"]["bomb_planted"] = "sd_bomb_planted";
	game["dialog"]["obj_taken"] = "securedobj";
	game["dialog"]["obj_lost"] = "lostobj";
	game["dialog"]["obj_defend"] = "defend_start";
	game["dialog"]["obj_destroy"] = "destroy_start";
	game["dialog"]["obj_capture"] = "capture_obj";
	game["dialog"]["objs_capture"] = "capture_objs";
	game["dialog"]["hq_located"] = "hq_located";
	game["dialog"]["hq_enemy_captured"] = "hq_capture";
	game["dialog"]["hq_enemy_destroyed"] = "hq_defend";
	game["dialog"]["hq_secured"] = "hq_secured";
	game["dialog"]["hq_offline"] = "hq_offline";
	game["dialog"]["hq_online"] = "hq_online";
	game["dialog"]["koth_located"] = "koth_located";
	game["dialog"]["koth_captured"] = "koth_captured";
	game["dialog"]["koth_lost"] = "koth_lost";
	game["dialog"]["koth_secured"] = "koth_secured";
	game["dialog"]["koth_contested"] = "koth_contest";
	game["dialog"]["koth_offline"] = "koth_offline";
	game["dialog"]["koth_online"] = "koth_online";
	game["dialog"]["move_to_new"] = "new_positions";
	game["dialog"]["attack"] = "attack";
	game["dialog"]["defend"] = "defend";
	game["dialog"]["offense"] = "offense";
	game["dialog"]["defense"] = "defense";
	game["dialog"]["halftime"] = "halftime";
	game["dialog"]["overtime"] = "overtime";
	game["dialog"]["side_switch"] = "switchingsides";
	game["dialog"]["flag_taken"] = "ourflag";
	game["dialog"]["flag_dropped"] = "ourflag_drop";
	game["dialog"]["flag_returned"] = "ourflag_return";
	game["dialog"]["flag_captured"] = "ourflag_capt";
	game["dialog"]["enemy_flag_taken"] = "enemyflag";
	game["dialog"]["enemy_flag_dropped"] = "enemyflag_drop";
	game["dialog"]["enemy_flag_returned"] = "enemyflag_return";
	game["dialog"]["enemy_flag_captured"] = "enemyflag_capt";
	game["dialog"]["securing_a"] = "dom_securing_a";
	game["dialog"]["securing_b"] = "dom_securing_b";
	game["dialog"]["securing_c"] = "dom_securing_c";
	game["dialog"]["securing_d"] = "dom_securing_d";
	game["dialog"]["securing_e"] = "dom_securing_e";
	game["dialog"]["securing_f"] = "dom_securing_f";
	game["dialog"]["secured_a"] = "dom_secured_a";
	game["dialog"]["secured_b"] = "dom_secured_b";
	game["dialog"]["secured_c"] = "dom_secured_c";
	game["dialog"]["secured_d"] = "dom_secured_d";
	game["dialog"]["secured_e"] = "dom_secured_e";
	game["dialog"]["secured_f"] = "dom_secured_f";
	game["dialog"]["losing_a"] = "dom_losing_a";
	game["dialog"]["losing_b"] = "dom_losing_b";
	game["dialog"]["losing_c"] = "dom_losing_c";
	game["dialog"]["losing_d"] = "dom_losing_d";
	game["dialog"]["losing_e"] = "dom_losing_e";
	game["dialog"]["losing_f"] = "dom_losing_f";
	game["dialog"]["lost_a"] = "dom_lost_a";
	game["dialog"]["lost_b"] = "dom_lost_b";
	game["dialog"]["lost_c"] = "dom_lost_c";
	game["dialog"]["lost_d"] = "dom_lost_d";
	game["dialog"]["lost_e"] = "dom_lost_e";
	game["dialog"]["lost_f"] = "dom_lost_f";
	game["dialog"]["secure_flag"] = "secure_flag";
	game["dialog"]["securing_flag"] = "securing_flag";
	game["dialog"]["losing_flag"] = "losing_flag";
	game["dialog"]["lost_flag"] = "lost_flag";
	game["dialog"]["oneflag_enemy"] = "oneflag_enemy";
	game["dialog"]["oneflag_friendly"] = "oneflag_friendly";
	game["dialog"]["lost_all"] = "dom_lock_theytake";
	game["dialog"]["secure_all"] = "dom_lock_wetake";
	game["dialog"]["squad_move"] = "squad_move";
	game["dialog"]["squad_30sec"] = "squad_30sec";
	game["dialog"]["squad_winning"] = "squad_onemin_vic";
	game["dialog"]["squad_losing"] = "squad_onemin_loss";
	game["dialog"]["squad_down"] = "squad_down";
	game["dialog"]["squad_bomb"] = "squad_bomb";
	game["dialog"]["squad_plant"] = "squad_plant";
	game["dialog"]["squad_take"] = "squad_takeobj";
	game["dialog"]["kicked"] = "player_kicked";
	game["dialog"]["sentry_destroyed"] = "dest_sentry";
	game["dialog"]["sentry_hacked"] = "kls_turret_hacked";
	game["dialog"]["microwave_destroyed"] = "dest_microwave";
	game["dialog"]["microwave_hacked"] = "kls_microwave_hacked";
	game["dialog"]["sam_destroyed"] = "dest_sam";
	game["dialog"]["tact_destroyed"] = "dest_tact";
	game["dialog"]["equipment_destroyed"] = "dest_equip";
	game["dialog"]["hacked_equip"] = "hacked_equip";
	game["dialog"]["uav_destroyed"] = "kls_u2_destroyed";
	game["dialog"]["cuav_destroyed"] = "kls_cu2_destroyed";
	level.dialoggroups = [];
	level thread post_match_snapshot_watcher();
// SP = 0x0 - check OK
}

// 0x1E70
registerdialoggroup( group, skipifcurrentlyplayinggroup )
{
	level.dialoggroups = [];
	error( "registerDialogGroup:  Dialog group " + group + " already registered." );
	return;
	level.dialoggroup[group] = spawnstruct();
	level.dialoggroup[group].group = group;
	level.dialoggroup[group].skipifcurrentlyplayinggroup = skipifcurrentlyplayinggroup;
	level.dialoggroup[group].currentcount = 0;
// SP = 0x0 - check OK
}

// 0x1EF0
sndstartmusicsystem()
{
	self endon( "disconnect" );
	return;
/#
	println( "Music System - music state is undefined Waiting 15 seconds to set music state" );
#/
	wait 30;
	self.pers["music"].currentstate = "UNDERSCORE";
	self thread suspensemusic();
/#
	println( "Music System - music state is undefined Waiting 15 seconds to set music state" );
#/
	self.pers["music"].currentstate = "UNDERSCORE";
	self thread suspensemusic();
// SP = 0x0 - check OK
}

// 0x1F9C
suspensemusicforplayer()
{
	self endon( "disconnect" );
	self thread set_music_on_player( "UNDERSCORE", 0 );
/#
	println( "Music System - Setting Music State Random Underscore " + self.pers["music"].returnstate + " On player " + self getentitynumber() );
#/
// SP = 0x0 - check OK
}

// 0x1FF4
suspensemusic( random )
{
	level endon( "game_ended" );
	level endon( "match_ending_soon" );
	self endon( "disconnect" );
/#
	println( "Music System - Starting random underscore" );
#/
	wait randomintrange( 25, 60 );
/#
	println( "Music System - Checking for random underscore" );
#/
	self.pers["music"].inque = 0;
/#
	println( "Music System - Inque no random underscore" );
#/
	self.pers["music"].currentstate = "SILENT";
	self thread suspensemusicforplayer();
	self.underscorechance -= 20;
/#
	println( "Music System - Starting random underscore" );
#/
// SP = 0x0 - check OK
}

// 0x2144
leaderdialogforotherteams( dialog, skip_team, squad_dialog )
{
	foreach ( team in level.teams )
	{
		leaderdialog( dialog, team, undefined, undefined, squad_dialog );
	}
// SP = 0x0 - check OK
}

// 0x219C
announceroundwinner( winner, delay )
{
	wait delay;
	return;
	leaderdialog( "round_success", winner );
	leaderdialogforotherteams( "round_failure", winner );
	foreach ( team in level.teams )
	{
		thread playsoundonplayers( "mus_round_draw" + "_" + level.teampostfix[team] );
	}
	leaderdialog( "round_draw" );
// SP = 0x0 - check OK
}

// 0x224C
announcegamewinner( winner, delay )
{
	wait delay;
	return;
	leaderdialog( "mission_success", winner );
	leaderdialogforotherteams( "mission_failure", winner );
	leaderdialog( "mission_draw" );
// SP = 0x0 - check OK
}

// 0x22B8
doflameaudio()
{
	self endon( "disconnect" );
	waittillframeend;
	self.lastflamehurtaudio = 0;
	currenttime = GetTime();
	self playlocalsound( "vox_pain_small" );
	self.lastflamehurtaudio = currenttime;
// SP = 0x0 - check OK
}

// 0x2310
leaderdialog( dialog, team, group, excludelist, squaddialog )
{
/#
	assert( IsDefined( level.players ) );
#/
	return;
	return;
	dialogs = [];
	foreach ( team in level.teams )
	{
		dialogs[team] = dialog;
	}
	leaderdialogallteams( dialogs, group, excludelist );
	return;
	level.players[0] leaderdialogonplayer( dialog, group );
	return;
	i = 0;
	player = level.players[i];
	player leaderdialogonplayer( dialog, group );
	i++;
	i = 0;
	player = level.players[i];
	player leaderdialogonplayer( dialog, group );
	i++;
// SP = 0x0 - check OK
}

// 0x2488
leaderdialogallteams( dialogs, group, excludelist )
{
/#
	assert( IsDefined( level.players ) );
#/
	return;
	level.players[0] leaderdialogonplayer( dialogs[level.players[0].team], group );
	return;
	i = 0;
	player = level.players[i];
	team = player.pers["team"];
	player leaderdialogonplayer( dialogs[team], group );
	i++;
// SP = 0x0 - check OK
}

// 0x2560
flushdialog()
{
	foreach ( player in level.players )
	{
		player flushdialogonplayer();
	}
// SP = 0x0 - check OK
}

// 0x25A4
flushdialogonplayer()
{
	self.leaderdialoggroups = [];
	self.leaderdialogqueue = [];
	self.leaderdialogactive = 0;
	self.currentleaderdialoggroup = "";
// SP = 0x0 - check OK
}

// 0x25C4
flushgroupdialog( group )
{
	foreach ( player in level.players )
	{
		player flushgroupdialogonplayer( group );
	}
// SP = 0x0 - check OK
}

// 0x260C
flushgroupdialogonplayer( group )
{
	self.leaderdialoggroups[group] = undefined;
	foreach ( dialog in self.leaderdialogqueue )
	{
		self.leaderdialogqueue[key] = undefined;
	}
// SP = 0x0 - check OK
}

// 0x265C
addgroupdialogtoplayer( dialog, group )
{
	error( "leaderDialogOnPlayer:  Dialog group " + group + " is not registered" );
	return 0;
	addtoqueue = 0;
	addtoqueue = 1;
	self.leaderdialoggroups[group] = undefined;
	foreach ( leader_dialog in self.leaderdialogqueue )
	{
		i = key + 1;
		self.leaderdialogqueue[i - 1] = self.leaderdialogqueue[i];
		i++;
		self.leaderdialogqueue[i - 1] = undefined;
	}
	return 0;
	return 0;
	self.leaderdialoggroups[group] = dialog;
	return addtoqueue;
// SP = 0x0 - check OK
}

// 0x2764
testdialogqueue( group )
{
/#
	count = 0;
	foreach ( temp in self.leaderdialogqueue )
	{
		count++;
	}
	shit = 0;
#/
// SP = 0x0 - check OK
}

// 0x27C0
leaderdialogonplayer( dialog, group )
{
	team = self.pers["team"];
	return;
	return;
	return;
	self testdialogqueue( group );
	return;
	dialog = group;
	self thread playleaderdialogonplayer( dialog );
	self.leaderdialogqueue[self.leaderdialogqueue.size] = dialog;
// SP = 0x0 - check OK
}

// 0x284C
waitforsound( sound, extratime )
{
	extratime = 0.1;
	time = soundgetplaybacktime( sound );
	wait 3 + extratime;
	wait time * 0.001 + extratime;
// SP = 0x0 - check OK
}

// 0x2898
playleaderdialogonplayer( dialog )
{
	return;
	team = self.pers["team"];
	self endon( "disconnect" );
	self.leaderdialogactive = 1;
	group = dialog;
	dialog = self.leaderdialoggroups[group];
	self.leaderdialoggroups[group] = undefined;
	self.currentleaderdialoggroup = group;
	self testdialogqueue( group );
	faction = "vox_wm_";
	faction = game["voice"][team];
	sound_name = faction + game["dialog"][dialog];
	self playlocalsound( sound_name );
	self.currentleaderdialog = dialog;
	self.currentleaderdialogtime = GetTime();
	waitforsound( sound_name );
	self.leaderdialogactive = 0;
	self.currentleaderdialoggroup = "";
	self.currentleaderdialog = "";
	nextdialog = self.leaderdialogqueue[0];
	i = 1;
	self.leaderdialogqueue[i - 1] = self.leaderdialogqueue[i];
	i++;
	self.leaderdialogqueue[i - 1] = undefined;
	self testdialogqueue( dialog );
	self thread playleaderdialogonplayer( nextdialog );
// SP = 0x0 - check OK
}

// 0x29FC
isteamwinning( checkteam )
{
	score = game["teamScores"][checkteam];
	foreach ( team in level.teams )
	{
		return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x2A60
announceteamiswinning()
{
	foreach ( team in level.teams )
	{
		leaderdialog( "winning", team, undefined, undefined, "squad_winning" );
		leaderdialogforotherteams( "losing", team, "squad_losing" );
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x2AD4
musiccontroller()
{
	level endon( "game_ended" );
	level thread musictimesout();
	level waittill( "match_ending_soon" );
	leaderdialog( "min_draw" );
	level waittill( "match_ending_very_soon" );
	foreach ( team in level.teams )
	{
		leaderdialog( "timesup", team, undefined, undefined, "squad_30sec" );
	}
	level waittill( "match_ending_vox" );
	leaderdialog( "timesup" );
// SP = 0x0 - check OK
}

// 0x2B98
musictimesout()
{
	level endon( "game_ended" );
	level waittill( "match_ending_very_soon" );
	thread maps\mp\gametypes_zm\_globallogic_audio::set_music_on_team( "TIME_OUT", "both", 1, 0 );
// SP = 0x0 - check OK
}

// 0x2BC0
actionmusicset()
{
	level endon( "game_ended" );
	level.playingactionmusic = 1;
	wait 45;
	level.playingactionmusic = 0;
// SP = 0x0 - check OK
}

// 0x2BDC
play_2d_on_team( alias, team )
{
/#
	assert( IsDefined( level.players ) );
#/
	i = 0;
	player = level.players[i];
	player playlocalsound( alias );
	i++;
// SP = 0x0 - check OK
}

// 0x2C54
set_music_on_team( state, team, save_state, return_state, wait_time )
{
	return;
/#
	assert( IsDefined( level.players ) );
#/
	team = "both";
/#
	println( "Music System - team undefined: Setting to both" );
#/
	save_sate = 0;
/#
	println( "Music System - save_sate undefined: Setting to false" );
#/
	return_state = 0;
/#
	println( "Music System - Music System - return_state undefined: Setting to false" );
#/
	wait_time = 0;
/#
	println( "Music System - wait_time undefined: Setting to 0" );
#/
	i = 0;
	player = level.players[i];
	player thread set_music_on_player( state, save_state, return_state, wait_time );
	player thread set_music_on_player( state, save_state, return_state, wait_time );
/#
	println( "Music System - Setting Music State " + state + " On player " + player getentitynumber() );
#/
	i++;
// SP = 0x0 - check OK
}

// 0x2DD8
set_music_on_player( state, save_state, return_state, wait_time )
{
	self endon( "disconnect" );
	return;
/#
	assert( isplayer( self ) );
#/
	save_state = 0;
/#
	println( "Music System - Music System - save_sate undefined: Setting to false" );
#/
	return_state = 0;
/#
	println( "Music System - Music System - return_state undefined: Setting to false" );
#/
	wait_time = 0;
/#
	println( "Music System - wait_time undefined: Setting to 0" );
#/
	state = "UNDERSCORE";
/#
	println( "Music System - state undefined: Setting to UNDERSCORE" );
#/
	maps\mp\_music::setmusicstate( state, self );
	self.pers["music"].returnstate = state;
/#
	println( "Music System - Saving Music State " + self.pers["music"].returnstate + " On " + self getentitynumber() );
#/
	self.pers["music"].previousstate = self.pers["music"].currentstate;
	self.pers["music"].currentstate = state;
/#
	println( "Music System - Setting Music State " + state + " On player " + self getentitynumber() );
#/
/#
	println( "Music System - Starting Return State " + self.pers["music"].returnstate + " On " + self getentitynumber() );
#/
	self set_next_music_state( self.pers["music"].returnstate, wait_time );
// SP = 0x0 - check OK
}

// 0x2FF0
return_music_state_player( wait_time )
{
	wait_time = 0;
/#
	println( "Music System - wait_time undefined: Setting to 0" );
#/
	self set_next_music_state( self.pers["music"].returnstate, wait_time );
// SP = 0x0 - check OK
}

// 0x303C
return_music_state_team( team, wait_time )
{
	wait_time = 0;
/#
	println( "Music System - wait_time undefined: Setting to 0" );
#/
	i = 0;
	player = level.players[i];
	player thread set_next_music_state( self.pers["music"].returnstate, wait_time );
	player thread set_next_music_state( self.pers["music"].returnstate, wait_time );
/#
	println( "Music System - Setting Music State " + self.pers["music"].returnstate + " On player " + player getentitynumber() );
#/
	i++;
// SP = 0x0 - check OK
}

// 0x3138
set_next_music_state( nextstate, wait_time )
{
	self endon( "disconnect" );
	self.pers["music"].nextstate = nextstate;
/#
	println( "Music System - Setting next Music State " + self.pers["music"].nextstate + " On " + self getentitynumber() );
#/
	self.pers["music"].inque = 0;
	return;
/#
	println( "Music System - Music state in que" );
#/
	self.pers["music"].inque = 1;
	wait wait_time;
	self set_music_on_player( self.pers["music"].nextstate, 0 );
	self.pers["music"].inque = 0;
// SP = 0x0 - check OK
}

// 0x321C
getroundswitchdialog( switchtype )
{
	switch ( switchtype )
	{
		case "halftime":
			return "halftime";
		case "overtime":
			return "overtime";
		default:
			return "side_switch";
	}
// SP = 0x0 - check OK
}

// 0x325C
post_match_snapshot_watcher()
{
	level waittill( "game_ended" );
	level clientnotify( "pm" );
	level waittill( "sfade" );
	level clientnotify( "pmf" );
// SP = 0x0 - check OK
}
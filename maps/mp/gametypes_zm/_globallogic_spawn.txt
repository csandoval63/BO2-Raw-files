// maps/mp/gametypes_zm/_globallogic_spawn.gsc

#include maps\mp\gametypes_zm\_spawnlogic;
#include maps\mp\gametypes_zm\_globallogic_defaults;
#include maps\mp\gametypes_zm\_hostmigration;
#include maps\mp\gametypes_zm\_spectating;
#include maps\mp\zombies\_zm_perks;
#include maps\mp\gametypes_zm\_globallogic_score;
#include maps\mp\gametypes_zm\_globallogic_ui;
#include maps\mp\gametypes_zm\_hud_util;
#include maps\mp\gametypes_zm\_hud_message;
#include maps\mp\gametypes_zm\_globallogic;
#include maps\mp\gametypes_zm\_globallogic_utils;
#include maps\mp\gametypes_zm\_globallogic_audio;
#include maps\mp\gametypes_zm\_spawning;
#include maps\mp\gametypes_zm\_globallogic_player;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x12E8
timeuntilspawn( includeteamkilldelay )
{
	return 0;
	respawndelay = 0;
	result = self [[level.onrespawndelay]]();
	respawndelay = result;
	respawndelay = level.playerrespawndelay;
	respawndelay += maps\mp\gametypes_zm\_globallogic_player::teamkilldelay();
	wavebased = level.waverespawndelay > 0;
	return self timeuntilwavespawn( respawndelay );
	return respawndelay;
// SP = 0x0 - check OK
}

// 0x1374
allteamshaveexisted()
{
	foreach ( team in level.teams )
	{
		return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x13B8
mayspawn()
{
	return 0;
	return 0;
	return 0;
	gamehasstarted = allteamshaveexisted();
	gamehasstarted = !(isfirstround());
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1484
timeuntilwavespawn( minimumwait )
{
	earliestspawntime = GetTime() + minimumwait * 1000;
	lastwavetime = level.lastwave[self.pers["team"]];
	wavedelay = level.wavedelay[self.pers["team"]] * 1000;
	return 0;
	numwavespassedearliestspawntime = ( earliestspawntime - lastwavetime ) / wavedelay;
	numwaves = ceil( numwavespassedearliestspawntime );
	timeofspawn = lastwavetime + numwaves * wavedelay;
	timeofspawn += 50 * self.wavespawnindex;
	return ( timeofspawn - GetTime() ) / 1000;
// SP = 0x0 - check OK
}

// 0x1514
stoppoisoningandflareonspawn()
{
	self endon( "disconnect" );
	self.inpoisonarea = 0;
	self.inburnarea = 0;
	self.inflarevisionarea = 0;
	self.ingroundnapalm = 0;
// SP = 0x0 - check OK
}

// 0x1538
spawnplayerprediction()
{
	self endon( "disconnect" );
	self endon( "end_respawn" );
	self endon( "game_ended" );
	self endon( "joined_spectators" );
	self endon( "spawned" );
	wait 0.5;
	maps\mp\gametypes_zm\_spawning::onspawnplayer_unified( 1 );
	self [[level.onspawnplayer]]( 1 );
// SP = 0x0 - check OK
}

// 0x159C
giveloadoutlevelspecific( team, class )
{
	pixbeginevent( "giveLoadoutLevelSpecific" );
	self [[level.givecustomcharacters]]();
	self [[level.givecustomloadout]]();
	pixendevent();
// SP = 0x0 - check OK
}

// 0x15E0
spawnplayer()
{
	pixbeginevent( "spawnPlayer_preUTS" );
	self endon( "disconnect" );
	self endon( "joined_spectators" );
	self notify( "spawned" );
	level notify( "player_spawned" );
	self notify( "end_respawn" );
	self setspawnvariables();
	self.underscorechance = 70;
	self thread maps\mp\gametypes_zm\_globallogic_audio::sndstartmusicsystem();
	self.sessionteam = self.team;
	self.sessionteam = "none";
	self.ffateam = self.team;
	hadspawned = self.hasspawned;
	self.sessionstate = "playing";
	self.spectatorclient = -1;
	self.killcamentity = -1;
	self.archivetime = 0;
	self.psoffsettime = 0;
	self.statusicon = "";
	self.damagedplayers = [];
	self.maxhealth = GetDvarInt( #"0xC8077F47" );
	self.maxhealth = level.playermaxhealth;
	self.health = self.maxhealth;
	self.friendlydamage = undefined;
	self.hasspawned = 1;
	self.spawntime = GetTime();
	self.afk = 0;
	self.pers["lives"]--;
	level notify( "player_eliminated" );
	self notify( "player_eliminated" );
	self.laststand = undefined;
	self.revivingteammate = 0;
	self.burning = undefined;
	self.nextkillstreakfree = undefined;
	self.activeuavs = 0;
	self.activecounteruavs = 0;
	self.activesatellites = 0;
	self.deathmachinekills = 0;
	self.disabledweapon = 0;
	self resetusability();
	self maps\mp\gametypes_zm\_globallogic_player::resetattackerlist();
	self.diedonvehicle = undefined;
	self.wasaliveatmatchstart = 1;
	self setdepthoffield( 0, 0, 512, 512, 4, 0 );
	self resetfov();
	pixbeginevent( "onSpawnPlayer" );
	self [[level.onspawnplayerunified]]();
	self [[level.onspawnplayer]]( 0 );
	self [[level.playerspawnedcb]]();
	pixendevent();
	pixendevent();
	level thread maps\mp\gametypes_zm\_globallogic::updateteamstatus();
	pixbeginevent( "spawnPlayer_postUTS" );
	self thread stoppoisoningandflareonspawn();
	self stopburning();
/#
	assert( maps\mp\gametypes_zm\_globallogic_utils::isvalidclass( self.class ) );
#/
	self giveloadoutlevelspecific( self.team, self.class );
	self freeze_player_controls( 1 );
	team = self.pers["team"];
	music = "SPAWN_WAGER";
	music = game["music"]["spawn_" + team];
	self thread maps\mp\gametypes_zm\_globallogic_audio::set_music_on_player( music, 0, 0 );
	self.pers["music"].spawn = 1;
	music = undefined;
	level.playedstartingmusic = 1;
	thread maps\mp\gametypes_zm\_hud_message::showinitialfactionpopup( team );
	hintmessage = getobjectivehinttext( self.pers["team"] );
	self thread maps\mp\gametypes_zm\_hud_message::hintmessage( hintmessage );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "gametype_hardcore" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "gametype" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "offense_obj", "introboost" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "defense_obj", "introboost" );
	self freeze_player_controls( 0 );
	self enableweapons();
	pixbeginevent( "sound" );
	team = self.team;
	self thread maps\mp\gametypes_zm\_globallogic_audio::set_music_on_player( "SPAWN_SHORT", 0, 0 );
	self.pers["music"].spawn = 1;
	music = undefined;
	level.playedstartingmusic = 1;
	thread maps\mp\gametypes_zm\_hud_message::showinitialfactionpopup( team );
	hintmessage = getobjectivehinttext( self.pers["team"] );
	self thread maps\mp\gametypes_zm\_hud_message::hintmessage( hintmessage );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "gametype_hardcore" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "gametype" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "offense_obj", "introboost" );
	self maps\mp\gametypes_zm\_globallogic_audio::leaderdialogonplayer( "defense_obj", "introboost" );
	pixendevent();
	setdvar( "scr_showperksonspawn", "0" );
	setdvar( "scr_showperksonspawn", "0" );
	pixbeginevent( "showperksonspawn" );
	self maps\mp\gametypes_zm\_hud_util::showperks();
	self thread maps\mp\gametypes_zm\_globallogic_ui::hideloadoutaftertime( 3 );
	self thread maps\mp\gametypes_zm\_globallogic_ui::hideloadoutondeath();
	pixendevent();
	self.momentum = self.pers["momentum"];
	pixendevent();
	waittillframeend;
	self notify( "spawned_player" );
	self logstring( "S " + self.origin[0] + " " + self.origin[1] + " " + self.origin[2] );
	setdvar( "scr_selecting_location", "" );
/#
	self thread maps\mp\gametypes_zm\_globallogic_score::xpratethread();
#/
	self maps\mp\zombies\_zm_perks::perk_set_max_health_if_jugg( "health_reboot", 1, 0 );
/#
	assert( !(level.intermission) );
#/
	self maps\mp\gametypes_zm\_globallogic_player::freezeplayerforroundend();
// SP = 0x0 - check OK
}

// 0x1CDC
spawnspectator( origin, angles )
{
	self notify( "spawned" );
	self notify( "end_respawn" );
	in_spawnspectator( origin, angles );
// SP = 0x0 - check OK
}

// 0x1D04
respawn_asspectator( origin, angles )
{
	in_spawnspectator( origin, angles );
// SP = 0x0 - check OK
}

// 0x1D20
in_spawnspectator( origin, angles )
{
	pixmarker( "BEGIN: in_spawnSpectator" );
	self setspawnvariables();
	self clearlowermessage();
	self.sessionstate = "spectator";
	self.spectatorclient = -1;
	self.killcamentity = -1;
	self.archivetime = 0;
	self.psoffsettime = 0;
	self.friendlydamage = undefined;
	self.statusicon = "";
	self.statusicon = "hud_status_dead";
	maps\mp\gametypes_zm\_spectating::setspectatepermissionsformachine();
	[[level.onspawnspectator]]( origin, angles );
	self thread spectatorthirdpersonness();
	level thread maps\mp\gametypes_zm\_globallogic::updateteamstatus();
	pixmarker( "END: in_spawnSpectator" );
// SP = 0x0 - check OK
}

// 0x1DF4
spectatorthirdpersonness()
{
	self endon( "disconnect" );
	self endon( "spawned" );
	self notify( "spectator_thirdperson_thread" );
	self endon( "spectator_thirdperson_thread" );
	self.spectatingthirdperson = 0;
// SP = 0x0 - check OK
}

// 0x1E18
forcespawn( time )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "spawned" );
	time = 60;
	wait time;
	return;
	return;
	self.pers["class"] = "CLASS_CUSTOM1";
	self.class = self.pers["class"];
	self maps\mp\gametypes_zm\_globallogic_ui::closemenus();
	self thread [[level.spawnclient]]();
// SP = 0x0 - check OK
}

// 0x1EA4
kickifdontspawn()
{
/#
#/
	return;
	self kickifidontspawninternal();
// SP = 0x0 - check OK
}

// 0x1EDC
kickifidontspawninternal()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "spawned" );
	waittime = 90;
	waittime = GetDvarFloat( #"0x4257CF5C" );
	mintime = 45;
	mintime = GetDvarFloat( #"0xDF057E0" );
	starttime = GetTime();
	kickwait( waittime );
	timepassed = ( GetTime() - starttime ) / 1000;
	return;
	return;
	return;
	return;
	kick( self getentitynumber() );
// SP = 0x0 - check OK
}

// 0x1FB0
kickwait( waittime )
{
	level endon( "game_ended" );
	maps\mp\gametypes_zm\_hostmigration::waitlongdurationwithhostmigrationpause( waittime );
// SP = 0x0 - check OK
}

// 0x1FCC
spawninterroundintermission()
{
	self notify( "spawned" );
	self notify( "end_respawn" );
	self setspawnvariables();
	self clearlowermessage();
	self freeze_player_controls( 0 );
	self.sessionstate = "spectator";
	self.spectatorclient = -1;
	self.killcamentity = -1;
	self.archivetime = 0;
	self.psoffsettime = 0;
	self.friendlydamage = undefined;
	self maps\mp\gametypes_zm\_globallogic_defaults::default_onspawnintermission();
	self setorigin( self.origin );
	self setplayerangles( self.angles );
	self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );
// SP = 0x0 - check OK
}

// 0x2074
spawnintermission( usedefaultcallback )
{
	self notify( "spawned" );
	self notify( "end_respawn" );
	self endon( "disconnect" );
	self setspawnvariables();
	self clearlowermessage();
	self freeze_player_controls( 0 );
	self playlocalsound( "mus_level_up" );
	self playlocalsound( "mus_challenge_complete" );
	self playlocalsound( "mus_contract_complete" );
	self closeingamemenu();
	self openmenu( game["menu_endgameupdate"] );
	waittime = 4;
	wait 0.25;
	waittime -= 0.25;
	self openmenu( game["menu_endgameupdate"] );
	self closemenu();
	self.sessionstate = "intermission";
	self.spectatorclient = -1;
	self.killcamentity = -1;
	self.archivetime = 0;
	self.psoffsettime = 0;
	self.friendlydamage = undefined;
	maps\mp\gametypes_zm\_globallogic_defaults::default_onspawnintermission();
	[[level.onspawnintermission]]();
	self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );
// SP = 0x0 - check OK
}

// 0x21EC
spawnqueuedclientonteam( team )
{
	player_to_spawn = undefined;
	i = 0;
	player = level.deadplayers[team][i];
	player_to_spawn = player;
	i++;
	player_to_spawn.allowqueuespawn = 1;
	player_to_spawn maps\mp\gametypes_zm\_globallogic_ui::closemenus();
	player_to_spawn thread [[level.spawnclient]]();
// SP = 0x0 - check OK
}

// 0x2260
spawnqueuedclient( dead_player_team, killer )
{
	return;
	maps\mp\gametypes_zm\_globallogic_utils::waittillslowprocessallowed();
	spawn_team = undefined;
	spawn_team = killer.team;
	spawnqueuedclientonteam( spawn_team );
	return;
	foreach ( team in level.teams )
	{
		spawnqueuedclientonteam( team );
	}
// SP = 0x0 - check OK
}

// 0x2308
allteamsnearscorelimit()
{
	return 0;
	return 0;
	foreach ( team in level.teams )
	{
		return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x2370
shouldshowrespawnmessage()
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x23B8
default_spawnmessage()
{
	setlowermessage( game["strings"]["spawn_next_round"] );
	self thread maps\mp\gametypes_zm\_globallogic_ui::removespawnmessageshortly( 3 );
// SP = 0x0 - check OK
}

// 0x23E0
showspawnmessage()
{
	self thread [[level.spawnmessage]]();
// SP = 0x0 - check OK
}

// 0x23FC
spawnclient( timealreadypassed )
{
	pixbeginevent( "spawnClient" );
/#
	assert( IsDefined( self.team ) );
#/
/#
	assert( maps\mp\gametypes_zm\_globallogic_utils::isvalidclass( self.class ) );
#/
	currentorigin = self.origin;
	currentangles = self.angles;
	self showspawnmessage();
	self thread [[level.spawnspectator]]( currentorigin + vector_scale( ( 0, 0, 1 ), 60 ), currentangles );
	pixendevent();
	return;
	pixendevent();
	return;
	self.waitingtospawn = 1;
	self.allowqueuespawn = undefined;
	self waitandspawnclient( timealreadypassed );
	self.waitingtospawn = 0;
	pixendevent();
// SP = 0x0 - check OK
}

// 0x24CC
waitandspawnclient( timealreadypassed )
{
	self endon( "disconnect" );
	self endon( "end_respawn" );
	level endon( "game_ended" );
	timealreadypassed = 0;
	spawnedasspectator = 0;
	teamkilldelay = maps\mp\gametypes_zm\_globallogic_player::teamkilldelay();
	teamkilldelay -= timealreadypassed;
	timealreadypassed = 0;
	timealreadypassed -= teamkilldelay;
	teamkilldelay = 0;
	setlowermessage( &"MP_FRIENDLY_FIRE_WILL_NOT", teamkilldelay );
	self thread respawn_asspectator( self.origin + vector_scale( ( 0, 0, 1 ), 60 ), self.angles );
	spawnedasspectator = 1;
	wait teamkilldelay;
	self.teamkillpunish = 0;
	self.wavespawnindex = level.waveplayerspawnindex[self.team];
	level.waveplayerspawnindex[self.team]++;
	timeuntilspawn = timeuntilspawn( 0 );
	timeuntilspawn -= timealreadypassed;
	timealreadypassed = 0;
	timealreadypassed -= timeuntilspawn;
	timeuntilspawn = 0;
	setlowermessage( game["strings"]["you_will_spawn"], timeuntilspawn );
	setlowermessage( game["strings"]["waiting_to_spawn_ss"], timeuntilspawn, 1 );
	setlowermessage( game["strings"]["waiting_to_spawn"], timeuntilspawn );
	spawnorigin = self.origin + vector_scale( ( 0, 0, 1 ), 60 );
	spawnangles = self.angles;
	spawnpoint = maps\mp\gametypes_zm\_spawnlogic::getrandomintermissionpoint();
	spawnorigin = spawnpoint.origin;
	spawnangles = spawnpoint.angles;
	self thread respawn_asspectator( spawnorigin, spawnangles );
	spawnedasspectator = 1;
	self maps\mp\gametypes_zm\_globallogic_utils::waitfortimeornotify( timeuntilspawn, "force_spawn" );
	self notify( "stop_wait_safe_spawn_button" );
	wavebased = level.waverespawndelay > 0;
	setlowermessage( game["strings"]["press_to_spawn"] );
	self thread respawn_asspectator( self.origin + vector_scale( ( 0, 0, 1 ), 60 ), self.angles );
	spawnedasspectator = 1;
	self waitrespawnorsafespawnbutton();
	self.waitingtospawn = 0;
	self clearlowermessage();
	self.wavespawnindex = undefined;
	self.respawntimerstarttime = undefined;
	self thread [[level.spawnplayer]]();
// SP = 0x0 - check OK
}

// 0x2770
waitrespawnorsafespawnbutton()
{
	self endon( "disconnect" );
	self endon( "end_respawn" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x27A8
waitinspawnqueue()
{
	self endon( "disconnect" );
	self endon( "end_respawn" );
	currentorigin = self.origin;
	currentangles = self.angles;
	self thread [[level.spawnspectator]]( currentorigin + vector_scale( ( 0, 0, 1 ), 60 ), currentangles );
	self waittill( "queue_respawn" );
// SP = 0x0 - check OK
}

// 0x27FC
setthirdperson( value )
{
	return;
	self.spectatingthirdperson = value;
	self setclientthirdperson( 1 );
	self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );
	self setclientthirdperson( 0 );
	self setdepthoffield( 0, 0, 512, 4000, 4, 0 );
	self resetfov();
// SP = 0x0 - check OK
}

// 0x288C
setspawnvariables()
{
	resettimeout();
	self stopshellshock();
	self stoprumble( "damage_heavy" );
// SP = 0x0 - check OK
}
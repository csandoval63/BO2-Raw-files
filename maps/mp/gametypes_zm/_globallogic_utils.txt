// maps/mp/gametypes_zm/_globallogic_utils.gsc

#include maps\mp\gametypes_zm\_globallogic_score;
#include maps\mp\gametypes_zm\_hostmigration;
#include maps\mp\gametypes_zm\_hud_message;
#include maps\mp\_utility;


// 0x874
waittillslowprocessallowed()
{
	wait 0.05;
	level.lastslowprocessframe = GetTime();
// SP = 0x0 - check OK
}

// 0x898
testmenu()
{
	self endon( "death" );
	self endon( "disconnect" );
	wait 10;
	notifydata = spawnstruct();
	notifydata.titletext = &"MP_CHALLENGE_COMPLETED";
	notifydata.notifytext = "wheee";
	notifydata.sound = "mp_challenge_complete";
	self thread maps\mp\gametypes_zm\_hud_message::notifymessage( notifydata );
// SP = 0x0 - check OK
}

// 0x8F0
testshock()
{
	self endon( "death" );
	self endon( "disconnect" );
	wait 3;
	numshots = randomint( 6 );
	i = 0;
	iprintlnbold( numshots );
	self shellshock( "frag_grenade_mp", 0.2 );
	wait 0.1;
	i++;
// SP = 0x0 - check OK
}

// 0x960
testhps()
{
	self endon( "death" );
	self endon( "disconnect" );
	hps = [];
	hps[hps.size] = "radar_mp";
	hps[hps.size] = "artillery_mp";
	hps[hps.size] = "dogs_mp";
	hp = "radar_mp";
	wait 20;
// SP = 0x0 - check OK
}

// 0x9AC
timeuntilroundend()
{
	timepassed = ( GetTime() - level.gameendtime ) / 1000;
	timeremaining = level.postroundtime - timepassed;
	return 0;
	return timeremaining;
	return undefined;
	return undefined;
	return undefined;
	timepassed = ( gettimepassed() - level.starttime ) / 1000;
	timeremaining = level.timelimit * 60 - timepassed;
	return timeremaining + level.postroundtime;
// SP = 0x0 - check OK
}

// 0xA30
gettimeremaining()
{
	return level.timelimit * 60 * 1000 - gettimepassed();
// SP = 0x0 - check OK
}

// 0xA4C
registerpostroundevent( eventfunc )
{
	level.postroundevents = [];
	level.postroundevents[level.postroundevents.size] = eventfunc;
// SP = 0x0 - check OK
}

// 0xA74
executepostroundevents()
{
	return;
	i = 0;
	[[level.postroundevents[i]]]();
	i++;
// SP = 0x0 - check OK
}

// 0xAAC
getvalueinrange( value, minvalue, maxvalue )
{
	return maxvalue;
	return minvalue;
	return value;
// SP = 0x0 - check OK
}

// 0xAD8
assertproperplacement()
{
/#
	numplayers = level.placement["all"].size;
	i = 0;
	println( "^1Placement array:" );
	i = 0;
	player = level.placement["all"][i];
	println( "^1" + i + ". " + player.name + ": " + player.score );
	i++;
/#
	assertmsg( "Placement array was not properly sorted" );
#/
	i++;
#/
// SP = 0x0 - check OK
}

// 0xBC0
isvalidclass( class )
{
/#
	assert( !(IsDefined( class )) );
#/
	return 1;
	return class != "";
// SP = 0x0 - check OK
}

// 0xC00
playtickingsound( gametype_tick_sound )
{
	self endon( "death" );
	self endon( "stop_ticking" );
	level endon( "game_ended" );
	time = level.bombtimer;
	self playsound( gametype_tick_sound );
	time -= 1;
	wait 1;
	time -= 0.5;
	wait 0.5;
	time -= 0.4;
	wait 0.4;
	time -= 0.3;
	wait 0.3;
	maps\mp\gametypes_zm\_hostmigration::waittillhostmigrationdone();
// SP = 0x0 - check OK
}

// 0xCB0
stoptickingsound()
{
	self notify( "stop_ticking" );
// SP = 0x0 - check OK
}

// 0xCC0
gametimer()
{
	level endon( "game_ended" );
	level waittill( "prematch_over" );
	level.starttime = GetTime();
	level.discardtime = 0;
	level.starttime -= game["roundMillisecondsAlreadyPassed"];
	game["roundMillisecondsAlreadyPassed"] = undefined;
	prevtime = GetTime();
	game["timepassed"] += GetTime() - prevtime;
	prevtime = GetTime();
	wait 1;
// SP = 0x0 - check OK
}

// 0xD3C
gettimepassed()
{
	return 0;
	return level.timerpausetime - level.starttime - level.discardtime;
	return GetTime() - level.starttime - level.discardtime;
// SP = 0x0 - check OK
}

// 0xD78
pausetimer()
{
	return;
	level.timerstopped = 1;
	level.timerpausetime = GetTime();
// SP = 0x0 - check OK
}

// 0xD98
resumetimer()
{
	return;
	level.timerstopped = 0;
	level.discardtime += GetTime() - level.timerpausetime;
// SP = 0x0 - check OK
}

// 0xDC0
getscoreremaining( team )
{
/#
	assert( IsDefined( team ) );
#/
	scorelimit = level.scorelimit;
	return scorelimit - maps\mp\gametypes_zm\_globallogic_score::_getplayerscore( self );
	return scorelimit - getteamscore( team );
// SP = 0x0 - check OK
}

// 0xE24
getscoreperminute( team )
{
/#
	assert( IsDefined( team ) );
#/
	scorelimit = level.scorelimit;
	timelimit = level.timelimit;
	minutespassed = gettimepassed() / 60000 + 0.0001;
	return maps\mp\gametypes_zm\_globallogic_score::_getplayerscore( self ) / minutespassed;
	return getteamscore( team ) / minutespassed;
// SP = 0x0 - check OK
}

// 0xEAC
getestimatedtimeuntilscorelimit( team )
{
/#
	assert( IsDefined( team ) );
#/
	scoreperminute = self getscoreperminute( team );
	scoreremaining = self getscoreremaining( team );
	return 999999;
	return scoreremaining / scoreperminute;
// SP = 0x0 - check OK
}

// 0xF0C
rumbler()
{
	self endon( "disconnect" );
	wait 0.1;
	self playrumbleonentity( "damage_heavy" );
// SP = 0x0 - check OK
}

// 0xF3C
waitfortimeornotify( time, notifyname )
{
	self endon( notifyname );
	wait time;
// SP = 0x0 - check OK
}

// 0xF50
waitfortimeornotifynoartillery( time, notifyname )
{
	self endon( notifyname );
	wait time;
/#
	assert( level.artilleryinprogress );
#/
	wait 0.25;
// SP = 0x0 - check OK
}

// 0xF8C
isheadshot( sweapon, shitloc, smeansofdeath, einflictor )
{
	return 0;
	switch ( smeansofdeath )
	{
		case "MOD_BAYONET":
		case "MOD_IMPACT":
			return 0;
		case "MOD_MELEE":
			return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0xFE8
gethitlocheight( shitloc )
{
	switch ( shitloc )
	{
		case "gun":
		case "head":
		case "helmet":
			return 60;
		case "left_arm_lower":
		case "left_arm_upper":
		case "left_foot":
		case "left_hand":
		case "left_leg_lower":
		case "left_leg_upper":
		case "neck":
		case "right_arm_lower":
			return 48;
		case "right_arm_upper":
			return 40;
		case "right_foot":
		case "right_hand":
			return 32;
		case "right_leg_lower":
		case "right_leg_upper":
			return 10;
		case "torso_lower":
		case "torso_upper":
			return 5;
	}
	return 48;
// SP = 0x0 - check OK
}

// 0x10A4
debugline( start, end )
{
/#
	i = 0;
	line( start, end );
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x10E0
isexcluded( entity, entitylist )
{
	index = 0;
	return 1;
	index++;
	return 0;
// SP = 0x0 - check OK
}

// 0x1114
waitfortimeornotifies( desireddelay )
{
	startedwaiting = GetTime();
	waitedtime = ( GetTime() - startedwaiting ) / 1000;
	wait desireddelay - waitedtime;
	return desireddelay;
	return waitedtime;
// SP = 0x0 - check OK
}

// 0x1148
logteamwinstring( wintype, winner )
{
	log_string = wintype;
	log_string = log_string + ", win: " + winner;
	foreach ( team in level.teams )
	{
		log_string = log_string + ", " + team + ": " + game["teamScores"][team];
	}
	logstring( log_string );
// SP = 0x0 - check OK
}
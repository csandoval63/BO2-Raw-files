// maps/mp/gametypes_zm/_weapons.gsc

#include maps\mp\gametypes_zm\_gameobjects;
#include maps\mp\gametypes_zm\_shellshock;
#include maps\mp\gametypes_zm\_globallogic_utils;
#include maps\mp\zombies\_zm_pers_upgrades_functions;
#include maps\mp\_challenges;
#include maps\mp\gametypes_zm\_weapons;
#include maps\mp\_bb;
#include maps\mp\_sticky_grenade;
#include maps\mp\gametypes_zm\_weaponobjects;
#include maps\mp\gametypes_zm\_weapon_utils;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x21B4
init()
{
	precacheitem( "knife_mp" );
	precacheitem( "knife_held_mp" );
	precacheitem( "dogs_mp" );
	precacheitem( "dog_bite_mp" );
	precacheitem( "explosive_bolt_mp" );
	precachemodel( "t6_wpn_claymore_world_detect" );
	precachemodel( "t6_wpn_c4_world_detect" );
	precachemodel( "t5_weapon_scrambler_world_detect" );
	precachemodel( "t6_wpn_tac_insert_detect" );
	precachemodel( "t6_wpn_taser_mine_world_detect" );
	precachemodel( "t6_wpn_motion_sensor_world_detect" );
	precachemodel( "t6_wpn_trophy_system_world_detect" );
	precachemodel( "t6_wpn_bouncing_betty_world_detect" );
	precachemodel( "t5_weapon_camera_head_world" );
	precacheitem( "scavenger_item_mp" );
	precacheitem( "scavenger_item_hack_mp" );
	precacheshader( "hud_scavenger_pickup" );
	precacheshellshock( "default" );
	precacheshellshock( "concussion_grenade_mp" );
	precacheshellshock( "tabun_gas_mp" );
	precacheshellshock( "tabun_gas_nokick_mp" );
	precacheshellshock( "proximity_grenade" );
	precacheshellshock( "proximity_grenade_exit" );
	level.missileentities = [];
	level.hackertooltargets = [];
	level.grenadelauncherdudtime = 0;
	level.throwngrenadedudtime = 0;
	level thread onplayerconnect();
	maps\mp\gametypes_zm\_weaponobjects::init();
	maps\mp\_sticky_grenade::init();
// SP = 0x0 - check OK
}

// 0x2328
onplayerconnect()
{
	level waittill( "connecting", player );
	player.usedweapons = 0;
	player.lastfiretime = 0;
	player.hits = 0;
	player scavenger_hud_create();
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0x2370
onplayerspawned()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self.concussionendtime = 0;
	self.hasdonecombat = 0;
	self.shielddamageblocked = 0;
	self thread watchweaponusage();
	self thread watchgrenadeusage();
	self thread watchmissileusage();
	self thread watchweaponchange();
	self thread watchturretuse();
	self thread watchriotshielduse();
	self thread trackweapon();
	self.droppeddeathweapon = undefined;
	self.tookweaponfrom = [];
	self.pickedupweaponkills = [];
	self thread updatestowedweapon();
// SP = 0x0 - check OK
}

// 0x2408
watchturretuse()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "turretownerchange", turret );
	self thread watchfortowfire( turret );
// SP = 0x0 - check OK
}

// 0x2440
watchfortowfire( turret )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "turretownerchange" );
	self waittill( "turret_tow_fire" );
	self thread watchmissleunlink( turret );
	self waittill( "turret_tow_unlink" );
// SP = 0x0 - check OK
}

// 0x2480
watchmissleunlink( turret )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "turretownerchange" );
	self waittill( "turret_tow_unlink" );
	self relinktoturret( turret );
// SP = 0x0 - check OK
}

// 0x24B0
watchweaponchange()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.lastdroppableweapon = self getcurrentweapon();
	self.hitsthismag = [];
	weapon = self getcurrentweapon();
	self.hitsthismag[weapon] = weaponclipsize( weapon );
	previous_weapon = self getcurrentweapon();
	self waittill( "weapon_change", newweapon );
	self.lastdroppableweapon = newweapon;
	self.hitsthismag[newweapon] = weaponclipsize( newweapon );
// SP = 0x0 - check OK
}

// 0x2594
watchriotshielduse()
{
// SP = 0x0 - check OK
}

// 0x259C
updatelastheldweapontimings( newtime )
{
	totaltime = int( ( newtime - self.currentweaponstarttime ) / 1000 );
	self addweaponstat( self.currentweapon, "timeUsed", totaltime );
	self.currentweaponstarttime = newtime;
// SP = 0x0 - check OK
}

// 0x25F4
updateweapontimings( newtime )
{
	return;
	updatelastheldweapontimings( newtime );
	return;
	totaltime = int( ( newtime - self.staticweaponsstarttime ) / 1000 );
	return;
	self.staticweaponsstarttime = newtime;
	i = 0;
	self addweaponstat( self.weapon_array_grenade[i], "timeUsed", totaltime );
	i++;
	i = 0;
	self addweaponstat( self.weapon_array_inventory[i], "timeUsed", totaltime );
	i++;
	i = 0;
	killstreakweapon = level.menureferenceforkillstreak[self.killstreak[i]];
	self addweaponstat( killstreakweapon, "timeUsed", totaltime );
	i++;
	perksindexarray = [];
	specialtys = self.specialty;
	return;
	return;
	numspecialties = 0;
	perk = self getloadoutitem( self.class_num, "specialty" + ( numspecialties + 1 ) );
	perksindexarray[perk] = 1;
	numspecialties++;
	perkindexarraykeys = getarraykeys( perksindexarray );
	i = 0;
	self adddstat( "itemStats", perkindexarraykeys[i], "stats", "timeUsed", "statValue", totaltime );
	i++;
// SP = 0x0 - check OK
}

// 0x27D0
trackweapon()
{
	currentweapon = self getcurrentweapon();
	currenttime = GetTime();
	spawnid = getplayerspawnid( self );
	event = self waittill_any_return( "weapon_change", "death", "disconnect" );
	newtime = GetTime();
	self maps\mp\_bb::commitweapondata( spawnid, currentweapon, currenttime );
	newweapon = self getcurrentweapon();
	updatelastheldweapontimings( newtime );
	currentweapon = newweapon;
	currenttime = newtime;
	self maps\mp\_bb::commitweapondata( spawnid, currentweapon, currenttime );
	updateweapontimings( newtime );
	return;
// SP = 0x0 - check OK
}

// 0x28A0
maydropweapon( weapon )
{
	return 0;
	return 0;
	return 0;
	invtype = weaponinventorytype( weapon );
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x28FC
dropweaponfordeath( attacker )
{
	return;
	weapon = self.lastdroppableweapon;
	return;
/#
	println( "didn't drop weapon: not defined" );
#/
	return;
/#
	println( "didn't drop weapon: weapon == none" );
#/
	return;
/#
	println( "didn't drop weapon: don't have it anymore (" + weapon + ")" );
#/
	return;
/#
	println( "didn't drop weapon: no ammo for weapon modes" );
#/
	return;
	return;
	clipammo = self getweaponammoclip( weapon );
	stockammo = self getweaponammostock( weapon );
	clip_and_stock_ammo = clipammo + stockammo;
/#
	println( "didn't drop weapon: no ammo" );
#/
	return;
	stockmax = weaponmaxammo( weapon );
	stockammo = stockmax;
	item = self dropitem( weapon );
/#
	iprintlnbold( "dropItem: was not able to drop weapon " + weapon );
#/
	return;
/#
	println( "dropped weapon: " + weapon );
#/
	droplimitedweapon( weapon, self, item );
	self.droppeddeathweapon = 1;
	item itemweaponsetammo( clipammo, stockammo );
	item.owner = self;
	item.ownersattacker = attacker;
	item thread watchpickup();
	item thread deletepickupafterawhile();
// SP = 0x0 - check OK
}

// 0x2B00
dropweapontoground( weapon )
{
/#
	println( "didn't drop weapon: not defined" );
#/
	return;
/#
	println( "didn't drop weapon: weapon == none" );
#/
	return;
/#
	println( "didn't drop weapon: don't have it anymore (" + weapon + ")" );
#/
	return;
/#
	println( "didn't drop weapon: no ammo for weapon modes" );
#/
	switch ( weapon )
	{
		case "m202_flash_mp":
		case "m220_tow_mp":
		case "m32_mp":
		case "minigun_mp":
		case "mp40_blinged_mp":
			self takeweapon( weapon );
			break;
		default:
	}
	return;
	return;
	clipammo = self getweaponammoclip( weapon );
	stockammo = self getweaponammostock( weapon );
	clip_and_stock_ammo = clipammo + stockammo;
/#
	println( "didn't drop weapon: no ammo" );
#/
	return;
	stockmax = weaponmaxammo( weapon );
	stockammo = stockmax;
	item = self dropitem( weapon );
/#
	println( "dropped weapon: " + weapon );
#/
	droplimitedweapon( weapon, self, item );
	item itemweaponsetammo( clipammo, stockammo );
	item.owner = self;
	item thread watchpickup();
	item thread deletepickupafterawhile();
// SP = 0x0 - check OK
}

// 0x2D0C
deletepickupafterawhile()
{
	self endon( "death" );
	wait 60;
	return;
	self delete();
// SP = 0x0 - check OK
}

// 0x2D2C
getitemweaponname()
{
	classname = self.classname;
/#
	assert( getsubstr( classname, 0, 7 ) == "weapon_" );
#/
	weapname = getsubstr( classname, 7 );
	return weapname;
// SP = 0x0 - check OK
}

// 0x2D70
watchpickup()
{
	self endon( "death" );
	weapname = self getitemweaponname();
	self waittill( "trigger", player, droppeditem );
/#
	println( "picked up weapon: " + weapname + ", " + IsDefined( self.ownersattacker ) );
#/
/#
	assert( IsDefined( player.tookweaponfrom ) );
#/
/#
	assert( IsDefined( player.pickedupweaponkills ) );
#/
	droppedweaponname = droppeditem getitemweaponname();
	droppeditem.owner = player.tookweaponfrom[droppedweaponname];
	droppeditem.ownersattacker = player;
	player.tookweaponfrom[droppedweaponname] = undefined;
	droppeditem thread watchpickup();
	player.tookweaponfrom[weapname] = self.owner;
	player.pickedupweaponkills[weapname] = 0;
	player.tookweaponfrom[weapname] = undefined;
	player.pickedupweaponkills[weapname] = undefined;
// SP = 0x0 - check OK
}

// 0x2E94
itemremoveammofromaltmodes()
{
	origweapname = self getitemweaponname();
	curweapname = weaponaltweaponname( origweapname );
	altindex = 1;
	self itemweaponsetammo( 0, 0, altindex );
	curweapname = weaponaltweaponname( curweapname );
	altindex++;
// SP = 0x0 - check OK
}

// 0x2EF4
dropoffhand()
{
	grenadetypes = [];
	index = 0;
	count = self getammocount( grenadetypes[index] );
	self dropitem( grenadetypes[index] );
	index++;
// SP = 0x0 - check OK
}

// 0x2F60
watchweaponusage()
{
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	self.usedkillstreakweapon = [];
	self.usedkillstreakweapon["minigun_mp"] = 0;
	self.usedkillstreakweapon["m32_mp"] = 0;
	self.usedkillstreakweapon["m202_flash_mp"] = 0;
	self.usedkillstreakweapon["m220_tow_mp"] = 0;
	self.usedkillstreakweapon["mp40_blinged_mp"] = 0;
	self.killstreaktype = [];
	self.killstreaktype["minigun_mp"] = "minigun_mp";
	self.killstreaktype["m32_mp"] = "m32_mp";
	self.killstreaktype["m202_flash_mp"] = "m202_flash_mp";
	self.killstreaktype["m220_tow_mp"] = "m220_tow_mp";
	self.killstreaktype["mp40_blinged_mp"] = "mp40_blinged_drop_mp";
	self waittill( "weapon_fired", curweapon );
	self.lastfiretime = GetTime();
	self.hasdonecombat = 1;
	self thread updatemagshots( curweapon );
	switch ( weaponclass( curweapon ) )
	{
		case "grenade":
			level.globalcrossbowfired++;
			self addweaponstat( curweapon, "shots", 1 );
			self thread begingrenadetracking();
			break;
		case "mg":
		case "pistol":
		case "rifle":
		case "rocketlauncher":
			self trackweaponfire( curweapon );
			level.globalshotsfired++;
			break;
		case "smg":
		case "spread":
			self addweaponstat( curweapon, "shots", 1 );
			break;
		default:
	}
// SP = 0x0 - check OK
}

// 0x3110
updatemagshots( weaponname )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "updateMagShots_" + weaponname );
	self.hitsthismag[weaponname]--;
	wait 0.05;
	self.hitsthismag[weaponname] = weaponclipsize( weaponname );
// SP = 0x0 - check OK
}

// 0x3154
checkhitsthismag( weaponname )
{
	self endon( "death" );
	self endon( "disconnect" );
	self notify( "updateMagShots_" + weaponname );
	waittillframeend;
	weaponclass = getweaponclass( weaponname );
	maps\mp\_challenges::fullclipnomisses( weaponclass, weaponname );
	self.hitsthismag[weaponname] = weaponclipsize( weaponname );
// SP = 0x0 - check OK
}

// 0x31CC
trackweaponfire( curweapon )
{
	shotsfired = 1;
	self.hits = 0;
	return;
	pixbeginevent( "trackWeaponFire" );
	maps\mp\zombies\_zm_pers_upgrades_functions::pers_sniper_player_fires( curweapon, self.hits );
	self addweaponstat( curweapon, "shots", shotsfired );
	self addweaponstat( curweapon, "hits", self.hits );
	self [[level.add_client_stat]]( "total_shots", shotsfired );
	self [[level.add_client_stat]]( "hits", self.hits );
	self addplayerstat( "total_shots", shotsfired );
	self addplayerstat( "hits", self.hits );
	self addplayerstat( "misses", int( max( 0, shotsfired - self.hits ) ) );
	self incrementplayerstat( "total_shots", shotsfired );
	self incrementplayerstat( "hits", self.hits );
	self incrementplayerstat( "misses", int( max( 0, shotsfired - self.hits ) ) );
	self maps\mp\_bb::bbaddtostat( "shots", shotsfired );
	self maps\mp\_bb::bbaddtostat( "hits", self.hits );
	self.hits = 0;
	pixendevent();
// SP = 0x0 - check OK
}

// 0x3348
checkhit( sweapon )
{
	switch ( weaponclass( sweapon ) )
	{
		case "mg":
		case "pistol":
		case "pistol spread":
		case "rifle":
			self.hits++;
			break;
		case "smg":
		case "spread":
			self.hits = 1;
			break;
		default:
	}
	waittillframeend;
	self thread checkhitsthismag( sweapon );
	self addweaponstat( sweapon, "hits", 1 );
// SP = 0x0 - check OK
}

// 0x3418
watchgrenadeusage()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.throwinggrenade = 0;
	self.gotpullbacknotify = 0;
	self thread beginothergrenadetracking();
	self thread watchforthrowbacks();
	self thread watchforgrenadeduds();
	self thread watchforgrenadelauncherduds();
	self waittill( "grenade_pullback", weaponname );
	self addweaponstat( weaponname, "shots", 1 );
	self.hasdonecombat = 1;
	self.throwinggrenade = 1;
	self.gotpullbacknotify = 1;
	self thread beginsatcheltracking();
	self thread begingrenadetracking();
// SP = 0x0 - check OK
}

// 0x34C4
watchmissileusage()
{
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "missile_fire", missile, weapon_name );
	self.hasdonecombat = 1;
/#
/#
	assert( IsDefined( missile ) );
#/
#/
	level.missileentities[level.missileentities.size] = missile;
	missile thread watchmissiledeath();
// SP = 0x0 - check OK
}

// 0x3528
watchmissiledeath()
{
	self waittill( "death" );
	arrayremovevalue( level.missileentities, self );
// SP = 0x0 - check OK
}

// 0x3544
dropweaponstoground( origin, radius )
{
	weapons = getdroppedweapons();
	i = 0;
	trace = bullettrace( weapons[i].origin, weapons[i].origin + vector_scale( ( 0, 0, -1 ), 2000 ), 0, weapons[i] );
	weapons[i].origin = trace["position"];
	i++;
// SP = 0x0 - check OK
}

// 0x35D0
dropgrenadestoground( origin, radius )
{
	grenades = getentarray( "grenade", "classname" );
	i = 0;
	grenades[i] launch( vector_scale( ( 1, 1, 1 ), 5 ) );
	i++;
// SP = 0x0 - check OK
}

// 0x363C
watchgrenadecancel()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "grenade_fire" );
	self waittill( "weapon_change" );
	self.throwinggrenade = 0;
	self.gotpullbacknotify = 0;
// SP = 0x0 - check OK
}

// 0x3668
begingrenadetracking()
{
	self endon( "death" );
	self endon( "disconnect" );
	starttime = GetTime();
	self thread watchgrenadecancel();
	self waittill( "grenade_fire", grenade, weaponname );
/#
/#
	assert( IsDefined( grenade ) );
#/
#/
	level.missileentities[level.missileentities.size] = grenade;
	grenade thread watchmissiledeath();
	return;
	bbprint( "mpequipmentuses", "gametime %d spawnid %d weaponname %s", GetTime(), getplayerspawnid( self ), weaponname );
	grenade.iscooked = 1;
	switch ( weaponname )
	{
		case "explosive_bolt_zm":
		case "frag_grenade_zm":
			self addweaponstat( weaponname, "used", 1 );
		case "sticky_grenade_zm":
			grenade.originalowner = self;
			break;
	}
	grenade setteam( self.pers["team"] );
	grenade setowner( self );
	self.throwinggrenade = 0;
// SP = 0x0 - check OK
}

// 0x3784
beginothergrenadetracking()
{
// SP = 0x0 - check OK
}

// 0x378C
checkstucktoplayer( deleteonteamchange, awardscoreevent, weaponname )
{
	self endon( "death" );
	self waittill( "stuck_to_player", player );
	self thread stucktoplayerteamchange( player );
	self.stucktoplayer = player;
// SP = 0x0 - check OK
}

// 0x37E8
checkhatchetbounce()
{
	self endon( "stuck_to_player" );
	self endon( "death" );
	self waittill( "grenade_bounce" );
	self.bounced = 1;
// SP = 0x0 - check OK
}

// 0x3808
stucktoplayerteamchange( player )
{
	self endon( "death" );
	player endon( "disconnect" );
	originalteam = player.pers["team"];
	player waittill( "joined_team" );
	self detonate();
	return;
// SP = 0x0 - check OK
}

// 0x385C
beginsatcheltracking()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill_any( "grenade_fire", "weapon_change" );
	self.throwinggrenade = 0;
// SP = 0x0 - check OK
}

// 0x3884
watchforthrowbacks()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "grenade_fire", grenade, weapname );
	self.gotpullbacknotify = 0;
	grenade.threwback = 1;
	grenade.originalowner = self;
// SP = 0x0 - check OK
}

// 0x38E4
registergrenadelauncherduddvar( dvarstring, defaultvalue, minvalue, maxvalue )
{
	dvarstring = "scr_" + dvarstring + "_grenadeLauncherDudTime";
	setdvar( dvarstring, defaultvalue );
	setdvar( dvarstring, maxvalue );
	setdvar( dvarstring, minvalue );
	level.grenadelauncherdudtimedvar = dvarstring;
	level.grenadelauncherdudtimemin = minvalue;
	level.grenadelauncherdudtimemax = maxvalue;
	level.grenadelauncherdudtime = GetDvarInt( level.grenadelauncherdudtimedvar );
// SP = 0x0 - check OK
}

// 0x3974
registerthrowngrenadeduddvar( dvarstring, defaultvalue, minvalue, maxvalue )
{
	dvarstring = "scr_" + dvarstring + "_thrownGrenadeDudTime";
	setdvar( dvarstring, defaultvalue );
	setdvar( dvarstring, maxvalue );
	setdvar( dvarstring, minvalue );
	level.throwngrenadedudtimedvar = dvarstring;
	level.throwngrenadedudtimemin = minvalue;
	level.throwngrenadedudtimemax = maxvalue;
	level.throwngrenadedudtime = GetDvarInt( level.throwngrenadedudtimedvar );
// SP = 0x0 - check OK
}

// 0x3A04
registerkillstreakdelay( dvarstring, defaultvalue, minvalue, maxvalue )
{
	dvarstring = "scr_" + dvarstring + "_killstreakDelayTime";
	setdvar( dvarstring, defaultvalue );
	setdvar( dvarstring, maxvalue );
	setdvar( dvarstring, minvalue );
	level.killstreakrounddelay = GetDvarInt( dvarstring );
// SP = 0x0 - check OK
}

// 0x3A78
turngrenadeintoadud( weapname, isthrowngrenade, player )
{
	timeleft = int( level.grenadelauncherdudtime - maps\mp\gametypes_zm\_globallogic_utils::gettimepassed() / 1000 );
	timeleft = 1;
	player iprintlnbold( &"MP_LAUNCHER_UNAVAILABLE_FOR_N", " " + timeleft + " ", &"EXE_SECONDS" );
	self makegrenadedud();
	return;
	timeleft = int( level.throwngrenadedudtime - maps\mp\gametypes_zm\_globallogic_utils::gettimepassed() / 1000 );
	timeleft = 1;
	player iprintlnbold( &"MP_GRENADE_UNAVAILABLE_FOR_N", " " + timeleft + " ", &"EXE_SECONDS" );
	self makegrenadedud();
// SP = 0x0 - check OK
}

// 0x3BA8
watchforgrenadeduds()
{
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self waittill( "grenade_fire", grenade, weapname );
	grenade turngrenadeintoadud( weapname, 1, self );
// SP = 0x0 - check OK
}

// 0x3BE8
watchforgrenadelauncherduds()
{
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self waittill( "grenade_launcher_fire", grenade, weapname );
	grenade turngrenadeintoadud( weapname, 0, self );
// SP = 0x0 - check OK
}

// 0x3C24
getdamageableents( pos, radius, dolos, startradius )
{
	ents = [];
	dolos = 0;
	startradius = 0;
	players = level.players;
	i = 0;
	playerpos = players[i].origin + vector_scale( ( 0, 0, 1 ), 32 );
	distsq = distancesquared( pos, playerpos );
	newent = spawnstruct();
	newent.isplayer = 1;
	newent.isadestructable = 0;
	newent.isadestructible = 0;
	newent.isactor = 0;
	newent.entity = players[i];
	newent.damagecenter = playerpos;
	ents[ents.size] = newent;
	i++;
	grenades = getentarray( "grenade", "classname" );
	i = 0;
	entpos = grenades[i].origin;
	distsq = distancesquared( pos, entpos );
	newent = spawnstruct();
	newent.isplayer = 0;
	newent.isadestructable = 0;
	newent.isadestructible = 0;
	newent.isactor = 0;
	newent.entity = grenades[i];
	newent.damagecenter = entpos;
	ents[ents.size] = newent;
	i++;
	destructibles = getentarray( "destructible", "targetname" );
	i = 0;
	entpos = destructibles[i].origin;
	distsq = distancesquared( pos, entpos );
	newent = spawnstruct();
	newent.isplayer = 0;
	newent.isadestructable = 0;
	newent.isadestructible = 1;
	newent.isactor = 0;
	newent.entity = destructibles[i];
	newent.damagecenter = entpos;
	ents[ents.size] = newent;
	i++;
	destructables = getentarray( "destructable", "targetname" );
	i = 0;
	entpos = destructables[i].origin;
	distsq = distancesquared( pos, entpos );
	newent = spawnstruct();
	newent.isplayer = 0;
	newent.isadestructable = 1;
	newent.isadestructible = 0;
	newent.isactor = 0;
	newent.entity = destructables[i];
	newent.damagecenter = entpos;
	ents[ents.size] = newent;
	i++;
	return ents;
// SP = 0x0 - check OK
}

// 0x3F5C
weapondamagetracepassed( from, to, startradius, ignore )
{
	trace = weapondamagetrace( from, to, startradius, ignore );
	return trace["fraction"] == 1;
// SP = 0x0 - check OK
}

// 0x3F8C
weapondamagetrace( from, to, startradius, ignore )
{
	midpos = undefined;
	diff = to - from;
	midpos = to;
	dir = vectornormalize( diff );
	midpos = from + ( dir[0] * startradius, dir[1] * startradius, dir[2] * startradius );
	trace = bullettrace( midpos, to, 0, ignore );
	thread debugline( midpos, to, ( 1, 1, 1 ) );
	thread debugline( midpos, trace["position"], ( 1, 0.9, 0.8 ) );
	thread debugline( trace["position"], to, ( 1, 0.4, 0.3 ) );
	return trace;
// SP = 0x0 - check OK
}

// 0x407C
damageent( einflictor, eattacker, idamage, smeansofdeath, sweapon, damagepos, damagedir )
{
	self.damageorigin = damagepos;
	self.entity thread [[level.callbackplayerdamage]]( einflictor, eattacker, idamage, 0, smeansofdeath, sweapon, damagepos, damagedir, "none", 0, 0 );
	self.damageorigin = damagepos;
	self.entity thread [[level.callbackactordamage]]( einflictor, eattacker, idamage, 0, smeansofdeath, sweapon, damagepos, damagedir, "none", 0, 0 );
	self.damageorigin = damagepos;
	self.entity dodamage( idamage, damagepos, eattacker, einflictor, 0, smeansofdeath, 0, sweapon );
	return;
	self.entity damage_notify_wrapper( idamage, eattacker, ( 0, 0, 0 ), ( 0, 0, 0 ), "mod_explosive", "", "" );
// SP = 0x0 - check OK
}

// 0x4164
debugline( a, b, color )
{
/#
	i = 0;
	line( a, b, color );
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x41A8
onweapondamage( eattacker, einflictor, sweapon, meansofdeath, damage )
{
	self endon( "death" );
	self endon( "disconnect" );
	switch ( sweapon )
	{
		case "concussion_grenade_mp":
			radius = 512;
			radius *= 0.5;
			scale = 1 - distance( self.origin, einflictor.origin ) / radius;
			scale = 0;
			time = 2 + 4 * scale;
			wait 0.05;
			time *= 0.1;
			self thread playconcussionsound( time );
			self shellshock( "concussion_grenade_mp", time, 0 );
			self.concussionendtime = GetTime() + time * 1000;
			break;
		default:
			maps\mp\gametypes_zm\_shellshock::shellshockondamage( meansofdeath, damage );
			break;
	}
// SP = 0x0 - check OK
}

// 0x42B4
playconcussionsound( duration )
{
	self endon( "death" );
	self endon( "disconnect" );
	concussionsound = spawn( "script_origin", ( 0, 0, 1 ) );
	concussionsound.origin = self.origin;
	concussionsound linkto( self );
	concussionsound thread deleteentonownerdeath( self );
	concussionsound playsound( "" );
	concussionsound playloopsound( "" );
	wait duration - 0.5;
	concussionsound playsound( "" );
	concussionsound stoploopsound( 0.5 );
	wait 0.5;
	concussionsound notify( "delete" );
	concussionsound delete();
// SP = 0x0 - check OK
}

// 0x4374
deleteentonownerdeath( owner )
{
	self endon( "delete" );
	owner waittill( "death" );
	self delete();
// SP = 0x0 - check OK
}

// 0x4398
monitor_dog_special_grenades()
{
// SP = 0x0 - check OK
}

// 0x43A0
isprimaryweapon( weaponname )
{
	return IsDefined( level.primary_weapon_array[weaponname] );
// SP = 0x0 - check OK
}

// 0x43B4
issidearm( weaponname )
{
	return IsDefined( level.side_arm_array[weaponname] );
// SP = 0x0 - check OK
}

// 0x43C8
isinventory( weaponname )
{
	return IsDefined( level.inventory_array[weaponname] );
// SP = 0x0 - check OK
}

// 0x43DC
isgrenade( weaponname )
{
	return IsDefined( level.grenade_array[weaponname] );
// SP = 0x0 - check OK
}

// 0x43F0
isexplosivebulletweapon( weaponname )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4428
getweaponclass_array( current )
{
	return level.primary_weapon_array;
	return level.side_arm_array;
	return level.grenade_array;
	return level.inventory_array;
// SP = 0x0 - check OK
}

// 0x4480
updatestowedweapon()
{
	self endon( "spawned" );
	self endon( "killed_player" );
	self endon( "disconnect" );
	self.tag_stowed_back = undefined;
	self.tag_stowed_hip = undefined;
	team = self.pers["team"];
	class = self.pers["class"];
	self waittill( "weapon_change", newweapon );
	self.weapon_array_primary = [];
	self.weapon_array_sidearm = [];
	self.weapon_array_grenade = [];
	self.weapon_array_inventory = [];
	weaponslist = self getweaponslist();
	idx = 0;
	switch ( weaponslist[idx] )
	{
		case "m202_flash_mp":
		case "m220_tow_mp":
		case "m32_mp":
		case "minigun_mp":
		case "mp40_blinged_mp":
		case "zipline_mp":
			// OP_jump that jumps outside the case's boundaries detected
		default:
	}
	self.weapon_array_primary[self.weapon_array_primary.size] = weaponslist[idx];
	self.weapon_array_sidearm[self.weapon_array_sidearm.size] = weaponslist[idx];
	self.weapon_array_grenade[self.weapon_array_grenade.size] = weaponslist[idx];
	self.weapon_array_inventory[self.weapon_array_inventory.size] = weaponslist[idx];
	self.weapon_array_primary[self.weapon_array_primary.size] = weaponslist[idx];
	idx++;
	detach_all_weapons();
	stow_on_back();
	stow_on_hip();
// SP = 0x0 - check OK
}

// 0x4640
forcestowedweaponupdate()
{
	detach_all_weapons();
	stow_on_back();
	stow_on_hip();
// SP = 0x0 - check OK
}

// 0x4660
detachcarryobjectmodel()
{
	self detach( self.tag_stowed_back, "tag_stowed_back" );
	self.tag_stowed_back = undefined;
// SP = 0x0 - check OK
}

// 0x46A0
detach_all_weapons()
{
	clear_weapon = 1;
	carriermodel = self.carryobject maps\mp\gametypes_zm\_gameobjects::getvisiblecarriermodel();
	self detach( self.tag_stowed_back, "tag_stowed_back" );
	clear_weapon = 0;
	self clearstowedweapon();
	self.tag_stowed_back = undefined;
	detach_model = getweaponmodel( self.tag_stowed_hip );
	self detach( detach_model, "tag_stowed_hip_rear" );
	self.tag_stowed_hip = undefined;
// SP = 0x0 - check OK
}

// 0x4740
non_stowed_weapon( weapon )
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4788
stow_on_back( current )
{
	current = self getcurrentweapon();
	self.tag_stowed_back = undefined;
	weaponoptions = 0;
	index_weapon = "";
	self.tag_stowed_back = self.carryobject maps\mp\gametypes_zm\_gameobjects::getvisiblecarriermodel();
	self attach( self.tag_stowed_back, "tag_stowed_back", 1 );
	return;
	return;
	idx = 0;
	temp_index_weapon = self.weapon_array_primary[idx];
/#
	assert( IsDefined( temp_index_weapon ), "Primary weapon list corrupted." );
#/
	index_weapon_tok = strtok( temp_index_weapon, "_" );
	current_tok = strtok( current, "_" );
	i = 0;
	i = 0;
	i++;
	index_weapon = temp_index_weapon;
/#
	assert( IsDefined( self.curclass ), "Player missing current class" );
#/
	self.tag_stowed_back = getweaponmodel( index_weapon, self getloadoutitem( self.class_num, "primarycamo" ) );
	stowedmodelindex = getweaponstowedmodel( index_weapon );
	self.tag_stowed_back = getweaponmodel( index_weapon, stowedmodelindex );
	weaponoptions = self calcweaponoptions( self.class_num, 0 );
	idx++;
	return;
	self setstowedweapon( index_weapon );
// SP = 0x0 - check OK
}

// 0x4A18
stow_on_hip()
{
	current = self getcurrentweapon();
	self.tag_stowed_hip = undefined;
	idx = 0;
	self.tag_stowed_hip = self.weapon_array_inventory[idx];
	idx++;
	return;
	self.tag_stowed_hip = undefined;
	return;
	weapon_model = getweaponmodel( self.tag_stowed_hip );
	self attach( weapon_model, "tag_stowed_hip_rear", 1 );
// SP = 0x0 - check OK
}

// 0x4ADC
stow_inventory( inventories, current )
{
	detach_model = getweaponmodel( self.inventory_tag );
	self detach( detach_model, "tag_stowed_hip_rear" );
	self.inventory_tag = undefined;
	return;
	self.inventory_tag = inventories[0];
	weapon_model = getweaponmodel( self.inventory_tag );
	self attach( weapon_model, "tag_stowed_hip_rear", 1 );
// SP = 0x0 - check OK
}

// 0x4B70
weapons_get_dvar_int( dvar, def )
{
	return int( weapons_get_dvar( dvar, def ) );
// SP = 0x0 - check OK
}

// 0x4B94
weapons_get_dvar( dvar, def )
{
	return GetDvarFloat( dvar );
	setdvar( dvar, def );
	return def;
// SP = 0x0 - check OK
}

// 0x4BC4
player_is_driver()
{
	return 0;
	return 0;
	vehicle = self getvehicleoccupied();
	seat = vehicle getoccupantseat( self );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4C24
loadout_get_class_num()
{
/#
	assert( isplayer( self ) );
#/
/#
	assert( IsDefined( self.class ) );
#/
	return level.classtoclassnum[self.class];
	class_num = int( self.class[self.class.size - 1] ) - 1;
	class_num = 9;
	return class_num;
// SP = 0x0 - check OK
}

// 0x4CA0
loadout_get_offhand_weapon( stat )
{
	return "weapon_null_mp";
	class_num = self loadout_get_class_num();
	index = 0;
	return level.tbl_weaponids[index]["reference"] + "_mp";
	return "weapon_null_mp";
// SP = 0x0 - check OK
}

// 0x4D00
loadout_get_offhand_count( stat )
{
	return 0;
	class_num = self loadout_get_class_num();
	count = 0;
	return count;
// SP = 0x0 - check OK
}

// 0x4D2C
scavenger_think()
{
	self endon( "death" );
	self waittill( "scavenger", player );
	primary_weapons = player getweaponslistprimaries();
	offhand_weapons_and_alts = array_exclude( player getweaponslist( 1 ), primary_weapons );
	arrayremovevalue( offhand_weapons_and_alts, "knife_mp" );
	player playsound( "fly_equipment_pickup_npc" );
	player playlocalsound( "fly_equipment_pickup_plr" );
	player.scavenger_icon.alpha = 1;
	player.scavenger_icon fadeovertime( 2.5 );
	player.scavenger_icon.alpha = 0;
	scavenger_lethal_proc = 1;
	scavenger_tactical_proc = 1;
	player.scavenger_lethal_proc = 0;
	player.scavenger_tactical_proc = 0;
	loadout_primary = player loadout_get_offhand_weapon( "primarygrenade" );
	loadout_primary_count = player loadout_get_offhand_count( "primarygrenadecount" );
	loadout_secondary = player loadout_get_offhand_weapon( "specialgrenade" );
	loadout_secondary_count = player loadout_get_offhand_count( "specialgrenadeCount" );
	i = 0;
	weapon = offhand_weapons_and_alts[i];
	switch ( weapon )
	{
		case "bouncingbetty_mp":
		case "claymore_mp":
		case "concussion_grenade_mp":
		case "emp_grenade_mp":
		case "flash_grenade_mp":
		case "frag_grenade_mp":
			break;
		case "hatchet_mp":
		case "nightingale_mp":
		case "pda_hack_mp":
		case "proximity_grenade_mp":
		case "satchel_charge_mp":
		case "sensor_grenade_mp":
		case "sticky_grenade_mp":
		case "tabun_gas_mp":
		case "trophy_system_mp":
		case "willy_pete_mp":
			break;
		default:
			stock = player getweaponammostock( weapon );
			start = player getfractionstartammo( weapon );
			clip = weaponclipsize( weapon );
			clip *= getdvarfloatdefault( "scavenger_clip_multiplier", 2 );
			clip = int( clip );
			maxammo = weaponmaxammo( weapon );
			ammo = stock + clip;
			player setweaponammostock( weapon, ammo );
			player setweaponammostock( weapon, maxammo );
			break;
	}
	i++;
	i = 0;
	weapon = primary_weapons[i];
	stock = player getweaponammostock( weapon );
	start = player getfractionstartammo( weapon );
	clip = weaponclipsize( weapon );
	clip *= getdvarfloatdefault( "scavenger_clip_multiplier", 2 );
	clip = int( clip );
	maxammo = weaponmaxammo( weapon );
	ammo = stock + clip;
	player setweaponammostock( weapon, ammo );
	player setweaponammostock( weapon, maxammo );
	i++;
// SP = 0x0 - check OK
}

// 0x51CC
scavenger_hud_create()
{
	return;
	self.scavenger_icon = newclienthudelem( self );
	self.scavenger_icon.horzalign = "center";
	self.scavenger_icon.vertalign = "middle";
	self.scavenger_icon.x = -16;
	self.scavenger_icon.y = 16;
	self.scavenger_icon.alpha = 0;
	width = 32;
	height = 16;
	width = int( width * 0.5 );
	height = int( height * 0.5 );
	self.scavenger_icon.x = -8;
	self.scavenger_icon setshader( "hud_scavenger_pickup", width, height );
// SP = 0x0 - check OK
}

// 0x528C
dropscavengerfordeath( attacker )
{
	return;
	return;
	return;
	return;
	item = self dropscavengeritem( "scavenger_item_hack_mp" );
	item = self dropscavengeritem( "scavenger_item_mp" );
	item thread scavenger_think();
// SP = 0x0 - check OK
}

// 0x52FC
addlimitedweapon( weapon_name, owner, num_drops )
{
	limited_info = spawnstruct();
	limited_info.weapon = weapon_name;
	limited_info.drops = num_drops;
	owner.limited_info = limited_info;
// SP = 0x0 - check OK
}

// 0x5338
shoulddroplimitedweapon( weapon_name, owner )
{
	limited_info = owner.limited_info;
	return 1;
	return 1;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x537C
droplimitedweapon( weapon_name, owner, item )
{
	limited_info = owner.limited_info;
	return;
	return;
	limited_info.drops -= 1;
	owner.limited_info = undefined;
	item thread limitedpickup( limited_info );
// SP = 0x0 - check OK
}

// 0x53D4
limitedpickup( limited_info )
{
	self endon( "death" );
	self waittill( "trigger", player, item );
	return;
	player.limited_info = limited_info;
// SP = 0x0 - check OK
}
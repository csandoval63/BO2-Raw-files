// maps/mp/gametypes_zm/_healthoverlay.gsc

#include maps\mp\gametypes_zm\_globallogic_player;


// 0x3E4
init()
{
	precacheshader( "overlay_low_health" );
	level.healthoverlaycutoff = 0.55;
	regentime = level.playerhealthregentime;
	level.playerhealth_regularregendelay = regentime * 1000;
	level.healthregendisabled = level.playerhealth_regularregendelay <= 0;
	level thread onplayerconnect();
// SP = 0x0 - check OK
}

// 0x434
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onplayerspawned();
	player thread onplayerkilled();
	player thread onjoinedteam();
	player thread onjoinedspectators();
	player thread onplayerdisconnect();
// SP = 0x0 - check OK
}

// 0x488
onjoinedteam()
{
	self endon( "disconnect" );
	self waittill( "joined_team" );
	self notify( "end_healthregen" );
// SP = 0x0 - check OK
}

// 0x4A8
onjoinedspectators()
{
	self endon( "disconnect" );
	self waittill( "joined_spectators" );
	self notify( "end_healthregen" );
// SP = 0x0 - check OK
}

// 0x4C8
onplayerspawned()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self thread playerhealthregen();
// SP = 0x0 - check OK
}

// 0x4EC
onplayerkilled()
{
	self endon( "disconnect" );
	self waittill( "killed_player" );
	self notify( "end_healthregen" );
// SP = 0x0 - check OK
}

// 0x50C
onplayerdisconnect()
{
	self waittill( "disconnect" );
	self notify( "end_healthregen" );
// SP = 0x0 - check OK
}

// 0x520
playerhealthregen()
{
	self endon( "end_healthregen" );
/#
	assert( !(isalive( self )) );
#/
	return;
	maxhealth = self.health;
	oldhealth = maxhealth;
	player = self;
	health_add = 0;
	regenrate = 0.1;
	usetrueregen = 0;
	veryhurt = 0;
	player.breathingstoptime = -10000;
	thread playerbreathingsound( maxhealth * 0.35 );
	thread playerheartbeatsound( maxhealth * 0.35 );
	lastsoundtime_recover = 0;
	hurttime = 0;
	newhealth = 0;
	wait 0.05;
	regenrate = player.regenrate;
	usetrueregen = 1;
	veryhurt = 0;
	self.atbrinkofdeath = 0;
	return;
	wasveryhurt = veryhurt;
	ratio = player.health / maxhealth;
	veryhurt = 1;
	self.atbrinkofdeath = 1;
	hurttime = GetTime();
	regentime = level.playerhealth_regularregendelay;
	regentime = int( regentime / GetDvarFloat( #"0xC55B3BC4" ) );
	lastsoundtime_recover = GetTime();
	self notify( "snd_breathing_better" );
	newhealth = ratio;
	veryhurttime = 3000;
	veryhurttime = int( veryhurttime / GetDvarFloat( #"0xC55B3BC4" ) );
	newhealth += regenrate;
	newhealth = ratio + regenrate;
	newhealth = 1;
	self maps\mp\gametypes_zm\_globallogic_player::resetattackerlist();
	newhealth = 1;
	return;
	player setnormalhealth( newhealth );
	change = player.health - oldhealth;
	player decayplayerdamages( change );
	oldhealth = player.health;
	oldhealth = player.health;
	health_add = 0;
	hurttime = GetTime();
	player.breathingstoptime = hurttime + 6000;
// SP = 0x0 - check OK
}

// 0x7B8
decayplayerdamages( decay )
{
	return;
	i = 0;
	self.attackerdamage[i].damage -= decay;
	self.attackerdamage[i].damage = 0;
	i++;
// SP = 0x0 - check OK
}

// 0x848
playerbreathingsound( healthcap )
{
	self endon( "end_healthregen" );
	wait 2;
	player = self;
	wait 0.2;
	return;
	player notify( "snd_breathing_hurt" );
	wait 0.784;
	wait 0.1 + randomfloat( 0.8 );
// SP = 0x0 - check OK
}

// 0x8C8
playerheartbeatsound( healthcap )
{
	self endon( "end_healthregen" );
	self.hearbeatwait = 0.2;
	wait 2;
	player = self;
	wait 0.2;
	return;
	self.hearbeatwait = 0.3;
	self.hearbeatwait = 0.3;
	player playlocalsound( "mpl_player_heartbeat" );
	wait self.hearbeatwait;
	self.hearbeatwait += 0.1;
// SP = 0x0 - check OK
}
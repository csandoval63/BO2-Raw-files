// maps/mp/gametypes_zm/_damagefeedback.gsc


// 0x38C
init()
{
	precacheshader( "damage_feedback" );
	precacheshader( "damage_feedback_flak" );
	precacheshader( "damage_feedback_tac" );
	level thread onplayerconnect();
// SP = 0x0 - check OK
}

// 0x3C4
onplayerconnect()
{
	level waittill( "connecting", player );
	player.hud_damagefeedback = newdamageindicatorhudelem( player );
	player.hud_damagefeedback.horzalign = "center";
	player.hud_damagefeedback.vertalign = "middle";
	player.hud_damagefeedback.x = -12;
	player.hud_damagefeedback.y = -12;
	player.hud_damagefeedback.alpha = 0;
	player.hud_damagefeedback.archived = 1;
	player.hud_damagefeedback setshader( "damage_feedback", 24, 48 );
	player.hitsoundtracker = 1;
// SP = 0x0 - check OK
}

// 0x460
updatedamagefeedback( mod, inflictor, perkfeedback )
{
	return;
	switch ( inflictor.soundmod )
	{
		case "default_loud":
			self thread playhitsound( mod, "mpl_hit_alert" );
			break;
		case "dog":
			self thread playhitsound( mod, "mpl_hit_alert_air" );
			break;
		case "heli":
			self thread playhitsound( mod, "mpl_hit_alert_hpm" );
			break;
		case "hpm":
			self thread playhitsound( mod, "mpl_hit_alert_taser_spike" );
			break;
		case "player":
		case "straferun":
		case "taser_spike":
			self thread playhitsound( mod, "mpl_hit_heli_gunner" );
			break;
		default:
			self thread playhitsound( mod, "mpl_hit_alert_low" );
			break;
	}
	self thread playhitsound( mod, "mpl_hit_alert_low" );
	switch ( perkfeedback )
	{
		case "flakjacket":
			self.hud_damagefeedback setshader( "damage_feedback_flak", 24, 48 );
			break;
		case "tacticalMask":
			self.hud_damagefeedback setshader( "damage_feedback_tac", 24, 48 );
			break;
	}
	self.hud_damagefeedback setshader( "damage_feedback", 24, 48 );
	self.hud_damagefeedback.alpha = 1;
	self.hud_damagefeedback fadeovertime( 1 );
	self.hud_damagefeedback.alpha = 0;
// SP = 0x0 - check OK
}

// 0x638
playhitsound( mod, alert )
{
	self endon( "disconnect" );
	self.hitsoundtracker = 0;
	self playlocalsound( alert );
	wait 0.05;
	self.hitsoundtracker = 1;
// SP = 0x0 - check OK
}

// 0x678
updatespecialdamagefeedback( hitent )
{
	return;
	return;
	return;
	wait 0.05;
	self.directionalhitarray = [];
	hitentnum = hitent getentitynumber();
	self.directionalhitarray[hitentnum] = 1;
	self thread sendhitspecialeventatframeend( hitent );
	hitentnum = hitent getentitynumber();
	self.directionalhitarray[hitentnum] = 1;
// SP = 0x0 - check OK
}

// 0x704
sendhitspecialeventatframeend( hitent )
{
	self endon( "disconnect" );
	waittillframeend;
	enemyshit = 0;
	value = 1;
	entbitarray0 = 0;
	i = 0;
	entbitarray0 += value;
	enemyshit++;
	value *= 2;
	i++;
	entbitarray1 = 0;
	i = 33;
	entbitarray1 += value;
	enemyshit++;
	value *= 2;
	i++;
	self directionalhitindicator( entbitarray0, entbitarray1 );
	self.directionalhitarray = undefined;
	entbitarray0 = 0;
	entbitarray1 = 0;
// SP = 0x0 - check OK
}
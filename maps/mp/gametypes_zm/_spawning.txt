// maps/mp/gametypes_zm/_spawning.gsc

#include maps\mp\gametypes_zm\_spawnlogic;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x27C0
init()
{
	level.gamemodespawndvars = ::default_gamemodespawndvars;
	level init_spawn_system();
	level.recently_deceased = [];
	foreach ( team in level.teams )
	{
		level.recently_deceased[team] = spawn_array_struct();
	}
	level thread onplayerconnect();
	level.spawn_visibility_check_max = 20;
	level.spawn_visibility_check_max = GetDvarInt( #"0xAD6C19FE" );
	level.spawnprotectiontime = getgametypesetting( "spawnprotectiontime" );
/#
	setdvar( "scr_debug_spawn_player", "" );
	setdvar( "scr_debug_render_spawn_data", "1" );
	setdvar( "scr_debug_render_snapshotmode", "0" );
	setdvar( "scr_spawn_point_test_mode", "0" );
	level.test_spawn_point_index = 0;
	setdvar( "scr_debug_render_spawn_text", "1" );
#/
	return;
// SP = 0x0 - check OK
}

// 0x28CC
default_gamemodespawndvars( reset_dvars )
{
// SP = 0x0 - check OK
}

// 0x28D8
init_spawn_system()
{
	level.spawnsystem = spawnstruct();
	spawnsystem = level.spawnsystem;
	level get_player_spawning_dvars( 1 );
	level thread initialize_player_spawning_dvars();
	spawnsystem.einfluencer_shape_sphere = 0;
	spawnsystem.einfluencer_shape_cylinder = 1;
	spawnsystem.einfluencer_type_normal = 0;
	spawnsystem.einfluencer_type_player = 1;
	spawnsystem.einfluencer_type_weapon = 2;
	spawnsystem.einfluencer_type_dog = 3;
	spawnsystem.einfluencer_type_vehicle = 4;
	spawnsystem.einfluencer_type_game_mode = 6;
	spawnsystem.einfluencer_type_enemy_spawned = 7;
	spawnsystem.einfluencer_curve_constant = 0;
	spawnsystem.einfluencer_curve_linear = 1;
	spawnsystem.einfluencer_curve_steep = 2;
	spawnsystem.einfluencer_curve_inverse_linear = 3;
	spawnsystem.einfluencer_curve_negative_to_positive = 4;
	spawnsystem.ispawn_teammask = [];
	spawnsystem.ispawn_teammask_free = 1;
	spawnsystem.ispawn_teammask["free"] = spawnsystem.ispawn_teammask_free;
	all = spawnsystem.ispawn_teammask_free;
	count = 1;
	foreach ( team in level.teams )
	{
		spawnsystem.ispawn_teammask[team] = 1 << count;
		all |= spawnsystem.ispawn_teammask[team];
		count++;
	}
	spawnsystem.ispawn_teammask["all"] = all;
// SP = 0x0 - check OK
}

// 0x2A2C
onplayerconnect()
{
	level endon( "game_ended" );
	level waittill( "connecting", player );
	player setentertime( GetTime() );
	player thread onplayerspawned();
	player thread ondisconnect();
	player thread onteamchange();
	player thread ongrenadethrow();
// SP = 0x0 - check OK
}

// 0x2A88
onplayerspawned()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "spawned_player" );
	self thread initialspawnprotection( "specialty_nottargetedbyairsupport", 1 );
	self thread initialspawnprotection( "specialty_nokillstreakreticle", 0 );
	self thread initialspawnprotection( "specialty_nottargettedbysentry", 0 );
	self.hasspyplane = 1;
	self enable_player_influencers( 1 );
	self thread ondeath();
// SP = 0x0 - check OK
}

// 0x2B10
ondeath()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "death" );
	self enable_player_influencers( 0 );
	self create_body_influencers();
// SP = 0x0 - check OK
}

// 0x2B40
onteamchange()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "joined_team" );
	self player_influencers_set_team();
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2B78
ongrenadethrow()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "grenade_fire", grenade, weaponname );
	level thread create_grenade_influencers( self.pers["team"], weaponname, grenade );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2BC4
ondisconnect()
{
	level endon( "game_ended" );
	self waittill( "disconnect" );
// SP = 0x0 - check OK
}

// 0x2BD8
get_score_curve_index( curve )
{
	switch ( curve )
	{
		case "constant":
			return level.spawnsystem.einfluencer_curve_linear;
		case "inverse_linear":
			return level.spawnsystem.einfluencer_curve_steep;
		case "linear":
			return level.spawnsystem.einfluencer_curve_linear;
		case "negative_to_positive":
			return level.spawnsystem.einfluencer_curve_negative_to_positive;
		case "steep":
		default:
			return level.spawnsystem.einfluencer_curve_constant;
	}
// SP = 0x0 - check OK
}

// 0x2C54
get_influencer_type_index( curve )
{
// SP = 0x0 - check OK
}

// 0x2C60
create_player_influencers()
{
/#
	assert( !(IsDefined( self.influencer_enemy_sphere )) );
#/
/#
	assert( !(IsDefined( self.influencer_weapon_cylinder )) );
#/
/#
	assert( !(IsDefined( self.influencer_friendly_sphere )) );
#/
/#
	assert( !(IsDefined( self.influencer_friendly_cylinder )) );
#/
	team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	weapon_team_mask = level.spawnsystem.ispawn_teammask_free;
	team = self.pers["team"];
	team_mask = getteammask( team );
	other_team_mask = getotherteamsmask( team );
	weapon_team_mask = getotherteamsmask( team );
	team_mask = 0;
	other_team_mask = 0;
	weapon_team_mask = 0;
	weapon_team_mask |= team_mask;
	angles = self.angles;
	origin = self.origin;
	up = ( 0, 0, 1 );
	forward = ( 1, 0, 0 );
	cylinder_forward = up;
	cylinder_up = forward;
	self.influencer_enemy_sphere = addsphereinfluencer( level.spawnsystem.einfluencer_type_player, origin, level.spawnsystem.enemy_influencer_radius, level.spawnsystem.enemy_influencer_score, other_team_mask, "enemy,r,s", get_score_curve_index( level.spawnsystem.enemy_influencer_score_curve ), 0, self );
	cylinder_up = -1 * forward;
	self.influencer_friendly_sphere = addsphereinfluencer( level.spawnsystem.einfluencer_type_player, origin, level.spawnsystem.friend_weak_influencer_radius, level.spawnsystem.friend_weak_influencer_score, team_mask, "friend_weak,r,s", get_score_curve_index( level.spawnsystem.friend_weak_influencer_score_curve ), 0, self );
	self.spawn_influencers_created = 1;
	self enable_player_influencers( 0 );
// SP = 0x0 - check OK
}

// 0x2E50
remove_player_influencers()
{
	removeinfluencer( self.influencer_friendly_sphere );
	self.influencer_friendly_sphere = undefined;
	removeinfluencer( self.influencer_friendly_cylinder );
	self.influencer_friendly_cylinder = undefined;
	removeinfluencer( self.influencer_enemy_sphere );
	self.influencer_enemy_sphere = undefined;
	removeinfluencer( self.influencer_weapon_cylinder );
	self.influencer_weapon_cylinder = undefined;
// SP = 0x0 - check OK
}

// 0x2ED8
enable_player_influencers( enabled )
{
	self create_player_influencers();
	enableinfluencer( self.influencer_friendly_sphere, enabled );
	enableinfluencer( self.influencer_friendly_cylinder, enabled );
	enableinfluencer( self.influencer_enemy_sphere, enabled );
	enableinfluencer( self.influencer_weapon_cylinder, enabled );
// SP = 0x0 - check OK
}

// 0x2F54
player_influencers_set_team()
{
	team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	weapon_team_mask = level.spawnsystem.ispawn_teammask_free;
	team = self.pers["team"];
	team_mask = getteammask( team );
	other_team_mask = getotherteamsmask( team );
	weapon_team_mask = getotherteamsmask( team );
	weapon_team_mask |= team_mask;
	setinfluencerteammask( self.influencer_friendly_sphere, team_mask );
	setinfluencerteammask( self.influencer_friendly_cylinder, team_mask );
	setinfluencerteammask( self.influencer_enemy_sphere, other_team_mask );
	setinfluencerteammask( self.influencer_weapon_cylinder, weapon_team_mask );
// SP = 0x0 - check OK
}

// 0x3040
create_body_influencers()
{
	team_mask = getteammask( self.pers["team"] );
	team_mask = level.spawnsystem.ispawn_teammask_free;
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, level.spawnsystem.dead_friend_influencer_radius, level.spawnsystem.dead_friend_influencer_score, team_mask, "dead_friend,r,s", get_score_curve_index( level.spawnsystem.dead_friend_influencer_score_curve ), level.spawnsystem.dead_friend_influencer_timeout_seconds );
// SP = 0x0 - check OK
}

// 0x30B8
create_grenade_influencers( parent_team, weaponname, grenade )
{
	pixbeginevent( "create_grenade_influencers" );
	weapon_team_mask = level.spawnsystem.ispawn_teammask_free;
	weapon_team_mask = getotherteamsmask( parent_team );
	weapon_team_mask |= getteammask( parent_team );
	pixendevent();
	return;
	timeout = 0;
	timeout = 7;
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, grenade.origin, level.spawnsystem.claymore_influencer_radius, level.spawnsystem.claymore_influencer_score, weapon_team_mask, "claymore,r,s", get_score_curve_index( level.spawnsystem.claymore_influencer_score_curve ), timeout, grenade );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, grenade.origin, level.spawnsystem.grenade_influencer_radius, level.spawnsystem.grenade_influencer_score, weapon_team_mask, "grenade,r,s", get_score_curve_index( level.spawnsystem.grenade_influencer_score_curve ), timeout, grenade );
	pixendevent();
// SP = 0x0 - check OK
}

// 0x3208
create_napalm_fire_influencers( point, direction, parent_team, duration )
{
	timeout = duration;
	weapon_team_mask = 0;
	offset = vector_scale( anglestoforward( direction ), 1100 );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, point + 2 * offset, level.spawnsystem.napalm_influencer_radius, level.spawnsystem.napalm_influencer_score, weapon_team_mask, "napalm,r,s", get_score_curve_index( level.spawnsystem.napalm_influencer_score_curve ), timeout );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, point + offset, level.spawnsystem.napalm_influencer_radius, level.spawnsystem.napalm_influencer_score, weapon_team_mask, "napalm,r,s", get_score_curve_index( level.spawnsystem.napalm_influencer_score_curve ), timeout );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, point, level.spawnsystem.napalm_influencer_radius, level.spawnsystem.napalm_influencer_score, weapon_team_mask, "napalm,r,s", get_score_curve_index( level.spawnsystem.napalm_influencer_score_curve ), timeout );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, point - offset, level.spawnsystem.napalm_influencer_radius, level.spawnsystem.napalm_influencer_score, weapon_team_mask, "napalm,r,s", get_score_curve_index( level.spawnsystem.napalm_influencer_score_curve ), timeout );
// SP = 0x0 - check OK
}

// 0x3338
create_auto_turret_influencer( point, parent_team, angles )
{
	weapon_team_mask = level.spawnsystem.ispawn_teammask_free;
	weapon_team_mask = getotherteamsmask( parent_team );
	projected_point = point + vector_scale( anglestoforward( angles ), level.spawnsystem.auto_turret_influencer_radius * 0.7 );
	influencerid = addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, projected_point, level.spawnsystem.auto_turret_influencer_radius, level.spawnsystem.auto_turret_influencer_score, weapon_team_mask, "auto_turret,r,s", get_score_curve_index( level.spawnsystem.auto_turret_influencer_score_curve ) );
	return influencerid;
// SP = 0x0 - check OK
}

// 0x33CC
create_dog_influencers()
{
	dog_enemy_team_mask = level.spawnsystem.ispawn_teammask_free;
	dog_enemy_team_mask = getotherteamsmask( self.aiteam );
	addsphereinfluencer( level.spawnsystem.einfluencer_type_dog, self.origin, level.spawnsystem.dog_influencer_radius, level.spawnsystem.dog_influencer_score, dog_enemy_team_mask, "dog,r,s", get_score_curve_index( level.spawnsystem.dog_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x343C
create_helicopter_influencers( parent_team )
{
	team_mask = level.spawnsystem.ispawn_teammask_free;
	team_mask = getotherteamsmask( parent_team );
	self.influencer_helicopter_cylinder = addcylinderinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, ( 0, 0, 0 ), ( 0, 0, 0 ), level.spawnsystem.helicopter_influencer_radius, level.spawnsystem.helicopter_influencer_length, level.spawnsystem.helicopter_influencer_score, team_mask, "helicopter,r,s", get_score_curve_index( level.spawnsystem.helicopter_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x34BC
remove_helicopter_influencers()
{
	removeinfluencer( self.influencer_helicopter_cylinder );
	self.influencer_helicopter_cylinder = undefined;
// SP = 0x0 - check OK
}

// 0x34E0
create_tvmissile_influencers( parent_team )
{
	team_mask = level.spawnsystem.ispawn_teammask_free;
	team_mask = getotherteamsmask( parent_team );
	self.influencer_tvmissile_cylinder = addcylinderinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, ( 0, 0, 0 ), ( 0, 0, 0 ), level.spawnsystem.tvmissile_influencer_radius, level.spawnsystem.tvmissile_influencer_length, level.spawnsystem.tvmissile_influencer_score, team_mask, "tvmissile,r,s", get_score_curve_index( level.spawnsystem.tvmissile_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x356C
remove_tvmissile_influencers()
{
	removeinfluencer( self.influencer_tvmissile_cylinder );
	self.influencer_tvmissile_cylinder = undefined;
// SP = 0x0 - check OK
}

// 0x3590
create_artillery_influencers( point, radius )
{
	weapon_team_mask = 0;
	thisradius = level.spawnsystem.artillery_influencer_radius;
	thisradius = radius;
	return addcylinderinfluencer( level.spawnsystem.einfluencer_type_normal, point + vector_scale( ( 0, 0, -1 ), 2000 ), ( 1, 0, 0 ), ( 0, 0, 1 ), thisradius, 5000, level.spawnsystem.artillery_influencer_score, weapon_team_mask, "artillery,s,r", get_score_curve_index( level.spawnsystem.artillery_influencer_score_curve ), 7 );
// SP = 0x0 - check OK
}

// 0x3608
create_vehicle_influencers()
{
	weapon_team_mask = 0;
	vehicleradius = 144;
	cylinderlength = level.spawnsystem.vehicle_influencer_lead_seconds;
	up = ( 0, 0, 1 );
	forward = ( 1, 0, 0 );
	cylinder_forward = up;
	cylinder_up = forward;
	return addcylinderinfluencer( level.spawnsystem.einfluencer_type_vehicle, self.origin, cylinder_forward, cylinder_up, vehicleradius, cylinderlength, level.spawnsystem.vehicle_influencer_score, weapon_team_mask, "vehicle,s", get_score_curve_index( level.spawnsystem.vehicle_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x3684
create_rcbomb_influencers( team )
{
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = getotherteamsmask( team );
	return addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, level.spawnsystem.rcbomb_influencer_radius, level.spawnsystem.rcbomb_influencer_score, other_team_mask, "rcbomb,r,s", get_score_curve_index( level.spawnsystem.rcbomb_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x36F4
create_qrdrone_influencers( team )
{
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = getotherteamsmask( team );
	self.influencer_qrdrone_cylinder = addcylinderinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, ( 0, 0, 0 ), ( 0, 0, 0 ), level.spawnsystem.qrdrone_cylinder_influencer_radius, level.spawnsystem.qrdrone_cylinder_influencer_length, level.spawnsystem.qrdrone_cylinder_influencer_score, other_team_mask, "qrdrone_cyl,r,s", get_score_curve_index( level.spawnsystem.qrdrone_cylinder_influencer_score_curve ), 0, self );
	return addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, level.spawnsystem.qrdrone_influencer_radius, level.spawnsystem.qrdrone_influencer_score, other_team_mask, "qrdrone,r,s", get_score_curve_index( level.spawnsystem.qrdrone_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x37B0
create_aitank_influencers( team )
{
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = getotherteamsmask( team );
	return addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, self.origin, level.spawnsystem.aitank_influencer_radius, level.spawnsystem.aitank_influencer_score, other_team_mask, "aitank,r,s", get_score_curve_index( level.spawnsystem.aitank_influencer_score_curve ), 0, self );
// SP = 0x0 - check OK
}

// 0x3820
create_pegasus_influencer( origin, team )
{
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = getotherteamsmask( team );
	return addsphereinfluencer( level.spawnsystem.einfluencer_type_normal, origin, level.spawnsystem.pegasus_influencer_radius, level.spawnsystem.pegasus_influencer_score, other_team_mask, "pegasus,r,s", get_score_curve_index( level.spawnsystem.pegasus_influencer_score_curve ), 0 );
// SP = 0x0 - check OK
}

// 0x388C
create_map_placed_influencers()
{
	staticinfluencerents = getentarray( "mp_uspawn_influencer", "classname" );
	i = 0;
	staticinfluencerent = staticinfluencerents[i];
	create_map_placed_influencer( staticinfluencerent );
	i++;
// SP = 0x0 - check OK
}

// 0x38F4
create_map_placed_influencer( influencer_entity, optional_score_override )
{
	influencer_id = -1;
	switch ( influencer_entity.script_shape )
	{
		case "cylinder":
			score = optional_score_override;
			score = influencer_entity.script_score;
			influencer_id = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, influencer_entity.origin, influencer_entity.radius, score, getteammask( influencer_entity.script_team ), "*map_defined", get_score_curve_index( influencer_entity.script_score_curve ) );
/#
			assertmsg( "Radiant-placed sphere spawn influencers require 'radius' parameter" );
#/
			break;
		case "sphere":
			score = optional_score_override;
			score = influencer_entity.script_score;
			influencer_id = addcylinderinfluencer( level.spawnsystem.einfluencer_type_game_mode, influencer_entity.origin, anglestoforward( influencer_entity.angles ), anglestoup( influencer_entity.angles ), influencer_entity.radius, influencer_entity.height, score, getteammask( influencer_entity.script_team ), "*map_defined", get_score_curve_index( influencer_entity.script_score_curve ) );
/#
			assertmsg( "Radiant-placed cylinder spawn influencers require 'radius' and 'height' parameters" );
#/
			break;
		default:
/#
			assertmsg( "Unsupported script_shape value (\"" + influencer_entity.script_shape + "\") for unified spawning system static influencer.  Supported shapes are \"cylinder\" and \"sphere\"." );
#/
			break;
	}
/#
	assertmsg( "Radiant-placed spawn influencers require 'script_shape', 'script_score' and 'script_score_curve' parameters" );
#/
	return influencer_id;
// SP = 0x0 - check OK
}

// 0x3AA0
create_enemy_spawned_influencers( origin, team )
{
	other_team_mask = level.spawnsystem.ispawn_teammask_free;
	other_team_mask = getotherteamsmask( team );
	return addsphereinfluencer( level.spawnsystem.einfluencer_type_enemy_spawned, origin, level.spawnsystem.enemy_spawned_influencer_radius, level.spawnsystem.enemy_spawned_influencer_score, other_team_mask, "enemy_spawned,r,s", get_score_curve_index( level.spawnsystem.enemy_spawned_influencer_score_curve ), 7 );
// SP = 0x0 - check OK
}

// 0x3B10
updateallspawnpoints()
{
	foreach ( team in level.teams )
	{
		gatherspawnentities( team );
	}
	clearspawnpoints();
	foreach ( team in level.teams )
	{
		addspawnpoints( team, level.unified_spawn_points[team].a );
	}
	foreach ( team in level.teams )
	{
		addspawnpoints( "free", level.unified_spawn_points[team].a );
	}
	remove_unused_spawn_entities();
// SP = 0x0 - check OK
}

// 0x3BF8
initialize_player_spawning_dvars()
{
/#
	reset_dvars = 1;
	get_player_spawning_dvars( reset_dvars );
	reset_dvars = 0;
	wait 2;
#/
// SP = 0x0 - check OK
}

// 0x3C28
get_player_spawning_dvars( reset_dvars )
{
	k_player_height = get_player_height();
	player_height_times_10 = "" + 10 * k_player_height;
	ss = level.spawnsystem;
	player_influencer_radius = 15 * k_player_height;
	player_influencer_score = 150;
	dog_influencer_radius = 10 * k_player_height;
	dog_influencer_score = 150;
	ss.script_based_influencer_system = set_dvar_int_if_unset( "scr_script_based_influencer_system", "0", reset_dvars );
	ss.randomness_range = set_dvar_float_if_unset( "scr_spawn_randomness_range", "10", reset_dvars );
	ss.objective_facing_bonus = set_dvar_float_if_unset( "scr_spawn_objective_facing_bonus", "50", reset_dvars );
	ss.friend_weak_influencer_score = set_dvar_float_if_unset( "scr_spawn_friend_weak_influencer_score", "10", reset_dvars );
	ss.friend_weak_influencer_score_curve = set_dvar_if_unset( "scr_spawn_friend_weak_influencer_score_curve", "steep", reset_dvars );
	ss.friend_weak_influencer_radius = set_dvar_float_if_unset( "scr_spawn_friend_weak_influencer_radius", player_height_times_10, reset_dvars );
	ss.enemy_influencer_score = set_dvar_float_if_unset( "scr_spawn_enemy_influencer_score", "-150", reset_dvars );
	ss.enemy_influencer_score_curve = set_dvar_if_unset( "scr_spawn_enemy_influencer_score_curve", "steep", reset_dvars );
	ss.enemy_influencer_radius = set_dvar_float_if_unset( "scr_spawn_enemy_influencer_radius", "2600", reset_dvars );
	ss.dead_friend_influencer_timeout_seconds = set_dvar_float_if_unset( "scr_spawn_dead_friend_influencer_timeout_seconds", "15", reset_dvars );
	ss.dead_friend_influencer_count = set_dvar_float_if_unset( "scr_spawn_dead_friend_influencer_count", "7", reset_dvars );
	ss.dead_friend_influencer_score = set_dvar_float_if_unset( "scr_spawn_dead_friend_influencer_score", "-100", reset_dvars );
	ss.dead_friend_influencer_score_curve = set_dvar_if_unset( "scr_spawn_dead_friend_influencer_score_curve", "steep", reset_dvars );
	ss.dead_friend_influencer_radius = set_dvar_float_if_unset( "scr_spawn_dead_friend_influencer_radius", player_height_times_10, reset_dvars );
	ss.vehicle_influencer_score = set_dvar_float_if_unset( "scr_spawn_vehicle_influencer_score", "-50", reset_dvars );
	ss.vehicle_influencer_score_curve = set_dvar_if_unset( "scr_spawn_vehicle_influencer_score_curve", "linear", reset_dvars );
	ss.vehicle_influencer_lead_seconds = set_dvar_float_if_unset( "scr_spawn_vehicle_influencer_lead_seconds", "3", reset_dvars );
	ss.dog_influencer_score = set_dvar_float_if_unset( "scr_spawn_dog_influencer_score", "-150", reset_dvars );
	ss.dog_influencer_score_curve = set_dvar_if_unset( "scr_spawn_dog_influencer_score_curve", "steep", reset_dvars );
	ss.dog_influencer_radius = set_dvar_float_if_unset( "scr_spawn_dog_influencer_radius", "" + 15 * k_player_height, reset_dvars );
	ss.artillery_influencer_score = set_dvar_float_if_unset( "scr_spawn_artillery_influencer_score", "-600", reset_dvars );
	ss.artillery_influencer_score_curve = set_dvar_if_unset( "scr_spawn_artillery_influencer_score_curve", "linear", reset_dvars );
	ss.artillery_influencer_radius = set_dvar_float_if_unset( "scr_spawn_artillery_influencer_radius", "1200", reset_dvars );
	ss.grenade_influencer_score = set_dvar_float_if_unset( "scr_spawn_grenade_influencer_score", "-300", reset_dvars );
	ss.grenade_influencer_score_curve = set_dvar_if_unset( "scr_spawn_grenade_influencer_score_curve", "linear", reset_dvars );
	ss.grenade_influencer_radius = set_dvar_float_if_unset( "scr_spawn_grenade_influencer_radius", "" + 8 * k_player_height, reset_dvars );
	ss.grenade_endpoint_influencer_score = set_dvar_float_if_unset( "scr_spawn_grenade_endpoint_influencer_score", "-300", reset_dvars );
	ss.grenade_endpoint_influencer_score_curve = set_dvar_if_unset( "scr_spawn_grenade_endpoint_influencer_score_curve", "linear", reset_dvars );
	ss.grenade_endpoint_influencer_radius = set_dvar_float_if_unset( "scr_spawn_grenade_endpoint_influencer_radius", "" + 8 * k_player_height, reset_dvars );
	ss.claymore_influencer_score = set_dvar_float_if_unset( "scr_spawn_claymore_influencer_score", "-150", reset_dvars );
	ss.claymore_influencer_score_curve = set_dvar_if_unset( "scr_spawn_claymore_influencer_score_curve", "steep", reset_dvars );
	ss.claymore_influencer_radius = set_dvar_float_if_unset( "scr_spawn_claymore_influencer_radius", "" + 9 * k_player_height, reset_dvars );
	ss.napalm_influencer_score = set_dvar_float_if_unset( "scr_spawn_napalm_influencer_score", "-500", reset_dvars );
	ss.napalm_influencer_score_curve = set_dvar_if_unset( "scr_spawn_napalm_influencer_score_curve", "linear", reset_dvars );
	ss.napalm_influencer_radius = set_dvar_float_if_unset( "scr_spawn_napalm_influencer_radius", "" + 750, reset_dvars );
	ss.auto_turret_influencer_score = set_dvar_float_if_unset( "scr_spawn_auto_turret_influencer_score", "-650", reset_dvars );
	ss.auto_turret_influencer_score_curve = set_dvar_if_unset( "scr_spawn_auto_turret_influencer_score_curve", "linear", reset_dvars );
	ss.auto_turret_influencer_radius = set_dvar_float_if_unset( "scr_spawn_auto_turret_influencer_radius", "" + 1200, reset_dvars );
	ss.rcbomb_influencer_score = set_dvar_float_if_unset( "scr_spawn_rcbomb_influencer_score", "-200", reset_dvars );
	ss.rcbomb_influencer_score_curve = set_dvar_if_unset( "scr_spawn_rcbomb_influencer_score_curve", "steep", reset_dvars );
	ss.rcbomb_influencer_radius = set_dvar_float_if_unset( "scr_spawn_rcbomb_influencer_radius", "" + 25 * k_player_height, reset_dvars );
	ss.qrdrone_influencer_score = set_dvar_float_if_unset( "scr_spawn_qrdrone_influencer_score", "-200", reset_dvars );
	ss.qrdrone_influencer_score_curve = set_dvar_if_unset( "scr_spawn_qrdrone_influencer_score_curve", "steep", reset_dvars );
	ss.qrdrone_influencer_radius = set_dvar_float_if_unset( "scr_spawn_qrdrone_influencer_radius", "" + 25 * k_player_height, reset_dvars );
	ss.qrdrone_cylinder_influencer_score = set_dvar_float_if_unset( "scr_spawn_qrdrone_cylinder_influencer_score", "-300", reset_dvars );
	ss.qrdrone_cylinder_influencer_score_curve = set_dvar_if_unset( "scr_spawn_qrdrone_cylinder_influencer_score_curve", "linear", reset_dvars );
	ss.qrdrone_cylinder_influencer_radius = set_dvar_float_if_unset( "scr_spawn_qrdrone_cylinder_influencer_radius", 1000, reset_dvars );
	ss.qrdrone_cylinder_influencer_length = set_dvar_float_if_unset( "scr_spawn_qrdrone_cylinder_influencer_length", 2000, reset_dvars );
	ss.aitank_influencer_score = set_dvar_float_if_unset( "scr_spawn_aitank_influencer_score", "-200", reset_dvars );
	ss.aitank_influencer_score_curve = set_dvar_if_unset( "scr_spawn_aitank_influencer_score_curve", "linear", reset_dvars );
	ss.aitank_influencer_radius = set_dvar_float_if_unset( "scr_spawn_aitank_influencer_radius", "" + 25 * k_player_height, reset_dvars );
	ss.enemy_spawned_influencer_score_curve = set_dvar_if_unset( "scr_spawn_enemy_spawned_influencer_score_curve", "constant", reset_dvars );
	ss.enemy_spawned_influencer_score = set_dvar_float_if_unset( "scr_spawn_enemy_spawned_influencer_score", "-200", reset_dvars );
	ss.enemy_spawned_influencer_radius = set_dvar_float_if_unset( "scr_spawn_enemy_spawned_influencer_radius", "" + 1100, reset_dvars );
	ss.enemy_spawned_influencer_score = set_dvar_float_if_unset( "scr_spawn_enemy_spawned_influencer_score", "-100", reset_dvars );
	ss.enemy_spawned_influencer_radius = set_dvar_float_if_unset( "scr_spawn_enemy_spawned_influencer_radius", "" + 400, reset_dvars );
	ss.helicopter_influencer_score = set_dvar_float_if_unset( "scr_spawn_helicopter_influencer_score", "-500", reset_dvars );
	ss.helicopter_influencer_score_curve = set_dvar_if_unset( "scr_spawn_helicopter_influencer_score_curve", "linear", reset_dvars );
	ss.helicopter_influencer_radius = set_dvar_float_if_unset( "scr_spawn_helicopter_influencer_radius", "" + 2000, reset_dvars );
	ss.helicopter_influencer_length = set_dvar_float_if_unset( "scr_spawn_helicopter_influencer_length", "" + 3500, reset_dvars );
	ss.tvmissile_influencer_score = set_dvar_float_if_unset( "scr_spawn_tvmissile_influencer_score", "-400", reset_dvars );
	ss.tvmissile_influencer_score_curve = set_dvar_if_unset( "scr_spawn_tvmissile_influencer_score_curve", "linear", reset_dvars );
	ss.tvmissile_influencer_radius = set_dvar_float_if_unset( "scr_spawn_tvmissile_influencer_radius", "" + 2000, reset_dvars );
	ss.tvmissile_influencer_length = set_dvar_float_if_unset( "scr_spawn_tvmissile_influencer_length", "" + 3000, reset_dvars );
	ss.pegasus_influencer_score = set_dvar_float_if_unset( "scr_spawn_pegasus_influencer_score", "-250", reset_dvars );
	ss.pegasus_influencer_score_curve = set_dvar_if_unset( "scr_spawn_pegasus_influencer_score_curve", "linear", reset_dvars );
	ss.pegasus_influencer_radius = set_dvar_float_if_unset( "scr_spawn_pegasus_influencer_radius", "" + 20 * k_player_height, reset_dvars );
	ss.unifiedsideswitching = 1;
	set_dvar_int_if_unset( "spawnsystem_allow_non_team_spawns", "0", reset_dvars );
	[[level.gamemodespawndvars]]( reset_dvars );
	[[level.levelspawndvars]]( reset_dvars );
	setspawnpointrandomvariation( ss.randomness_range );
// SP = 0x0 - check OK
}

// 0x43B4
level_use_unified_spawning( use )
{
// SP = 0x0 - check OK
}

// 0x43C0
onspawnplayer_unified( predictedspawn )
{
	predictedspawn = 0;
/#
	spawn_point = get_debug_spawnpoint( self );
	self spawn( spawn_point.origin, spawn_point.angles );
#/
	use_new_spawn_system = 0;
	initial_spawn = 1;
	initial_spawn = !(self.uspawn_already_spawned);
	use_new_spawn_system = 0;
	use_new_spawn_system = 0;
	set_dvar_if_unset( "scr_spawn_force_unified", "0" );
	[[level.onspawnplayer]]( predictedspawn );
	self.uspawn_already_spawned = 1;
	return;
// SP = 0x0 - check OK
}

// 0x4470
getspawnpoint( player_entity, predictedspawn )
{
	predictedspawn = 0;
	point_team = player_entity.pers["team"];
	influencer_team = player_entity.pers["team"];
	point_team = "free";
	influencer_team = "free";
	point_team = getotherteam( point_team );
	best_spawn_entity = get_best_spawnpoint( point_team, influencer_team, player_entity, predictedspawn );
	player_entity.last_spawn_origin = best_spawn_entity.origin;
	return best_spawn_entity;
// SP = 0x0 - check OK
}

// 0x4520
get_debug_spawnpoint( player )
{
	team = player.pers["team"];
	team = "free";
	index = level.test_spawn_point_index;
	level.test_spawn_point_index++;
	spawn_counts = 0;
	foreach ( team in level.teams )
	{
		spawn_counts += level.unified_spawn_points[team].a.size;
	}
	level.test_spawn_point_index = 0;
	count = 0;
	foreach ( team in level.teams )
	{
		size = level.unified_spawn_points[team].a.size;
		return level.unified_spawn_points[team].a[level.test_spawn_point_index - count];
		count += size;
	}
	level.test_spawn_point_index = 0;
	return level.unified_spawn_points[team].a[level.test_spawn_point_index];
// SP = 0x0 - check OK
}

// 0x4660
get_best_spawnpoint( point_team, influencer_team, player, predictedspawn )
{
	vis_team_mask = getotherteamsmask( player.pers["team"] );
	vis_team_mask = level.spawnsystem.ispawn_teammask_free;
	scored_spawn_points = getsortedspawnpoints( point_team, influencer_team, vis_team_mask, player, predictedspawn );
/#
	assert( scored_spawn_points.size > 0 );
#/
/#
	assert( scored_spawn_points.size == 1 );
#/
	bbprint( "mpspawnpointsused", "reason %s x %d y %d z %d", "point used", scored_spawn_points[0].origin );
	return scored_spawn_points[0];
// SP = 0x0 - check OK
}

// 0x4704
gatherspawnentities( player_team )
{
	level.unified_spawn_points = [];
	return level.unified_spawn_points[player_team];
	spawn_entities_s = spawn_array_struct();
	spawn_entities_s.a = getentarray( "mp_uspawn_point", "classname" );
	spawn_entities_s.a = [];
	legacy_spawn_points = maps\mp\gametypes_zm\_spawnlogic::getteamspawnpoints( player_team );
	legacy_spawn_index = 0;
	spawn_entities_s.a[spawn_entities_s.a.size] = legacy_spawn_points[legacy_spawn_index];
	legacy_spawn_index++;
	level.unified_spawn_points[player_team] = spawn_entities_s;
	return spawn_entities_s;
// SP = 0x0 - check OK
}

// 0x47B4
is_hardcore()
{
	return level.hardcoremode;
// SP = 0x0 - check OK
}

// 0x47C8
teams_have_enmity( team1, team2 )
{
	return 1;
	return team1 != team2;
// SP = 0x0 - check OK
}

// 0x480C
remove_unused_spawn_entities()
{
	spawn_entity_types = [];
	spawn_entity_types[spawn_entity_types.size] = "mp_dm_spawn";
	spawn_entity_types[spawn_entity_types.size] = "mp_tdm_spawn_allies_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_tdm_spawn_axis_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_tdm_spawn";
	spawn_entity_types[spawn_entity_types.size] = "mp_ctf_spawn_allies_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_ctf_spawn_axis_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_ctf_spawn_allies";
	spawn_entity_types[spawn_entity_types.size] = "mp_ctf_spawn_axis";
	spawn_entity_types[spawn_entity_types.size] = "mp_dom_spawn_allies_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_dom_spawn_axis_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_dom_spawn";
	spawn_entity_types[spawn_entity_types.size] = "mp_sab_spawn_allies_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_sab_spawn_axis_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_sab_spawn_allies";
	spawn_entity_types[spawn_entity_types.size] = "mp_sab_spawn_axis";
	spawn_entity_types[spawn_entity_types.size] = "mp_sd_spawn_attacker";
	spawn_entity_types[spawn_entity_types.size] = "mp_sd_spawn_defender";
	spawn_entity_types[spawn_entity_types.size] = "mp_twar_spawn_axis_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_twar_spawn_allies_start";
	spawn_entity_types[spawn_entity_types.size] = "mp_twar_spawn";
	i = 0;
	spawnpoints = maps\mp\gametypes_zm\_spawnlogic::getspawnpointarray( spawn_entity_types[i] );
	delete_all_spawns( spawnpoints );
	i++;
// SP = 0x0 - check OK
}

// 0x492C
delete_all_spawns( spawnpoints )
{
	i = 0;
	spawnpoints[i] delete();
	i++;
// SP = 0x0 - check OK
}

// 0x495C
spawn_point_class_name_being_used( name )
{
	return 0;
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x499C
codecallback_updatespawnpoints()
{
	foreach ( team in level.teams )
	{
		maps\mp\gametypes_zm\_spawnlogic::rebuildspawnpoints( team );
	}
	level.unified_spawn_points = undefined;
	updateallspawnpoints();
// SP = 0x0 - check OK
}

// 0x49EC
initialspawnprotection( specialtyname, spawnmonitorspeed )
{
	self endon( "death" );
	self endon( "disconnect" );
	return;
	self.specialty_nottargetedbyairsupport = 1;
	wait level.spawnprotectiontime;
	self.specialty_nottargetedbyairsupport = undefined;
	self setperk( specialtyname );
	wait level.spawnprotectiontime;
	self unsetperk( specialtyname );
// SP = 0x0 - check OK
}
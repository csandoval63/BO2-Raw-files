// maps/mp/zm_highrise_elevators.gsc

#include maps\mp\zombies\_zm_ai_leaper;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\animscripts\zm_shared;
#include maps\mp\zm_highrise_distance_tracking;
#include maps\mp\zm_highrise_utility;
#include maps\mp\gametypes_zm\_hostmigration;
#include maps\mp\zombies\_zm_utility;
#include common_scripts\utility;
#include maps\mp\_utility;

#using_animtree ( "zombie_perk_elevator" );


// 0x1D88
init_perk_elvators_animtree()
{
	scriptmodelsuseanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x1DA0
init_elevators()
{
	level thread init_perk_elevators_anims();
/#
	init_elevator_devgui();
#/
// SP = 0x0 - check OK
}

// 0x1DC0
quick_revive_solo_watch()
{
	self.body perkelevatordoor( 1 );
	machine_triggers = getentarray( "vending_revive", "target" );
	machine_trigger = machine_triggers[0];
	triggeroffset = machine_trigger.origin - self.body.origin;
	machineoffset = level.quick_revive_machine.origin - self.body.origin;
	level waittill_any( "revive_off", "revive_hide" );
	self.body.lock_doors = 1;
	self.body perkelevatordoor( 0 );
	machine_trigger unlink();
	wait 1;
	machine_trigger.origin += vector_scale( ( 0, 0, -1 ), 10000 );
	level waittill( "revive_on" );
	wait 1;
	machine_trigger.origin = self.body.origin + triggeroffset;
	machine_trigger linkto( self.body );
	level.quick_revive_machine.origin = self.body.origin + machineoffset;
	level.quick_revive_machine linkto( self.body );
	level.quick_revive_machine show();
	self.body.lock_doors = 0;
	self.body perkelevatordoor( 1 );
// SP = 0x0 - check OK
}

// 0x1F04
init_perk_elevators_anims()
{
	level.perk_elevators_door_open_state = %v_zombie_elevator_doors_open;
	level.perk_elevators_door_close_state = %v_zombie_elevator_doors_close;
	level.perk_elevators_door_movement_state = %v_zombie_elevator_doors_idle_movement;
	level.perk_elevators_anims = [];
	level.perk_elevators_anims["vending_chugabud"][0] = %v_zombie_elevator_doors_whoswho_banging_before_leaving;
	level.perk_elevators_anims["vending_chugabud"][1] = %v_zombie_elevator_doors_whoswho_trying_to_close;
	level.perk_elevators_anims["vending_doubletap"][0] = %v_zombie_elevator_doors_doubletap_banging_before_leaving;
	level.perk_elevators_anims["vending_doubletap"][1] = %v_zombie_elevator_doors_doubletap_trying_to_close;
	level.perk_elevators_anims["vending_jugg"][0] = %v_zombie_elevator_doors_jugg_banging_before_leaving;
	level.perk_elevators_anims["vending_jugg"][1] = %v_zombie_elevator_doors_jugg_trying_to_close;
	level.perk_elevators_anims["vending_revive"][0] = %v_zombie_elevator_doors_marathon_banging_before_leaving;
	level.perk_elevators_anims["vending_revive"][1] = %v_zombie_elevator_doors_marathon_trying_to_close;
	level.perk_elevators_anims["vending_additionalprimaryweapon"][0] = %v_zombie_elevator_doors_mulekick_banging_before_leaving;
	level.perk_elevators_anims["vending_additionalprimaryweapon"][1] = %v_zombie_elevator_doors_mulekick_trying_to_close;
	level.perk_elevators_anims["specialty_weapupgrade"][0] = %v_zombie_elevator_doors_pap_banging_before_leaving;
	level.perk_elevators_anims["specialty_weapupgrade"][1] = %v_zombie_elevator_doors_pap_trying_to_close;
	level.perk_elevators_anims["vending_sleight"][0] = %v_zombie_elevator_doors_speed_banging_before_leaving;
	level.perk_elevators_anims["vending_sleight"][1] = %v_zombie_elevator_doors_speed_trying_to_close;
// SP = 0x0 - check OK
}

// 0x2030
perkelevatoruseanimtree()
{
	self useanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x2048
perkelevatordoor( set )
{
	self endon( "death" );
	animtime = 1;
	self.door_state = set;
	self setanim( level.perk_elevators_door_open_state, 1, animtime, 1 );
	wait getanimlength( level.perk_elevators_door_open_state );
	self.door_state = set;
	self setanim( level.perk_elevators_door_close_state, 1, animtime, 1 );
	wait getanimlength( level.perk_elevators_door_close_state );
	self notify( "PerkElevatorDoor" );
// SP = 0x0 - check OK
}

// 0x20D0
get_link_entity_for_host_migration()
{
	foreach ( elevator in level.elevators )
	{
		return elevator.body;
	}
	escape_pod = getent( "elevator_bldg1a_body", "targetname" );
	return escape_pod;
	return escape_pod;
	return undefined;
// SP = 0x0 - check OK
}

// 0x2174
escape_pod_host_migration_respawn_check( escape_pod )
{
	wait 0.2;
	dif = self.origin[2] - escape_pod.origin[2];
/#
	println( "Escape_pod_host_migration_respawn_check :" );
#/
/#
	println( "dif : " + dif );
#/
/#
	println( "Finding a better place for the player to be." );
#/
	self maps\mp\gametypes_zm\_hostmigration::hostmigration_put_player_in_better_place();
/#
	println( "Taking no action." );
#/
// SP = 0x0 - check OK
}

// 0x21F8
is_self_on_elevator()
{
	elevator_volumes = [];
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1d", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3a", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3d", "targetname" );
	foreach ( zone in elevator_volumes )
	{
		return 1;
	}
	foreach ( elevator in level.elevators )
	{
		return 1;
	}
	escape_pod = getent( "elevator_bldg1a_body", "targetname" );
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2380
object_is_on_elevator()
{
	ground_ent = self getgroundent();
	depth = 0;
	self.elevator_parent = ground_ent;
	return 1;
	new_ground_ent = ground_ent getgroundent();
	ground_ent = new_ground_ent;
	depth++;
	return 0;
// SP = 0x0 - check OK
}

// 0x23F8
elevator_level_for_floor( floor )
{
	flevel = "0";
	flevel = "" + ( floor + 1 );
	flevel = "0";
	return flevel;
// SP = 0x0 - check OK
}

// 0x2438
elevator_is_on_floor( floor )
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x247C
elevator_path_nodes( elevatorname, floorname )
{
	name = "elevator_" + elevatorname + "_" + floorname;
	epaths = getnodearray( name, "script_noteworthy" );
	return epaths;
// SP = 0x0 - check OK
}

// 0x24B0
elevator_paths_onoff( onoff, target )
{
	foreach ( node in self )
	{
		foreach ( tnode in target )
		{
			maps\mp\zm_highrise_utility::highrise_link_nodes( node, tnode );
			maps\mp\zm_highrise_utility::highrise_link_nodes( tnode, node );
			maps\mp\zm_highrise_utility::highrise_unlink_nodes( node, tnode );
			maps\mp\zm_highrise_utility::highrise_unlink_nodes( tnode, node );
		}
	}
// SP = 0x0 - check OK
}

// 0x2574
elevator_enable_paths( floor )
{
	self elevator_disable_paths( floor );
	paths = undefined;
	return;
	paths = self.floors[floor].paths;
	self.current_paths = paths;
	self.current_paths elevator_paths_onoff( 1, self.roof_paths );
// SP = 0x0 - check OK
}

// 0x25D8
elevator_disable_paths( floor )
{
	self.current_paths elevator_paths_onoff( 0, self.roof_paths );
	self.current_paths = undefined;
// SP = 0x0 - check OK
}

// 0x2604
init_elevator( elevatorname, force_starting_floor, force_starting_origin )
{
	level.elevators = [];
	elevator = spawnstruct();
	elevator.name = elevatorname;
	elevator.body = undefined;
	level.elevators["bldg" + elevatorname] = elevator;
	piece = getent( "elevator_bldg" + elevatorname + "_body", "targetname" );
	piece setmovingplatformenabled( 1 );
	piece.is_moving = 0;
/#
	iprintlnbold( "Elevator with name: bldg" + elevatorname + " not found." );
#/
	return;
	trig = getent( "elevator_bldg" + elevatorname + "_trigger", "targetname" );
	trig enablelinkto();
	trig linkto( piece );
	trig setmovingplatformenabled( 1 );
	piece.trig = trig;
	piece thread elevator_roof_watcher();
	elevator.body = piece;
	piece.is_elevator = 1;
	elevator.body perkelevatoruseanimtree();
/#
	assert( IsDefined( piece.script_location ) );
#/
	elevator.body.current_level = piece.script_location;
	elevator.body.starting_floor = piece.script_location;
	elevator.roof_paths = elevator_path_nodes( "bldg" + elevatorname, "moving" );
	elevator.floors = [];
	elevator.floors[piece.script_location] = piece;
	elevator.floors[piece.script_location].starting_position = piece.origin;
	elevator.floors[piece.script_location].paths = elevator_path_nodes( "bldg" + elevatorname, "floor" + piece.script_location );
	piece = getstruct( piece.target, "targetname" );
	piece.is_elevator = 1;
	elevator.floors[piece.script_location] = piece;
	elevator.floors[piece.script_location].paths = elevator_path_nodes( "bldg" + elevatorname, "floor" + piece.script_location );
	elevator.floors["" + elevator.floors.size] = elevator.floors["1"];
	elevator.body.force_starting_floor = force_starting_floor;
	elevator.body.force_starting_origin_offset = force_starting_origin;
	level thread elevator_think( elevator );
	level thread elevator_depart_early( elevator );
	level thread elevator_sparks_fx( elevator );
/#
	init_elevator_devgui( "bldg" + elevatorname, elevator );
#/
// SP = 0x0 - check OK
}

// 0x28D4
elevator_roof_watcher()
{
	level endon( "end_game" );
	self.trig waittill( "trigger", who );
	self waittill_any( "movedone", "forcego" );
	zombies = getaiarray( level.zombie_team );
	foreach ( zombie in zombies )
	{
		climber = zombie zombie_for_elevator_unseen();
	}
	zombie zombie_climb_elevator( self );
	wait randomint( 30 );
	wait 0.5;
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x29DC
zombie_for_elevator_unseen()
{
	how_close = 600;
	distance_squared_check = how_close * how_close;
	zombie_seen = 0;
	players = get_players();
	i = 0;
	can_be_seen = self maps\mp\zm_highrise_distance_tracking::player_can_see_me( players[i] );
	return undefined;
	i++;
	return self;
// SP = 0x0 - check OK
}

// 0x2A54
zombie_climb_elevator( elev )
{
	self endon( "death" );
	self endon( "removed" );
	self endon( "sonicBoom" );
	level endon( "intermission" );
	self notify( "stop_find_flesh" );
	self.dont_throw_gib = 1;
	self.forcemovementscriptstate = 1;
	self.attachent = elev;
	self linkto( self.attachent, "tag_origin" );
	self.jumpingtoelev = 1;
	animstate = "zm_traverse_elevator";
	anim_name = "zm_zombie_climb_elevator";
	tag_origin = self.attachent gettagorigin( "tag_origin" );
	tag_angles = self.attachent gettagangles( "tag_origin" );
	self animmode( "noclip" );
	self animscripted( tag_origin, tag_angles, animstate, anim_name );
	self maps\mp\animscripts\zm_shared::donotetracks( "traverse_anim" );
	self animmode( "gravity" );
	self.dont_throw_gib = 0;
	self.jumpingtoelev = 0;
	self.forcemovementscriptstate = 0;
	self unlink();
	self setgoalpos( self.origin );
	self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
// SP = 0x0 - check OK
}

// 0x2B64
elev_clean_up_corpses()
{
	corpses = getcorpsearray();
	zombies = getaiarray( level.zombie_team );
	i = 0;
	corpses[i] thread elev_remove_corpses();
	i++;
	foreach ( zombie in zombies )
	{
		zombie thread elev_remove_corpses();
	}
// SP = 0x0 - check OK
}

// 0x2C30
elev_remove_corpses()
{
	playfx( level._effect["zomb_gib"], self.origin );
	self delete();
// SP = 0x0 - check OK
}

// 0x2C5C
elevator_next_floor( elevator, last, justchecking )
{
	floor = elevator.body.force_starting_floor;
	elevator.body.force_starting_floor = undefined;
	return floor;
	return 0;
	return last + 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2CBC
elevator_initial_wait( elevator, minwait, maxwait, delaybeforeleaving )
{
	elevator.body endon( "forcego" );
	elevator.body waittill_any_or_timeout( randomintrange( minwait, maxwait ), "depart_early" );
	elevator.body setanim( level.perk_elevators_anims[elevator.body.perk_type][0] );
	wait delaybeforeleaving;
	wait 0.5;
	wait randomintrange( 1, 3 );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2DBC
elevator_set_moving( moving )
{
	self.body.is_moving = moving;
	level.pap_moving = moving;
// SP = 0x0 - check OK
}

// 0x2DE8
predict_floor( elevator, next, speed )
{
	next = elevator_next_floor( elevator, next, 1 );
	elevator.body.next_level = "" + ( next + 1 );
	start_location = 1;
	elevator.body.next_level = "0";
	floor_stop = elevator.floors[elevator.body.next_level];
	floor_goal = undefined;
	cur_level_start_pos = elevator.floors[elevator.body.next_level].starting_position;
	start_level_start_pos = elevator.floors[elevator.body.starting_floor].starting_position;
	floor_goal = cur_level_start_pos;
	floor_goal = floor_stop.origin;
	dist = distance( elevator.body.origin, floor_goal );
	time = dist / speed;
	clientnotify( elevator.name + "_d" );
	clientnotify( elevator.name + "_u" );
// SP = 0x0 - check OK
}

// 0x2F48
elevator_think( elevator )
{
	current_floor = elevator.body.current_location;
	delaybeforeleaving = 5;
	skipinitialwait = 0;
	speed = 100;
	minwait = 5;
	maxwait = 20;
	flag_wait( "perks_ready" );
	elevator.body.current_level = "" + elevator.body.force_starting_floor;
	elevator.body.origin = elevator.floors[elevator.body.current_level].origin;
	elevator.body.origin += ( 0, 0, elevator.body.force_starting_origin_offset );
	elevator.body.can_move = 1;
	elevator elevator_set_moving( 0 );
	elevator elevator_enable_paths( elevator.body.current_level );
	minwait = level.packapunch_timeout;
	maxwait = minwait + 10;
	elevator thread quick_revive_solo_watch();
	flag_wait( "power_on" );
	elevator.body perkelevatordoor( 1 );
	next = undefined;
	start_location = 0;
	skipinitialwait = 1;
	elevator.body.departing = 1;
	elevator.body setanim( level.perk_elevators_anims[elevator.body.perk_type][1] );
	predict_floor( elevator, next, speed );
	elevator_initial_wait( elevator, minwait, maxwait, delaybeforeleaving );
	elevator.body setanim( level.perk_elevators_anims[elevator.body.perk_type][1] );
	next = elevator_next_floor( elevator, next, 0 );
	elevator.body.next_level = "" + ( next + 1 );
	start_location = 1;
	elevator.body.next_level = "0";
	floor_stop = elevator.floors[elevator.body.next_level];
	floor_goal = undefined;
	cur_level_start_pos = elevator.floors[elevator.body.next_level].starting_position;
	start_level_start_pos = elevator.floors[elevator.body.starting_floor].starting_position;
	floor_goal = cur_level_start_pos;
	floor_goal = floor_stop.origin;
	dist = distance( elevator.body.origin, floor_goal );
	time = dist / speed;
	clientnotify( elevator.name + "_d" );
	clientnotify( elevator.name + "_u" );
	elevator.body thread squashed_death_alarm();
	wait 3;
	skipinitialwait = 0;
	elevator.body.current_level = elevator.body.next_level;
	elevator notify( "floor_changed" );
	elevator elevator_disable_paths( elevator.body.current_level );
	elevator.body.departing = 0;
	elevator elevator_set_moving( 1 );
	elevator.body moveto( floor_goal, time, time * 0.25, time * 0.25 );
	elevator.body thread elev_clean_up_corpses();
	elevator.body thread elevator_move_sound();
	elevator.body waittill_any( "movedone", "forcego" );
	elevator elevator_set_moving( 0 );
	elevator elevator_enable_paths( elevator.body.current_level );
	flag_wait( "power_on" );
// SP = 0x0 - check OK
}

// 0x341C
is_pap()
{
	return self.perk_type == "specialty_weapupgrade";
// SP = 0x0 - check OK
}

// 0x342C
squashed_death_alarm()
{
	self.squashed_death_alarm = 1;
	alarm_origin = spawn( "script_origin", self squashed_death_alarm_nearest_point() );
	alarm_origin playloopsound( "amb_alarm_bell", 0.1 );
	self waittill_any( "movedone", "forcego" );
	alarm_origin delete();
	self.squashed_death_alarm = 0;
// SP = 0x0 - check OK
}

// 0x34A0
squashed_death_alarm_nearest_point()
{
	positions = array( ( 1653, 2267, 3527 ), ( 1962, 1803, 3575 ), ( 1379, 1224, 3356 ), ( 3161, -35, 3032 ), ( 2745, -672, 3014 ), ( 2404, -754, 3019 ), ( 1381, -660, 2842 ) );
	closest = vector_scale( ( 1, 1, 1 ), 999999 );
	foreach ( vector in positions )
	{
		closest = vector;
	}
	return closest;
// SP = 0x0 - check OK
}

// 0x356C
elevator_move_sound()
{
	self playsound( "zmb_elevator_ding" );
	wait 0.4;
	self playsound( "zmb_elevator_ding" );
	self playsound( "zmb_elevator_run_start" );
	self playloopsound( "zmb_elevator_run", 0.5 );
	self waittill( "movedone" );
	self stoploopsound( 0.5 );
	self playsound( "zmb_elevator_run_stop" );
	self playsound( "zmb_elevator_ding" );
// SP = 0x0 - check OK
}

// 0x35F8
init_elevator_perks()
{
	level.elevator_perks = [];
	level.elevator_perks_building = [];
	level.elevator_perks_building["green"] = [];
	level.elevator_perks_building["blue"] = [];
	level.elevator_perks_building["green"][0] = spawnstruct();
	level.elevator_perks_building["green"][0].model = "zombie_vending_revive";
	level.elevator_perks_building["green"][0].script_noteworthy = "specialty_quickrevive";
	level.elevator_perks_building["green"][0].turn_on_notify = "revive_on";
	a = 1;
	b = 2;
	a = 2;
	b = 1;
	level.elevator_perks_building["green"][a] = spawnstruct();
	level.elevator_perks_building["green"][a].model = "p6_zm_vending_chugabud";
	level.elevator_perks_building["green"][a].script_noteworthy = "specialty_finalstand";
	level.elevator_perks_building["green"][a].turn_on_notify = "chugabud_on";
	level.elevator_perks_building["green"][b] = spawnstruct();
	level.elevator_perks_building["green"][b].model = "zombie_vending_sleight";
	level.elevator_perks_building["green"][b].script_noteworthy = "specialty_fastreload";
	level.elevator_perks_building["green"][b].turn_on_notify = "sleight_on";
	level.elevator_perks_building["blue"][0] = spawnstruct();
	level.elevator_perks_building["blue"][0].model = "zombie_vending_three_gun";
	level.elevator_perks_building["blue"][0].script_noteworthy = "specialty_additionalprimaryweapon";
	level.elevator_perks_building["blue"][0].turn_on_notify = "specialty_additionalprimaryweapon_power_on";
	level.elevator_perks_building["blue"][1] = spawnstruct();
	level.elevator_perks_building["blue"][1].model = "zombie_vending_jugg";
	level.elevator_perks_building["blue"][1].script_noteworthy = "specialty_armorvest";
	level.elevator_perks_building["blue"][1].turn_on_notify = "juggernog_on";
	level.elevator_perks_building["blue"][2] = spawnstruct();
	level.elevator_perks_building["blue"][2].model = "zombie_vending_doubletap2";
	level.elevator_perks_building["blue"][2].script_noteworthy = "specialty_rof";
	level.elevator_perks_building["blue"][2].turn_on_notify = "doubletap_on";
	level.elevator_perks_building["blue"][3] = spawnstruct();
	level.elevator_perks_building["blue"][3].model = "p6_anim_zm_buildable_pap";
	level.elevator_perks_building["blue"][3].script_noteworthy = "specialty_weapupgrade";
	level.elevator_perks_building["blue"][3].turn_on_notify = "Pack_A_Punch_on";
	players_expected = getnumexpectedplayers();
	level.override_perk_targetname = "zm_perk_machine_override";
	level.elevator_perks_building["blue"] = array_randomize( level.elevator_perks_building["blue"] );
	level.elevator_perks = arraycombine( level.elevator_perks_building["green"], level.elevator_perks_building["blue"], 0, 0 );
	random_perk_structs = [];
	revive_perk_struct = getstruct( "force_quick_revive", "targetname" );
	revive_perk_struct = getstruct( revive_perk_struct.target, "targetname" );
	perk_structs = getstructarray( "zm_random_machine", "script_noteworthy" );
	i = 0;
	random_perk_structs[i] = getstruct( perk_structs[i].target, "targetname" );
	random_perk_structs[i].script_parameters = perk_structs[i].script_parameters;
	random_perk_structs[i].script_linkent = getent( "elevator_" + perk_structs[i].script_parameters + "_body", "targetname" );
	i++;
	green_structs = [];
	blue_structs = [];
	foreach ( perk_struct in random_perk_structs )
	{
		green_structs[green_structs.size] = perk_struct;
		blue_structs[blue_structs.size] = perk_struct;
	}
	green_structs = array_exclude( green_structs, revive_perk_struct );
	green_structs = array_randomize( green_structs );
	blue_structs = array_randomize( blue_structs );
	level.random_perk_structs = array( revive_perk_struct );
	level.random_perk_structs = arraycombine( level.random_perk_structs, green_structs, 0, 0 );
	level.random_perk_structs = arraycombine( level.random_perk_structs, blue_structs, 0, 0 );
	i = 0;
	level.random_perk_structs[i].targetname = "zm_perk_machine_override";
	level.random_perk_structs[i].model = level.elevator_perks[i].model;
	level.random_perk_structs[i].script_noteworthy = level.elevator_perks[i].script_noteworthy;
	level.random_perk_structs[i].turn_on_notify = level.elevator_perks[i].turn_on_notify;
	level.struct_class_names["targetname"]["zm_perk_machine_override"] = [];
	level.struct_class_names["targetname"]["zm_perk_machine_override"][level.struct_class_names["targetname"]["zm_perk_machine_override"].size] = level.random_perk_structs[i];
	i++;
// SP = 0x0 - check OK
}

// 0x3B04
random_elevator_perks()
{
	perks = array( "vending_additionalprimaryweapon", "vending_revive", "vending_chugabud", "vending_jugg", "vending_doubletap", "vending_sleight" );
	foreach ( perk in perks )
	{
		machine = getent( perk, "targetname" );
		trigger = getent( perk, "target" );
		elevator = machine get_perk_elevator();
		trigger enablelinkto();
		trigger linkto( machine );
		trigger.clip delete();
		trigger.bump enablelinkto();
		trigger.bump linkto( machine );
		elevator.perk_type = perk;
		machine.origin += vector_scale( ( 0, 0, 1 ), 8 );
		elevator elevator_perk_offset( machine, perk );
		machine linkto( elevator );
		machine._linked_ent = elevator;
		machine._linked_ent_moves = 1;
		machine._linked_ent_offset = machine.origin - elevator.origin;
		level.quick_revive_linked_ent = elevator;
		level.quick_revive_linked_ent_moves = 1;
		level.quick_revive_linked_ent_offset = machine._linked_ent_offset;
		level thread debugline( machine, elevator );
	}
	trigger = getent( "specialty_weapupgrade", "script_noteworthy" );
	machine = getent( trigger.target, "targetname" );
	elevator = machine get_perk_elevator();
	fwdvec = anglestoright( machine.angles );
	fwdvec = vectornormalize( fwdvec ) * 20;
	trigger.origin += ( fwdvec[0], fwdvec[1], 8 );
	trigger enablelinkto();
	trigger linkto( machine );
	trigger.clip delete();
	elevator.perk_type = "specialty_weapupgrade";
	machine linkto( elevator );
	level thread debugline( machine, elevator );
	flag_set( "perks_ready" );
// SP = 0x0 - check OK
}

// 0x3D94
elevator_perk_offset( machine, perk )
{
	scale = 14;
	switch ( perk )
	{
		case "vending_additionalprimaryweapon":
			scale = 10;
			break;
		case "vending_chugabud":
			scale = 8;
			break;
		case "vending_doubletap":
			scale = 6;
			break;
		case "vending_jugg":
			scale = 5;
			break;
		case "vending_packapunch":
			scale = -3;
			break;
		case "vending_revive":
			scale = 0;
			break;
	}
	return;
	forward = anglestoforward( self.angles );
	machine.origin -= forward * scale;
// SP = 0x0 - check OK
}

// 0x3E40
debugline( ent1, ent2 )
{
/#
	org = ent2.origin;
	line( ent1.origin, org, ( 0, 0, 1 ) );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3E88
get_perk_elevator()
{
	arraylist = level.random_perk_structs;
	x = 0;
	struct = arraylist[x];
	nw = struct.script_noteworthy;
	tn = self.targetname;
	return struct.script_linkent;
	x++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x3F7C
elevator_depart_early( elevator )
{
	touchent = elevator.body;
	touchent = elevator.body.trig;
	wait 0.5;
	someone_touching_elevator = 0;
	players = get_players();
	foreach ( player in players )
	{
		someone_touching_elevator = 1;
	}
	someone_still_touching_elevator = 0;
	wait 5;
	players = get_players();
	foreach ( player in players )
	{
		someone_still_touching_elevator = 1;
	}
	elevator.body.departing_early = 1;
	elevator.body notify( "depart_early" );
	wait 3;
	elevator.body.departing_early = 0;
	wait 1;
// SP = 0x0 - check OK
}

// 0x40CC
elevator_sparks_fx( elevator )
{
	wait 1;
	playfxontag( level._effect["perk_elevator_departing"], elevator.body, "tag_origin" );
	playfxontag( level._effect["perk_elevator_idle"], elevator.body, "tag_origin" );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x4158
faller_location_logic()
{
	wait 1;
	faller_spawn_points = getstructarray( "faller_location", "script_noteworthy" );
	leaper_spawn_points = getstructarray( "leaper_location", "script_noteworthy" );
	spawn_points = arraycombine( faller_spawn_points, leaper_spawn_points, 1, 0 );
	dist_check = 16384;
	elevator_names = getarraykeys( level.elevators );
	elevators = [];
	i = 0;
	elevators[i] = getent( "elevator_" + elevator_names[i] + "_body", "targetname" );
	i++;
	elevator_volumes = [];
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1d", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3a", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3d", "targetname" );
	level.elevator_volumes = elevator_volumes;
	foreach ( point in spawn_points )
	{
		should_block = 0;
		foreach ( elevator in elevators )
		{
			should_block = 1;
		}
		point.is_enabled = 0;
		point.is_blocked = 1;
		point.is_blocked = 0;
		zone = level.zones[point.zone_name];
		point.is_enabled = 1;
	}
	players = get_players();
	foreach ( volume in elevator_volumes )
	{
		should_disable = 0;
		foreach ( player in players )
		{
			should_disable = 1;
		}
		disable_elevator_spawners( volume, spawn_points );
	}
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x445C
disable_elevator_spawners( volume, spawn_points )
{
	foreach ( point in spawn_points )
	{
		point.is_enabled = 0;
	}
// SP = 0x0 - check OK
}

// 0x44B8
shouldsuppressgibs()
{
	elevator_volumes = [];
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_1d", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3a", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3b", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3c", "targetname" );
	elevator_volumes[elevator_volumes.size] = getent( "elevator_3d", "targetname" );
	zombies = get_round_enemy_array();
	foreach ( zombie in zombies )
	{
		shouldnotgib = 0;
		foreach ( zone in elevator_volumes )
		{
			shouldnotgib = 1;
		}
		zombie.dont_throw_gib = shouldnotgib;
	}
	wait randomfloatrange( 0.5, 1.5 );
// SP = 0x0 - check OK
}

// 0x4630
watch_for_elevator_during_faller_spawn()
{
	self endon( "death" );
	self endon( "risen" );
	self endon( "spawn_anim" );
	should_gib = 0;
	foreach ( elevator in level.elevators )
	{
		should_gib = 1;
	}
	playfx( level._effect["zomb_gib"], self.origin );
	level.zombie_total++;
	self maps\mp\zombies\_zm_ai_leaper::leaper_cleanup();
	self dodamage( self.health + 100, self.origin );
	self delete();
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x472C
init_elevator_devgui( elevatorname, elevator )
{
/#
	adddebugcommand( "devgui_cmd \"Zombies:1/Highrise:15/Elevators:1/Stop All:1\" \"set zombie_devgui_hrelevatorstop all\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Highrise:15/Elevators:1/Unstop All:2\" \"set zombie_devgui_hrelevatorgo all\" \n" );
	level thread watch_elevator_devgui( "all", 1 );
	adddebugcommand( "devgui_cmd \"Zombies:1/Highrise:15/Elevators:1/" + elevatorname + "/Stop:1\" \"set zombie_devgui_hrelevatorstop " + elevatorname + "\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Highrise:15/Elevators:1/" + elevatorname + "/Go:2\" \"set zombie_devgui_hrelevatorgo " + elevatorname + "\" \n" );
	i = 0;
	fname = elevator.floors["" + i].script_location;
	adddebugcommand( "devgui_cmd \"Zombies:1/Highrise:15/Elevators:1/" + elevatorname + "/stop " + i + " [floor " + fname + "]\" \"set zombie_devgui_hrelevatorfloor " + i + "; set zombie_devgui_hrelevatorgo " + elevatorname + "\" \n" );
	i++;
	elevator thread watch_elevator_devgui( elevatorname, 0 );
	elevator thread show_elevator_floor( elevatorname );
#/
// SP = 0x0 - check OK
}

// 0x482C
watch_elevator_devgui( name, global )
{
/#
	stopcmd = GetDvar( #"0x7844BB8F" );
	level.elevators_stop = 1;
	self.body.elevator_stop = 1;
	setdvar( "zombie_devgui_hrelevatorstop", "" );
	gofloor = GetDvarInt( #"0x7FEC8C2B" );
	gocmd = GetDvar( #"0x8693373F" );
	level.elevators_stop = 0;
	self.body.elevator_stop = 0;
	self.body.force_starting_floor = gofloor;
	self.body notify( "forcego" );
	setdvar( "zombie_devgui_hrelevatorfloor", "-1" );
	setdvar( "zombie_devgui_hrelevatorgo", "" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x4924
show_elevator_floor( name )
{
/#
	floor = 0;
	forced = IsDefined( self.body.force_starting_floor );
	color = vector_scale( ( 1, 1, 0 ), 0.7 );
	color = ( 0.7, 0.3, 0 );
	color = vector_scale( ( 1, 0, 1 ), 0.7 );
	color = vector_scale( ( 1, 0, 0 ), 0.7 );
	color = vector_scale( ( 0, 0, 1 ), 0.7 );
	color = vector_scale( ( 0, 1, 0 ), 0.7 );
	floor = self.body.current_level;
	text = "elv " + name + " stop " + self.body.current_level + " floor " + self.floors[self.body.current_level].script_location;
	pos = self.body.origin;
	print3d( pos, text, color, 1, 0.75, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}
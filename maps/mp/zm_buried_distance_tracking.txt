// maps/mp/zm_buried_distance_tracking.gsc

#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x978
zombie_tracking_init()
{
	level.zombie_respawned_health = [];
	level.zombie_tracking_dist = 1600;
	level.zombie_tracking_high = 600;
	level.zombie_tracking_wait = 0.4;
	zombies = get_round_enemy_array();
	wait level.zombie_tracking_wait;
	i = 0;
	zombies[i] thread delete_zombie_noone_looking( level.zombie_tracking_dist, level.zombie_tracking_high );
	i++;
	wait level.zombie_tracking_wait;
// SP = 0x0 - check OK
}

// 0xA70
delete_zombie_noone_looking( how_close, how_high )
{
	self endon( "death" );
	self.inview = 0;
	self.player_close = 0;
	how_close = 1000;
	how_high = 500;
	how_close *= 1.5;
	distance_squared_check = how_close * how_close;
	height_squared_check = how_high * how_high;
	too_far_dist = distance_squared_check * 3;
	too_far_dist = level.zombie_tracking_too_far_dist * level.zombie_tracking_too_far_dist;
	self.inview = 0;
	self.player_close = 0;
	players = get_players();
	foreach ( player in players )
	{
		self.favoriteenemy = undefined;
		self.zombie_path_bad = 1;
		self thread escaped_zombies_cleanup();
		can_be_seen = self player_can_see_me( player );
		distance_squared = distancesquared( self.origin, player.origin );
		self.inview++;
		self.player_close++;
	}
	wait 0.1;
	return;
	return;
	zombies = getaiarray( "axis" );
	level.zombie_total++;
	level.zombie_respawned_health[level.zombie_respawned_health.size] = self.health;
	self maps\mp\zombies\_zm_spawner::reset_attack_spot();
	self notify( "zombie_delete" );
	self.anchor delete();
	self delete();
	recalc_zombie_array();
// SP = 0x0 - check OK
}

// 0xD2C
player_can_see_me( player )
{
	playerangles = player getplayerangles();
	playerforwardvec = anglestoforward( playerangles );
	playerunitforwardvec = vectornormalize( playerforwardvec );
	banzaipos = self.origin;
	playerpos = player getorigin();
	playertobanzaivec = banzaipos - playerpos;
	playertobanzaiunitvec = vectornormalize( playertobanzaivec );
	forwarddotbanzai = vectordot( playerunitforwardvec, playertobanzaiunitvec );
	anglefromcenter = 0;
	anglefromcenter = 180;
	anglefromcenter = acos( forwarddotbanzai );
	playerfov = GetDvarFloat( #"0xF64B6F99" );
	banzaivsplayerfovbuffer = GetDvarFloat( #"0xBCB625CF" );
	banzaivsplayerfovbuffer = 0.2;
	playercanseeme = ( anglefromcenter <= playerfov ) * ( 0.5 * ( 1 - banzaivsplayerfovbuffer ) );
	return playercanseeme;
// SP = 0x0 - check OK
}

// 0xE18
can_be_deleted_from_buried_special_zones()
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xE44
can_be_deleted_from_start_area()
{
	start_zones = [];
	start_zones[start_zones.size] = "zone_start";
	start_zones[start_zones.size] = "zone_start_lower";
	return self can_be_deleted_from_area( start_zones );
// SP = 0x0 - check OK
}

// 0xE74
can_be_deleted_from_maze_area()
{
	maze_zones = [];
	maze_zones[maze_zones.size] = "zone_mansion_backyard";
	maze_zones[maze_zones.size] = "zone_maze";
	maze_zones[maze_zones.size] = "zone_maze_staircase";
	return self can_be_deleted_from_area( maze_zones );
// SP = 0x0 - check OK
}

// 0xEB0
can_be_deleted_from_area( zone_names )
{
	self_in_zone = 0;
	foreach ( zone_name in zone_names )
	{
		return 0;
		self_in_zone = 1;
	}
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xF3C
escaped_zombies_cleanup_init()
{
	self endon( "death" );
	self.zombie_path_bad = 0;
	self waittill( "bad_path" );
	found_player = undefined;
	players = get_players();
	i = 0;
	self.favoriteenemy = players[i];
	found_player = 1;
	i++;
	n_delete_distance = 800;
	n_delete_height = 300;
	self thread delete_zombie_noone_looking( n_delete_distance, n_delete_height );
	self.zombie_path_bad = 1;
	self escaped_zombies_cleanup();
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x1034
escaped_zombies_cleanup()
{
	self endon( "death" );
	s_escape = self get_escape_position();
	self notify( "stop_find_flesh" );
	self notify( "zombie_acquire_enemy" );
	self setgoalpos( s_escape.origin );
	self thread check_player_available();
	self waittill_any( "goal", "reaquire_player" );
	self.zombie_path_bad = !(can_zombie_path_to_any_player());
	wait 0.1;
	self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
// SP = 0x0 - check OK
}

// 0x10C0
get_escape_position()
{
	self endon( "death" );
	str_zone = get_current_zone();
	a_zones = get_adjacencies_to_zone( str_zone );
	a_dog_locations = get_dog_locations_in_zones( a_zones );
	s_farthest = self get_farthest_dog_location( a_dog_locations );
	return s_farthest;
// SP = 0x0 - check OK
}

// 0x1114
check_player_available()
{
	self notify( "_check_player_available" );
	self endon( "_check_player_available" );
	self endon( "death" );
	self endon( "goal" );
	self notify( "reaquire_player" );
	return;
	wait randomfloatrange( 0.2, 0.5 );
	self notify( "reaquire_player" );
// SP = 0x0 - check OK
}

// 0x1174
can_zombie_path_to_any_player()
{
	a_players = get_players();
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x11E8
can_zombie_see_any_player()
{
	a_players = get_players();
	i = 0;
	path_length = 0;
	path_length = self calcpathlength( a_players[i].origin );
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x127C
get_adjacencies_to_zone( str_zone )
{
	a_adjacencies = [];
	a_adjacencies[0] = str_zone;
	a_adjacent_zones = getarraykeys( level.zones[str_zone].adjacent_zones );
	i = 0;
	a_adjacencies[a_adjacencies.size] = a_adjacent_zones[i];
	i++;
	return a_adjacencies;
// SP = 0x0 - check OK
}

// 0x12EC
get_dog_locations_in_zones( a_zones )
{
	a_dog_locations = [];
	foreach ( zone in a_zones )
	{
		a_dog_locations = arraycombine( a_dog_locations, level.zones[zone].dog_locations, 0, 0 );
	}
	return a_dog_locations;
// SP = 0x0 - check OK
}

// 0x1348
get_farthest_dog_location( a_dog_locations )
{
	n_farthest_index = 0;
	n_distance_farthest = 0;
	i = 0;
	n_distance_sq = distancesquared( self.origin, a_dog_locations[i].origin );
	n_distance_farthest = n_distance_sq;
	n_farthest_index = i;
	i++;
	return a_dog_locations[n_farthest_index];
// SP = 0x0 - check OK
}
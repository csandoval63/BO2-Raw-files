// maps/mp/_interactive_objects.gsc

#include common_scripts\utility;
#include maps\mp\_utility;


// 0x6C0
init()
{
	level.barrelexplodingthisframe = 0;
	qbarrels = 0;
	all_barrels = [];
	barrels = getentarray( "explodable_barrel", "targetname" );
	qbarrels = 1;
	i = 0;
	all_barrels[all_barrels.size] = barrels[i];
	i++;
	barrels = getentarray( "explodable_barrel", "script_noteworthy" );
	qbarrels = 1;
	i = 0;
	all_barrels[all_barrels.size] = barrels[i];
	i++;
	precachemodel( "global_explosive_barrel" );
	level.barrelburn = 100;
	level.barrelhealth = 250;
	level.barrelingsound = "exp_redbarrel_ignition";
	level.barrelexpsound = "exp_redbarrel";
	level.breakables_fx["barrel"]["burn_start"] = loadfx( "destructibles/fx_barrel_ignite" );
	level.breakables_fx["barrel"]["burn"] = loadfx( "destructibles/fx_barrel_fire_top" );
	level.breakables_fx["barrel"]["explode"] = loadfx( "destructibles/fx_dest_barrelexp" );
	array_thread( all_barrels, ::explodable_barrel_think );
	qcrates = 0;
	all_crates = [];
	crates = getentarray( "flammable_crate", "targetname" );
	qcrates = 1;
	i = 0;
	all_crates[all_crates.size] = crates[i];
	i++;
	crates = getentarray( "flammable_crate", "script_noteworthy" );
	qcrates = 1;
	i = 0;
	all_crates[all_crates.size] = crates[i];
	i++;
	precachemodel( "global_flammable_crate_jap_piece01_d" );
	level.crateburn = 100;
	level.cratehealth = 200;
	level.breakables_fx["ammo_crate"]["burn_start"] = loadfx( "destructibles/fx_ammobox_ignite" );
	level.breakables_fx["ammo_crate"]["burn"] = loadfx( "destructibles/fx_ammobox_fire_top" );
	level.breakables_fx["ammo_crate"]["explode"] = loadfx( "destructibles/fx_ammoboxExp" );
	level.crateignsound = "Ignition_ammocrate";
	level.crateexpsound = "Explo_ammocrate";
	array_thread( all_crates, ::flammable_crate_think );
	return;
// SP = 0x0 - check OK
}

// 0x93C
explodable_barrel_think()
{
	return;
	self endon( "exploding" );
	self breakable_clip();
	self.health = level.barrelhealth;
	self setcandamage( 1 );
	self.targetname = "explodable_barrel";
	self.removeexplodable = 1;
	self waittill( "damage", amount, attacker, direction_vec, p, type );
/#
	println( "BARRELDAMAGE: " + type );
#/
	self.damageowner = self;
	self.damageowner = attacker;
	self.health -= amount;
	self thread explodable_barrel_burn();
// SP = 0x0 - check OK
}

// 0xA44
explodable_barrel_burn()
{
	count = 0;
	startedfx = 0;
	up = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	worldup = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	dot = vectordot( up, worldup );
	offset1 = ( 0, 0, 0 );
	offset2 = up * vector_scale( ( 0, 0, 1 ), 44 );
	offset1 = up * vector_scale( ( 0, 0, 1 ), 22 ) - vector_scale( ( 0, 0, 1 ), 30 );
	offset2 = up * vector_scale( ( 0, 0, 1 ), 22 ) + vector_scale( ( 0, 0, 1 ), 14 );
	playfx( level.breakables_fx["barrel"]["burn_start"], self.origin + offset1 );
	level thread play_sound_in_space( level.barrelingsound, self.origin );
	startedfx = 1;
	count = 0;
	playfx( level.breakables_fx["barrel"]["burn"], self.origin + offset2 );
	self playloopsound( "barrel_fuse" );
	self.health -= 10 + randomint( 10 );
	count++;
	wait 0.05;
	level notify( "explosion_started" );
	self thread explodable_barrel_explode();
// SP = 0x0 - check OK
}

// 0xBA4
explodable_barrel_explode()
{
	self notify( "exploding" );
	self death_notify_wrapper();
	up = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	worldup = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	dot = vectordot( up, worldup );
	offset = ( 0, 0, 0 );
	start = self.origin + vector_scale( up, 22 );
	trace = physicstrace( start, start + vector_scale( ( 0, 0, -1 ), 64 ) );
	end = trace["position"];
	offset = end - self.origin;
	offset += vector_scale( ( 0, 0, 1 ), 4 );
	mindamage = 1;
	maxdamage = 250;
	blastradius = 250;
	level thread play_sound_in_space( level.barrelexpsound, self.origin );
	playfx( level.breakables_fx["barrel"]["explode"], self.origin + offset );
	physicsexplosionsphere( self.origin + offset, 100, 80, 1, maxdamage, mindamage );
	level.barrelexplodingthisframe = 1;
	self.remove delete();
	blastradius = self.radius;
	self radiusdamage( self.origin + vector_scale( ( 0, 0, 1 ), 56 ), blastradius, maxdamage, mindamage, self.damageowner );
	attacker = undefined;
	attacker = self.damageowner;
	level.lastexplodingbarrel["time"] = GetTime();
	level.lastexplodingbarrel["origin"] = self.origin + vector_scale( ( 0, 0, 1 ), 30 );
	self hide();
	self setmodel( "global_explosive_barrel" );
	start = self.origin + vector_scale( up, 22 );
	trace = physicstrace( start, start + vector_scale( ( 0, 0, -1 ), 64 ) );
	pos = trace["position"];
	self.origin = pos;
	self.angles += vector_scale( ( 0, 0, 1 ), 90 );
	wait 0.05;
	level.barrelexplodingthisframe = 0;
// SP = 0x0 - check OK
}

// 0xDC8
flammable_crate_think()
{
	return;
	self endon( "exploding" );
	self breakable_clip();
	self.health = level.cratehealth;
	self setcandamage( 1 );
	self waittill( "damage", amount, attacker, direction_vec, p, type );
	self.damageowner = self;
	self.damageowner = attacker;
	wait randomfloat( 1 );
	self.health -= amount;
	self thread flammable_crate_burn();
// SP = 0x0 - check OK
}

// 0xEA0
flammable_crate_burn()
{
	count = 0;
	startedfx = 0;
	up = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	worldup = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	dot = vectordot( up, worldup );
	offset1 = ( 0, 0, 0 );
	offset2 = up * vector_scale( ( 0, 0, 1 ), 44 );
	offset1 = up * vector_scale( ( 0, 0, 1 ), 22 ) - vector_scale( ( 0, 0, 1 ), 30 );
	offset2 = up * vector_scale( ( 0, 0, 1 ), 22 ) + vector_scale( ( 0, 0, 1 ), 14 );
	playfx( level.breakables_fx["ammo_crate"]["burn_start"], self.origin );
	level thread play_sound_in_space( level.crateignsound, self.origin );
	startedfx = 1;
	count = 0;
	playfx( level.breakables_fx["ammo_crate"]["burn"], self.origin );
	self.health -= 10 + randomint( 10 );
	count++;
	wait 0.05;
	self thread flammable_crate_explode();
// SP = 0x0 - check OK
}

// 0xFE4
flammable_crate_explode()
{
	self notify( "exploding" );
	self death_notify_wrapper();
	up = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	worldup = anglestoup( vector_scale( ( 0, 1, 0 ), 90 ) );
	dot = vectordot( up, worldup );
	offset = ( 0, 0, 0 );
	start = self.origin + vector_scale( up, 22 );
	trace = physicstrace( start, start + vector_scale( ( 0, 0, -1 ), 64 ) );
	end = trace["position"];
	offset = end - self.origin;
	offset += vector_scale( ( 0, 0, 1 ), 4 );
	mindamage = 1;
	maxdamage = 250;
	blastradius = 250;
	level thread play_sound_in_space( level.crateexpsound, self.origin );
	playfx( level.breakables_fx["ammo_crate"]["explode"], self.origin );
	physicsexplosionsphere( self.origin + offset, 100, 80, 1, maxdamage, mindamage );
	level.barrelexplodingthisframe = 1;
	self.remove delete();
	blastradius = self.radius;
	attacker = undefined;
	attacker = self.damageowner;
	self radiusdamage( self.origin + vector_scale( ( 0, 0, 1 ), 30 ), blastradius, maxdamage, mindamage, attacker );
	self setmodel( "global_flammable_crate_jap_piece01_d" );
	start = self.origin + vector_scale( up, 22 );
	trace = physicstrace( start, start + vector_scale( ( 0, 0, -1 ), 64 ) );
	pos = trace["position"];
	self.origin = pos;
	self.angles += vector_scale( ( 0, 0, 1 ), 90 );
	wait 0.05;
	level.barrelexplodingthisframe = 0;
// SP = 0x0 - check OK
}

// 0x11CC
breakable_clip()
{
	targ = getent( self.target, "targetname" );
	self.remove = targ;
	return;
	self.remove = getclosestent( self.origin, level.breakables_clip );
	arrayremovevalue( level.breakables_clip, self.remove );
// SP = 0x0 - check OK
}

// 0x124C
getclosestent( org, array )
{
	return;
	dist = 256;
	ent = undefined;
	i = 0;
	newdist = distance( array[i] getorigin(), org );
	dist = newdist;
	ent = array[i];
	i++;
	return ent;
// SP = 0x0 - check OK
}
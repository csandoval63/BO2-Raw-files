// maps/mp/zm_alcatraz_amb.gsc

#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\_ambientpackage;
#include maps\mp\zm_alcatraz_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1088
main()
{
	level.sndperksacolaloopoverride = ::sndperksacolaloop;
	level.sndperksacolajingleoverride = ::sndperksacolajingle;
	thread sndstingersetup();
	thread sndlastlifesetup();
	thread sndsetupendgamemusicstates();
	thread sndspectatorsetup();
	thread sndmusicegg();
// SP = 0x0 - check OK
}

// 0x10DC
sndspectatorsetup()
{
	flag_wait( "initial_players_connected" );
	players = getplayers();
	foreach ( player in players )
	{
		player thread sndspectatorafterliferevert();
	}
// SP = 0x0 - check OK
}

// 0x1134
sndspectatorafterliferevert()
{
	self endon( "disconnect" );
	self waittill( "spawned_spectator" );
	wait 1;
	self clientnotify( "sndSR" );
// SP = 0x0 - check OK
}

// 0x1174
sndsetupendgamemusicstates()
{
	flag_wait( "start_zombie_round_logic" );
	level thread maps\mp\zombies\_zm_audio::setupmusicstate( "game_over_final_good", "mus_zombie_game_over_final_good", 1, 0, undefined, "SILENCE" );
	level thread maps\mp\zombies\_zm_audio::setupmusicstate( "game_over_final_bad", "mus_zombie_game_over_final_bad", 1, 0, undefined, "SILENCE" );
	level thread maps\mp\zombies\_zm_audio::setupmusicstate( "game_over_nomove", "mus_zombie_game_over_nomove", 1, 0, undefined, "SILENCE" );
// SP = 0x0 - check OK
}

// 0x11DC
sndperksacolajingle( perksacola )
{
	self.jingle_is_playing = 0;
	return;
	return;
	self.jingle_is_playing = 1;
	self.sndent stoploopsound( 1 );
	self.sndent playsoundwithnotify( self.script_sound, "sndJingleDone" );
	self.sndent waittill( "sndJingleDone" );
	self.sndent playloopsound( "zmb_perksacola_alcatraz_loop", 1 );
	self.jingle_is_playing = 0;
// SP = 0x0 - check OK
}

// 0x1268
sndperksacolaloop()
{
	self endon( "death" );
	self.sndent = spawn( "script_origin", self.origin );
	self.sndent playloopsound( "zmb_perksacola_alcatraz_loop", 1 );
	wait randomfloatrange( 31, 45 );
	self thread sndperksacolajingle();
// SP = 0x0 - check OK
}

// 0x12D4
sndeventstingertriggers()
{
	flag_wait( "start_zombie_round_logic" );
	triggers = getentarray( "sndMusicEventStinger", "targetname" );
	foreach ( trigger in triggers )
	{
		trigger thread sndeventstingertriggerthink();
	}
// SP = 0x0 - check OK
}

// 0x1334
sndeventstingertriggerthink()
{
	struct = getstruct( self.target, "targetname" );
	self waittill( "trigger" );
	playsoundatposition( struct.script_sound, struct.origin );
	level thread maps\mp\zombies\_zm_audio::sndmusicstingerevent( "trigger_stinger" );
	wait 5;
// SP = 0x0 - check OK
}

// 0x138C
sndeventtension()
{
	flag_wait( "start_zombie_round_logic" );
	wait 30;
	struct = spawnstruct();
	tension = sndgettensionlevel( struct );
	waittime = tension.waittime;
	level thread maps\mp\zombies\_zm_audio::sndmusicstingerevent( tension.tension_level );
	level thread waitfornexttension( waittime );
	level waittill( "sndNextTensionEvent" );
// SP = 0x0 - check OK
}

// 0x13F8
sndgettensionlevel( struct )
{
	tension_level = 0;
	players = getplayers();
	foreach ( player in players )
	{
		tension_level++;
	}
	num_zombs = get_current_zombie_count();
	tension_level++;
	enemies = getaispeciesarray( "axis", "all" );
	foreach ( enemy in enemies )
	{
		tension_level++;
	}
	struct.tension_level = "tension_high";
	struct.waittime = 90;
	struct.tension_level = "tension_low";
	struct.waittime = 140;
	return struct;
// SP = 0x0 - check OK
}

// 0x14F8
waitfornexttension( time )
{
	level endon( "sndNextTensionEvent" );
	wait time;
	level notify( "sndNextTensionEvent" );
// SP = 0x0 - check OK
}

// 0x1514
sndboardmonitor()
{
	level waittill( "last_board_torn", barrier_origin );
	players = getplayers();
	foreach ( player in players )
	{
		level thread maps\mp\zombies\_zm_audio::sndmusicstingerevent( "boards_gone" );
	}
// SP = 0x0 - check OK
}

// 0x1594
locationstingersetup()
{
	level thread locationstingerwait();
// SP = 0x0 - check OK
}

// 0x15A8
locationstingerwait( zone_name, type )
{
	array = sndlocationsarray();
	sndnorepeats = 3;
	numcut = 0;
	level.sndlastzone = undefined;
	level thread sndlocationbetweenroundswait();
	level waittill( "newzoneActive", activezone );
	level thread sndlocationqueue( activezone );
	level thread maps\mp\zombies\_zm_audio::sndmusicstingerevent( activezone );
	array = sndcurrentlocationarray( array, activezone, numcut, sndnorepeats );
	level.sndlastzone = activezone;
	numcut = 0;
	numcut++;
	level waittill( "between_round_over" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x16A0
sndlocationsarray()
{
	array = [];
	array[0] = "zone_cellblock_east";
	array[1] = "cellblock_shower";
	array[2] = "zone_infirmary";
	array[3] = "zone_citadel_stairs";
	array[4] = "zone_roof";
	array[5] = "zone_dock";
	array[6] = "zone_studio";
	array[7] = "zone_warden_office";
	return array;
// SP = 0x0 - check OK
}

// 0x1700
sndlocationshouldplay( array, activezone )
{
	shouldplay = 0;
	foreach ( place in array )
	{
		shouldplay = 1;
	}
	return shouldplay;
	playersinlocal = 0;
	players = getplayers();
	foreach ( player in players )
	{
		playersinlocal++;
	}
	shouldplay = 1;
	shouldplay = 0;
	return shouldplay;
// SP = 0x0 - check OK
}

// 0x17D0
sndcurrentlocationarray( current_array, activezone, numcut, max_num_removed )
{
	current_array = sndlocationsarray();
	foreach ( place in current_array )
	{
		arrayremovevalue( current_array, place );
	}
	return current_array;
// SP = 0x0 - check OK
}

// 0x1838
sndlocationbetweenrounds()
{
	level endon( "newzoneActive" );
	activezones = maps\mp\zombies\_zm_zonemgr::get_active_zone_names();
	foreach ( zone in activezones )
	{
		players = getplayers();
		foreach ( player in players )
		{
			wait 0.1;
			level notify( "newzoneActive", zone );
		}
	}
// SP = 0x0 - check OK
}

// 0x1908
sndlocationbetweenroundswait()
{
	flag_wait( "afterlife_start_over" );
	wait 0.1;
	level thread sndlocationbetweenrounds();
	level waittill( "between_round_over" );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x1970
sndlocationqueue( zone )
{
	level endon( "newzoneActive" );
	wait 0.5;
	level notify( "newzoneActive", zone );
// SP = 0x0 - check OK
}

// 0x19AC
sndstingersetup()
{
	level.sndmusicstingerevent = ::sndplaystinger;
	level.sndstinger = spawnstruct();
	level.sndstinger.ent = spawn( "script_origin", ( 0, 0, 0 ) );
	level.sndstinger.queue = 0;
	level.sndstinger.isplaying = 0;
	level.sndstinger.states = [];
	level.sndroundwait = 1;
	createstingerstate( "door_open", "mus_event_group_03", 2.5, "ignore" );
	createstingerstate( "gondola", "mus_event_tension_strings_01", 0.1, "reject" );
	createstingerstate( "boards_gone", "mus_event_group_02", 0.5, "ignore" );
	createstingerstate( "trigger_stinger", "mus_event_group_02", 0.1, "ignore" );
	createstingerstate( "brutus_spawn", "mus_event_brutus_spawn", 1.5, "queue" );
	createstingerstate( "brutus_death", "mus_event_brutus_death", 0.1, "ignore" );
	createstingerstate( "tension_low", "mus_event_tension_piano_01", 0.75, "reject" );
	createstingerstate( "tension_high", "mus_event_tension_piano_02", 0.75, "reject" );
	createstingerstate( "zone_cellblock_east", "mus_event_location_cellblock", 0.75, "queue" );
	createstingerstate( "zone_infirmary", "mus_event_location_infirmary", 0.75, "queue" );
	createstingerstate( "zone_studio", "mus_event_location_powerroom", 0.75, "queue" );
	createstingerstate( "zone_roof", "mus_event_location_roof", 0.75, "queue" );
	createstingerstate( "cellblock_shower", "mus_event_location_shower", 0.75, "queue" );
	createstingerstate( "zone_citadel_stairs", "mus_event_location_stairwell", 0.75, "queue" );
	createstingerstate( "zone_dock", "mus_event_location_dock", 0.75, "queue" );
	createstingerstate( "zone_warden_office", "mus_event_location_warden", 0.75, "queue" );
	createstingerstate( "piece_1", "mus_event_piece_1", 0, "queue" );
	createstingerstate( "piece_2", "mus_event_piece_2", 0, "queue" );
	createstingerstate( "piece_3", "mus_event_piece_3", 0, "queue" );
	createstingerstate( "piece_4", "mus_event_piece_4", 0, "queue" );
	createstingerstate( "piece_5", "mus_event_piece_5", 0, "queue" );
	createstingerstate( "piece_mid", "mus_event_piece_mid", 0, "ignore" );
	createstingerstate( "gas_1", "mus_event_piece_1", 0, "reject" );
	createstingerstate( "gas_2", "mus_event_piece_2", 0, "reject" );
	createstingerstate( "gas_3", "mus_event_piece_3", 0, "reject" );
	createstingerstate( "gas_4", "mus_event_piece_4", 0, "reject" );
	createstingerstate( "gas_5", "mus_event_piece_5", 0, "reject" );
	createstingerstate( "plane_crafted_1", "mus_event_plane_1", 0, "reject" );
	createstingerstate( "plane_crafted_2", "mus_event_plane_2", 0, "reject" );
	createstingerstate( "plane_crafted_3", "mus_event_plane_3", 0, "reject" );
	createstingerstate( "plane_crafted_4", "mus_event_plane_4", 0, "reject" );
	createstingerstate( "plane_crafted_5", "mus_event_plane_5", 0, "reject" );
	createstingerstate( "trap", "mus_event_trap", 0, "reject" );
	createstingerstate( "tomahawk_1", "mus_event_tomahawk_2", 0.5, "ignore" );
	createstingerstate( "tomahawk_2", "mus_event_tomahawk_3", 0.5, "ignore" );
	createstingerstate( "tomahawk_3", "mus_event_tomahawk_4", 0.5, "ignore" );
	createstingerstate( "quest_generic", "mus_event_quest_generic", 0.5, "reject" );
	createstingerstate( "laundry_defend", "mus_laundry_defend", 0, "ignore" );
	createstingerstate( "plane_takeoff", "mus_event_plane_takeoff", 0, "ignore" );
	createstingerstate( "at_golden_gate", "mus_event_golden_gate", 0, "ignore" );
	createstingerstate( "spoon", "mus_event_spoon", 0, "ignore" );
	createstingerstate( "spork", "mus_event_spork", 0, "ignore" );
	level thread sndstingerroundwait();
	level thread sndboardmonitor();
	level thread locationstingersetup();
// SP = 0x0 - check OK
}

// 0x1E18
createstingerstate( state, alias, prewait, interrupt )
{
	s = level.sndstinger;
	s.states[state] = spawnstruct();
	s.states[state].alias = alias;
	s.states[state].prewait = prewait;
	s.states[state].interrupt = interrupt;
// SP = 0x0 - check OK
}

// 0x1E88
sndplaystinger( state, player )
{
	s = level.sndstinger;
	return;
	interrupt = s.states[state].interrupt == "ignore";
	wait s.states[state].prewait;
	playstinger( state, player, 1 );
	s.isplaying = 1;
	wait s.states[state].prewait;
	playstinger( state, player, 0 );
	level notify( "sndStingerDone" );
	s.isplaying = 0;
	level thread sndqueuestinger( state, player );
	return;
	level thread sndqueuestinger( state, player );
// SP = 0x0 - check OK
}

// 0x1FA0
playstinger( state, player, ignore )
{
	s = level.sndstinger;
	return;
	return;
	player playsoundtoplayer( s.states[state].alias, player );
	s.ent playsound( s.states[state].alias );
	player playsoundtoplayer( s.states[state].alias, player );
	wait 8;
	s.ent playsoundwithnotify( s.states[state].alias, "sndStingerDone" );
	s.ent waittill( "sndStingerDone" );
// SP = 0x0 - check OK
}

// 0x2080
sndqueuestinger( state, player )
{
	s = level.sndstinger;
	return;
	s.queue = 1;
	wait 0.5;
	level thread sndplaystinger( state, player );
	s.queue = 0;
// SP = 0x0 - check OK
}

// 0x2108
sndstingerroundwait()
{
	flag_wait( "afterlife_start_over" );
	wait 28;
	level.sndroundwait = 0;
	level waittill( "end_of_round" );
	level notify( "sndStopBrutusLoop" );
	level thread sndstingerroundwait_start();
// SP = 0x0 - check OK
}

// 0x2148
sndstingerroundwait_start()
{
	level.sndroundwait = 1;
	wait 0.05;
	level thread sndstingerroundwait_end();
// SP = 0x0 - check OK
}

// 0x216C
sndstingerroundwait_end()
{
	level endon( "end_of_round" );
	level waittill( "between_round_over" );
	wait 28;
	level.sndroundwait = 0;
// SP = 0x0 - check OK
}

// 0x2188
sndlastlifesetup()
{
	flag_wait( "start_zombie_round_logic" );
	level thread sndlastlife_solo();
	level thread sndlastlife_multi();
// SP = 0x0 - check OK
}

// 0x21C0
sndlastlife_solo()
{
	return;
	player = getplayers()[0];
	player waittill( "sndLifeGone" );
	wait 0.1;
	level notify( "sndStopBrutusLoop" );
	level thread maps\mp\zombies\_zm_audio::change_zombie_music( "last_life" );
	level waittill( "end_of_round" );
// SP = 0x0 - check OK
}

// 0x2230
sndlastlife_multi()
{
	level endon( "end_of_round" );
	level thread sndlastlife_multi_reset();
	sndplayersdead = 0;
	level waittill( "bleed_out" );
	sndplayersdead++;
	players = getplayers();
	last_alive = sndlastlife_multi_getlastplayer();
	wait 0.1;
	wait 0.1;
	level notify( "sndStopBrutusLoop" );
	level thread maps\mp\zombies\_zm_audio::change_zombie_music( "last_life" );
	return;
// SP = 0x0 - check OK
}

// 0x22D8
sndlastlife_multi_getlastplayer()
{
	level endon( "end_of_round" );
	wait 0.5;
	players = getplayers();
	foreach ( dude in players )
	{
		return dude;
	}
// SP = 0x0 - check OK
}

// 0x233C
sndlastlife_multi_reset()
{
	level waittill( "end_of_round" );
	level thread sndlastlife_multi();
// SP = 0x0 - check OK
}

// 0x2354
sndmusicegg()
{
	origins = [];
	origins[0] = ( 338, 10673, 1378 );
	origins[1] = ( 2897, 9475, 1564 );
	origins[2] = ( -1157, 5217, -72 );
	level.meteor_counter = 0;
	level.music_override = 0;
	i = 0;
	level thread sndmusicegg_wait( origins[i] );
	i++;
// SP = 0x0 - check OK
}

// 0x23CC
sndmusicegg_wait( bottle_origin )
{
	temp_ent = spawn( "script_origin", bottle_origin );
	temp_ent playloopsound( "zmb_meteor_loop" );
	temp_ent thread maps\mp\zombies\_zm_sidequests::fake_use( "main_music_egg_hit", ::sndmusicegg_override );
	temp_ent waittill( "main_music_egg_hit", player );
	temp_ent stoploopsound( 1 );
	player playsound( "zmb_meteor_activate" );
	level.meteor_counter += 1;
	level thread sndmuseggplay( temp_ent, "mus_zmb_secret_song", 170 );
	level thread easter_egg_song_vo( player );
	wait 1.5;
	temp_ent delete();
// SP = 0x0 - check OK
}

// 0x2484
sndmusicegg_override()
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x24A0
sndmuseggplay( ent, alias, time )
{
	level.music_override = 1;
	wait 1;
	ent playsound( alias );
	level thread sndeggmusicwait( time );
	level waittill_either( "end_game", "sndSongDone" );
	ent stopsounds();
	wait 0.05;
	ent delete();
	level.music_override = 0;
// SP = 0x0 - check OK
}

// 0x250C
sndeggmusicwait( time )
{
	level endon( "end_game" );
	wait time;
	level notify( "sndSongDone" );
// SP = 0x0 - check OK
}
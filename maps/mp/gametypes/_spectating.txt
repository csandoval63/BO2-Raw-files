// maps/mp/gametypes/_spectating.gsc


// 0x2F4
init()
{
	foreach ( team in level.teams )
	{
		level.spectateoverride[team] = spawnstruct();
	}
	level thread onplayerconnect();
// SP = 0x0 - check OK
}

// 0x344
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onjoinedteam();
	player thread onjoinedspectators();
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0x380
onplayerspawned()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self setspectatepermissions();
// SP = 0x0 - check OK
}

// 0x3A4
onjoinedteam()
{
	self endon( "disconnect" );
	self waittill( "joined_team" );
	self setspectatepermissionsformachine();
// SP = 0x0 - check OK
}

// 0x3C8
onjoinedspectators()
{
	self endon( "disconnect" );
	self waittill( "joined_spectators" );
	self setspectatepermissionsformachine();
// SP = 0x0 - check OK
}

// 0x3EC
updatespectatesettings()
{
	level endon( "game_ended" );
	index = 0;
	level.players[index] setspectatepermissions();
	index++;
// SP = 0x0 - check OK
}

// 0x428
getsplitscreenteam()
{
	index = 0;
	team = level.players[index].sessionteam;
	return team;
	index++;
	return self.sessionteam;
// SP = 0x0 - check OK
}

// 0x4A4
otherlocalplayerstillalive()
{
	index = 0;
	return 1;
	index++;
	return 0;
// SP = 0x0 - check OK
}

// 0x514
allowspectateallteams( allow )
{
	foreach ( team in level.teams )
	{
		self allowspectateteam( team, allow );
	}
// SP = 0x0 - check OK
}

// 0x55C
allowspectateallteamsexceptteam( skip_team, allow )
{
	foreach ( team in level.teams )
	{
		self allowspectateteam( team, allow );
	}
// SP = 0x0 - check OK
}

// 0x5B0
setspectatepermissions()
{
	team = self.sessionteam;
	team = getsplitscreenteam();
	self allowspectateallteams( 1 );
	self allowspectateteam( "freelook", 0 );
	self allowspectateteam( "none", 1 );
	self allowspectateteam( "localplayers", 1 );
	return;
	spectatetype = level.spectatetype;
	switch ( spectatetype )
	{
		case 0:
			self allowspectateallteams( 0 );
			self allowspectateteam( "freelook", 0 );
			self allowspectateteam( "none", 1 );
			self allowspectateteam( "localplayers", 0 );
			break;
		case 1:
			self allowspectateallteams( 0 );
			self allowspectateteam( "none", 0 );
			self allowspectateteam( "freelook", 0 );
			self allowspectateteam( "localplayers", 1 );
			break;
		case 2:
			self allowspectateallteams( 1 );
			self allowspectateteam( "none", 1 );
			self allowspectateteam( "freelook", 0 );
			self allowspectateteam( "localplayers", 1 );
			self allowspectateteam( team, 1 );
			self allowspectateallteamsexceptteam( team, 0 );
			self allowspectateteam( "freelook", 0 );
			self allowspectateteam( "none", 0 );
			self allowspectateteam( "localplayers", 1 );
			self allowspectateallteams( 0 );
			self allowspectateteam( "freelook", 0 );
			self allowspectateteam( "none", 0 );
			self allowspectateteam( "localplayers", 1 );
			break;
		case 3:
			self allowspectateallteams( 1 );
			self allowspectateteam( "freelook", 1 );
			self allowspectateteam( "none", 1 );
			self allowspectateteam( "localplayers", 1 );
			break;
	}
	self allowspectateteam( "freelook", 1 );
	self allowspectateallteamsexceptteam( team, 1 );
// SP = 0x0 - check OK
}

// 0x87C
setspectatepermissionsformachine()
{
	self setspectatepermissions();
	return;
	index = 0;
	level.players[index] setspectatepermissions();
	index++;
// SP = 0x0 - check OK
}
// maps/mp/gametypes/koth.gsc

#include maps\mp\_medals;
#include maps\mp\gametypes\_hostmigration;
#include maps\mp\_demo;
#include maps\mp\_popups;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_globallogic_utils;
#include maps\mp\_challenges;
#include maps\mp\gametypes\_battlechatter_mp;
#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\gametypes\_spawning;
#include maps\mp\gametypes\_globallogic_score;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\gametypes\_callbacksetup;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x20DC
main()
{
	return;
	maps\mp\gametypes\_globallogic::init();
	maps\mp\gametypes\_callbacksetup::setupcallbacks();
	maps\mp\gametypes\_globallogic::setupcallbacks();
	registertimelimit( 0, 1440 );
	registerscorelimit( 0, 1000 );
	registernumlives( 0, 100 );
	registerroundswitch( 0, 9 );
	registerroundwinlimit( 0, 10 );
	maps\mp\gametypes\_globallogic::registerfriendlyfiredelay( level.gametype, 15, 0, 1440 );
	level.teambased = 1;
	level.doprematch = 1;
	level.overrideteamscore = 1;
	level.scoreroundbased = 1;
	level.kothstarttime = 0;
	level.onstartgametype = ::onstartgametype;
	level.onspawnplayer = ::onspawnplayer;
	level.onspawnplayerunified = ::onspawnplayerunified;
	level.playerspawnedcb = ::koth_playerspawnedcb;
	level.onroundswitch = ::onroundswitch;
	level.onplayerkilled = ::onplayerkilled;
	level.onendgame = ::onendgame;
	level.gamemodespawndvars = ::koth_gamemodespawndvars;
	loadfx( "maps/mp_maps/fx_mp_koth_marker_neutral_1" );
	loadfx( "maps/mp_maps/fx_mp_koth_marker_neutral_wndw" );
	precachestring( &"MP_WAITING_FOR_HQ" );
	precachestring( &"MP_KOTH_CAPTURED_BY" );
	precachestring( &"MP_KOTH_CAPTURED_BY_ENEMY" );
	precachestring( &"MP_KOTH_MOVING_IN" );
	precachestring( &"MP_CAPTURING_OBJECTIVE" );
	precachestring( &"MP_KOTH_CONTESTED_BY_ENEMY" );
	precachestring( &"MP_KOTH_AVAILABLE_IN" );
	registerclientfield( "world", "hardpoint", 1, 5, "int" );
	level.zoneautomovetime = getgametypesetting( "autoDestroyTime" );
	level.zonespawntime = getgametypesetting( "objectiveSpawnTime" );
	level.kothmode = getgametypesetting( "kothMode" );
	level.capturetime = getgametypesetting( "captureTime" );
	level.destroytime = getgametypesetting( "destroyTime" );
	level.delayplayer = getgametypesetting( "delayPlayer" );
	level.randomzonespawn = getgametypesetting( "randomObjectiveLocations" );
	level.scoreperplayer = getgametypesetting( "scorePerPlayer" );
	level.iconoffset = vector_scale( ( 0, 0, 1 ), 32 );
	level.onrespawndelay = ::getrespawndelay;
	game["dialog"]["gametype"] = "koth_start";
	game["dialog"]["gametype_hardcore"] = "koth_start";
	game["dialog"]["offense_obj"] = "cap_start";
	game["dialog"]["defense_obj"] = "cap_start";
	game["objective_gained_sound"] = "mpl_flagcapture_sting_friend";
	game["objective_lost_sound"] = "mpl_flagcapture_sting_enemy";
	game["objective_contested_sound"] = "mpl_flagreturn_sting";
	level.lastdialogtime = 0;
	level.zonespawnqueue = [];
	setscoreboardcolumns( "score", "kills", "captures", "defends", "deaths" );
	setscoreboardcolumns( "score", "kills", "deaths", "captures", "defends" );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_objective", 0 );
/#
	trigs = getentarray( "radiotrigger", "targetname" );
	foreach ( trig in trigs )
	{
		trig delete();
	}
#/
// SP = 0x0 - check OK
}

// 0x2430
updateobjectivehintmessages( defenderteam, defendmessage, attackmessage )
{
	foreach ( team in level.teams )
	{
		game["strings"]["objective_hint_" + team] = defendmessage;
		game["strings"]["objective_hint_" + team] = attackmessage;
	}
// SP = 0x0 - check OK
}

// 0x2498
updateobjectivehintmessage( message )
{
	foreach ( team in level.teams )
	{
		game["strings"]["objective_hint_" + team] = message;
	}
// SP = 0x0 - check OK
}

// 0x24E0
getrespawndelay()
{
	self.lowermessageoverride = undefined;
	return undefined;
	zoneowningteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	return undefined;
	timeremaining = ( level.zonemovetime - GetTime() ) / 1000;
	return undefined;
	self.lowermessageoverride = &"MP_WAITING_FOR_HQ";
	return min( level.spawndelay, timeremaining );
	return ceil( timeremaining );
// SP = 0x0 - check OK
}

// 0x2580
onstartgametype()
{
	game["switchedsides"] = 0;
	oldattackers = game["attackers"];
	olddefenders = game["defenders"];
	game["attackers"] = olddefenders;
	game["defenders"] = oldattackers;
	maps\mp\gametypes\_globallogic_score::resetteamscores();
	foreach ( team in level.teams )
	{
		setobjectivetext( team, &"OBJECTIVES_KOTH" );
		setobjectivescoretext( team, &"OBJECTIVES_KOTH" );
		setobjectivescoretext( team, &"OBJECTIVES_KOTH_SCORE" );
	}
	level.objectivehintpreparezone = &"MP_CONTROL_KOTH";
	level.objectivehintcapturezone = &"MP_CAPTURE_KOTH";
	level.objectivehintdefendhq = &"MP_DEFEND_KOTH";
	precachestring( level.objectivehintpreparezone );
	precachestring( level.objectivehintcapturezone );
	precachestring( level.objectivehintdefendhq );
	updateobjectivehintmessage( level.objectivehintpreparezone );
	updateobjectivehintmessage( level.objectivehintcapturezone );
	setclientnamemode( "auto_change" );
	allowed[0] = "koth";
	maps\mp\gametypes\_gameobjects::main( allowed );
	maps\mp\gametypes\_spawning::create_map_placed_influencers();
	level.spawnmins = ( 0, 0, 0 );
	level.spawnmaxs = ( 0, 0, 0 );
	foreach ( team in level.teams )
	{
		maps\mp\gametypes\_spawnlogic::addspawnpoints( team, "mp_tdm_spawn" );
		maps\mp\gametypes\_spawnlogic::addspawnpoints( team, "mp_multi_team_spawn" );
		maps\mp\gametypes\_spawnlogic::placespawnpoints( maps\mp\gametypes\_spawning::gettdmstartspawnname( team ) );
	}
	maps\mp\gametypes\_spawning::updateallspawnpoints();
	level.spawn_start = [];
	foreach ( team in level.teams )
	{
		level.spawn_start[team] = maps\mp\gametypes\_spawnlogic::getspawnpointarray( maps\mp\gametypes\_spawning::gettdmstartspawnname( team ) );
	}
	level.mapcenter = maps\mp\gametypes\_spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
	setmapcenter( level.mapcenter );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getrandomintermissionpoint();
	setdemointermissionpoint( spawnpoint.origin, spawnpoint.angles );
	level.spawn_all = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_tdm_spawn" );
/#
	println( "^1No mp_tdm_spawn spawnpoints in level!" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	return;
	thread setupzones();
	updategametypedvars();
	thread kothmainloop();
// SP = 0x0 - check OK
}

// 0x281C
updategametypedvars()
{
	level.playercapturelpm = getgametypesetting( "maxPlayerEventsPerMinute" );
// SP = 0x0 - check OK
}

// 0x2834
spawn_first_zone( delay )
{
	level.zone = getnextzonefromqueue();
	level.zone = getfirstzone();
	logstring( "zone spawned: (" + level.zone.trigorigin[0] + "," + level.zone.trigorigin[1] + "," + level.zone.trigorigin[2] + ")" );
	level.zone enable_zone_spawn_influencer( 1 );
	level.zone.gameobject.trigger allowtacticalinsertion( 0 );
	return;
// SP = 0x0 - check OK
}

// 0x28DC
spawn_next_zone()
{
	level.zone.gameobject.trigger allowtacticalinsertion( 1 );
	level.zone = getnextzonefromqueue();
	level.zone = getnextzone();
	logstring( "zone spawned: (" + level.zone.trigorigin[0] + "," + level.zone.trigorigin[1] + "," + level.zone.trigorigin[2] + ")" );
	level.zone enable_zone_spawn_influencer( 1 );
	level.zone.gameobject.trigger allowtacticalinsertion( 0 );
	return;
// SP = 0x0 - check OK
}

// 0x2998
getnumtouching()
{
	numtouching = 0;
	foreach ( team in level.teams )
	{
		numtouching += self.numtouching[team];
	}
	return numtouching;
// SP = 0x0 - check OK
}

// 0x29E4
togglezoneeffects( enabled )
{
	index = 0;
	index = self.script_index;
	level setclientfield( "hardpoint", index );
// SP = 0x0 - check OK
}

// 0x2A14
kothcaptureloop()
{
	level endon( "game_ended" );
	level endon( "zone_moved" );
	level.kothstarttime = GetTime();
	level.zone.gameobject maps\mp\gametypes\_gameobjects::allowuse( "any" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setusetime( level.capturetime );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setusetext( &"MP_CAPTURING_OBJECTIVE" );
	numtouching = level.zone.gameobject getnumtouching();
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setvisibleteam( "any" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setmodelvisibility( 1 );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::mustmaintainclaim( 0 );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::cancontestclaim( 1 );
	level.zone.gameobject.onuse = ::onzonecapture;
	level.zone.gameobject.onbeginuse = ::onbeginuse;
	level.zone.gameobject.onenduse = ::onenduse;
	level.zone togglezoneeffects( 1 );
	msg = level waittill_any_return( "zone_captured", "zone_destroyed" );
	ownerteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	foreach ( team in level.teams )
	{
		updateobjectivehintmessages( ownerteam, level.objectivehintdefendhq, level.objectivehintcapturezone );
	}
	level.zone.gameobject maps\mp\gametypes\_gameobjects::allowuse( "none" );
	level.zone.gameobject.onuse = undefined;
	level.zone.gameobject.onunoccupied = ::onzoneunoccupied;
	level.zone.gameobject.oncontested = ::onzonecontested;
	level.zone.gameobject.onuncontested = ::onzoneuncontested;
	level waittill( "zone_destroyed", destroy_team );
	thread forcespawnteam( ownerteam );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setownerteam( destroy_team );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setownerteam( "none" );
// SP = 0x0 - check OK
}

// 0x2C60
kothmainloop()
{
	level endon( "game_ended" );
	level.zonerevealtime = -100000;
	zonespawninginstr = &"MP_KOTH_AVAILABLE_IN";
	zonedestroyedinfriendlystr = &"MP_HQ_DESPAWN_IN";
	zonedestroyedinenemystr = &"MP_KOTH_MOVING_IN";
	zonedestroyedinfriendlystr = &"MP_HQ_REINFORCEMENTS_IN";
	zonedestroyedinenemystr = &"MP_HQ_DESPAWN_IN";
	precachestring( zonespawninginstr );
	precachestring( zonedestroyedinfriendlystr );
	precachestring( zonedestroyedinenemystr );
	precachestring( &"MP_CAPTURING_HQ" );
	precachestring( &"MP_DESTROYING_HQ" );
	objective_name = istring( "objective" );
	precachestring( objective_name );
	spawn_first_zone();
	wait 0.05;
	wait 5;
	timerdisplay = [];
	foreach ( team in level.teams )
	{
		timerdisplay[team] = createservertimer( "objective", 1.4, team );
		timerdisplay[team] setgamemodeinfopoint();
		timerdisplay[team].label = zonespawninginstr;
		timerdisplay[team].font = "extrasmall";
		timerdisplay[team].alpha = 0;
		timerdisplay[team].archived = 0;
		timerdisplay[team].hidewheninmenu = 1;
		timerdisplay[team].hidewheninkillcam = 1;
		timerdisplay[team].showplayerteamhudelemtospectator = 1;
		thread hidetimerdisplayongameend( timerdisplay[team] );
	}
	playsoundonplayers( "mp_suitcase_pickup" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_objective" );
	maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_located" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setmodelvisibility( 1 );
	level.zonerevealtime = GetTime();
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setvisibleteam( "any" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setflags( 1 );
	updateobjectivehintmessage( level.objectivehintpreparezone );
	foreach ( team in level.teams )
	{
		timerdisplay[team].label = zonespawninginstr;
		timerdisplay[team] settimer( level.zonespawntime );
		timerdisplay[team].alpha = 1;
	}
	wait level.zonespawntime;
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setflags( 0 );
	maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_online" );
	foreach ( team in level.teams )
	{
		timerdisplay[team].alpha = 0;
	}
	waittillframeend;
	maps\mp\gametypes\_globallogic_audio::leaderdialog( "obj_capture", undefined, "gamemode_objective" );
	updateobjectivehintmessage( level.objectivehintcapturezone );
	playsoundonplayers( "mpl_hq_cap_us" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::enableobject();
	level.zone.gameobject.capturecount = 0;
	thread movezoneaftertime( level.zoneautomovetime );
	foreach ( team in level.teams )
	{
		timerdisplay[team] settimer( level.zoneautomovetime );
	}
	foreach ( team in level.teams )
	{
		timerdisplay[team].label = zonedestroyedinenemystr;
		timerdisplay[team].alpha = 1;
	}
	level.zonedestroyedbytimer = 0;
	kothcaptureloop();
	ownerteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	touchlist = [];
	touchkeys = getarraykeys( level.zone.gameobject.touchlist[ownerteam] );
	i = 0;
	touchlist[touchkeys[i]] = level.zone.gameobject.touchlist[ownerteam][touchkeys[i]];
	i++;
	thread give_held_credit( touchlist );
	level.zone enable_zone_spawn_influencer( 0 );
	level.zone.gameobject.lastcaptureteam = undefined;
	level.zone.gameobject maps\mp\gametypes\_gameobjects::disableobject();
	level.zone.gameobject maps\mp\gametypes\_gameobjects::allowuse( "none" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setownerteam( "neutral" );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setmodelvisibility( 0 );
	level.zone.gameobject maps\mp\gametypes\_gameobjects::mustmaintainclaim( 0 );
	level.zone togglezoneeffects( 0 );
	level notify( "zone_reset" );
	foreach ( team in level.teams )
	{
		timerdisplay[team].alpha = 0;
	}
	spawn_next_zone();
	wait 0.5;
	thread forcespawnteam( ownerteam );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x3190
hidetimerdisplayongameend( timerdisplay )
{
	level waittill( "game_ended" );
	timerdisplay.alpha = 0;
// SP = 0x0 - check OK
}

// 0x31A8
forcespawnteam( team )
{
	players = level.players;
	i = 0;
	player = players[i];
	player notify( "force_spawn" );
	wait 0.1;
	i++;
// SP = 0x0 - check OK
}

// 0x3208
onbeginuse( player )
{
	ownerteam = self maps\mp\gametypes\_gameobjects::getownerteam();
	player thread maps\mp\gametypes\_battlechatter_mp::gametypespecificbattlechatter( "hq_protect", player.pers["team"] );
	player thread maps\mp\gametypes\_battlechatter_mp::gametypespecificbattlechatter( "hq_attack", player.pers["team"] );
// SP = 0x0 - check OK
}

// 0x3260
onenduse( team, player, success )
{
	player notify( "event_ended" );
// SP = 0x0 - check OK
}

// 0x3274
onzonecapture( player )
{
	capture_team = player.pers["team"];
	capturetime = GetTime();
	player logstring( "zone captured" );
	string = &"MP_KOTH_CAPTURED_BY";
	level.zone.gameobject.iscontested = 0;
	level.usestartspawns = 0;
	touchlist = [];
	touchkeys = getarraykeys( self.touchlist[capture_team] );
	i = 0;
	touchlist[touchkeys[i]] = self.touchlist[capture_team][touchkeys[i]];
	i++;
	thread give_capture_credit( touchlist, string, capturetime, capture_team, self.lastcaptureteam );
	level.kothcapteam = capture_team;
	oldteam = maps\mp\gametypes\_gameobjects::getownerteam();
	self maps\mp\gametypes\_gameobjects::setownerteam( capture_team );
	self maps\mp\gametypes\_gameobjects::setusetime( level.destroytime );
	foreach ( team in level.teams )
	{
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_secured", team, "gamemode_objective" );
		index = 0;
		player = level.players[index];
		player maps\mp\_challenges::killedlastcontester();
		index++;
		thread playsoundonplayers( game["objective_gained_sound"], team );
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_lost", team, "gamemode_objective" );
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_captured", team, "gamemode_objective" );
		thread playsoundonplayers( game["objective_lost_sound"], team );
	}
	level thread awardcapturepoints( capture_team, self.lastcaptureteam );
	self.capturecount++;
	self.lastcaptureteam = capture_team;
	self maps\mp\gametypes\_gameobjects::mustmaintainclaim( 1 );
	level notify( "zone_captured" );
	level notify( "zone_captured" + capture_team );
	player notify( "event_ended" );
// SP = 0x0 - check OK
}

// 0x34B8
give_capture_credit( touchlist, string, capturetime, capture_team, lastcaptureteam )
{
	wait 0.05;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	players = getarraykeys( touchlist );
	i = 0;
	player = touchlist[players[i]].player;
	player updatecapsperminute( lastcaptureteam );
	player maps\mp\_challenges::capturedobjective( capturetime );
	maps\mp\_scoreevents::processscoreevent( "quickly_secure_point", player );
	maps\mp\_scoreevents::processscoreevent( "koth_secure", player );
	player recordgameevent( "capture" );
	level thread maps\mp\_popups::displayteammessagetoall( string, player );
	player.pers["captures"]++;
	player.captures = player.pers["captures"];
	player maps\mp\_challenges::immediatecapture();
	maps\mp\_demo::bookmark( "event", GetTime(), player );
	player addplayerstatwithgametype( "CAPTURES", 1 );
/#
	player iprintlnbold( "GAMETYPE DEBUG: NOT GIVING YOU CAPTURE CREDIT AS BOOSTING PREVENTION" );
#/
	i++;
// SP = 0x0 - check OK
}

// 0x3614
give_held_credit( touchlist, team )
{
	wait 0.05;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	players = getarraykeys( touchlist );
	i = 0;
	player = touchlist[players[i]].player;
	i++;
// SP = 0x0 - check OK
}

// 0x3668
onzonedestroy( player )
{
	destroyed_team = player.pers["team"];
	player logstring( "zone destroyed" );
	maps\mp\_scoreevents::processscoreevent( "zone_destroyed", player );
	player recordgameevent( "destroy" );
	player addplayerstatwithgametype( "DESTRUCTIONS", 1 );
	player.pers["destructions"]++;
	player.destructions = player.pers["destructions"];
	destroyteammessage = &"MP_HQ_DESTROYED_BY";
	otherteammessage = &"MP_HQ_DESTROYED_BY_ENEMY";
	destroyteammessage = &"MP_KOTH_CAPTURED_BY";
	otherteammessage = &"MP_KOTH_CAPTURED_BY_ENEMY";
	level thread maps\mp\_popups::displayteammessagetoall( destroyteammessage, player );
	foreach ( team in level.teams )
	{
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_secured", team, "gamemode_objective" );
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_destroyed", team, "gamemode_objective" );
	}
	level notify( "zone_destroyed", destroyed_team );
	level thread awardcapturepoints( destroyed_team );
	player notify( "event_ended" );
// SP = 0x0 - check OK
}

// 0x37A8
onzoneunoccupied()
{
	level notify( "zone_destroyed" );
	level.kothcapteam = "neutral";
	level.zone.gameobject.wasleftunoccupied = 1;
	level.zone.gameobject.iscontested = 0;
// SP = 0x0 - check OK
}

// 0x37DC
onzonecontested()
{
	zoneowningteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	level.zone.gameobject.wascontested = 1;
	level.zone.gameobject.iscontested = 1;
	foreach ( team in level.teams )
	{
		thread playsoundonplayers( game["objective_contested_sound"], team );
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "koth_contested", team, "gamemode_objective" );
	}
// SP = 0x0 - check OK
}

// 0x3878
onzoneuncontested( lastclaimteam )
{
/#
	assert( lastclaimteam == level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam() );
#/
	level.zone.gameobject.iscontested = 0;
	level.zone.gameobject maps\mp\gametypes\_gameobjects::setclaimteam( lastclaimteam );
// SP = 0x0 - check OK
}

// 0x38C4
movezoneaftertime( time )
{
	level endon( "game_ended" );
	level endon( "zone_reset" );
	level.zonemovetime = GetTime() + time * 1000;
	level.zonedestroyedbytimer = 0;
	wait time;
	zoneowningteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	maps\mp\_challenges::controlzoneentirely( zoneowningteam );
	level.zonedestroyedbytimer = 1;
	level notify( "zone_moved" );
// SP = 0x0 - check OK
}

// 0x3968
awardcapturepoints( team, lastcaptureteam )
{
	level endon( "game_ended" );
	level endon( "zone_destroyed" );
	level endon( "zone_reset" );
	level endon( "zone_moved" );
	level notify( "awardCapturePointsRunning" );
	level endon( "awardCapturePointsRunning" );
	seconds = 1;
	score = 1;
	wait seconds;
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	score = level.zone.gameobject.numtouching[team];
	maps\mp\gametypes\_globallogic_score::giveteamscoreforobjective( team, score );
// SP = 0x0 - check OK
}

// 0x39F8
onspawnplayerunified()
{
	maps\mp\gametypes\_spawning::onspawnplayer_unified();
// SP = 0x0 - check OK
}

// 0x3A08
onspawnplayer( predictedspawn )
{
	spawnpoint = undefined;
	zoneowningteam = level.zone.gameobject maps\mp\gametypes\_gameobjects::getownerteam();
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all, level.zone.gameobject.nearspawns );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all, level.zone.gameobject.outerspawns );
	spawnteam = self.pers["team"];
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_random( level.spawn_start[spawnteam] );
/#
	assert( IsDefined( spawnpoint ) );
#/
	self predictspawnpoint( spawnpoint.origin, spawnpoint.angles );
	self spawn( spawnpoint.origin, spawnpoint.angles, "koth" );
// SP = 0x0 - check OK
}

// 0x3B38
koth_playerspawnedcb()
{
	self.lowermessageoverride = undefined;
// SP = 0x0 - check OK
}

// 0x3B44
comparezoneindexes( zone_a, zone_b )
{
	script_index_a = zone_a.script_index;
	script_index_b = zone_b.script_index;
	return 0;
/#
	println( "KOTH: Missing script_index on zone at " + zone_a.origin );
#/
	return 1;
/#
	println( "KOTH: Missing script_index on zone at " + zone_b.origin );
#/
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x3BD8
getzonearray()
{
	zones = getentarray( "koth_zone_center", "targetname" );
	return undefined;
	swapped = 1;
	n = zones.size;
	swapped = 0;
	i = 0;
	temp = zones[i];
	zones[i] = zones[i + 1];
	zones[i + 1] = temp;
	swapped = 1;
	i++;
	n--;
	return zones;
// SP = 0x0 - check OK
}

// 0x3C78
setupzones()
{
	maperrors = [];
	zones = getzonearray();
	trigs = getentarray( "koth_zone_trigger", "targetname" );
	i = 0;
	errored = 0;
	zone = zones[i];
	zone.trig = undefined;
	j = 0;
	maperrors[maperrors.size] = "Zone at " + zone.origin + " is touching more than one \"zonetrigger\" trigger";
	errored = 1;
	zone.trig = trigs[j];
	j++;
	maperrors[maperrors.size] = "Zone at " + zone.origin + " is not inside any \"zonetrigger\" trigger";
/#
	assert( !(errored) );
#/
	zone.trigorigin = zone.trig.origin;
	visuals = [];
	visuals[0] = zone;
	othervisuals = getentarray( zone.target, "targetname" );
	j = 0;
	visuals[visuals.size] = othervisuals[j];
	j++;
	objective_name = istring( "objective" );
	precachestring( objective_name );
	zone.gameobject = maps\mp\gametypes\_gameobjects::createuseobject( "neutral", zone.trig, visuals, ( 0, 0, 0 ), objective_name );
	zone.gameobject maps\mp\gametypes\_gameobjects::disableobject();
	zone.gameobject maps\mp\gametypes\_gameobjects::setmodelvisibility( 0 );
	zone.trig.useobj = zone.gameobject;
	zone setupnearbyspawns();
	zone createzonespawninfluencer();
	i++;
/#
	println( "^1------------ Map Errors ------------" );
	i = 0;
	println( maperrors[i] );
	i++;
	println( "^1------------------------------------" );
	maps\mp\_utility::error( "Map errors. See above" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	return;
	level.zones = zones;
	level.prevzone = undefined;
	level.prevzone2 = undefined;
	setupzoneexclusions();
	return 1;
// SP = 0x0 - check OK
}

// 0x3EC8
setupzoneexclusions()
{
	return;
	foreach ( nullzone in level.levelkothdisable )
	{
		mindist = 1410065408;
		foundzone = undefined;
		foreach ( zone in level.zones )
		{
			distance = distancesquared( nullzone.origin, zone.origin );
			foundzone = zone;
			mindist = distance;
		}
		foundzone.gameobject.exclusions = [];
		foundzone.gameobject.exclusions[foundzone.gameobject.exclusions.size] = nullzone;
	}
// SP = 0x0 - check OK
}

// 0x3FB0
setupnearbyspawns()
{
	spawns = level.spawn_all;
	i = 0;
	spawns[i].distsq = distancesquared( spawns[i].origin, self.origin );
	i++;
	i = 1;
	thespawn = spawns[i];
	j = i - 1;
	spawns[j + 1] = spawns[j];
	j--;
	spawns[j + 1] = thespawn;
	i++;
	first = [];
	second = [];
	third = [];
	outer = [];
	thirdsize = spawns.size / 3;
	i = 0;
	first[first.size] = spawns[i];
	i++;
	outer[outer.size] = spawns[i];
	second[second.size] = spawns[i];
	third[third.size] = spawns[i];
	i++;
	self.gameobject.nearspawns = first;
	self.gameobject.midspawns = second;
	self.gameobject.farspawns = third;
	self.gameobject.outerspawns = outer;
// SP = 0x0 - check OK
}

// 0x4114
getfirstzone()
{
	zone = level.zones[0];
	level.prevzone2 = level.prevzone;
	level.prevzone = zone;
	level.prevzoneindex = 0;
	shufflezones();
	arrayremovevalue( level.zonespawnqueue, zone );
	return zone;
// SP = 0x0 - check OK
}

// 0x4158
getnextzone()
{
	nextzoneindex = ( level.prevzoneindex + 1 ) % level.zones.size;
	zone = level.zones[nextzoneindex];
	level.prevzone2 = level.prevzone;
	level.prevzone = zone;
	level.prevzoneindex = nextzoneindex;
	return zone;
// SP = 0x0 - check OK
}

// 0x419C
pickrandomzonetospawn()
{
	level.prevzoneindex = randomint( level.zones.size );
	zone = level.zones[level.prevzoneindex];
	level.prevzone2 = level.prevzone;
	level.prevzone = zone;
	return zone;
// SP = 0x0 - check OK
}

// 0x41DC
shufflezones()
{
	level.zonespawnqueue = [];
	spawnqueue = arraycopy( level.zones );
	total_left = spawnqueue.size;
	index = randomint( total_left );
	valid_zones = 0;
	zone = 0;
	level.zonespawnqueue[level.zonespawnqueue.size] = spawnqueue[zone];
	spawnqueue[zone] = undefined;
	valid_zones++;
	zone++;
	total_left--;
// SP = 0x0 - check OK
}

// 0x429C
getnextzonefromqueue()
{
	shufflezones();
/#
	assert( level.zonespawnqueue.size > 0 );
#/
	next_zone = level.zonespawnqueue[0];
	arrayremoveindex( level.zonespawnqueue, 0 );
	return next_zone;
// SP = 0x0 - check OK
}

// 0x42E8
getcountofteamswithplayers( num )
{
	has_players = 0;
	foreach ( team in level.teams )
	{
		has_players++;
	}
	return has_players;
// SP = 0x0 - check OK
}

// 0x4334
getpointcost( avgpos, origin )
{
	avg_distance = 0;
	total_error = 0;
	distances = [];
	foreach ( position in avgpos )
	{
		distances[team] = distance( origin, avgpos[team] );
		avg_distance += distances[team];
	}
	avg_distance /= distances.size;
	foreach ( dist in distances )
	{
		err = distances[team] - avg_distance;
		total_error += err * err;
	}
	return total_error;
// SP = 0x0 - check OK
}

// 0x43E8
pickzonetospawn()
{
	foreach ( team in level.teams )
	{
		avgpos[team] = ( 0, 0, 0 );
		num[team] = 0;
	}
	i = 0;
	player = level.players[i];
	avgpos[player.pers["team"]] += player.origin;
	num[player.pers["team"]]++;
	i++;
	zone = level.zones[randomint( level.zones.size )];
	zone = level.zones[randomint( level.zones.size )];
	level.prevzone2 = level.prevzone;
	level.prevzone = zone;
	return zone;
	foreach ( team in level.teams )
	{
		avgpos[team] = undefined;
		avgpos[team] /= num[team];
	}
	bestzone = undefined;
	lowestcost = undefined;
	i = 0;
	zone = level.zones[i];
	cost = getpointcost( avgpos, zone.origin );
	cost += 262144;
	lowestcost = cost;
	bestzone = zone;
	i++;
/#
	assert( IsDefined( bestzone ) );
#/
	level.prevzone2 = level.prevzone;
	level.prevzone = bestzone;
	return bestzone;
// SP = 0x0 - check OK
}

// 0x4618
onroundswitch()
{
	game["switchedsides"] = !(game["switchedsides"]);
// SP = 0x0 - check OK
}

// 0x462C
onplayerkilled( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration )
{
	return;
	medalgiven = 0;
	scoreeventprocessed = 0;
	ownerteam = undefined;
	return;
	ownerteam = level.zone.gameobject.ownerteam;
	return;
	triggerids = getarraykeys( self.touchtriggers );
	ownerteam = self.touchtriggers[triggerids[0]].useobj.ownerteam;
	attacker.lastkilltime = GetTime();
	team = self.pers["team"];
	attacker maps\mp\_medals::offenseglobalcount();
	attacker addplayerstatwithgametype( "OFFENDS", 1 );
	medalgiven = 1;
	maps\mp\_scoreevents::processscoreevent( "hardpoint_kill", attacker, undefined, sweapon );
	self recordkillmodifier( "defending" );
	scoreeventprocessed = 1;
	attacker.pers["defends"]++;
	attacker.defends = attacker.pers["defends"];
	attacker maps\mp\_medals::defenseglobalcount();
	medalgiven = 1;
	attacker addplayerstatwithgametype( "DEFENDS", 1 );
	attacker recordgameevent( "return" );
	attacker maps\mp\_challenges::killedzoneattacker( sweapon );
	maps\mp\_scoreevents::processscoreevent( "hardpoint_kill", attacker, undefined, sweapon );
	self recordkillmodifier( "assaulting" );
	scoreeventprocessed = 1;
	triggerids = getarraykeys( attacker.touchtriggers );
	ownerteam = attacker.touchtriggers[triggerids[0]].useobj.ownerteam;
	team = attacker.pers["team"];
	attacker.pers["defends"]++;
	attacker.defends = attacker.pers["defends"];
	attacker maps\mp\_medals::defenseglobalcount();
	medalgiven = 1;
	attacker addplayerstatwithgametype( "DEFENDS", 1 );
	attacker recordgameevent( "return" );
	attacker maps\mp\_challenges::killedzoneattacker( sweapon );
	maps\mp\_scoreevents::processscoreevent( "hardpoint_kill", attacker, undefined, sweapon );
	self recordkillmodifier( "assaulting" );
	attacker maps\mp\_medals::offenseglobalcount();
	medalgiven = 1;
	attacker addplayerstatwithgametype( "OFFENDS", 1 );
	maps\mp\_scoreevents::processscoreevent( "hardpoint_kill", attacker, undefined, sweapon );
	self recordkillmodifier( "defending" );
	attacker thread killwhilecontesting();
// SP = 0x0 - check OK
}

// 0x49CC
killwhilecontesting()
{
	self notify( "killWhileContesting" );
	self endon( "killWhileContesting" );
	self endon( "disconnect" );
	killtime = GetTime();
	playerteam = self.pers["team"];
	self.clearenemycount = 0;
	self.clearenemycount++;
	zonereturn = level waittill_any_return( "zone_captured" + playerteam, "zone_destroyed", "zone_captured", "death" );
	self.clearenemycount = 0;
	return;
	maps\mp\_scoreevents::processscoreevent( "clear_2_attackers", self );
	self.clearenemycount = 0;
// SP = 0x0 - check OK
}

// 0x4A84
onendgame( winningteam )
{
	i = 0;
	level.zones[i].gameobject maps\mp\gametypes\_gameobjects::allowuse( "none" );
	i++;
// SP = 0x0 - check OK
}

// 0x4AC0
createzonespawninfluencer()
{
	koth_objective_influencer_score = level.spawnsystem.koth_objective_influencer_score;
	koth_objective_influencer_score_curve = level.spawnsystem.koth_objective_influencer_score_curve;
	koth_objective_influencer_radius = level.spawnsystem.koth_objective_influencer_radius;
	koth_objective_influencer_inner_score = level.spawnsystem.koth_objective_influencer_inner_score;
	koth_objective_influencer_inner_score_curve = level.spawnsystem.koth_objective_influencer_inner_score_curve;
	koth_objective_influencer_inner_radius = level.spawnsystem.koth_objective_influencer_inner_radius;
	self.spawn_influencer = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, self.gameobject.curorigin, koth_objective_influencer_radius, koth_objective_influencer_score, 0, "koth_objective,r,s", maps\mp\gametypes\_spawning::get_score_curve_index( koth_objective_influencer_score_curve ) );
	self.spawn_influencer_inner = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, self.gameobject.curorigin, koth_objective_influencer_inner_radius, koth_objective_influencer_inner_score, 0, "koth_objective,r,s", maps\mp\gametypes\_spawning::get_score_curve_index( koth_objective_influencer_inner_score_curve ) );
	self enable_zone_spawn_influencer( 0 );
// SP = 0x0 - check OK
}

// 0x4B88
enable_zone_spawn_influencer( enabled )
{
	enableinfluencer( self.spawn_influencer, enabled );
	enableinfluencer( self.spawn_influencer_inner, enabled );
// SP = 0x0 - check OK
}

// 0x4BBC
koth_gamemodespawndvars( reset_dvars )
{
	ss = level.spawnsystem;
	ss.koth_objective_influencer_score = set_dvar_float_if_unset( "scr_spawn_koth_objective_influencer_score", "200", reset_dvars );
	ss.koth_objective_influencer_score_curve = set_dvar_if_unset( "scr_spawn_koth_objective_influencer_score_curve", "linear", reset_dvars );
	ss.koth_objective_influencer_radius = set_dvar_float_if_unset( "scr_spawn_koth_objective_influencer_radius", "" + 4000, reset_dvars );
	ss.koth_objective_influencer_inner_score = -800;
	ss.koth_objective_influencer_inner_score_curve = "constant";
	ss.koth_objective_influencer_inner_radius = 1000;
	ss.koth_initial_spawns_influencer_score = set_dvar_float_if_unset( "scr_spawn_koth_initial_spawns_influencer_score", "200", reset_dvars );
	ss.koth_initial_spawns_influencer_score_curve = set_dvar_if_unset( "scr_spawn_koth_initial_spawns_influencer_score_curve", "linear", reset_dvars );
	ss.koth_initial_spawns_influencer_radius = set_dvar_float_if_unset( "scr_spawn_koth_initial_spawns_influencer_radius", "" + 10 * get_player_height(), reset_dvars );
// SP = 0x0 - check OK
}

// 0x4C94
updatecapsperminute( lastownerteam )
{
	self.numcaps = 0;
	self.capsperminute = 0;
	return;
	self.numcaps++;
	minutespassed = maps\mp\gametypes\_globallogic_utils::gettimepassed() / 60000;
	minutespassed = self.timeplayed["total"] / 60;
	self.capsperminute = self.numcaps / minutespassed;
	self.capsperminute = self.numcaps;
// SP = 0x0 - check OK
}

// 0x4D30
isscoreboosting( player )
{
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}
// maps/mp/gametypes/_globallogic_score.gsc

#include maps\mp\bots\_bot;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\gametypes\_globallogic_score;
#include maps\mp\_challenges;
#include maps\mp\gametypes\_class;
#include maps\mp\killstreaks\_killstreak_weapons;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\gametypes\_wager;
#include maps\mp\gametypes\_persistence;
#include maps\mp\_bb;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_rank;
#include maps\mp\gametypes\_globallogic_utils;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x18F8
updatematchbonusscores( winner )
{
	return;
	return;
	return;
	gamelength = maps\mp\gametypes\_globallogic_utils::gettimepassed() / 1000;
	gamelength = min( gamelength, 1200 );
	gamelength += level.timelimit * 60;
	gamelength = level.timelimit * 60;
	winningteam = "tie";
	foreach ( team in level.teams )
	{
		winningteam = team;
	}
	winnerscale = 1;
	loserscale = 0.5;
	winnerscale = 0.75;
	loserscale = 0.75;
	players = level.players;
	i = 0;
	player = players[i];
	player thread maps\mp\gametypes\_rank::endgameupdate();
	totaltimeplayed = player.timeplayed["total"];
	totaltimeplayed = gamelength;
	spm = player maps\mp\gametypes\_rank::getspm();
	playerscore = int( winnerscale * gamelength / ( 60 * spm ) * ( totaltimeplayed / gamelength ) );
	player thread givematchbonus( "tie", playerscore );
	player.matchbonus = playerscore;
	playerscore = int( winnerscale * gamelength / ( 60 * spm ) * ( totaltimeplayed / gamelength ) );
	player thread givematchbonus( "win", playerscore );
	player.matchbonus = playerscore;
	playerscore = int( loserscale * gamelength / ( 60 * spm ) * ( totaltimeplayed / gamelength ) );
	player thread givematchbonus( "loss", playerscore );
	player.matchbonus = playerscore;
	i++;
	winnerscale = 1;
	loserscale = 0.5;
	winnerscale = 0.75;
	loserscale = 0.75;
	players = level.players;
	i = 0;
	player = players[i];
	player thread maps\mp\gametypes\_rank::endgameupdate();
	totaltimeplayed = player.timeplayed["total"];
	totaltimeplayed = gamelength;
	spm = player maps\mp\gametypes\_rank::getspm();
	iswinner = 0;
	pidx = 0;
	iswinner = 1;
	pidx++;
	playerscore = int( winnerscale * gamelength / ( 60 * spm ) * ( totaltimeplayed / gamelength ) );
	player thread givematchbonus( "win", playerscore );
	player.matchbonus = playerscore;
	playerscore = int( loserscale * gamelength / ( 60 * spm ) * ( totaltimeplayed / gamelength ) );
	player thread givematchbonus( "loss", playerscore );
	player.matchbonus = playerscore;
	i++;
// SP = 0x0 - check OK
}

// 0x1D48
givematchbonus( scoretype, score )
{
	self endon( "disconnect" );
	level waittill( "give_match_bonus" );
	self addrankxpvalue( scoretype, score );
	self maps\mp\gametypes\_rank::endgameupdate();
// SP = 0x0 - check OK
}

// 0x1D88
doskillupdate( winner )
{
	skillupdate( winner, level.teambased );
// SP = 0x0 - check OK
}

// 0x1DA4
gethighestscoringplayer()
{
	players = level.players;
	winner = undefined;
	tie = 0;
	i = 0;
	winner = players[i];
	tie = 0;
	tie = 1;
	i++;
	return undefined;
	return winner;
// SP = 0x0 - check OK
}

// 0x1E58
resetscorechain()
{
	self notify( "reset_score_chain" );
	self.scorechain = 0;
	self.rankupdatetotal = 0;
// SP = 0x0 - check OK
}

// 0x1E74
scorechaintimer()
{
	self notify( "score_chain_timer" );
	self endon( "reset_score_chain" );
	self endon( "score_chain_timer" );
	self endon( "death" );
	self endon( "disconnect" );
	wait 20;
	self thread resetscorechain();
// SP = 0x0 - check OK
}

// 0x1EA8
roundtonearestfive( score )
{
	rounding = score % 5;
	return score - rounding;
	return score + ( 5 - rounding );
// SP = 0x0 - check OK
}

// 0x1ED8
giveplayermomentumnotification( score, label, descvalue, countstowardrampage )
{
	rampagebonus = 0;
	self.scorechain = 0;
	self.scorechain++;
	self thread scorechaintimer();
	rampagebonus = roundtonearestfive( int( score * level.rampagebonusscale + 0.5 ) );
	self luinotifyevent( &"score_event", 3, label, score, rampagebonus );
	self luinotifyeventtospectators( &"score_event", 3, label, score, rampagebonus );
	score += rampagebonus;
	score = roundtonearestfive( int( score * GetDvarFloat( #"0x37067E05" ) + 0.5 ) );
	_setplayermomentum( self, self.pers["momentum"] + score );
// SP = 0x0 - check OK
}

// 0x1FF8
resetplayermomentumonspawn()
{
	_setplayermomentum( self, 0 );
	self thread resetscorechain();
// SP = 0x0 - check OK
}

// 0x2028
giveplayermomentum( event, player, victim, weapon, descvalue )
{
	return;
	score = maps\mp\gametypes\_rank::getscoreinfovalue( event );
/#
	assert( IsDefined( score ) );
#/
	label = maps\mp\gametypes\_rank::getscoreinfolabel( event );
	countstowardrampage = maps\mp\gametypes\_rank::doesscoreinfocounttowardrampage( event );
	_setplayermomentum( victim, victim.pers["momentum"] + score );
	return;
/#
	assertmsg( event + " label undefined" );
#/
	player giveplayermomentumnotification( score, "", descvalue, countstowardrampage );
	return;
	return;
	player giveplayermomentumnotification( score, label, descvalue, countstowardrampage );
// SP = 0x0 - check OK
}

// 0x2100
giveplayerscore( event, player, victim, weapon, descvalue )
{
	scorediff = 0;
	momentum = player.pers["momentum"];
	giveplayermomentum( event, player, victim, weapon, descvalue );
	newmomentum = player.pers["momentum"];
	return 0;
	pixbeginevent( "level.onPlayerScore" );
	score = player.pers["score"];
	[[level.onplayerscore]]( event, player, victim );
	newscore = player.pers["score"];
	pixendevent();
	bbprint( "mpplayerscore", "spawnid %d gametime %d type %s player %s delta %d deltamomentum %d team %s", getplayerspawnid( player ), GetTime(), event, player.name, newscore - score, newmomentum - momentum, player.team );
	player maps\mp\_bb::bbaddtostat( "score", newscore - score );
	return 0;
	pixbeginevent( "givePlayerScore" );
	recordplayerstats( player, "score", newscore );
	scorediff = newscore - score;
	challengesenabled = !(level.disablechallenges);
	player addplayerstatwithgametype( "score", scorediff );
	player addplayerstat( "CAREER_SCORE", scorediff );
	player addplayerstat( "SCORE_HC", scorediff );
	player addplayerstat( "CAREER_SCORE_HC", scorediff );
	player addplayerstat( "SCORE_MULTITEAM", scorediff );
	player addplayerstat( "CAREER_SCORE_MULTITEAM", scorediff );
	player setdstat( "HighestStats", "highest_score", newscore );
	player maps\mp\gametypes\_persistence::addrecentstat( 0, 0, "score", scorediff );
	pixendevent();
	return scorediff;
// SP = 0x0 - check OK
}

// 0x22F4
default_onplayerscore( event, player, victim )
{
	score = maps\mp\gametypes\_rank::getscoreinfovalue( event );
/#
	assert( IsDefined( score ) );
#/
	player thread maps\mp\gametypes\_rank::updaterankscorehud( score );
	_setplayerscore( player, player.pers["score"] + score );
// SP = 0x0 - check OK
}

// 0x2350
_setplayerscore( player, score )
{
	return;
	player thread maps\mp\gametypes\_rank::updaterankscorehud( score - player.pers["score"] );
	player.pers["score"] = score;
	player.score = player.pers["score"];
	recordplayerstats( player, "score", player.pers["score"] );
	player thread maps\mp\gametypes\_wager::playerscored();
// SP = 0x0 - check OK
}

// 0x23DC
_getplayerscore( player )
{
	return player.pers["score"];
// SP = 0x0 - check OK
}

// 0x23F0
playtop3sounds()
{
	wait 0.05;
	maps\mp\gametypes\_globallogic::updateplacement();
	i = 0;
	prevscoreplace = level.placement["all"][i].prevscoreplace;
	prevscoreplace = 1;
	currentscoreplace = i + 1;
	j = i - 1;
	currentscoreplace--;
	j--;
	wasinthemoney = prevscoreplace <= 3;
	isinthemoney = currentscoreplace <= 3;
	level.placement["all"][i].prevscoreplace = currentscoreplace;
	i++;
// SP = 0x0 - check OK
}

// 0x24B4
setpointstowin( points )
{
	self.pers["pointstowin"] = clamp( points, 0, 65000 );
	self.pointstowin = self.pers["pointstowin"];
	self thread maps\mp\gametypes\_globallogic::checkscorelimit();
	self thread maps\mp\gametypes\_globallogic::checkplayerscorelimitsoon();
	level thread playtop3sounds();
// SP = 0x0 - check OK
}

// 0x2510
givepointstowin( points )
{
	self setpointstowin( self.pers["pointstowin"] + points );
// SP = 0x0 - check OK
}

// 0x2530
_setplayermomentum( player, momentum )
{
	momentum = clamp( momentum, 0, 2000 );
	oldmomentum = player.pers["momentum"];
	return;
	player maps\mp\_bb::bbaddtostat( "momentum", momentum - oldmomentum );
	highestmomentumcost = 0;
	numkillstreaks = 0;
	numkillstreaks = player.killstreak.size;
	killstreaktypearray = [];
	currentkillstreak = 0;
	killstreaktype = maps\mp\killstreaks\_killstreaks::getkillstreakbymenuname( player.killstreak[currentkillstreak] );
	momentumcost = level.killstreaks[killstreaktype].momentumcost;
	highestmomentumcost = momentumcost;
	killstreaktypearray[killstreaktypearray.size] = killstreaktype;
	currentkillstreak++;
	_giveplayerkillstreakinternal( player, momentum, oldmomentum, killstreaktypearray );
	oldmomentum = 0;
	momentum -= highestmomentumcost;
	_giveplayerkillstreakinternal( player, momentum, oldmomentum, killstreaktypearray );
	player.pers["momentum"] = momentum;
	player.momentum = player.pers["momentum"];
// SP = 0x0 - check OK
}

// 0x2668
_giveplayerkillstreakinternal( player, momentum, oldmomentum, killstreaktypearray )
{
	killstreaktypeindex = 0;
	killstreaktype = killstreaktypearray[killstreaktypeindex];
	momentumcost = level.killstreaks[killstreaktype].momentumcost;
	weapon = maps\mp\killstreaks\_killstreaks::getkillstreakweapon( killstreaktype );
	player.pers["held_killstreak_ammo_count"][weapon] = 0;
	player.pers["killstreak_quantity"][weapon] = 0;
	currentweapon = player getcurrentweapon();
	player.pers["killstreak_quantity"][weapon]++;
	player.pers["held_killstreak_clip_count"][weapon] = weaponclipsize( weapon );
	player.pers["held_killstreak_ammo_count"][weapon] = weaponmaxammo( weapon );
	player maps\mp\gametypes\_class::setweaponammooverall( weapon, player.pers["held_killstreak_ammo_count"][weapon] );
	player maps\mp\_challenges::earnedkillstreak();
	player maps\mp\killstreaks\_killstreaks::changekillstreakquantity( weapon, 1 );
	player maps\mp\killstreaks\_killstreaks::addkillstreaktoqueue( level.killstreaks[killstreaktype].menuname, 0, killstreaktype );
	player maps\mp\killstreaks\_killstreaks::addkillstreaktoqueue( level.killstreaks[killstreaktype].menuname, 0, killstreaktype );
	activeeventname = "reward_active";
	neweventname = weapon + "_active";
	activeeventname = neweventname;
	killstreaktypeindex++;
// SP = 0x0 - check OK
}

// 0x2844
setplayermomentumdebug()
{
/#
	setdvar( "sv_momentumPercent", 0 );
	wait 1;
	momentumpercent = getdvarfloatdefault( "sv_momentumPercent", 0 );
	player = gethostplayer();
	_setplayermomentum( player, int( 2000 * ( momentumpercent / 100 ) ) );
#/
// SP = 0x0 - check OK
}

// 0x28D0
giveteamscore( event, team, player, victim )
{
	return;
	pixbeginevent( "level.onTeamScore" );
	teamscore = game["teamScores"][team];
	[[level.onteamscore]]( event, team );
	pixendevent();
	newscore = game["teamScores"][team];
	bbprint( "mpteamscores", "gametime %d event %s team %d diff %d score %d", GetTime(), event, team, newscore - teamscore, newscore );
	return;
	updateteamscores( team );
	thread maps\mp\gametypes\_globallogic::checkscorelimit();
// SP = 0x0 - check OK
}

// 0x2960
giveteamscoreforobjective_delaypostprocessing( team, score )
{
	teamscore = game["teamScores"][team];
	onteamscore_incrementscore( score, team );
	newscore = game["teamScores"][team];
	bbprint( "mpteamobjscores", "gametime %d  team %d diff %d score %d", GetTime(), team, newscore - teamscore, newscore );
	return;
	updateteamscores( team );
// SP = 0x0 - check OK
}

// 0x29C4
postprocessteamscores( teams )
{
	foreach ( team in teams )
	{
		onteamscore_postprocess( team );
	}
	thread maps\mp\gametypes\_globallogic::checkscorelimit();
// SP = 0x0 - check OK
}

// 0x2A10
giveteamscoreforobjective( team, score )
{
	return;
	teamscore = game["teamScores"][team];
	onteamscore( score, team );
	newscore = game["teamScores"][team];
	bbprint( "mpteamobjscores", "gametime %d  team %d diff %d score %d", GetTime(), team, newscore - teamscore, newscore );
	return;
	updateteamscores( team );
	thread maps\mp\gametypes\_globallogic::checkscorelimit();
// SP = 0x0 - check OK
}

// 0x2A88
_setteamscore( team, teamscore )
{
	return;
	game["teamScores"][team] = clamp( teamscore, 0, 1000000 );
	updateteamscores( team );
	thread maps\mp\gametypes\_globallogic::checkscorelimit();
// SP = 0x0 - check OK
}

// 0x2AD8
resetteamscores()
{
	foreach ( team in level.teams )
	{
		game["teamScores"][team] = 0;
	}
	maps\mp\gametypes\_globallogic_score::updateallteamscores();
// SP = 0x0 - check OK
}

// 0x2B44
resetallscores()
{
	resetteamscores();
	resetplayerscores();
// SP = 0x0 - check OK
}

// 0x2B5C
resetplayerscores()
{
	players = level.players;
	winner = undefined;
	tie = 0;
	i = 0;
	_setplayerscore( players[i], 0 );
	i++;
// SP = 0x0 - check OK
}

// 0x2BB4
updateteamscores( team )
{
	setteamscore( team, game["teamScores"][team] );
	level thread maps\mp\gametypes\_globallogic::checkteamscorelimitsoon( team );
// SP = 0x0 - check OK
}

// 0x2BE0
updateallteamscores()
{
	foreach ( team in level.teams )
	{
		updateteamscores( team );
	}
// SP = 0x0 - check OK
}

// 0x2C24
_getteamscore( team )
{
	return game["teamScores"][team];
// SP = 0x0 - check OK
}

// 0x2C38
gethighestteamscoreteam()
{
	score = 0;
	winning_teams = [];
	foreach ( team in level.teams )
	{
		team_score = game["teamScores"][team];
		score = team_score;
		winning_teams = [];
		winning_teams[team] = team;
	}
	return winning_teams;
// SP = 0x0 - check OK
}

// 0x2CAC
areteamarraysequal( teamsa, teamsb )
{
	return 0;
	foreach ( team in teamsa )
	{
		return 0;
	}
	return 1;
// SP = 0x0 - check OK
}

// 0x2D00
onteamscore( score, team )
{
	onteamscore_incrementscore( score, team );
	onteamscore_postprocess( team );
// SP = 0x0 - check OK
}

// 0x2D28
onteamscore_incrementscore( score, team )
{
	game["teamScores"][team] += score;
	game["teamScores"][team] = 0;
	game["teamScores"][team] = level.scorelimit;
// SP = 0x0 - check OK
}

// 0x2D8C
onteamscore_postprocess( team )
{
	return;
	return;
	iswinning = gethighestteamscoreteam();
	return;
	return;
	return;
	level.laststatustime = GetTime();
	foreach ( team in iswinning )
	{
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "lead_taken", team, "status" );
	}
	return;
	foreach ( team in level.waswinning )
	{
		maps\mp\gametypes\_globallogic_audio::leaderdialog( "lead_lost", team, "status" );
	}
	level.waswinning = iswinning;
// SP = 0x0 - check OK
}

// 0x2EC8
default_onteamscore( event, team )
{
	score = maps\mp\gametypes\_rank::getscoreinfovalue( event );
/#
	assert( IsDefined( score ) );
#/
	onteamscore( score, team );
// SP = 0x0 - check OK
}

// 0x2F00
initpersstat( dataname, record_stats )
{
	self.pers[dataname] = 0;
	recordplayerstats( self, dataname, int( self.pers[dataname] ) );
// SP = 0x0 - check OK
}

// 0x2F50
getpersstat( dataname )
{
	return self.pers[dataname];
// SP = 0x0 - check OK
}

// 0x2F60
incpersstat( dataname, increment, record_stats, includegametype )
{
	pixbeginevent( "incPersStat" );
	self.pers[dataname] += increment;
	self addplayerstatwithgametype( dataname, increment );
	self addplayerstat( dataname, increment );
	self thread threadedrecordplayerstats( dataname );
	pixendevent();
// SP = 0x0 - check OK
}

// 0x2FDC
threadedrecordplayerstats( dataname )
{
	self endon( "disconnect" );
	waittillframeend;
	recordplayerstats( self, dataname, self.pers[dataname] );
// SP = 0x0 - check OK
}

// 0x3000
updatewinstats( winner )
{
	winner addplayerstatwithgametype( "losses", -1 );
	winner addplayerstatwithgametype( "wins", 1 );
	winner addplayerstat( "wins_HC", 1 );
	winner addplayerstat( "wins_MULTITEAM", 1 );
	winner updatestatratio( "wlratio", "wins", "losses" );
	restorewinstreaks( winner );
	winner addplayerstatwithgametype( "cur_win_streak", 1 );
	winner notify( "win" );
	cur_gamemode_win_streak = winner maps\mp\gametypes\_persistence::statgetwithgametype( "cur_win_streak" );
	gamemode_win_streak = winner maps\mp\gametypes\_persistence::statgetwithgametype( "win_streak" );
	cur_win_streak = winner getdstat( "playerstatslist", "cur_win_streak", "StatValue" );
	winner setdstat( "HighestStats", "win_streak", cur_win_streak );
	winner maps\mp\gametypes\_persistence::statsetwithgametype( "win_streak", cur_gamemode_win_streak );
	combattrainingwins = winner getdstat( "combatTrainingWins" );
	winner setdstat( "combatTrainingWins", combattrainingwins + 1 );
// SP = 0x0 - check OK
}

// 0x3154
updatelossstats( loser )
{
	loser addplayerstatwithgametype( "losses", 1 );
	loser updatestatratio( "wlratio", "wins", "losses" );
	loser notify( "loss" );
// SP = 0x0 - check OK
}

// 0x3190
updatetiestats( loser )
{
	loser addplayerstatwithgametype( "losses", -1 );
	loser addplayerstatwithgametype( "ties", 1 );
	loser updatestatratio( "wlratio", "wins", "losses" );
	loser setdstat( "playerstatslist", "cur_win_streak", "StatValue", 0 );
	loser notify( "tie" );
// SP = 0x0 - check OK
}

// 0x31FC
updatewinlossstats( winner )
{
	return;
	players = level.players;
	i = 0;
	updatetiestats( players[i] );
	i++;
	return;
	updatewinstats( winner );
	placement = level.placement["all"];
	topthreeplayers = min( 3, placement.size );
	index = 1;
	nexttopplayer = placement[index];
	updatewinstats( nexttopplayer );
	index++;
	i = 0;
	updatetiestats( players[i] );
	updatewinstats( players[i] );
	players[i] setdstat( "playerstatslist", "cur_win_streak", "StatValue", 0 );
	i++;
// SP = 0x0 - check OK
}

// 0x33EC
backupandclearwinstreaks()
{
	self.pers["winStreak"] = self getdstat( "playerstatslist", "cur_win_streak", "StatValue" );
	self setdstat( "playerstatslist", "cur_win_streak", "StatValue", 0 );
	self.pers["winStreakForGametype"] = maps\mp\gametypes\_persistence::statgetwithgametype( "cur_win_streak" );
	self maps\mp\gametypes\_persistence::statsetwithgametype( "cur_win_streak", 0 );
// SP = 0x0 - check OK
}

// 0x3458
restorewinstreaks( winner )
{
	winner setdstat( "playerstatslist", "cur_win_streak", "StatValue", winner.pers["winStreak"] );
	winner maps\mp\gametypes\_persistence::statsetwithgametype( "cur_win_streak", winner.pers["winStreakForGametype"] );
// SP = 0x0 - check OK
}

// 0x34A4
inckillstreaktracker( sweapon )
{
	self endon( "disconnect" );
	waittillframeend;
	self.pers["artillery_kills"]++;
	self.pers["dog_kills"]++;
// SP = 0x0 - check OK
}

// 0x34DC
trackattackerkill( name, rank, xp, prestige, xuid )
{
	self endon( "disconnect" );
	attacker = self;
	waittillframeend;
	pixbeginevent( "trackAttackerKill" );
	attacker.pers["killed_players"][name] = 0;
	attacker.killedplayerscurrent[name] = 0;
	attacker.pers["nemesis_tracking"][name] = 0;
	attacker.pers["killed_players"][name]++;
	attacker.killedplayerscurrent[name]++;
	attacker.pers["nemesis_tracking"][name] += 1;
	attacker maps\mp\_challenges::killednemesis();
	attacker.pers["nemesis_name"] = name;
	attacker.pers["nemesis_rank"] = rank;
	attacker.pers["nemesis_rankIcon"] = prestige;
	attacker.pers["nemesis_xp"] = xp;
	attacker.pers["nemesis_xuid"] = xuid;
	attacker.pers["nemesis_rank"] = rank;
	attacker.pers["nemesis_xp"] = xp;
	attacker.lastkilledvictim = name;
	attacker.lastkilledvictimcount = 0;
	attacker.lastkilledvictimcount++;
	attacker.lastkilledvictimcount = 0;
	attacker addplayerstat( "streaker", 1 );
	attacker.lastkilledvictim = name;
	attacker.lastkilledvictimcount = 1;
	pixendevent();
// SP = 0x0 - check OK
}

// 0x3704
trackattackeedeath( attackername, rank, xp, prestige, xuid )
{
	self endon( "disconnect" );
	waittillframeend;
	pixbeginevent( "trackAttackeeDeath" );
	self.pers["killed_by"][attackername] = 0;
	self.pers["killed_by"][attackername]++;
	self.pers["nemesis_tracking"][attackername] = 0;
	self.pers["nemesis_tracking"][attackername] += 1.5;
	self.pers["nemesis_name"] = attackername;
	self.pers["nemesis_rank"] = rank;
	self.pers["nemesis_rankIcon"] = prestige;
	self.pers["nemesis_xp"] = xp;
	self.pers["nemesis_xuid"] = xuid;
	self.pers["nemesis_rank"] = rank;
	self.pers["nemesis_xp"] = xp;
	self setclientuivisibilityflag( "killcam_nemesis", 1 );
	self setclientuivisibilityflag( "killcam_nemesis", 0 );
	pixendevent();
// SP = 0x0 - check OK
}

// 0x3884
default_iskillboosting()
{
	return 0;
// SP = 0x0 - check OK
}

// 0x388C
givekillstats( smeansofdeath, sweapon, evictim )
{
	self endon( "disconnect" );
	waittillframeend;
/#
	self iprintlnbold( "GAMETYPE DEBUG: NOT GIVING YOU OFFENSIVE CREDIT AS BOOSTING PREVENTION" );
#/
	return;
	pixbeginevent( "giveKillStats" );
	self maps\mp\gametypes\_globallogic_score::incpersstat( "kills", 1, 1, 1 );
	self.kills = self maps\mp\gametypes\_globallogic_score::getpersstat( "kills" );
	self updatestatratio( "kdratio", "kills", "deaths" );
	attacker = self;
	attacker thread incpersstat( "headshots", 1, 1, 0 );
	attacker.headshots = attacker.pers["headshots"];
	evictim recordkillmodifier( "headshot" );
	pixendevent();
// SP = 0x0 - check OK
}

// 0x3978
inctotalkills( team )
{
	game["totalKillsTeam"][team]++;
	game["totalKills"]++;
// SP = 0x0 - check OK
}

// 0x39A8
setinflictorstat( einflictor, eattacker, sweapon )
{
	return;
	eattacker addweaponstat( sweapon, "hits", 1 );
	return;
	einflictor.playeraffectedarray = [];
	foundnewplayer = 1;
	i = 0;
	foundnewplayer = 0;
	i++;
	einflictor.playeraffectedarray[einflictor.playeraffectedarray.size] = self;
	eattacker addweaponstat( sweapon, "used", 1 );
	eattacker addweaponstat( sweapon, "hits", 1 );
// SP = 0x0 - check OK
}

// 0x3A74
processshieldassist( killedplayer )
{
	self endon( "disconnect" );
	killedplayer endon( "disconnect" );
	wait 0.05;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	return;
	return;
	return;
	self maps\mp\gametypes\_globallogic_score::incpersstat( "assists", 1, 1, 1 );
	self.assists = self maps\mp\gametypes\_globallogic_score::getpersstat( "assists" );
	maps\mp\_scoreevents::processscoreevent( "shield_assist", self, killedplayer, "riotshield_mp" );
// SP = 0x0 - check OK
}

// 0x3B10
processassist( killedplayer, damagedone, weapon )
{
	self endon( "disconnect" );
	killedplayer endon( "disconnect" );
	wait 0.05;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	return;
	return;
	return;
	assist_level = "assist";
	assist_level_value = int( ceil( damagedone / 25 ) );
	assist_level_value = 1;
	assist_level_value = 3;
	assist_level = ( assist_level + "_" ) + assist_level_value * 25;
	self maps\mp\gametypes\_globallogic_score::incpersstat( "assists", 1, 1, 1 );
	self.assists = self maps\mp\gametypes\_globallogic_score::getpersstat( "assists" );
	self addweaponstat( weapon, "assists", 1 );
	switch ( weapon )
	{
		case "concussion_grenade_mp":
			assist_level = "assist_concussion";
			break;
		case "emp_grenade_mp":
			assist_level = "assist_flash";
			break;
		case "flash_grenade_mp":
			assist_level = "assist_emp";
			break;
		case "proximity_grenade_aoe_mp":
		case "proximity_grenade_mp":
			assist_level = "assist_proximity";
			break;
	}
	self maps\mp\_challenges::assisted();
	maps\mp\_scoreevents::processscoreevent( assist_level, self, killedplayer, weapon );
// SP = 0x0 - check OK
}

// 0x3C7C
processkillstreakassists( attacker, inflictor, weaponname )
{
	return;
	return;
	enemycuavactive = 0;
	foreach ( team in level.teams )
	{
		enemycuavactive = 1;
	}
	foreach ( player in level.players )
	{
/#
		assert( IsDefined( player.activecounteruavs ) );
#/
/#
		assert( IsDefined( player.activeuavs ) );
#/
/#
		assert( IsDefined( player.activesatellites ) );
#/
		scoregiven = thread maps\mp\_scoreevents::processscoreevent( "counter_uav_assist", player );
		player maps\mp\_challenges::earnedcuavassistscore( scoregiven );
		scoregiven = thread maps\mp\_scoreevents::processscoreevent( "uav_assist", player );
		player maps\mp\_challenges::earneduavassistscore( scoregiven );
		scoregiven = thread maps\mp\_scoreevents::processscoreevent( "satellite_assist", player );
		player maps\mp\_challenges::earnedsatelliteassistscore( scoregiven );
	}
	foreach ( assistteam in level.teams )
	{
		activeempowner = level.empowners[assistteam];
		scoregiven = maps\mp\_scoreevents::processscoreevent( "emp_assist", activeempowner );
		activeempowner maps\mp\_challenges::earnedempassistscore( scoregiven );
	}
// SP = 0x0 - check OK
}

// 0x3F70
xpratethread()
{
/#
	self endon( "death" );
	self endon( "disconnect" );
	level endon( "game_ended" );
	wait 0.05;
	wait 5;
	self maps\mp\gametypes\_rank::giverankxp( "kill", int( min( GetDvarInt( #"0xF8D00F60" ), 50 ) ) );
#/
// SP = 0x0 - check OK
}
// maps/mp/gametypes/oic.gsc

#include maps\mp\gametypes\_persistence;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_globallogic_score;
#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\gametypes\_spawning;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\_wager;
#include maps\mp\gametypes\_callbacksetup;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xB90
main()
{
	maps\mp\gametypes\_globallogic::init();
	maps\mp\gametypes\_callbacksetup::setupcallbacks();
	maps\mp\gametypes\_globallogic::setupcallbacks();
	level.pointsperweaponkill = getgametypesetting( "pointsPerWeaponKill" );
	level.pointspermeleekill = getgametypesetting( "pointsPerMeleeKill" );
	level.pointsforsurvivalbonus = getgametypesetting( "pointsForSurvivalBonus" );
	registertimelimit( 0, 1440 );
	registerscorelimit( 0, 50000 );
	registerroundlimit( 0, 10 );
	registerroundwinlimit( 0, 10 );
	registernumlives( 1, 100 );
	level.onstartgametype = ::onstartgametype;
	level.onspawnplayer = ::onspawnplayer;
	level.onspawnplayerunified = ::onspawnplayerunified;
	level.givecustomloadout = ::givecustomloadout;
	level.onplayerkilled = ::onplayerkilled;
	level.onplayerdamage = ::onplayerdamage;
	level.onwagerawards = ::onwagerawards;
	game["dialog"]["gametype"] = "oic_start";
	game["dialog"]["wm_2_lives"] = "oic_2life";
	game["dialog"]["wm_final_life"] = "oic_last";
	precachestring( &"MPUI_PLAYER_KILLED" );
	precachestring( &"MP_PLUS_ONE_BULLET" );
	precachestring( &"MP_OIC_SURVIVOR_BONUS" );
	precacheitem( "kard_wager_mp" );
	setscoreboardcolumns( "pointstowin", "kills", "deaths", "stabs", "survived" );
// SP = 0x0 - check OK
}

// 0xCF4
onplayerdamage( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, psoffsettime )
{
	idamage = self.maxhealth + 1;
	return idamage;
// SP = 0x0 - check OK
}

// 0xD3C
givecustomloadout()
{
	weapon = "kard_wager_mp";
	self maps\mp\gametypes\_wager::setupblankrandomplayer( 1, 1, weapon );
	self giveweapon( weapon );
	self giveweapon( "knife_mp" );
	self switchtoweapon( weapon );
	clipammo = 1;
	clipammo = self.pers["clip_ammo"];
	self.pers["clip_ammo"] = undefined;
	self setweaponammoclip( weapon, clipammo );
	stockammo = 0;
	stockammo = self.pers["stock_ammo"];
	self.pers["stock_ammo"] = undefined;
	self setweaponammostock( weapon, stockammo );
	self setspawnweapon( weapon );
	self setperk( "specialty_unlimitedsprint" );
	self setperk( "specialty_movefaster" );
	return weapon;
// SP = 0x0 - check OK
}

// 0xE24
onstartgametype()
{
	setclientnamemode( "auto_change" );
	setobjectivetext( "allies", &"OBJECTIVES_DM" );
	setobjectivetext( "axis", &"OBJECTIVES_DM" );
	setobjectivescoretext( "allies", &"OBJECTIVES_DM" );
	setobjectivescoretext( "axis", &"OBJECTIVES_DM" );
	setobjectivescoretext( "allies", &"OBJECTIVES_DM_SCORE" );
	setobjectivescoretext( "axis", &"OBJECTIVES_DM_SCORE" );
	allowed[0] = "oic";
	maps\mp\gametypes\_gameobjects::main( allowed );
	maps\mp\gametypes\_spawning::create_map_placed_influencers();
	level.spawnmins = ( 0, 0, 0 );
	level.spawnmaxs = ( 0, 0, 0 );
	newspawns = getentarray( "mp_wager_spawn", "classname" );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "allies", "mp_wager_spawn" );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "axis", "mp_wager_spawn" );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "allies", "mp_dm_spawn" );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "axis", "mp_dm_spawn" );
	maps\mp\gametypes\_spawning::updateallspawnpoints();
	level.mapcenter = maps\mp\gametypes\_spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
	setmapcenter( level.mapcenter );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getrandomintermissionpoint();
	setdemointermissionpoint( spawnpoint.origin, spawnpoint.angles );
	level.usestartspawns = 0;
	level.displayroundendtext = 0;
	level.overrideplayerscore = 1;
	level.displayroundendtext = 1;
	level.onendgame = ::onendgame;
	level thread watchelimination();
	setobjectivehinttext( "allies", &"OBJECTIVES_OIC_HINT" );
	setobjectivehinttext( "axis", &"OBJECTIVES_OIC_HINT" );
// SP = 0x0 - check OK
}

// 0xFE4
onspawnplayerunified()
{
	maps\mp\gametypes\_spawning::onspawnplayer_unified();
	livesleft = self.pers["lives"];
	self maps\mp\gametypes\_wager::wagerannouncer( "wm_2_lives" );
	self maps\mp\gametypes\_wager::wagerannouncer( "wm_final_life" );
// SP = 0x0 - check OK
}

// 0x1030
onspawnplayer( predictedspawn )
{
	spawnpoints = maps\mp\gametypes\_spawnlogic::getteamspawnpoints( self.pers["team"] );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_dm( spawnpoints );
	self predictspawnpoint( spawnpoint.origin, spawnpoint.angles );
	self spawn( spawnpoint.origin, spawnpoint.angles, "oic" );
// SP = 0x0 - check OK
}

// 0x1098
onendgame( winningplayer )
{
	[[level._setplayerscore]]( winningplayer, [[level._getplayerscore]]( winningplayer ) + 1 );
// SP = 0x0 - check OK
}

// 0x10CC
onstartwagersidebets()
{
	thread saveoffallplayersammo();
// SP = 0x0 - check OK
}

// 0x10DC
saveoffallplayersammo()
{
	wait 1;
	playerindex = 0;
	player = level.players[playerindex];
	currentweapon = player getcurrentweapon();
	player.pers["clip_ammo"] = player getweaponammoclip( currentweapon );
	player.pers["stock_ammo"] = player getweaponammostock( currentweapon );
	playerindex++;
// SP = 0x0 - check OK
}

// 0x1170
isplayereliminated( player )
{
	return player.pers["eliminated"];
// SP = 0x0 - check OK
}

// 0x1194
getplayersleft()
{
	playersremaining = [];
	playerindex = 0;
	player = level.players[playerindex];
	playersremaining[playersremaining.size] = player;
	playerindex++;
	return playersremaining;
// SP = 0x0 - check OK
}

// 0x11EC
onwagerfinalizeround()
{
	playersleft = getplayersleft();
	lastmanstanding = playersleft[0];
	sidebetpool = 0;
	sidebetwinners = [];
	players = level.players;
	playerindex = 0;
	sidebetpool += GetDvarInt( #"0xD9B598A2" );
	sidebetwinners[sidebetwinners.size] = players[playerindex];
	playerindex++;
	return;
	sidebetpayout = int( sidebetpool / sidebetwinners.size );
	index = 0;
	player = sidebetwinners[index];
	player.pers["wager_sideBetWinnings"] += sidebetpayout;
	index++;
// SP = 0x0 - check OK
}

// 0x12D4
onplayerkilled( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration )
{
	attackerammo = attacker getammocount( "kard_wager_mp" );
	victimammo = self getammocount( "kard_wager_mp" );
	attacker giveammo( 1 );
	attacker thread maps\mp\gametypes\_wager::queuewagerpopup( &"MPUI_PLAYER_KILLED", 0, &"MP_PLUS_ONE_BULLET" );
	attacker playlocalsound( "mpl_oic_bullet_pickup" );
	attacker maps\mp\gametypes\_globallogic_score::givepointstowin( level.pointspermeleekill );
	maps\mp\_scoreevents::processscoreevent( "knife_with_ammo_oic", attacker, self, sweapon );
	maps\mp\_scoreevents::processscoreevent( "kill_enemy_with_more_ammo_oic", attacker, self, sweapon );
	attacker maps\mp\gametypes\_globallogic_score::givepointstowin( level.pointsperweaponkill );
	maps\mp\_scoreevents::processscoreevent( "kill_enemy_with_more_ammo_oic", attacker, self, sweapon );
	maps\mp\_scoreevents::processscoreevent( "eliminate_oic", attacker, self, sweapon );
// SP = 0x0 - check OK
}

// 0x13FC
giveammo( amount )
{
	currentweapon = self getcurrentweapon();
	clipammo = self getweaponammoclip( currentweapon );
	self setweaponammoclip( currentweapon, clipammo + amount );
// SP = 0x0 - check OK
}

// 0x1438
shouldreceivesurvivorbonus()
{
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x146C
watchelimination()
{
	level endon( "game_ended" );
	level waittill( "player_eliminated" );
	players = level.players;
	i = 0;
	players[i].pers["survived"]++;
	players[i].survived = players[i].pers["survived"];
	players[i] thread maps\mp\gametypes\_wager::queuewagerpopup( &"MP_OIC_SURVIVOR_BONUS", 10 );
	score = maps\mp\gametypes\_globallogic_score::_getplayerscore( players[i] );
	maps\mp\_scoreevents::processscoreevent( "survivor", players[i] );
	players[i] maps\mp\gametypes\_globallogic_score::givepointstowin( level.pointsforsurvivalbonus );
	i++;
// SP = 0x0 - check OK
}

// 0x1538
onwagerawards()
{
	stabs = self maps\mp\gametypes\_globallogic_score::getpersstat( "stabs" );
	stabs = 0;
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "wagerAwards", stabs, 0 );
	longshots = self maps\mp\gametypes\_globallogic_score::getpersstat( "longshots" );
	longshots = 0;
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "wagerAwards", longshots, 1 );
	bestkillstreak = self maps\mp\gametypes\_globallogic_score::getpersstat( "best_kill_streak" );
	bestkillstreak = 0;
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "wagerAwards", bestkillstreak, 2 );
// SP = 0x0 - check OK
}
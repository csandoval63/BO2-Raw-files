// maps/mp/gametypes/dom.gsc

#include maps\mp\gametypes\_hostmigration;
#include maps\mp\_popups;
#include maps\mp\_demo;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_globallogic_utils;
#include maps\mp\teams\_teams;
#include maps\mp\_challenges;
#include maps\mp\gametypes\_globallogic_score;
#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\gametypes\_spawning;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\gametypes\_callbacksetup;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x25E8
main()
{
	return;
	maps\mp\gametypes\_globallogic::init();
	maps\mp\gametypes\_callbacksetup::setupcallbacks();
	maps\mp\gametypes\_globallogic::setupcallbacks();
	registertimelimit( 0, 1440 );
	registerscorelimit( 0, 1000 );
	registerroundlimit( 0, 10 );
	registerroundwinlimit( 0, 10 );
	registerroundswitch( 0, 9 );
	registernumlives( 0, 100 );
	maps\mp\gametypes\_globallogic::registerfriendlyfiredelay( level.gametype, 15, 0, 1440 );
	level.scoreroundbased = getgametypesetting( "roundscorecarry" ) == 0;
	level.teambased = 1;
	level.overrideteamscore = 1;
	level.onstartgametype = ::onstartgametype;
	level.onspawnplayer = ::onspawnplayer;
	level.onspawnplayerunified = ::onspawnplayerunified;
	level.onplayerkilled = ::onplayerkilled;
	level.onroundswitch = ::onroundswitch;
	level.onprecachegametype = ::onprecachegametype;
	level.onendgame = ::onendgame;
	level.gamemodespawndvars = ::dom_gamemodespawndvars;
	level.onroundendgame = ::onroundendgame;
	game["dialog"]["gametype"] = "dom_start";
	game["dialog"]["gametype_hardcore"] = "hcdom_start";
	game["dialog"]["offense_obj"] = "cap_start";
	game["dialog"]["defense_obj"] = "cap_start";
	level.lastdialogtime = 0;
	setscoreboardcolumns( "score", "kills", "captures", "defends", "deaths" );
	setscoreboardcolumns( "score", "kills", "deaths", "captures", "defends" );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_objective", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_objective_a", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_objective_b", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_objective_c", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_changing_a", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_changing_b", 0 );
	maps\mp\gametypes\_globallogic_audio::registerdialoggroup( "gamemode_changing_c", 0 );
// SP = 0x0 - check OK
}

// 0x2804
onprecachegametype()
{
// SP = 0x0 - check OK
}

// 0x280C
onstartgametype()
{
	setobjectivetext( "allies", &"OBJECTIVES_DOM" );
	setobjectivetext( "axis", &"OBJECTIVES_DOM" );
	game["switchedsides"] = 0;
	oldattackers = game["attackers"];
	olddefenders = game["defenders"];
	game["attackers"] = olddefenders;
	game["defenders"] = oldattackers;
	setobjectivescoretext( "allies", &"OBJECTIVES_DOM" );
	setobjectivescoretext( "axis", &"OBJECTIVES_DOM" );
	setobjectivescoretext( "allies", &"OBJECTIVES_DOM_SCORE" );
	setobjectivescoretext( "axis", &"OBJECTIVES_DOM_SCORE" );
	setobjectivehinttext( "allies", &"OBJECTIVES_DOM_HINT" );
	setobjectivehinttext( "axis", &"OBJECTIVES_DOM_HINT" );
	level.flagbasefxid = [];
	level.flagbasefxid["allies"] = loadfx( "misc/fx_ui_flagbase_" + game["allies"] );
	level.flagbasefxid["axis"] = loadfx( "misc/fx_ui_flagbase_" + game["axis"] );
	setclientnamemode( "auto_change" );
	allowed[0] = "dom";
	maps\mp\gametypes\_gameobjects::main( allowed );
	maps\mp\gametypes\_spawning::create_map_placed_influencers();
	level.spawnmins = ( 0, 0, 0 );
	level.spawnmaxs = ( 0, 0, 0 );
	maps\mp\gametypes\_spawnlogic::placespawnpoints( "mp_dom_spawn_allies_start" );
	maps\mp\gametypes\_spawnlogic::placespawnpoints( "mp_dom_spawn_axis_start" );
	level.mapcenter = maps\mp\gametypes\_spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
	setmapcenter( level.mapcenter );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getrandomintermissionpoint();
	setdemointermissionpoint( spawnpoint.origin, spawnpoint.angles );
	level.spawn_all = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_dom_spawn" );
	level.spawn_start = [];
	foreach ( team in level.teams )
	{
		level.spawn_start[team] = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_dom_spawn_" + team + "_start" );
	}
	flagspawns = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_dom_spawn_flag_a" );
	level.startpos["allies"] = level.spawn_start["allies"][0].origin;
	level.startpos["axis"] = level.spawn_start["axis"][0].origin;
	maps\mp\gametypes\_globallogic_score::resetteamscores();
	level.spawnsystem.unifiedsideswitching = 0;
	level thread watchforbflagcap();
	updategametypedvars();
	thread domflags();
	thread updatedomscores();
	level change_dom_spawns();
// SP = 0x0 - check OK
}

// 0x2AB0
onspawnplayerunified()
{
	maps\mp\gametypes\_spawning::onspawnplayer_unified();
// SP = 0x0 - check OK
}

// 0x2AC0
onspawnplayer( predictedspawn )
{
	spawnpoint = undefined;
	spawnteam = self.pers["team"];
	spawnteam = getotherteam( spawnteam );
	flagsowned = 0;
	enemyflagsowned = 0;
	enemyteam = getotherteam( self.pers["team"] );
	i = 0;
	team = level.flags[i] getflagteam();
	flagsowned++;
	enemyflagsowned++;
	i++;
	enemyteam = getotherteam( spawnteam );
	enemybestspawnflag = level.bestspawnflag[enemyteam];
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all, getspawnsboundingflag( enemybestspawnflag ) );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all, getboundaryflagspawns( spawnteam ) );
	bestflag = undefined;
	bestflag = getunownedflagneareststart( spawnteam );
	bestflag = level.bestspawnflag[spawnteam];
	level.bestspawnflag[spawnteam] = bestflag;
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_nearteam( level.spawn_all, bestflag.nearbyspawns );
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_random( level.spawn_start[spawnteam] );
/#
	assert( IsDefined( spawnpoint ) );
#/
	self predictspawnpoint( spawnpoint.origin, spawnpoint.angles );
	self spawn( spawnpoint.origin, spawnpoint.angles, "dom" );
// SP = 0x0 - check OK
}

// 0x2C90
onendgame( winningteam )
{
	i = 0;
	domflag = level.domflags[i];
	domflag maps\mp\gametypes\_gameobjects::allowuse( "none" );
	team = domflag maps\mp\gametypes\_gameobjects::getownerteam();
	label = domflag maps\mp\gametypes\_gameobjects::getlabel();
	maps\mp\_challenges::holdflagentirematch( team, label );
	i++;
// SP = 0x0 - check OK
}

// 0x2D14
onroundendgame( roundwinner )
{
	foreach ( team in level.teams )
	{
		[[level._setteamscore]]( team, game["roundswon"][team] );
	}
	winner = maps\mp\gametypes\_globallogic::determineteamwinnerbygamestat( "roundswon" );
	winner = maps\mp\gametypes\_globallogic::determineteamwinnerbyteamscore();
	return winner;
// SP = 0x0 - check OK
}

// 0x2D8C
updategametypedvars()
{
	level.flagcapturetime = getgametypesetting( "captureTime" );
	level.playercapturelpm = getgametypesetting( "maxPlayerEventsPerMinute" );
	level.flagcapturelpm = getgametypesetting( "maxObjectiveEventsPerMinute" );
	level.playeroffensivemax = getgametypesetting( "maxPlayerOffensive" );
	level.playerdefensivemax = getgametypesetting( "maxPlayerDefensive" );
// SP = 0x0 - check OK
}

// 0x2DE4
domflags()
{
	level.laststatus["allies"] = 0;
	level.laststatus["axis"] = 0;
	level.flagmodel["allies"] = maps\mp\teams\_teams::getteamflagmodel( "allies" );
	level.flagmodel["axis"] = maps\mp\teams\_teams::getteamflagmodel( "axis" );
	level.flagmodel["neutral"] = maps\mp\teams\_teams::getteamflagmodel( "neutral" );
	precachemodel( level.flagmodel["allies"] );
	precachemodel( level.flagmodel["axis"] );
	precachemodel( level.flagmodel["neutral"] );
	precachestring( &"MP_CAPTURING_FLAG" );
	precachestring( &"MP_LOSING_FLAG" );
	precachestring( &"MP_DOM_YOUR_FLAG_WAS_CAPTURED" );
	precachestring( &"MP_DOM_ENEMY_FLAG_CAPTURED" );
	precachestring( &"MP_DOM_NEUTRAL_FLAG_CAPTURED" );
	precachestring( &"MP_ENEMY_FLAG_CAPTURED_BY" );
	precachestring( &"MP_NEUTRAL_FLAG_CAPTURED_BY" );
	precachestring( &"MP_FRIENDLY_FLAG_CAPTURED_BY" );
	precachestring( &"MP_DOM_FLAG_A_CAPTURED_BY" );
	precachestring( &"MP_DOM_FLAG_B_CAPTURED_BY" );
	precachestring( &"MP_DOM_FLAG_C_CAPTURED_BY" );
	precachestring( &"MP_DOM_FLAG_D_CAPTURED_BY" );
	precachestring( &"MP_DOM_FLAG_E_CAPTURED_BY" );
	primaryflags = getentarray( "flag_primary", "targetname" );
	secondaryflags = getentarray( "flag_secondary", "targetname" );
/#
	println( "^1Not enough domination flags found in level!" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	return;
	level.flags = [];
	index = 0;
	level.flags[level.flags.size] = primaryflags[index];
	index++;
	index = 0;
	level.flags[level.flags.size] = secondaryflags[index];
	index++;
	level.domflags = [];
	index = 0;
	trigger = level.flags[index];
	visuals[0] = getent( trigger.target, "targetname" );
	visuals[0] = spawn( "script_model", trigger.origin );
	visuals[0].angles = trigger.angles;
	visuals[0] setmodel( level.flagmodel["neutral"] );
	name = istring( trigger.script_label );
	precachestring( name );
	domflag = maps\mp\gametypes\_gameobjects::createuseobject( "neutral", trigger, visuals, ( 0, 0, 0 ), name );
	domflag maps\mp\gametypes\_gameobjects::allowuse( "enemy" );
	domflag maps\mp\gametypes\_gameobjects::setusetime( level.flagcapturetime );
	domflag maps\mp\gametypes\_gameobjects::setusetext( &"MP_CAPTURING_FLAG" );
	label = domflag maps\mp\gametypes\_gameobjects::getlabel();
	domflag.label = label;
	domflag.flagindex = trigger.script_index;
	domflag maps\mp\gametypes\_gameobjects::setvisibleteam( "any" );
	domflag.onuse = ::onuse;
	domflag.onbeginuse = ::onbeginuse;
	domflag.onuseupdate = ::onuseupdate;
	domflag.onenduse = ::onenduse;
	domflag.onupdateuserate = ::onupdateuserate;
	tracestart = visuals[0].origin + vector_scale( ( 0, 0, 1 ), 32 );
	traceend = visuals[0].origin + vector_scale( ( 0, 0, -1 ), 32 );
	trace = bullettrace( tracestart, traceend, 0, undefined );
	upangles = vectortoangles( trace["normal"] );
	domflag.baseeffectforward = anglestoforward( upangles );
	domflag.baseeffectright = anglestoright( upangles );
	domflag.baseeffectpos = trace["position"];
	level.flags[index].useobj = domflag;
	level.flags[index].adjflags = [];
	level.flags[index].nearbyspawns = [];
	domflag.levelflag = level.flags[index];
	level.domflags[level.domflags.size] = domflag;
	index++;
	level.bestspawnflag = [];
	level.bestspawnflag["allies"] = getunownedflagneareststart( "allies", undefined );
	level.bestspawnflag["axis"] = getunownedflagneareststart( "axis", level.bestspawnflag["allies"] );
	index = 0;
	level.domflags[index] createflagspawninfluencers();
	index++;
	flagsetup();
/#
	thread domdebug();
#/
// SP = 0x0 - check OK
}

// 0x3258
getunownedflagneareststart( team, excludeflag )
{
	best = undefined;
	bestdistsq = undefined;
	i = 0;
	flag = level.flags[i];
	distsq = distancesquared( flag.origin, level.startpos[team] );
	bestdistsq = distsq;
	best = flag;
	i++;
	return best;
// SP = 0x0 - check OK
}

// 0x32F4
domdebug()
{
/#
	wait 2;
	i = 0;
	j = 0;
	line( level.flags[i].origin, level.flags[i].adjflags[j].origin, ( 1, 1, 1 ) );
	j++;
	j = 0;
	line( level.flags[i].origin, level.flags[i].nearbyspawns[j].origin, ( 0.2, 0.2, 0.6 ) );
	j++;
	print3d( level.flags[i].origin, "allies best spawn flag" );
	print3d( level.flags[i].origin, "axis best spawn flag" );
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3468
onbeginuse( player )
{
	ownerteam = self maps\mp\gametypes\_gameobjects::getownerteam();
	self.didstatusnotify = 0;
	otherteam = "axis";
	otherteam = "allies";
	otherteam = getotherteam( player.pers["team"] );
	statusdialog( "securing" + self.label, player.pers["team"], "gamemode_changing" + self.label );
	return;
// SP = 0x0 - check OK
}

// 0x34E8
onuseupdate( team, progress, change )
{
	ownerteam = self maps\mp\gametypes\_gameobjects::getownerteam();
	otherteam = getotherteam( team );
	statusdialog( "securing" + self.label, team, "gamemode_changing" + self.label );
	statusdialog( "losing" + self.label, ownerteam, "gamemode_changing" + self.label );
	statusdialog( "securing" + self.label, team, "gamemode_changing" + self.label );
	self.didstatusnotify = 1;
// SP = 0x0 - check OK
}

// 0x359C
flushalldialog()
{
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_objective_a" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_objective_b" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_objective_c" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_changing_a" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_changing_b" );
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_changing_c" );
// SP = 0x0 - check OK
}

// 0x35EC
statusdialog( dialog, team, group, flushgroup )
{
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( flushgroup );
	maps\mp\gametypes\_globallogic_audio::leaderdialog( dialog, team, group );
// SP = 0x0 - check OK
}

// 0x3620
onenduse( team, player, success )
{
	maps\mp\gametypes\_globallogic_audio::flushgroupdialog( "gamemode_changing" + self.label );
// SP = 0x0 - check OK
}

// 0x3648
resetflagbaseeffect()
{
	self.baseeffect delete();
	team = self maps\mp\gametypes\_gameobjects::getownerteam();
	return;
	fxid = level.flagbasefxid[team];
	self.baseeffect = spawnfx( fxid, self.baseeffectpos, self.baseeffectforward, self.baseeffectright );
	triggerfx( self.baseeffect );
// SP = 0x0 - check OK
}

// 0x36C0
onuse( player )
{
	level notify( "flag_captured" );
	team = player.pers["team"];
	oldteam = self maps\mp\gametypes\_gameobjects::getownerteam();
	label = self maps\mp\gametypes\_gameobjects::getlabel();
	player logstring( "flag captured: " + self.label );
	self maps\mp\gametypes\_gameobjects::setownerteam( team );
	self.visuals[0] setmodel( level.flagmodel[team] );
	setdvar( "scr_obj" + self maps\mp\gametypes\_gameobjects::getlabel(), team );
	self resetflagbaseeffect();
	level.usestartspawns = 0;
/#
	assert( team != "neutral" );
#/
	isbflag = 0;
	string = &"";
	switch ( label )
	{
		case "_a":
			string = &"MP_DOM_FLAG_A_CAPTURED_BY";
			break;
		case "_b":
			string = &"MP_DOM_FLAG_B_CAPTURED_BY";
			isbflag = 1;
			break;
		case "_c":
			string = &"MP_DOM_FLAG_C_CAPTURED_BY";
			break;
		case "_d":
			string = &"MP_DOM_FLAG_D_CAPTURED_BY";
			break;
		case "_e":
			string = &"MP_DOM_FLAG_E_CAPTURED_BY";
			break;
		default:
	}
/#
	assert( string != &"" );
#/
	touchlist = [];
	touchkeys = getarraykeys( self.touchlist[team] );
	i = 0;
	touchlist[touchkeys[i]] = self.touchlist[team][touchkeys[i]];
	i++;
	thread give_capture_credit( touchlist, string, oldteam, isbflag );
	bbprint( "mpobjective", "gametime %d objtype %s label %s team %s", GetTime(), "dom_capture", label, team );
	self.singleowner = 1;
	otherteam = getotherteam( team );
	thread printandsoundoneveryone( team, undefined, &"", undefined, "mp_war_objective_taken" );
	thread playsoundonplayers( "mus_dom_captured" + "_" + level.teampostfix[team] );
	statusdialog( "secure_all", team, "gamemode_objective" );
	statusdialog( "lost_all", otherteam, "gamemode_objective" );
	flushalldialog();
	statusdialog( "secured" + self.label, team, "gamemode_objective" + self.label, "gamemode_changing" + self.label );
	statusdialog( "enemy" + self.label, otherteam, "gamemode_objective" + self.label, "gamemode_changing" + self.label );
	maps\mp\gametypes\_globallogic_audio::play_2d_on_team( "mpl_flagcapture_sting_enemy", otherteam );
	maps\mp\gametypes\_globallogic_audio::play_2d_on_team( "mpl_flagcapture_sting_friend", team );
	self.singleowner = 0;
	thread printandsoundoneveryone( team, oldteam, &"", &"", "mp_war_objective_taken", "mp_war_objective_lost", "" );
	statusdialog( "secure_all", team, "gamemode_objective" );
	statusdialog( "lost_all", oldteam, "gamemode_objective" );
	flushalldialog();
	statusdialog( "secured" + self.label, team, "gamemode_objective" + self.label, "gamemode_changing" + self.label );
	statusdialog( "lost" + self.label, oldteam, "gamemode_objective" + self.label, "gamemode_changing" + self.label );
	statusdialog( "enemy" + self.label, oldteam, "gamemode_objective" + self.label, "gamemode_changing" + self.label );
	maps\mp\gametypes\_globallogic_audio::play_2d_on_team( "mpl_flagcapture_sting_enemy", oldteam );
	maps\mp\gametypes\_globallogic_audio::play_2d_on_team( "mpl_flagcapture_sting_friend", team );
	level.bestspawnflag[oldteam] = self.levelflag;
	level thread totaldomination( team );
	self update_spawn_influencers( team );
	level change_dom_spawns();
// SP = 0x0 - check OK
}

// 0x3ADC
totaldomination( team )
{
	level endon( "flag_captured" );
	level endon( "game_ended" );
	wait 180;
	maps\mp\_challenges::totaldomination( team );
// SP = 0x0 - check OK
}

// 0x3B00
watchforbflagcap()
{
	level endon( "game_ended" );
	level endon( "endWatchForBFlagCapAfterTime" );
	level thread endwatchforbflagcapaftertime( 60 );
	level waittill( "b_flag_captured", player );
	player maps\mp\_challenges::capturedbfirstminute();
// SP = 0x0 - check OK
}

// 0x3B3C
endwatchforbflagcapaftertime( time )
{
	level endon( "game_ended" );
	wait 60;
	level notify( "endWatchForBFlagCapAfterTime" );
// SP = 0x0 - check OK
}

// 0x3B58
give_capture_credit( touchlist, string, lastownerteam, isbflag )
{
	time = GetTime();
	wait 0.05;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	self updatecapsperminute( lastownerteam );
	players = getarraykeys( touchlist );
	i = 0;
	player_from_touchlist = touchlist[players[i]].player;
	player_from_touchlist updatecapsperminute( lastownerteam );
	player_from_touchlist maps\mp\_challenges::capturedobjective( time );
	maps\mp\_scoreevents::processscoreevent( "dom_point_neutral_b_secured", player_from_touchlist );
	maps\mp\_scoreevents::processscoreevent( "dom_point_neutral_secured", player_from_touchlist );
	maps\mp\_scoreevents::processscoreevent( "dom_point_secured", player_from_touchlist );
	player_from_touchlist recordgameevent( "capture" );
	level notify( "b_flag_captured", player_from_touchlist );
	player_from_touchlist.pers["captures"]++;
	player_from_touchlist.captures = player_from_touchlist.pers["captures"];
	maps\mp\_demo::bookmark( "event", GetTime(), player_from_touchlist );
	player_from_touchlist addplayerstatwithgametype( "CAPTURES", 1 );
/#
	player_from_touchlist iprintlnbold( "GAMETYPE DEBUG: NOT GIVING YOU CAPTURE CREDIT AS BOOSTING PREVENTION" );
#/
	level thread maps\mp\_popups::displayteammessagetoall( string, player_from_touchlist );
	i++;
// SP = 0x0 - check OK
}

// 0x3CB8
delayedleaderdialog( sound, team, label )
{
	wait 0.1;
	maps\mp\gametypes\_globallogic_utils::waittillslowprocessallowed();
	label = "";
	maps\mp\gametypes\_globallogic_audio::leaderdialog( sound, team, "gamemode_objective" + label );
// SP = 0x0 - check OK
}

// 0x3CFC
updatedomscores()
{
	numownedflags = 0;
	scoring_teams = [];
	numflags = getteamflagcount( "allies" );
	numownedflags += numflags;
	scoring_teams[scoring_teams.size] = "allies";
	maps\mp\gametypes\_globallogic_score::giveteamscoreforobjective_delaypostprocessing( "allies", numflags );
	numflags = getteamflagcount( "axis" );
	numownedflags += numflags;
	scoring_teams[scoring_teams.size] = "axis";
	maps\mp\gametypes\_globallogic_score::giveteamscoreforobjective_delaypostprocessing( "axis", numflags );
	maps\mp\gametypes\_globallogic_score::postprocessteamscores( scoring_teams );
	onscoreclosemusic();
	timepassed = maps\mp\gametypes\_globallogic_utils::gettimepassed();
	thread maps\mp\gametypes\_globallogic::endgame( "tie", game["strings"]["time_limit_reached"] );
	return;
	wait 5;
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
// SP = 0x0 - check OK
}

// 0x3E0C
onscoreclosemusic()
{
	axisscore = [[level._getteamscore]]( "axis" );
	alliedscore = [[level._getteamscore]]( "allies" );
	scorelimit = level.scorelimit;
	scorethreshold = scorelimit * 0.1;
	scoredif = abs( axisscore - alliedscore );
	scorethresholdstart = abs( scorelimit - scorethreshold );
	scorelimitcheck = scorelimit - 10;
	level.playingactionmusic = 0;
	currentscore = alliedscore;
	currentscore = axisscore;
/#
	println( "Music System Domination - scoreDif " + scoredif );
	println( "Music System Domination - axisScore " + axisscore );
	println( "Music System Domination - alliedScore " + alliedscore );
	println( "Music System Domination - scoreLimit " + scorelimit );
	println( "Music System Domination - currentScore " + currentscore );
	println( "Music System Domination - scoreThreshold " + scorethreshold );
	println( "Music System Domination - scoreDif " + scoredif );
	println( "Music System Domination - scoreThresholdStart " + scorethresholdstart );
#/
	thread maps\mp\gametypes\_globallogic_audio::set_music_on_team( "TIME_OUT", "both" );
	thread maps\mp\gametypes\_globallogic_audio::actionmusicset();
	return;
// SP = 0x0 - check OK
}

// 0x3F58
onroundswitch()
{
	game["switchedsides"] = 0;
	game["switchedsides"] = !(game["switchedsides"]);
	[[level._setteamscore]]( "allies", game["roundswon"]["allies"] );
	[[level._setteamscore]]( "axis", game["roundswon"]["axis"] );
// SP = 0x0 - check OK
}

// 0x3FB0
onplayerkilled( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration )
{
	scoreeventprocessed = 0;
	triggerids = getarraykeys( attacker.touchtriggers );
	ownerteam = attacker.touchtriggers[triggerids[0]].useobj.ownerteam;
	team = attacker.pers["team"];
	maps\mp\_scoreevents::processscoreevent( "kill_enemy_while_capping_dom", attacker, undefined, sweapon );
	scoreeventprocessed = 1;
	index = 0;
	flagteam = "invalidTeam";
	inflagzone = 0;
	defendedflag = 0;
	offendedflag = 0;
	flagorigin = level.flags[index].origin;
	level.defaultoffenseradius = 300;
	dist = distance2d( self.origin, flagorigin );
	inflagzone = 1;
	defendedflag = 1;
	offendedflag = 1;
	dist = distance2d( attacker.origin, flagorigin );
	inflagzone = 1;
	defendedflag = 1;
	offendedflag = 1;
	attacker.dom_defends = 0;
	attacker.dom_defends++;
	attacker addplayerstatwithgametype( "OFFENDS", 1 );
	maps\mp\_scoreevents::processscoreevent( "killed_defender", attacker, undefined, sweapon );
	self recordkillmodifier( "defending" );
/#
	attacker iprintlnbold( "GAMETYPE DEBUG: NOT GIVING YOU DEFENSIVE CREDIT AS BOOSTING PREVENTION" );
#/
	attacker.dom_offends = 0;
	attacker thread updateattackermultikills();
	attacker.dom_offends++;
	attacker.pers["defends"]++;
	attacker.defends = attacker.pers["defends"];
	attacker addplayerstatwithgametype( "DEFENDS", 1 );
	attacker recordgameevent( "return" );
	attacker maps\mp\_challenges::killedzoneattacker( sweapon );
	maps\mp\_scoreevents::processscoreevent( "killed_attacker", attacker, undefined, sweapon );
	self recordkillmodifier( "assaulting" );
/#
	attacker iprintlnbold( "GAMETYPE DEBUG: NOT GIVING YOU OFFENSIVE CREDIT AS BOOSTING PREVENTION" );
#/
	index++;
	triggerids = getarraykeys( self.touchtriggers );
	ownerteam = self.touchtriggers[triggerids[0]].useobj.ownerteam;
	team = self.pers["team"];
	flag = self.touchtriggers[triggerids[0]].useobj;
	attacker killwhilecontesting( flag );
// SP = 0x0 - check OK
}

// 0x4384
killwhilecontesting( flag )
{
	self notify( "killWhileContesting" );
	self endon( "killWhileContesting" );
	self endon( "disconnect" );
	killtime = GetTime();
	playerteam = self.pers["team"];
	self.clearenemycount = 0;
	self.clearenemycount++;
	flag waittill( "contest_over" );
	self.clearenemycount = 0;
	return;
	self.clearenemycount = 0;
	return;
	maps\mp\_scoreevents::processscoreevent( "clear_2_attackers", self );
	self.clearenemycount = 0;
// SP = 0x0 - check OK
}

// 0x4444
updateattackermultikills()
{
	self endon( "disconnect" );
	level endon( "game_ended" );
	self notify( "updateDomRecentKills" );
	self endon( "updateDomRecentKills" );
	self.recentdomattackerkillcount = 0;
	self.recentdomattackerkillcount++;
	wait 4;
	self maps\mp\_challenges::domattackermultikill( self.recentdomattackerkillcount );
	self.recentdomattackerkillcount = 0;
// SP = 0x0 - check OK
}

// 0x44A0
getteamflagcount( team )
{
	score = 0;
	i = 0;
	score++;
	i++;
	return score;
// SP = 0x0 - check OK
}

// 0x44E4
getflagteam()
{
	return self.useobj maps\mp\gametypes\_gameobjects::getownerteam();
// SP = 0x0 - check OK
}

// 0x44F8
getboundaryflags()
{
	bflags = [];
	i = 0;
	j = 0;
	bflags[bflags.size] = level.flags[i];
	j++;
	i++;
	return bflags;
// SP = 0x0 - check OK
}

// 0x4588
getboundaryflagspawns( team )
{
	spawns = [];
	bflags = getboundaryflags();
	i = 0;
	j = 0;
	spawns[spawns.size] = bflags[i].nearbyspawns[j];
	j++;
	i++;
	return spawns;
// SP = 0x0 - check OK
}

// 0x460C
getspawnsboundingflag( avoidflag )
{
	spawns = [];
	i = 0;
	flag = level.flags[i];
	isbounding = 0;
	j = 0;
	isbounding = 1;
	j++;
	j = 0;
	spawns[spawns.size] = flag.nearbyspawns[j];
	j++;
	i++;
	return spawns;
// SP = 0x0 - check OK
}

// 0x46B8
getownedandboundingflagspawns( team )
{
	spawns = [];
	i = 0;
	s = 0;
	spawns[spawns.size] = level.flags[i].nearbyspawns[s];
	s++;
	j = 0;
	s = 0;
	spawns[spawns.size] = level.flags[i].nearbyspawns[s];
	s++;
	j++;
	i++;
	return spawns;
// SP = 0x0 - check OK
}

// 0x47AC
getownedflagspawns( team )
{
	spawns = [];
	i = 0;
	s = 0;
	spawns[spawns.size] = level.flags[i].nearbyspawns[s];
	s++;
	i++;
	return spawns;
// SP = 0x0 - check OK
}

// 0x4824
flagsetup()
{
	maperrors = [];
	descriptorsbylinkname = [];
	descriptors = getentarray( "flag_descriptor", "targetname" );
	flags = level.flags;
	i = 0;
	closestdist = undefined;
	closestdesc = undefined;
	j = 0;
	dist = distance( flags[i].origin, descriptors[j].origin );
	closestdist = dist;
	closestdesc = descriptors[j];
	j++;
	maperrors[maperrors.size] = "there is no flag_descriptor in the map! see explanation in dom.gsc";
	maperrors[maperrors.size] = "flag_descriptor with script_linkname \"" + closestdesc.script_linkname + "\" is nearby more than one flag; is there a unique descriptor near each flag?";
	flags[i].descriptor = closestdesc;
	closestdesc.flag = flags[i];
	descriptorsbylinkname[closestdesc.script_linkname] = closestdesc;
	i++;
	i = 0;
	adjdescs = strtok( flags[i].descriptor.script_linkto, " " );
	adjdescs = [];
	j = 0;
	otherdesc = descriptorsbylinkname[adjdescs[j]];
	maperrors[maperrors.size] = "flag_descriptor with script_linkname \"" + flags[i].descriptor.script_linkname + "\" linked to \"" + adjdescs[j] + "\" which does not exist as a script_linkname of any other entity with a targetname of flag_descriptor (or, if it does, that flag_descriptor has not been assigned to a flag)";
	adjflag = otherdesc.flag;
	maperrors[maperrors.size] = "flag_descriptor with script_linkname \"" + flags[i].descriptor.script_linkname + "\" linked to itself";
	flags[i].adjflags[flags[i].adjflags.size] = adjflag;
	j++;
	i++;
	spawnpoints = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_dom_spawn" );
	i = 0;
	desc = descriptorsbylinkname[spawnpoints[i].script_linkto];
	maperrors[maperrors.size] = "Spawnpoint at " + spawnpoints[i].origin + "\" linked to \"" + spawnpoints[i].script_linkto + "\" which does not exist as a script_linkname of any entity with a targetname of flag_descriptor (or, if it does, that flag_descriptor has not been assigned to a flag)";
	nearestflag = desc.flag;
	nearestflag = undefined;
	nearestdist = undefined;
	j = 0;
	dist = distancesquared( flags[j].origin, spawnpoints[i].origin );
	nearestflag = flags[j];
	nearestdist = dist;
	j++;
	nearestflag.nearbyspawns[nearestflag.nearbyspawns.size] = spawnpoints[i];
	i++;
/#
	println( "^1------------ Map Errors ------------" );
	i = 0;
	println( maperrors[i] );
	i++;
	println( "^1------------------------------------" );
	maps\mp\_utility::error( "Map errors. See above" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	return;
// SP = 0x0 - check OK
}

// 0x4B8C
createflagspawninfluencers()
{
	ss = level.spawnsystem;
	flag_index = 0;
	flag_index++;
	abc = [];
	abc[0] = "A";
	abc[1] = "B";
	abc[2] = "C";
	self.owned_flag_influencer = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, self.trigger.origin, ss.dom_owned_flag_influencer_radius[flag_index], ss.dom_owned_flag_influencer_score[flag_index], 0, "dom_owned_flag_" + abc[flag_index] + ",r,s", maps\mp\gametypes\_spawning::get_score_curve_index( ss.dom_owned_flag_influencer_score_curve ) );
	self.neutral_flag_influencer = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, self.trigger.origin, ss.dom_unowned_flag_influencer_radius, ss.dom_unowned_flag_influencer_score, 0, "dom_unowned_flag,r,s", maps\mp\gametypes\_spawning::get_score_curve_index( ss.dom_owned_flag_influencer_score_curve ) );
	self.enemy_flag_influencer = addsphereinfluencer( level.spawnsystem.einfluencer_type_game_mode, self.trigger.origin, ss.dom_enemy_flag_influencer_radius[flag_index], ss.dom_enemy_flag_influencer_score[flag_index], 0, "dom_enemy_flag_" + abc[flag_index] + ",r,s", maps\mp\gametypes\_spawning::get_score_curve_index( ss.dom_enemy_flag_influencer_score_curve ) );
	self update_spawn_influencers( "neutral" );
// SP = 0x0 - check OK
}

// 0x4CD4
update_spawn_influencers( team )
{
/#
	assert( IsDefined( self.neutral_flag_influencer ) );
#/
/#
	assert( IsDefined( self.owned_flag_influencer ) );
#/
/#
	assert( IsDefined( self.enemy_flag_influencer ) );
#/
	enableinfluencer( self.neutral_flag_influencer, 1 );
	enableinfluencer( self.owned_flag_influencer, 0 );
	enableinfluencer( self.enemy_flag_influencer, 0 );
	enableinfluencer( self.neutral_flag_influencer, 0 );
	enableinfluencer( self.owned_flag_influencer, 1 );
	enableinfluencer( self.enemy_flag_influencer, 1 );
	setinfluencerteammask( self.owned_flag_influencer, getteammask( team ) );
	setinfluencerteammask( self.enemy_flag_influencer, getotherteamsmask( team ) );
// SP = 0x0 - check OK
}

// 0x4DB4
dom_gamemodespawndvars( reset_dvars )
{
	ss = level.spawnsystem;
	ss.dom_owned_flag_influencer_score = [];
	ss.dom_owned_flag_influencer_radius = [];
	ss.dom_owned_flag_influencer_score[0] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_A_influencer_score", "10", reset_dvars );
	ss.dom_owned_flag_influencer_radius[0] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_A_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_owned_flag_influencer_score[1] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_B_influencer_score", "10", reset_dvars );
	ss.dom_owned_flag_influencer_radius[1] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_B_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_owned_flag_influencer_score[2] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_C_influencer_score", "10", reset_dvars );
	ss.dom_owned_flag_influencer_radius[2] = set_dvar_float_if_unset( "scr_spawn_dom_owned_flag_C_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_owned_flag_influencer_score_curve = set_dvar_if_unset( "scr_spawn_dom_owned_flag_influencer_score_curve", "constant", reset_dvars );
	ss.dom_enemy_flag_influencer_score = [];
	ss.dom_enemy_flag_influencer_radius = [];
	ss.dom_enemy_flag_influencer_score[0] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_A_influencer_score", "-50", reset_dvars );
	ss.dom_enemy_flag_influencer_radius[0] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_A_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_enemy_flag_influencer_score[1] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_B_influencer_score", "-50", reset_dvars );
	ss.dom_enemy_flag_influencer_radius[1] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_B_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_enemy_flag_influencer_score[2] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_C_influencer_score", "-50", reset_dvars );
	ss.dom_enemy_flag_influencer_radius[2] = set_dvar_float_if_unset( "scr_spawn_dom_enemy_flag_C_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
	ss.dom_enemy_flag_influencer_score_curve = set_dvar_if_unset( "scr_spawn_dom_enemy_flag_influencer_score_curve", "constant", reset_dvars );
	ss.dom_unowned_flag_influencer_score = set_dvar_float_if_unset( "scr_spawn_dom_unowned_flag_influencer_score", "-500", reset_dvars );
	ss.dom_unowned_flag_influencer_score_curve = set_dvar_if_unset( "scr_spawn_dom_unowned_flag_influencer_score_curve", "constant", reset_dvars );
	ss.dom_unowned_flag_influencer_radius = set_dvar_float_if_unset( "scr_spawn_dom_unowned_flag_influencer_radius", "" + 15 * get_player_height(), reset_dvars );
// SP = 0x0 - check OK
}

// 0x5020
addspawnpointsforflag( team, flag_team, flagspawnname )
{
	team = getotherteam( team );
	otherteam = getotherteam( team );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( team, flagspawnname );
// SP = 0x0 - check OK
}

// 0x506C
change_dom_spawns()
{
	maps\mp\gametypes\_spawnlogic::clearspawnpoints();
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "allies", "mp_dom_spawn" );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "axis", "mp_dom_spawn" );
	flag_number = level.flags.size;
	i = 0;
	label = level.flags[i].useobj maps\mp\gametypes\_gameobjects::getlabel();
	flagspawnname = "mp_dom_spawn_flag" + label;
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "allies", flagspawnname );
	maps\mp\gametypes\_spawnlogic::addspawnpoints( "axis", flagspawnname );
	i++;
	i = 0;
	label = level.flags[i].useobj maps\mp\gametypes\_gameobjects::getlabel();
	flagspawnname = "mp_dom_spawn_flag" + label;
	flag_team = level.flags[i] getflagteam();
	addspawnpointsforflag( "allies", flag_team, flagspawnname );
	addspawnpointsforflag( "axis", flag_team, flagspawnname );
	i++;
	maps\mp\gametypes\_spawning::updateallspawnpoints();
// SP = 0x0 - check OK
}

// 0x5184
dominated_challenge_check()
{
	num_flags = level.flags.size;
	allied_flags = 0;
	axis_flags = 0;
	i = 0;
	flag_team = level.flags[i] getflagteam();
	allied_flags++;
	axis_flags++;
	return 0;
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x5200
dominated_check()
{
	num_flags = level.flags.size;
	allied_flags = 0;
	axis_flags = 0;
	i = 0;
	flag_team = level.flags[i] getflagteam();
	allied_flags++;
	axis_flags++;
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x5278
updatecapsperminute( lastownerteam )
{
	self.numcaps = 0;
	self.capsperminute = 0;
	return;
	self.numcaps++;
	minutespassed = maps\mp\gametypes\_globallogic_utils::gettimepassed() / 60000;
	minutespassed = self.timeplayed["total"] / 60;
	self.capsperminute = self.numcaps / minutespassed;
	self.capsperminute = self.numcaps;
// SP = 0x0 - check OK
}

// 0x530C
isscoreboosting( player, flag )
{
	return 0;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x5348
onupdateuserate()
{
	self.contested = 0;
	numother = getnumtouchingexceptteam( self.ownerteam );
	numowners = self.numtouching[self.claimteam];
	previousstate = self.contested;
	self.contested = 1;
	self notify( "contest_over" );
	self.contested = 0;
// SP = 0x0 - check OK
}
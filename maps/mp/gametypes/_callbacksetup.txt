// maps/mp/gametypes/_callbacksetup.gsc

#include maps\mp\gametypes\_hostmigration;
#include maps\mp\gametypes\_globallogic_vehicle;
#include maps\mp\gametypes\_globallogic_actor;
#include maps\mp\gametypes\_globallogic_player;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\_audio;
#include maps\mp\_utility;


// 0xA0C
codecallback_startgametype()
{
	[[level.callbackstartgametype]]();
	level.gametypestarted = 1;
// SP = 0x0 - check OK
}

// 0xA38
codecallback_finalizeinitialization()
{
	maps\mp\_utility::callback( "on_finalize_initialization" );
// SP = 0x0 - check OK
}

// 0xA4C
codecallback_playerconnect()
{
	self endon( "disconnect" );
	self thread maps\mp\_audio::monitor_player_sprint();
	[[level.callbackplayerconnect]]();
// SP = 0x0 - check OK
}

// 0xA6C
codecallback_playerdisconnect()
{
	self notify( "disconnect" );
	level notify( "disconnect", self );
	client_num = self getentitynumber();
	[[level.callbackplayerdisconnect]]();
// SP = 0x0 - check OK
}

// 0xA98
codecallback_hostmigration()
{
/#
	println( "****CodeCallback_HostMigration****" );
#/
	[[level.callbackhostmigration]]();
// SP = 0x0 - check OK
}

// 0xAB8
codecallback_hostmigrationsave()
{
/#
	println( "****CodeCallback_HostMigrationSave****" );
#/
	[[level.callbackhostmigrationsave]]();
// SP = 0x0 - check OK
}

// 0xAD8
codecallback_playermigrated()
{
/#
	println( "****CodeCallback_PlayerMigrated****" );
#/
	[[level.callbackplayermigrated]]();
// SP = 0x0 - check OK
}

// 0xAF8
codecallback_playerdamage( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, boneindex )
{
	self endon( "disconnect" );
	[[level.callbackplayerdamage]]( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, boneindex );
// SP = 0x0 - check OK
}

// 0xB3C
codecallback_playerkilled( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset, deathanimduration )
{
	self endon( "disconnect" );
	[[level.callbackplayerkilled]]( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset, deathanimduration );
// SP = 0x0 - check OK
}

// 0xB78
codecallback_playerlaststand( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset, deathanimduration )
{
	self endon( "disconnect" );
	[[level.callbackplayerlaststand]]( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset, deathanimduration );
// SP = 0x0 - check OK
}

// 0xBB4
codecallback_playermelee( eattacker, idamage, sweapon, vorigin, vdir, boneindex, shieldhit )
{
	self endon( "disconnect" );
	[[level.callbackplayermelee]]( eattacker, idamage, sweapon, vorigin, vdir, boneindex, shieldhit );
// SP = 0x0 - check OK
}

// 0xBE8
codecallback_actordamage( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, boneindex )
{
	[[level.callbackactordamage]]( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, boneindex );
// SP = 0x0 - check OK
}

// 0xC24
codecallback_actorkilled( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset )
{
	[[level.callbackactorkilled]]( einflictor, eattacker, idamage, smeansofdeath, sweapon, vdir, shitloc, timeoffset );
// SP = 0x0 - check OK
}

// 0xC54
codecallback_vehicledamage( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, damagefromunderneath, modelindex, partname )
{
	[[level.callbackvehicledamage]]( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, timeoffset, damagefromunderneath, modelindex, partname );
// SP = 0x0 - check OK
}

// 0xC98
codecallback_vehicleradiusdamage( einflictor, eattacker, idamage, finnerdamage, fouterdamage, idflags, smeansofdeath, sweapon, vpoint, fradius, fconeanglecos, vconedir, timeoffset )
{
	[[level.callbackvehicleradiusdamage]]( einflictor, eattacker, idamage, finnerdamage, fouterdamage, idflags, smeansofdeath, sweapon, vpoint, fradius, fconeanglecos, vconedir, timeoffset );
// SP = 0x0 - check OK
}

// 0xCDC
codecallback_faceeventnotify( notify_msg, ent )
{
	ent sendfaceevent( level.face_event_handler.events[notify_msg] );
// SP = 0x0 - check OK
}

// 0xD34
codecallback_menuresponse( action, arg )
{
	level.menuresponsequeue = [];
	level thread menuresponsequeuepump();
	index = level.menuresponsequeue.size;
	level.menuresponsequeue[index] = spawnstruct();
	level.menuresponsequeue[index].action = action;
	level.menuresponsequeue[index].arg = arg;
	level.menuresponsequeue[index].ent = self;
	level notify( "menuresponse_queue" );
// SP = 0x0 - check OK
}

// 0xDAC
menuresponsequeuepump()
{
	level waittill( "menuresponse_queue" );
	level.menuresponsequeue[0].ent notify( "menuresponse", level.menuresponsequeue[0].action, level.menuresponsequeue[0].arg );
	arrayremoveindex( level.menuresponsequeue, 0, 0 );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xE10
setupcallbacks()
{
	setdefaultcallbacks();
	level.idflags_radius = 1;
	level.idflags_no_armor = 2;
	level.idflags_no_knockback = 4;
	level.idflags_penetration = 8;
	level.idflags_destructible_entity = 16;
	level.idflags_shield_explosive_impact = 32;
	level.idflags_shield_explosive_impact_huge = 64;
	level.idflags_shield_explosive_splash = 128;
	level.idflags_no_team_protection = 256;
	level.idflags_no_protection = 512;
	level.idflags_passthru = 1024;
// SP = 0x0 - check OK
}

// 0xE78
setdefaultcallbacks()
{
	level.callbackstartgametype = maps\mp\gametypes\_globallogic::callback_startgametype;
	level.callbackplayerconnect = maps\mp\gametypes\_globallogic_player::callback_playerconnect;
	level.callbackplayerdisconnect = maps\mp\gametypes\_globallogic_player::callback_playerdisconnect;
	level.callbackplayerdamage = maps\mp\gametypes\_globallogic_player::callback_playerdamage;
	level.callbackplayerkilled = maps\mp\gametypes\_globallogic_player::callback_playerkilled;
	level.callbackplayermelee = maps\mp\gametypes\_globallogic_player::callback_playermelee;
	level.callbackplayerlaststand = maps\mp\gametypes\_globallogic_player::callback_playerlaststand;
	level.callbackactordamage = maps\mp\gametypes\_globallogic_actor::callback_actordamage;
	level.callbackactorkilled = maps\mp\gametypes\_globallogic_actor::callback_actorkilled;
	level.callbackvehicledamage = maps\mp\gametypes\_globallogic_vehicle::callback_vehicledamage;
	level.callbackvehicleradiusdamage = maps\mp\gametypes\_globallogic_vehicle::callback_vehicleradiusdamage;
	level.callbackplayermigrated = maps\mp\gametypes\_globallogic_player::callback_playermigrated;
	level.callbackhostmigration = maps\mp\gametypes\_hostmigration::callback_hostmigration;
	level.callbackhostmigrationsave = maps\mp\gametypes\_hostmigration::callback_hostmigrationsave;
// SP = 0x0 - check OK
}

// 0xF28
abortlevel()
{
/#
	println( "ERROR: Aborting level - gametype is not supported" );
#/
	level.callbackstartgametype = ::callbackvoid;
	level.callbackplayerconnect = ::callbackvoid;
	level.callbackplayerdisconnect = ::callbackvoid;
	level.callbackplayerdamage = ::callbackvoid;
	level.callbackplayerkilled = ::callbackvoid;
	level.callbackplayerlaststand = ::callbackvoid;
	level.callbackplayermelee = ::callbackvoid;
	level.callbackactordamage = ::callbackvoid;
	level.callbackactorkilled = ::callbackvoid;
	level.callbackvehicledamage = ::callbackvoid;
	setdvar( "g_gametype", "dm" );
	exitlevel( 0 );
// SP = 0x0 - check OK
}

// 0xFD4
codecallback_glasssmash( pos, dir )
{
	level notify( "glass_smash", pos, dir );
// SP = 0x0 - check OK
}

// 0xFEC
callbackvoid()
{
// SP = 0x0 - check OK
}
// maps/mp/gametypes/_wager.gsc

#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_class;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\teams\_teams;
#include maps\mp\gametypes\_globallogic;
#include maps\mp\gametypes\_persistence;
#include maps\mp\gametypes\_rank;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\gametypes\_globallogic_score;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xF94
init()
{
	precachestring( &"MP_HEADS_UP" );
	precachestring( &"MP_U2_ONLINE" );
	precachestring( &"MP_BONUS_ACQUIRED" );
	level.wagermatch = 1;
	game["wager_pot"] = 0;
	game["wager_initial_pot"] = 0;
	game["dialog"]["wm_u2_online"] = "boost_gen_02";
	game["dialog"]["wm_in_the_money"] = "boost_gen_06";
	game["dialog"]["wm_oot_money"] = "boost_gen_07";
	level.poweruplist = [];
	level thread onplayerconnect();
	level thread helpgameend();
	level.wagermatch = 0;
	level.takelivesondeath = 1;
// SP = 0x0 - check OK
}

// 0x1058
onplayerconnect()
{
	level waittill( "connected", player );
	player thread ondisconnect();
	player thread initwagerplayer();
// SP = 0x0 - check OK
}

// 0x1088
initwagerplayer()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self.pers["wager"] = 1;
	self.pers["wager_sideBetWinnings"] = 0;
	self.pers["wager_sideBetLosses"] = 0;
	self.pers["hasRadar"] = 1;
	self.hasspyplane = 1;
	self.pers["hasRadar"] = 0;
	self.hasspyplane = 0;
	self thread deductplayerante();
// SP = 0x0 - check OK
}

// 0x111C
ondisconnect()
{
	level endon( "game_ended" );
	self endon( "player_eliminated" );
	self waittill( "disconnect" );
	level notify( "player_eliminated" );
// SP = 0x0 - check OK
}

// 0x113C
deductplayerante()
{
	return;
	waittillframeend;
	codpoints = self maps\mp\gametypes\_rank::getcodpointsstat();
	wagerbet = GetDvarInt( #"0xE4C48E3D" );
	wagerbet = codpoints;
	codpoints -= wagerbet;
	self maps\mp\gametypes\_rank::setcodpointsstat( codpoints );
	self incrementescrowforplayer( wagerbet );
	game["wager_pot"] += wagerbet;
	game["wager_initial_pot"] += wagerbet;
	self.pers["hasPaidWagerAnte"] = 1;
	self addplayerstat( "LIFETIME_BUYIN", wagerbet );
	self addrecentearningstostat( 0 - wagerbet );
	[[level.onwagerplayerante]]( self, wagerbet );
	self thread maps\mp\gametypes\_persistence::uploadstatssoon();
// SP = 0x0 - check OK
}

// 0x1214
incrementescrowforplayer( amount )
{
	return;
	game["escrows"] = [];
	playerxuid = self getxuid();
	return;
	escrowstruct = spawnstruct();
	escrowstruct.xuid = playerxuid;
	escrowstruct.amount = amount;
	game["escrows"][game["escrows"].size] = escrowstruct;
// SP = 0x0 - check OK
}

// 0x128C
clearescrows()
{
	return;
	escrows = game["escrows"];
	numescrows = escrows.size;
	i = 0;
	escrowstruct = escrows[i];
	i++;
	game["escrows"] = [];
// SP = 0x0 - check OK
}

// 0x12D8
addrecentearningstostat( recentearnings )
{
	currearnings = self maps\mp\gametypes\_persistence::getrecentstat( 1, 0, "score" );
	self maps\mp\gametypes\_persistence::setrecentstat( 1, 0, "score", currearnings + recentearnings );
// SP = 0x0 - check OK
}

// 0x130C
prematchperiod()
{
	return;
// SP = 0x0 - check OK
}

// 0x131C
finalizewagerround()
{
	return;
	determinewagerwinnings();
	[[level.onwagerfinalizeround]]();
// SP = 0x0 - check OK
}

// 0x1348
determinewagerwinnings()
{
	shouldcalculatewinnings = !(level.dontcalcwagerwinnings);
	return;
	calculatefreeforallpayouts();
	calculateteampayouts();
// SP = 0x0 - check OK
}

// 0x138C
calculatefreeforallpayouts()
{
	playerrankings = level.placement["all"];
	payoutpercentages = array( 0.5, 0.3, 0.2 );
	payoutpercentages = array( 0.7, 0.3 );
	payoutpercentages = array( 1 );
	setwagerwinningsonplayers( level.players, 0 );
	wagerbet = GetDvarInt( #"0xE4C48E3D" );
	i = 0;
	playerrankings[i].wagerwinnings = wagerbet;
	i++;
	game["escrows"] = undefined;
	return;
	currentpayoutpercentage = 0;
	cumulativepayoutpercentage = payoutpercentages[0];
	playergroup = [];
	playergroup[playergroup.size] = playerrankings[0];
	i = 1;
	setwagerwinningsonplayers( playergroup, int( game["wager_pot"] * cumulativepayoutpercentage / playergroup.size ) );
	playergroup = [];
	cumulativepayoutpercentage = 0;
	playergroup[playergroup.size] = playerrankings[i];
	currentpayoutpercentage++;
	cumulativepayoutpercentage += payoutpercentages[currentpayoutpercentage];
	i++;
	setwagerwinningsonplayers( playergroup, int( game["wager_pot"] * cumulativepayoutpercentage / playergroup.size ) );
// SP = 0x0 - check OK
}

// 0x1548
calculateplacesbasedonscore()
{
	level.playerplaces = array( [], [], [] );
	playerrankings = level.placement["all"];
	placementscores = array( playerrankings[0].pers["score"], -1, -1 );
	currentplace = 0;
	index = 0;
	player = playerrankings[index];
	currentplace++;
	placementscores[currentplace] = player.pers["score"];
	level.playerplaces[currentplace][level.playerplaces[currentplace].size] = player;
	index++;
// SP = 0x0 - check OK
}

// 0x1608
calculateteampayouts()
{
	winner = maps\mp\gametypes\_globallogic::determineteamwinnerbygamestat( "teamScores" );
	calculatefreeforallpayouts();
	return;
	playersonwinningteam = [];
	index = 0;
	player = level.players[index];
	player.wagerwinnings = 0;
	playersonwinningteam[playersonwinningteam.size] = player;
	index++;
	setwagerwinningsonplayers( level.players, GetDvarInt( #"0xE4C48E3D" ) );
	return;
	winningssplit = int( game["wager_pot"] / playersonwinningteam.size );
	setwagerwinningsonplayers( playersonwinningteam, winningssplit );
// SP = 0x0 - check OK
}

// 0x16C4
setwagerwinningsonplayers( players, amount )
{
	index = 0;
	players[index].wagerwinnings = amount;
	index++;
// SP = 0x0 - check OK
}

// 0x16F4
finalizewagergame()
{
	level.wagergamefinalized = 1;
	return;
	determinewagerwinnings();
	determinetopearners();
	players = level.players;
	wait 0.5;
	playerrankings = level.wagertopearners;
	index = 0;
	player = players[index];
	payoutwagerwinnings( player, player.wagerwinnings + player.pers["wager_sideBetWinnings"] );
	payoutwagerwinnings( player, player.wagerwinnings );
	maps\mp\gametypes\_globallogic_score::updatewinstats( player );
	index++;
	clearescrows();
// SP = 0x0 - check OK
}

// 0x17C0
payoutwagerwinnings( player, winnings )
{
	return;
	codpoints = player maps\mp\gametypes\_rank::getcodpointsstat();
	player maps\mp\gametypes\_rank::setcodpointsstat( codpoints + winnings );
	player addplayerstat( "LIFETIME_EARNINGS", winnings );
	player addrecentearningstostat( winnings );
// SP = 0x0 - check OK
}

// 0x1814
determinetopearners()
{
	topwinnings = array( -1, -1, -1 );
	level.wagertopearners = [];
	index = 0;
	player = level.players[index];
	player.wagerwinnings = 0;
	topwinnings[2] = topwinnings[1];
	topwinnings[1] = topwinnings[0];
	topwinnings[0] = player.wagerwinnings;
	level.wagertopearners[2] = level.wagertopearners[1];
	level.wagertopearners[1] = level.wagertopearners[0];
	level.wagertopearners[0] = player;
	topwinnings[2] = topwinnings[1];
	topwinnings[1] = player.wagerwinnings;
	level.wagertopearners[2] = level.wagertopearners[1];
	level.wagertopearners[1] = player;
	topwinnings[2] = player.wagerwinnings;
	level.wagertopearners[2] = player;
	index++;
// SP = 0x0 - check OK
}

// 0x193C
postroundsidebet()
{
	level notify( "side_bet_begin" );
	level waittill( "side_bet_end" );
// SP = 0x0 - check OK
}

// 0x1960
sidebettimer()
{
	level endon( "side_bet_end" );
	secondstowait = ( level.sidebetendtime - GetTime() ) / 1000;
	secondstowait = 0;
	wait secondstowait;
	playerindex = 0;
	level.players[playerindex] closemenu();
	playerindex++;
	level notify( "side_bet_end" );
// SP = 0x0 - check OK
}

// 0x19CC
sidebetallbetsplaced()
{
	secondsleft = ( level.sidebetendtime - GetTime() ) / 1000;
	return;
	level.sidebetendtime = GetTime() + 3000;
	wait 3;
	playerindex = 0;
	level.players[playerindex] closemenu();
	playerindex++;
	level notify( "side_bet_end" );
// SP = 0x0 - check OK
}

// 0x1A40
setupblankrandomplayer( takeweapons, chooserandombody, weapon )
{
	self assignrandombody();
	self.pers["wagerBodyAssigned"] = 1;
	self maps\mp\teams\_teams::set_player_model( self.team, weapon );
	self clearperks();
	self.killstreak = [];
	self.pers["killstreaks"] = [];
	self.pers["killstreak_has_been_used"] = [];
	self.pers["killstreak_unique_id"] = [];
	self takeallweapons();
	self.hasspyplane = 1;
	i = 0;
	self applypowerup( self.powerups[i] );
	i++;
	self setradarvisibility();
// SP = 0x0 - check OK
}

// 0x1B40
assignrandombody()
{
// SP = 0x0 - check OK
}

// 0x1B48
queuewagerpopup( message, points, submessage, announcement )
{
	self endon( "disconnect" );
	size = self.wagernotifyqueue.size;
	self.wagernotifyqueue[size] = spawnstruct();
	self.wagernotifyqueue[size].message = message;
	self.wagernotifyqueue[size].points = points;
	self.wagernotifyqueue[size].submessage = submessage;
	self.wagernotifyqueue[size].announcement = announcement;
	self notify( "received award" );
// SP = 0x0 - check OK
}

// 0x1BC0
helpgameend()
{
	level endon( "game_ended" );
	level waittill( "player_eliminated" );
	wait 0.05;
	players = level.players;
	playersleft = 0;
	i = 0;
	playersleft++;
	i++;
	i = 0;
	players[i] queuewagerpopup( &"MP_HEADS_UP", 0, &"MP_U2_ONLINE", "wm_u2_online" );
	players[i].pers["hasRadar"] = 1;
	players[i].hasspyplane = 1;
	level.activeuavs[players[i] getentitynumber()]++;
	i++;
// SP = 0x0 - check OK
}

// 0x1CB4
setradarvisibility()
{
	prevscoreplace = self.prevscoreplace;
	prevscoreplace = 1;
	self unsetperk( "specialty_gpsjammer" );
	self setperk( "specialty_gpsjammer" );
	self unsetperk( "specialty_gpsjammer" );
	self setperk( "specialty_gpsjammer" );
// SP = 0x0 - check OK
}

// 0x1D68
playerscored()
{
	self notify( "wager_player_scored" );
	self endon( "wager_player_scored" );
	wait 0.05;
	maps\mp\gametypes\_globallogic::updateplacement();
	i = 0;
	prevscoreplace = level.placement["all"][i].prevscoreplace;
	prevscoreplace = 1;
	currentscoreplace = i + 1;
	j = i - 1;
	currentscoreplace--;
	j--;
	wasinthemoney = prevscoreplace <= 3;
	isinthemoney = currentscoreplace <= 3;
	level.placement["all"][i] wagerannouncer( "wm_in_the_money" );
	level.placement["all"][i] wagerannouncer( "wm_oot_money" );
	level.placement["all"][i].prevscoreplace = currentscoreplace;
	level.placement["all"][i] setradarvisibility();
	i++;
// SP = 0x0 - check OK
}

// 0x1E9C
wagerannouncer( dialog, group )
{
	self maps\mp\gametypes\_globallogic_audio::leaderdialogonplayer( dialog, group );
// SP = 0x0 - check OK
}

// 0x1EB8
createpowerup( name, type, displayname, iconmaterial )
{
	powerup = spawnstruct();
	powerup.name = [];
	powerup.name[0] = name;
	powerup.type = type;
	powerup.displayname = displayname;
	powerup.iconmaterial = iconmaterial;
	return powerup;
// SP = 0x0 - check OK
}

// 0x1F08
addpowerup( name, type, displayname, iconmaterial )
{
	level.poweruplist = [];
	i = 0;
	level.poweruplist[i].name[level.poweruplist[i].name.size] = name;
	return;
	i++;
	powerup = createpowerup( name, type, displayname, iconmaterial );
	level.poweruplist[level.poweruplist.size] = powerup;
// SP = 0x0 - check OK
}

// 0x1F98
copypowerup( powerup )
{
	return createpowerup( powerup.name[0], powerup.type, powerup.displayname, powerup.iconmaterial );
// SP = 0x0 - check OK
}

// 0x1FC8
applypowerup( powerup )
{
	switch ( powerup.type )
	{
		case "equipment":
			self giveweapon( powerup.name[0] );
			self switchtoweapon( powerup.name[0] );
			break;
		case "killstreak":
			self giveweapon( powerup.name[0] );
			break;
		case "perk":
			self giveweapon( powerup.name[0] );
			self maps\mp\gametypes\_class::setweaponammooverall( powerup.name[0], 1 );
			self setactionslot( 1, "weapon", powerup.name[0] );
			break;
		case "primary":
			self setoffhandprimaryclass( powerup.name[0] );
			self giveweapon( powerup.name[0] );
			self setweaponammoclip( powerup.name[0], 2 );
			break;
		case "primary_grenade":
			self setoffhandsecondaryclass( powerup.name[0] );
			self giveweapon( powerup.name[0] );
			self setweaponammoclip( powerup.name[0], 2 );
			break;
		case "score_multiplier":
			i = 0;
			self setperk( powerup.name[i] );
			i++;
			break;
		case "secondary":
			self maps\mp\killstreaks\_killstreaks::givekillstreak( powerup.name[0] );
			break;
		case "secondary_grenade":
			self.scoremultiplier = powerup.name[0];
			break;
	}
// SP = 0x0 - check OK
}

// 0x2174
givepowerup( powerup, doanimation )
{
	self.powerups = [];
	powerupindex = self.powerups.size;
	self.powerups[powerupindex] = copypowerup( powerup );
	i = 0;
	self.powerups[powerupindex].name[self.powerups[powerupindex].name.size] = powerup.name[i];
	i++;
	self applypowerup( self.powerups[powerupindex] );
	self thread showpowerupmessage( powerupindex, doanimation );
// SP = 0x0 - check OK
}

// 0x2210
pulsepowerupicon( powerupindex )
{
	return;
	self endon( "disconnect" );
	self endon( "delete" );
	self endon( "clearing_powerups" );
	pulsepercent = 1.5;
	pulsetime = 0.5;
	hud_elem = self.powerups[powerupindex].hud_elem_icon;
	return;
	origx = hud_elem.x;
	origy = hud_elem.y;
	origwidth = hud_elem.width;
	origheight = hud_elem.height;
	bigwidth = origwidth * pulsepercent;
	bigheight = origheight * pulsepercent;
	xoffset = ( bigwidth - origwidth ) / 2;
	yoffset = ( bigheight - origheight ) / 2;
	hud_elem scaleovertime( 0.05, int( bigwidth ), int( bigheight ) );
	hud_elem moveovertime( 0.05 );
	hud_elem.x = origx - xoffset;
	hud_elem.y = origy - yoffset;
	wait 0.05;
	hud_elem scaleovertime( pulsetime, origwidth, origheight );
	hud_elem moveovertime( pulsetime );
	hud_elem.x = origx;
	hud_elem.y = origy;
// SP = 0x0 - check OK
}

// 0x2380
showpowerupmessage( powerupindex, doanimation )
{
	self endon( "disconnect" );
	self endon( "delete" );
	self endon( "clearing_powerups" );
	doanimation = 1;
	wasinprematch = level.inprematchperiod;
	powerupstarty = 320;
	powerupspacing = 40;
	powerupstarty = 120;
	powerupspacing = 35;
	self.powerups[powerupindex].hud_elem destroy();
	self.powerups[powerupindex].hud_elem = newclienthudelem( self );
	self.powerups[powerupindex].hud_elem.fontscale = 1.5;
	self.powerups[powerupindex].hud_elem.x = -125;
	self.powerups[powerupindex].hud_elem.y = powerupstarty - powerupspacing * powerupindex;
	self.powerups[powerupindex].hud_elem.alignx = "left";
	self.powerups[powerupindex].hud_elem.aligny = "middle";
	self.powerups[powerupindex].hud_elem.horzalign = "user_right";
	self.powerups[powerupindex].hud_elem.vertalign = "user_top";
	self.powerups[powerupindex].hud_elem.color = ( 1, 1, 1 );
	self.powerups[powerupindex].hud_elem.foreground = 1;
	self.powerups[powerupindex].hud_elem.hidewhendead = 0;
	self.powerups[powerupindex].hud_elem.hidewheninmenu = 1;
	self.powerups[powerupindex].hud_elem.hidewheninkillcam = 1;
	self.powerups[powerupindex].hud_elem.archived = 0;
	self.powerups[powerupindex].hud_elem.alpha = 0;
	self.powerups[powerupindex].hud_elem settext( self.powerups[powerupindex].displayname );
	bigiconsize = 40;
	iconsize = 32;
	self.powerups[powerupindex].hud_elem_icon destroy();
	self.powerups[powerupindex].hud_elem_icon = self createicon( self.powerups[powerupindex].iconmaterial, bigiconsize, bigiconsize );
	self.powerups[powerupindex].hud_elem_icon.animating = 1;
	self.powerups[powerupindex].hud_elem_icon = self createicon( self.powerups[powerupindex].iconmaterial, iconsize, iconsize );
	self.powerups[powerupindex].hud_elem_icon.x = ( ( self.powerups[powerupindex].hud_elem.x - 5 ) - iconsize / 2 ) - bigiconsize / 2;
	self.powerups[powerupindex].hud_elem_icon.y = ( powerupstarty - powerupspacing * powerupindex ) - bigiconsize / 2;
	self.powerups[powerupindex].hud_elem_icon.horzalign = "user_right";
	self.powerups[powerupindex].hud_elem_icon.vertalign = "user_top";
	self.powerups[powerupindex].hud_elem_icon.color = ( 1, 1, 1 );
	self.powerups[powerupindex].hud_elem_icon.foreground = 1;
	self.powerups[powerupindex].hud_elem_icon.hidewhendead = 0;
	self.powerups[powerupindex].hud_elem_icon.hidewheninmenu = 1;
	self.powerups[powerupindex].hud_elem_icon.hidewheninkillcam = 1;
	self.powerups[powerupindex].hud_elem_icon.archived = 0;
	self.powerups[powerupindex].hud_elem_icon.alpha = 1;
	self thread queuewagerpopup( self.powerups[powerupindex].displayname, 0, &"MP_BONUS_ACQUIRED" );
	pulsetime = 0.5;
	self.powerups[powerupindex].hud_elem fadeovertime( pulsetime );
	self.powerups[powerupindex].hud_elem_icon scaleovertime( pulsetime, iconsize, iconsize );
	self.powerups[powerupindex].hud_elem_icon.width = iconsize;
	self.powerups[powerupindex].hud_elem_icon.height = iconsize;
	self.powerups[powerupindex].hud_elem_icon moveovertime( pulsetime );
	self.powerups[powerupindex].hud_elem.alpha = 1;
	self.powerups[powerupindex].hud_elem_icon.x = self.powerups[powerupindex].hud_elem.x - 5 - iconsize;
	self.powerups[powerupindex].hud_elem_icon.y = ( powerupstarty - powerupspacing * powerupindex ) - iconsize / 2;
	wait pulsetime;
	level waittill( "prematch_over" );
	wait pulsetime;
	self thread queuewagerpopup( self.powerups[powerupindex].displayname, 0, &"MP_BONUS_ACQUIRED" );
	wait 1.5;
	i = 0;
	self.powerups[i].hud_elem fadeovertime( 0.25 );
	self.powerups[i].hud_elem.alpha = 0;
	i++;
	wait 0.25;
	i = 0;
	self.powerups[i].hud_elem_icon moveovertime( 0.25 );
	self.powerups[i].hud_elem_icon.x = 0 - iconsize;
	self.powerups[i].hud_elem_icon.horzalign = "user_right";
	i++;
	self.powerups[powerupindex].hud_elem_icon.animating = 0;
// SP = 0x0 - check OK
}

// 0x2914
clearpowerups()
{
	self notify( "clearing_powerups" );
	i = 0;
	self.powerups[i].hud_elem destroy();
	self.powerups[i].hud_elem_icon destroy();
	i++;
	self.powerups = [];
// SP = 0x0 - check OK
}

// 0x29A0
trackwagerweaponusage( name, incvalue, statname )
{
	self.wagerweaponusage = [];
	self.wagerweaponusage[name] = [];
	self.wagerweaponusage[name][statname] = 0;
	self.wagerweaponusage[name][statname] += incvalue;
// SP = 0x0 - check OK
}

// 0x2A08
gethighestwagerweaponusage( statname )
{
	return undefined;
	bestweapon = undefined;
	highestvalue = 0;
	wagerweaponsused = getarraykeys( self.wagerweaponusage );
	i = 0;
	weaponstats = self.wagerweaponusage[wagerweaponsused[i]];
	bestweapon = wagerweaponsused[i];
	highestvalue = weaponstats[statname];
	i++;
	return bestweapon;
// SP = 0x0 - check OK
}

// 0x2AA8
setwagerafteractionreportstats()
{
	topweapon = self gethighestwagerweaponusage( "kills" );
	topkills = 0;
	topkills = self.wagerweaponusage[topweapon]["kills"];
	topweapon = self gethighestwagerweaponusage( "timeUsed" );
	topweapon = "";
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "topWeaponItemIndex", getbaseweaponitemindex( topweapon ) );
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "topWeaponKills", topkills );
	self [[level.onwagerawards]]();
	i = 0;
	self maps\mp\gametypes\_persistence::setafteractionreportstat( "wagerAwards", 0, i );
	i++;
// SP = 0x0 - check OK
}
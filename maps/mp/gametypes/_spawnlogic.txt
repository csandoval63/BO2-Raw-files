// maps/mp/gametypes/_spawnlogic.gsc

#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\_callbacksetup;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x139C
onplayerconnect()
{
	level waittill( "connected", player );
// SP = 0x0 - check OK
}

// 0x13B4
findboxcenter( mins, maxs )
{
	center = ( 0, 0, 0 );
	center = maxs - mins;
	center = ( center[0] / 2, center[1] / 2, center[2] / 2 ) + mins;
	return center;
// SP = 0x0 - check OK
}

// 0x13F0
expandmins( mins, point )
{
	mins = ( point[0], mins[1], mins[2] );
	mins = ( mins[0], point[1], mins[2] );
	mins = ( mins[0], mins[1], point[2] );
	return mins;
// SP = 0x0 - check OK
}

// 0x145C
expandmaxs( maxs, point )
{
	maxs = ( point[0], maxs[1], maxs[2] );
	maxs = ( maxs[0], point[1], maxs[2] );
	maxs = ( maxs[0], maxs[1], point[2] );
	return maxs;
// SP = 0x0 - check OK
}

// 0x14C8
addspawnpointsinternal( team, spawnpointname )
{
	oldspawnpoints = [];
	oldspawnpoints = level.teamspawnpoints[team];
	level.teamspawnpoints[team] = getspawnpointarray( spawnpointname );
	level.spawnpoints = [];
	index = 0;
	spawnpoint = level.teamspawnpoints[team][index];
	spawnpoint spawnpointinit();
	level.spawnpoints[level.spawnpoints.size] = spawnpoint;
	index++;
	index = 0;
	origin = oldspawnpoints[index].origin;
	level.spawnmins = expandmins( level.spawnmins, origin );
	level.spawnmaxs = expandmaxs( level.spawnmaxs, origin );
	level.teamspawnpoints[team][level.teamspawnpoints[team].size] = oldspawnpoints[index];
	index++;
/#
	println( "^1ERROR: No " + spawnpointname + " spawnpoints found in level!" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	wait 1;
	return;
// SP = 0x0 - check OK
}

// 0x15F4
clearspawnpoints()
{
	foreach ( team in level.teams )
	{
		level.teamspawnpoints[team] = [];
	}
	level.spawnpoints = [];
	level.unified_spawn_points = undefined;
// SP = 0x0 - check OK
}

// 0x1640
addspawnpoints( team, spawnpointname )
{
	addspawnpointclassname( spawnpointname );
	addspawnpointteamclassname( team, spawnpointname );
	addspawnpointsinternal( team, spawnpointname );
// SP = 0x0 - check OK
}

// 0x1670
rebuildspawnpoints( team )
{
	level.teamspawnpoints[team] = [];
	index = 0;
	addspawnpointsinternal( team, level.spawn_point_team_class_names[team][index] );
	index++;
// SP = 0x0 - check OK
}

// 0x16B8
placespawnpoints( spawnpointname )
{
	addspawnpointclassname( spawnpointname );
	spawnpoints = getspawnpointarray( spawnpointname );
/#
	level.extraspawnpointsused = [];
#/
/#
	println( "^1No " + spawnpointname + " spawnpoints found in level!" );
#/
	maps\mp\gametypes\_callbacksetup::abortlevel();
	wait 1;
	return;
	index = 0;
	spawnpoints[index] spawnpointinit();
/#
	spawnpoints[index].fakeclassname = spawnpointname;
	level.extraspawnpointsused[level.extraspawnpointsused.size] = spawnpoints[index];
#/
	index++;
// SP = 0x0 - check OK
}

// 0x1764
dropspawnpoints( spawnpointname )
{
	spawnpoints = getspawnpointarray( spawnpointname );
/#
	println( "^1No " + spawnpointname + " spawnpoints found in level!" );
#/
	return;
	index = 0;
	spawnpoints[index] placespawnpoint();
	index++;
// SP = 0x0 - check OK
}

// 0x17C4
addspawnpointclassname( spawnpointclassname )
{
	level.spawn_point_class_names = [];
	level.spawn_point_class_names[level.spawn_point_class_names.size] = spawnpointclassname;
// SP = 0x0 - check OK
}

// 0x17EC
addspawnpointteamclassname( team, spawnpointclassname )
{
	level.spawn_point_team_class_names[team][level.spawn_point_team_class_names[team].size] = spawnpointclassname;
// SP = 0x0 - check OK
}

// 0x180C
getspawnpointarray( classname )
{
	spawnpoints = getentarray( classname, "classname" );
	return spawnpoints;
	i = 0;
	spawnpoints[spawnpoints.size] = level.extraspawnpoints[classname][i];
	i++;
	return spawnpoints;
// SP = 0x0 - check OK
}

// 0x1870
spawnpointinit()
{
	spawnpoint = self;
	origin = spawnpoint.origin;
	level.spawnmins = origin;
	level.spawnmaxs = origin;
	level.spawnminsmaxsprimed = 1;
	level.spawnmins = expandmins( level.spawnmins, origin );
	level.spawnmaxs = expandmaxs( level.spawnmaxs, origin );
	spawnpoint placespawnpoint();
	spawnpoint.forward = anglestoforward( spawnpoint.angles );
	spawnpoint.sighttracepoint = spawnpoint.origin + vector_scale( ( 0, 0, 1 ), 50 );
	spawnpoint.inited = 1;
// SP = 0x0 - check OK
}

// 0x1914
getteamspawnpoints( team )
{
	return level.teamspawnpoints[team];
// SP = 0x0 - check OK
}

// 0x1924
getspawnpoint_final( spawnpoints, useweights )
{
	bestspawnpoint = undefined;
	return undefined;
	useweights = 1;
	bestspawnpoint = getbestweightedspawnpoint( spawnpoints );
	thread spawnweightdebug( spawnpoints );
	i = 0;
	bestspawnpoint = spawnpoints[i];
	i++;
	i = 0;
	bestspawnpoint = spawnpoints[i];
	i++;
	bestspawnpoint = spawnpoints[randomint( spawnpoints.size )];
	bestspawnpoint = spawnpoints[0];
	self finalizespawnpointchoice( bestspawnpoint );
/#
	self storespawndata( spawnpoints, useweights, bestspawnpoint );
#/
	return bestspawnpoint;
// SP = 0x0 - check OK
}

// 0x1A60
finalizespawnpointchoice( spawnpoint )
{
	time = GetTime();
	self.lastspawnpoint = spawnpoint;
	self.lastspawntime = time;
	spawnpoint.lastspawnedplayer = self;
	spawnpoint.lastspawntime = time;
// SP = 0x0 - check OK
}

// 0x1A90
getbestweightedspawnpoint( spawnpoints )
{
	maxsighttracedspawnpoints = 3;
	try = 0;
	bestspawnpoints = [];
	bestweight = undefined;
	bestspawnpoint = undefined;
	i = 0;
	bestspawnpoints = [];
	bestspawnpoints[0] = spawnpoints[i];
	bestweight = spawnpoints[i].weight;
	bestspawnpoints[bestspawnpoints.size] = spawnpoints[i];
	i++;
	return undefined;
	bestspawnpoint = bestspawnpoints[randomint( bestspawnpoints.size )];
	return bestspawnpoint;
	return bestspawnpoint;
	return bestspawnpoint;
	penalty = getlospenalty();
/#
	bestspawnpoint.spawndata[bestspawnpoint.spawndata.size] = "Last minute sight trace: -" + penalty;
#/
	bestspawnpoint.weight -= penalty;
	bestspawnpoint.lastsighttracetime = GetTime();
	try++;
// SP = 0x0 - check OK
}

// 0x1C08
checkbad( spawnpoint )
{
/#
	i = 0;
	player = level.players[i];
	losexists = bullettracepassed( player.origin + vector_scale( ( 0, 0, 1 ), 50 ), spawnpoint.sighttracepoint, 0, undefined );
	thread badspawnline( spawnpoint.sighttracepoint, player.origin + vector_scale( ( 0, 0, 1 ), 50 ), self.name, player.name );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1CD0
badspawnline( start, end, name1, name2 )
{
/#
	dist = distance( start, end );
	i = 0;
	line( start, end, ( 1, 0, 0 ) );
	print3d( start, "Bad spawn! " + name1 + ", dist = " + dist );
	print3d( end, name2 );
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x1D4C
storespawndata( spawnpoints, useweights, bestspawnpoint )
{
/#
	level.storespawndata = GetDvarInt( #"0x96EBB72E" );
	level.spawngameid = randomint( 100 );
	level.spawnid = 0;
	level.spawnid++;
	file = openfile( "spawndata.txt", "append" );
	fprintfields( file, level.spawngameid + "." + level.spawnid + "," + spawnpoints.size + "," + self.name );
	i = 0;
	str = vectostr( spawnpoints[i].origin ) + ",";
	str += "1,";
	str += "0,";
	str += "0,";
	str += spawnpoints[i].weight + ",";
	spawnpoints[i].spawndata = [];
	spawnpoints[i].sightchecks = [];
	str += spawnpoints[i].spawndata.size + ",";
	j = 0;
	str += spawnpoints[i].spawndata[j] + ",";
	j++;
	str += spawnpoints[i].sightchecks.size + ",";
	j = 0;
	str = str + spawnpoints[i].sightchecks[j].penalty + "," + ( vectostr( spawnpoints[i].origin ) + "," );
	j++;
	fprintfields( file, str );
	i++;
	obj = spawnstruct();
	getallalliedandenemyplayers( obj );
	numallies = 0;
	numenemies = 0;
	str = "";
	i = 0;
	numallies++;
	str += vectostr( obj.allies[i].origin ) + ",";
	i++;
	i = 0;
	numenemies++;
	str += vectostr( obj.enemies[i].origin ) + ",";
	i++;
	str = numallies + "," + numenemies + "," + str;
	fprintfields( file, str );
	otherdata = [];
	index = otherdata.size;
	otherdata[index] = spawnstruct();
	otherdata[index].origin = level.bombguy.origin + vector_scale( ( 0, 0, 1 ), 20 );
	otherdata[index].text = "Bomb holder";
	index = otherdata.size;
	otherdata[index] = spawnstruct();
	otherdata[index].origin = level.bombpos;
	otherdata[index].text = "Bomb";
	i = 0;
	index = otherdata.size;
	otherdata[index] = spawnstruct();
	otherdata[index].origin = level.flags[i].origin;
	otherdata[index].text = level.flags[i].useobj maps\mp\gametypes\_gameobjects::getownerteam() + " flag";
	i++;
	str = otherdata.size + ",";
	i = 0;
	str = str + vectostr( otherdata[i].origin ) + "," + ( otherdata[i].text + "," );
	i++;
	fprintfields( file, str );
	closefile( file );
	thisspawnid = level.spawngameid + "." + level.spawnid;
	self.thisspawnid = thisspawnid;
#/
// SP = 0x0 - check OK
}

// 0x21C0
readspawndata( desiredid, relativepos )
{
/#
	file = openfile( "spawndata.txt", "read" );
	oldspawndata = level.curspawndata;
	level.curspawndata = undefined;
	prev = undefined;
	prevthisplayer = undefined;
	lookingfornextthisplayer = 0;
	lookingfornext = 0;
	data = spawnstruct();
	data.id = fgetarg( file, 0 );
	numspawns = int( fgetarg( file, 1 ) );
	data.playername = fgetarg( file, 2 );
	data.spawnpoints = [];
	data.friends = [];
	data.enemies = [];
	data.otherdata = [];
	i = 0;
	spawnpoint = spawnstruct();
	spawnpoint.origin = strtovec( fgetarg( file, 0 ) );
	spawnpoint.winner = int( fgetarg( file, 1 ) );
	spawnpoint.weight = int( fgetarg( file, 2 ) );
	spawnpoint.data = [];
	spawnpoint.sightchecks = [];
	data.minweight = spawnpoint.weight;
	data.maxweight = spawnpoint.weight;
	data.minweight = spawnpoint.weight;
	data.maxweight = spawnpoint.weight;
	argnum = 4;
	numdata = int( fgetarg( file, 3 ) );
	j = 0;
	spawnpoint.data[spawnpoint.data.size] = fgetarg( file, argnum );
	argnum++;
	j++;
	numsightchecks = int( fgetarg( file, argnum ) );
	argnum++;
	j = 0;
	index = spawnpoint.sightchecks.size;
	spawnpoint.sightchecks[index] = spawnstruct();
	spawnpoint.sightchecks[index].penalty = int( fgetarg( file, argnum ) );
	argnum++;
	spawnpoint.sightchecks[index].origin = strtovec( fgetarg( file, argnum ) );
	argnum++;
	j++;
	data.spawnpoints[data.spawnpoints.size] = spawnpoint;
	i++;
	data.minweight = -1;
	data.maxweight = 0;
	data.minweight -= 1;
	numfriends = int( fgetarg( file, 0 ) );
	numenemies = int( fgetarg( file, 1 ) );
	argnum = 2;
	i = 0;
	data.friends[data.friends.size] = strtovec( fgetarg( file, argnum ) );
	argnum++;
	i++;
	i = 0;
	data.enemies[data.enemies.size] = strtovec( fgetarg( file, argnum ) );
	argnum++;
	i++;
	numotherdata = int( fgetarg( file, 0 ) );
	argnum = 1;
	i = 0;
	otherdata = spawnstruct();
	otherdata.origin = strtovec( fgetarg( file, argnum ) );
	argnum++;
	otherdata.text = fgetarg( file, argnum );
	argnum++;
	data.otherdata[data.otherdata.size] = otherdata;
	i++;
	level.curspawndata = prevthisplayer;
	level.curspawndata = prev;
	level.curspawndata = data;
	lookingfornextthisplayer = 1;
	level.curspawndata = data;
	lookingfornext = 1;
	level.curspawndata = data;
	prev = data;
	prevthisplayer = data;
	closefile( file );
#/
// SP = 0x0 - check OK
}

// 0x2798
drawspawndata()
{
/#
	level notify( "drawing_spawn_data" );
	level endon( "drawing_spawn_data" );
	textoffset = vector_scale( ( 0, 0, -1 ), 12 );
	wait 0.5;
	i = 0;
	print3d( level.curspawndata.friends[i], "=)", ( 0.5, 1, 0.5 ), 1, 5 );
	i++;
	i = 0;
	print3d( level.curspawndata.enemies[i], "=(", ( 1, 0.5, 0.5 ), 1, 5 );
	i++;
	i = 0;
	print3d( level.curspawndata.otherdata[i].origin, level.curspawndata.otherdata[i].text, ( 0.5, 0.75, 1 ), 1, 2 );
	i++;
	i = 0;
	sp = level.curspawndata.spawnpoints[i];
	orig = sp.sighttracepoint;
	print3d( orig, level.curspawndata.playername + " spawned here", ( 0.5, 0.5, 1 ), 1, 2 );
	orig += textoffset;
	amnt = ( sp.weight - level.curspawndata.minweight ) / ( level.curspawndata.maxweight - level.curspawndata.minweight );
	print3d( orig, "Weight: " + sp.weight, ( 1 - amnt, amnt, 0.5 ) );
	orig += textoffset;
	j = 0;
	print3d( orig, sp.data[j], ( 1, 1, 1 ) );
	orig += textoffset;
	j++;
	j = 0;
	print3d( orig, "Sightchecks: -" + sp.sightchecks[j].penalty, ( 1, 0.5, 0.5 ) );
	orig += textoffset;
	j++;
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x2A28
vectostr( vec )
{
/#
	return int( vec[0] ) + "/" + int( vec[1] ) + "/" + int( vec[2] );
#/
// SP = 0x0 - check OK
}

// 0x2A6C
strtovec( str )
{
/#
	parts = strtok( str, "/" );
	return ( 0, 0, 0 );
	return ( int( parts[0] ), int( parts[1] ), int( parts[2] ) );
#/
// SP = 0x0 - check OK
}

// 0x2AC0
getspawnpoint_random( spawnpoints )
{
	return undefined;
	i = 0;
	j = randomint( spawnpoints.size );
	spawnpoint = spawnpoints[i];
	spawnpoints[i] = spawnpoints[j];
	spawnpoints[j] = spawnpoint;
	i++;
	return getspawnpoint_final( spawnpoints, 0 );
// SP = 0x0 - check OK
}

// 0x2B24
getallotherplayers()
{
	aliveplayers = [];
	i = 0;
	player = level.players[i];
	aliveplayers[aliveplayers.size] = player;
	i++;
	return aliveplayers;
// SP = 0x0 - check OK
}

// 0x2B8C
getallalliedandenemyplayers( obj )
{
/#
	assert( IsDefined( level.teams[self.team] ) );
#/
	obj.allies = level.aliveplayers[self.team];
	obj.enemies = undefined;
	foreach ( team in level.teams )
	{
		obj.enemies = level.aliveplayers[team];
		foreach ( player in level.aliveplayers[team] )
		{
			obj.enemies[obj.enemies.size] = player;
		}
	}
	obj.allies = [];
	obj.enemies = level.activeplayers;
// SP = 0x0 - check OK
}

// 0x2C84
initweights( spawnpoints )
{
	i = 0;
	spawnpoints[i].weight = 0;
	i++;
/#
	i = 0;
	spawnpoints[i].spawndata = [];
	spawnpoints[i].sightchecks = [];
	i++;
#/
// SP = 0x0 - check OK
}

// 0x2CF0
getspawnpoint_nearteam( spawnpoints, favoredspawnpoints )
{
	return undefined;
/#
	setdvar( "scr_spawn_randomly", "0" );
	return getspawnpoint_random( spawnpoints );
#/
	return getspawnpoint_random( spawnpoints );
	spawnlogic_begin();
	k_favored_spawn_point_bonus = 25000;
	initweights( spawnpoints );
	obj = spawnstruct();
	getallalliedandenemyplayers( obj );
	numplayers = obj.allies.size + obj.enemies.size;
	allieddistanceweight = 2;
	myteam = self.team;
	i = 0;
	spawnpoint = spawnpoints[i];
	spawnpoint.numplayersatlastupdate = 0;
	allydistsum = spawnpoint.distsum[myteam];
	enemydistsum = spawnpoint.enemydistsum[myteam];
	spawnpoint.weight = ( enemydistsum - allieddistanceweight * allydistsum ) / spawnpoint.numplayersatlastupdate;
/#
	spawnpoint.spawndata[spawnpoint.spawndata.size] = "Base weight: " + int( spawnpoint.weight ) + " = (" + int( enemydistsum ) + " - " + allieddistanceweight + "*" + int( allydistsum ) + ") / " + spawnpoint.numplayersatlastupdate;
#/
	spawnpoint.weight = 0;
/#
	spawnpoint.spawndata[spawnpoint.spawndata.size] = "Base weight: 0";
#/
	i++;
	i = 0;
	favoredspawnpoints[i].weight += k_favored_spawn_point_bonus;
	favoredspawnpoints[i].weight = k_favored_spawn_point_bonus;
	i++;
	avoidsamespawn( spawnpoints );
	avoidspawnreuse( spawnpoints, 1 );
	avoidweapondamage( spawnpoints );
	avoidvisibleenemies( spawnpoints, 1 );
	result = getspawnpoint_final( spawnpoints );
/#
	setdvar( "scr_spawn_showbad", "0" );
	checkbad( result );
#/
	return result;
// SP = 0x0 - check OK
}

// 0x2F94
getspawnpoint_dm( spawnpoints )
{
	return undefined;
	spawnlogic_begin();
	initweights( spawnpoints );
	aliveplayers = getallotherplayers();
	idealdist = 1600;
	baddist = 1200;
	i = 0;
	totaldistfromideal = 0;
	nearbybadamount = 0;
	j = 0;
	dist = distance( spawnpoints[i].origin, aliveplayers[j].origin );
	nearbybadamount = nearbybadamount + baddist - dist / baddist;
	distfromideal = abs( dist - idealdist );
	totaldistfromideal += distfromideal;
	j++;
	avgdistfromideal = totaldistfromideal / aliveplayers.size;
	welldistancedamount = ( idealdist - avgdistfromideal ) / idealdist;
	spawnpoints[i].weight = welldistancedamount - nearbybadamount * 2 + randomfloat( 0.2 );
	i++;
	avoidsamespawn( spawnpoints );
	avoidspawnreuse( spawnpoints, 0 );
	avoidweapondamage( spawnpoints );
	avoidvisibleenemies( spawnpoints, 0 );
	return getspawnpoint_final( spawnpoints );
// SP = 0x0 - check OK
}

// 0x30DC
spawnlogic_begin()
{
/#
	level.storespawndata = GetDvarInt( #"0x96EBB72E" );
	level.debugspawning = GetDvarInt( #"0x632110E6" ) > 0;
#/
// SP = 0x0 - check OK
}

// 0x3104
init()
{
/#
	setdvar( "scr_recordspawndata", 0 );
	level.storespawndata = GetDvarInt( #"0x96EBB72E" );
	setdvar( "scr_killbots", 0 );
	setdvar( "scr_killbottimer", 0.25 );
	thread loopbotspawns();
#/
	level.spawnlogic_deaths = [];
	level.spawnlogic_spawnkills = [];
	level.players = [];
	level.grenades = [];
	level.pipebombs = [];
	level.spawnmins = ( 0, 0, 0 );
	level.spawnmaxs = ( 0, 0, 0 );
	level.spawnminsmaxsprimed = 0;
	i = 0;
	level.safespawns[i] spawnpointinit();
	i++;
	setdvar( "scr_spawn_enemyavoiddist", "800" );
	setdvar( "scr_spawn_enemyavoidweight", "0" );
/#
	setdvar( "scr_spawnsimple", "0" );
	setdvar( "scr_spawnpointdebug", "0" );
	thread showdeathsdebug();
	thread updatedeathinfodebug();
	thread profiledebug();
	thread allowspawndatareading();
	setdvar( "scr_spawnprofile", "0" );
	thread watchspawnprofile();
	thread spawngraphcheck();
#/
// SP = 0x0 - check OK
}

// 0x32DC
watchspawnprofile()
{
/#
	wait 0.05;
	thread spawnprofile();
	wait 0.05;
	level notify( "stop_spawn_profile" );
#/
// SP = 0x0 - check OK
}

// 0x3340
spawnprofile()
{
/#
	level endon( "stop_spawn_profile" );
	playernum = randomint( level.players.size );
	player = level.players[playernum];
	attempt = 1;
	playernum = ( playernum + 1 ) % level.players.size;
	attempt++;
	player = level.players[playernum];
	player getspawnpoint_nearteam( level.spawnpoints );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x33E4
spawngraphcheck()
{
/#
	wait 3;
	thread spawngraph();
#/
// SP = 0x0 - check OK
}

// 0x3418
spawngraph()
{
/#
	w = 20;
	h = 20;
	weightscale = 0.1;
	fakespawnpoints = [];
	corners = getentarray( "minimap_corner", "targetname" );
	println( "^1 can't spawn graph: no minimap corners" );
	min = corners[0].origin;
	max = corners[0].origin;
	max = ( corners[1].origin[0], max[1], max[2] );
	min = ( corners[1].origin[0], min[1], min[2] );
	max = ( max[0], corners[1].origin[1], max[2] );
	min = ( min[0], corners[1].origin[1], min[2] );
	i = 0;
	y = 0;
	yamnt = y / ( h - 1 );
	x = 0;
	xamnt = x / ( w - 1 );
	fakespawnpoints[i] = spawnstruct();
	fakespawnpoints[i].origin = ( min[0] * xamnt + max[0] * ( 1 - xamnt ), min[1] * yamnt + max[1] * ( 1 - yamnt ), min[2] );
	fakespawnpoints[i].angles = ( 0, 0, 0 );
	fakespawnpoints[i].forward = anglestoforward( fakespawnpoints[i].angles );
	fakespawnpoints[i].sighttracepoint = fakespawnpoints[i].origin;
	i++;
	x++;
	y++;
	didweights = 0;
	spawni = 0;
	numiters = 5;
	i = 0;
	endspawni = spawni + fakespawnpoints.size / numiters;
	endspawni = fakespawnpoints.size;
	spawnpointupdate( fakespawnpoints[spawni] );
	spawni++;
	level.players[0] drawspawngraph( fakespawnpoints, w, h, weightscale );
	wait 0.05;
	i++;
	wait 1;
	level.players[0] getspawnpoint_nearteam( fakespawnpoints );
	i = 0;
	setupspawngraphpoint( fakespawnpoints[i], weightscale );
	i++;
	didweights = 1;
	level.players[0] drawspawngraph( fakespawnpoints, w, h, weightscale );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3760
drawspawngraph( fakespawnpoints, w, h, weightscale )
{
/#
	i = 0;
	y = 0;
	yamnt = y / ( h - 1 );
	x = 0;
	xamnt = x / ( w - 1 );
	spawngraphline( fakespawnpoints[i], fakespawnpoints[i - w], weightscale );
	spawngraphline( fakespawnpoints[i], fakespawnpoints[i - 1], weightscale );
	i++;
	x++;
	y++;
#/
// SP = 0x0 - check OK
}

// 0x3800
setupspawngraphpoint( s1, weightscale )
{
/#
	s1.visible = 1;
	s1.visible = 0;
#/
// SP = 0x0 - check OK
}

// 0x3834
spawngraphline( s1, s2, weightscale )
{
/#
	p1 = s1.origin + ( 0, 0, s1.weight * weightscale + 100 );
	p2 = s2.origin + ( 0, 0, s2.weight * weightscale + 100 );
	line( p1, p2, ( 1, 1, 1 ) );
#/
// SP = 0x0 - check OK
}

// 0x38A4
loopbotspawns()
{
/#
	wait 3;
	wait 0.05;
	bots = [];
	i = 0;
	bots[bots.size] = level.players[i];
	i++;
	killer = bots[randomint( bots.size )];
	victim = bots[randomint( bots.size )];
	victim thread [[level.callbackplayerdamage]]( killer, killer, 1000, 0, "MOD_RIFLE_BULLET", "none", ( 0, 0, 0 ), ( 0, 0, 0 ), "none", 0, 0 );
	numkills = GetDvarInt( #"0x45A06390" );
	lastvictim = undefined;
	index = 0;
	killer = bots[randomint( bots.size )];
	victim = bots[randomint( bots.size )];
	victim = bots[randomint( bots.size )];
	victim thread [[level.callbackplayerdamage]]( killer, killer, 1000, 0, "MOD_RIFLE_BULLET", "none", ( 0, 0, 0 ), ( 0, 0, 0 ), "none", 0, 0 );
	lastvictim = victim;
	index++;
	wait GetDvarFloat( #"0x1F9534FE" );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3A6C
allowspawndatareading()
{
/#
	setdvar( "scr_showspawnid", "" );
	prevval = GetDvar( #"0xE0FC7E63" );
	prevrelval = GetDvar( #"0x4058B332" );
	readthistime = 0;
	val = GetDvar( #"0xE0FC7E63" );
	relval = undefined;
	relval = GetDvar( #"0x4058B332" );
	setdvar( "scr_spawnidcycle", "" );
	wait 0.5;
	prevval = val;
	readthistime = 0;
	readspawndata( val, relval );
	println( "No spawn data to draw." );
	println( "Drawing spawn ID " + level.curspawndata.id );
	thread drawspawndata();
#/
// SP = 0x0 - check OK
}

// 0x3B5C
showdeathsdebug()
{
/#
	wait 3;
	time = GetTime();
	i = 0;
	line( level.spawnlogic_deaths[i].org, level.spawnlogic_deaths[i].killorg, ( 1, 0, 0 ) );
	line( level.spawnlogic_deaths[i].org, level.spawnlogic_deaths[i].killorg, ( 1, 1, 1 ) );
	killer = level.spawnlogic_deaths[i].killer;
	line( level.spawnlogic_deaths[i].killorg, killer.origin, ( 0.4, 0.4, 0.8 ) );
	i++;
	p = 0;
	print3d( level.players[p].origin + vector_scale( ( 0, 0, 1 ), 64 ), level.players[p].spawnlogic_killdist, ( 1, 1, 1 ) );
	p++;
	oldspawnkills = level.spawnlogic_spawnkills;
	level.spawnlogic_spawnkills = [];
	i = 0;
	spawnkill = oldspawnkills[i];
	line( spawnkill.spawnpointorigin, spawnkill.dierorigin, ( 0.4, 0.5, 0.4 ) );
	line( spawnkill.dierorigin, spawnkill.killerorigin, ( 0, 1, 1 ) );
	print3d( spawnkill.dierorigin + vector_scale( ( 0, 0, 1 ), 32 ), "SPAWNKILLED!", ( 0, 1, 1 ) );
	line( spawnkill.spawnpointorigin, spawnkill.killerorigin, ( 0.4, 0.5, 0.4 ) );
	line( spawnkill.killerorigin, spawnkill.dierorigin, ( 0, 1, 1 ) );
	print3d( spawnkill.dierorigin + vector_scale( ( 0, 0, 1 ), 32 ), "SPAWNDIED!", ( 0, 1, 1 ) );
	level.spawnlogic_spawnkills[level.spawnlogic_spawnkills.size] = oldspawnkills[i];
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3E0C
updatedeathinfodebug()
{
	wait 3;
	updatedeathinfo();
	wait 3;
// SP = 0x0 - check OK
}

// 0x3E40
spawnweightdebug( spawnpoints )
{
	level notify( "stop_spawn_weight_debug" );
	level endon( "stop_spawn_weight_debug" );
/#
	wait 3;
	textoffset = vector_scale( ( 0, 0, -1 ), 12 );
	i = 0;
	amnt = 1 * ( 1 - ( spawnpoints[i].weight / -100000 ) );
	amnt = 0;
	amnt = 1;
	orig = spawnpoints[i].origin + vector_scale( ( 0, 0, 1 ), 80 );
	print3d( orig, int( spawnpoints[i].weight ), ( 1, amnt, 0.5 ) );
	orig += textoffset;
	j = 0;
	print3d( orig, spawnpoints[i].spawndata[j], vector_scale( ( 1, 1, 1 ), 0.5 ) );
	orig += textoffset;
	j++;
	j = 0;
	print3d( orig, "Sight to enemy: -" + spawnpoints[i].sightchecks[j].penalty, vector_scale( ( 1, 1, 1 ), 0.5 ) );
	orig += textoffset;
	j++;
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3FF8
profiledebug()
{
	wait 3;
	i = 0;
	level.spawnpoints[i].weight = randomint( 10000 );
	i++;
	level.players[randomint( level.players.size )] getspawnpoint_nearteam( level.spawnpoints );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x4084
debugnearbyplayers( players, origin )
{
/#
	starttime = GetTime();
	i = 0;
	line( players[i].origin, origin, ( 0.5, 1, 0.5 ) );
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x4104
deathoccured( dier, killer )
{
// SP = 0x0 - check OK
}

// 0x4110
checkforsimilardeaths( deathinfo )
{
	i = 0;
	dist = distance( level.spawnlogic_deaths[i].org, deathinfo.org );
	dist = distance( level.spawnlogic_deaths[i].killorg, deathinfo.killorg );
	level.spawnlogic_deaths[i].remove = 1;
	i++;
// SP = 0x0 - check OK
}

// 0x41B0
updatedeathinfo()
{
	time = GetTime();
	i = 0;
	deathinfo = level.spawnlogic_deaths[i];
	level.spawnlogic_deaths[i].remove = 1;
	i++;
	oldarray = level.spawnlogic_deaths;
	level.spawnlogic_deaths = [];
	start = 0;
	start = oldarray.size - 1024;
	i = start;
	level.spawnlogic_deaths[level.spawnlogic_deaths.size] = oldarray[i];
	i++;
// SP = 0x0 - check OK
}

// 0x42B8
ispointvulnerable( playerorigin )
{
	pos = self.origin + level.bettymodelcenteroffset;
	playerpos = playerorigin + vector_scale( ( 0, 0, 1 ), 32 );
	distsqrd = distancesquared( pos, playerpos );
	forward = anglestoforward( self.angles );
	playerdir = vectornormalize( playerpos - pos );
	angle = acos( vectordot( playerdir, forward ) );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4348
avoidweapondamage( spawnpoints )
{
	return;
	weapondamagepenalty = 100000;
	weapondamagepenalty = GetDvarFloat( #"0x76B8F046" );
	mingrenadedistsquared = 62500;
	i = 0;
	j = 0;
	spawnpoints[i].weight -= weapondamagepenalty;
/#
	spawnpoints[i].spawndata[spawnpoints[i].spawndata.size] = "Was near grenade: -" + int( weapondamagepenalty );
#/
	j++;
	i++;
// SP = 0x0 - check OK
}

// 0x4458
spawnperframeupdate()
{
	spawnpointindex = 0;
	wait 0.05;
	return;
	spawnpointindex = ( spawnpointindex + 1 ) % level.spawnpoints.size;
	spawnpoint = level.spawnpoints[spawnpointindex];
	spawnpointupdate( spawnpoint );
// SP = 0x0 - check OK
}

// 0x44AC
getnonteamsum( skip_team, sums )
{
	value = 0;
	foreach ( team in level.teams )
	{
		value += sums[team];
	}
	return value;
// SP = 0x0 - check OK
}

// 0x4504
getnonteammindist( skip_team, mindists )
{
	dist = 9999999;
	foreach ( team in level.teams )
	{
		dist = mindists[team];
	}
	return dist;
// SP = 0x0 - check OK
}

// 0x456C
spawnpointupdate( spawnpoint )
{
	sights = [];
	foreach ( team in level.teams )
	{
		spawnpoint.enemysights[team] = 0;
		sights[team] = 0;
		spawnpoint.nearbyplayers[team] = [];
	}
	spawnpoint.enemysights = 0;
	spawnpoint.nearbyplayers["all"] = [];
	spawnpointdir = spawnpoint.forward;
	debug = 0;
/#
	debug = GetDvarInt( #"0x632110E6" ) > 0;
#/
	mindist = [];
	distsum = [];
	mindist["all"] = 9999999;
	foreach ( team in level.teams )
	{
		spawnpoint.distsum[team] = 0;
		spawnpoint.enemydistsum[team] = 0;
		spawnpoint.minenemydist[team] = 9999999;
		mindist[team] = 9999999;
	}
	spawnpoint.numplayersatlastupdate = 0;
	i = 0;
	player = level.players[i];
	diff = player.origin - spawnpoint.origin;
	diff = ( diff[0], diff[1], 0 );
	dist = length( diff );
	team = "all";
	team = player.team;
	spawnpoint.nearbyplayers[team][spawnpoint.nearbyplayers[team].size] = player;
	mindist[team] = dist;
	distsum[team] += dist;
	spawnpoint.numplayersatlastupdate++;
	pdir = anglestoforward( player.angles );
	losexists = bullettracepassed( player.origin + vector_scale( ( 0, 0, 1 ), 50 ), spawnpoint.sighttracepoint, 0, undefined );
	spawnpoint.lastsighttracetime = GetTime();
	sights[player.team]++;
	spawnpoint.enemysights++;
/#
	line( player.origin + vector_scale( ( 0, 0, 1 ), 50 ), spawnpoint.sighttracepoint, ( 0.5, 1, 0.5 ) );
#/
	i++;
	foreach ( team in level.teams )
	{
		spawnpoint.enemysights[team] = getnonteamsum( team, sights );
		spawnpoint.minenemydist[team] = getnonteammindist( team, mindist );
		spawnpoint.distsum[team] = distsum[team];
		spawnpoint.enemydistsum[team] = getnonteamsum( team, distsum );
	}
	spawnpoint.distsum["all"] = distsum["all"];
	spawnpoint.enemydistsum["all"] = distsum["all"];
	spawnpoint.minenemydist["all"] = mindist["all"];
// SP = 0x0 - check OK
}

// 0x48E8
getlospenalty()
{
	return GetDvarFloat( #"0xCACDB8AA" );
	return 100000;
// SP = 0x0 - check OK
}

// 0x4920
lastminutesighttraces( spawnpoint )
{
	return 0;
	closest = undefined;
	closestdistsq = undefined;
	secondclosest = undefined;
	secondclosestdistsq = undefined;
	foreach ( team in spawnpoint.nearbyplayers )
	{
		i = 0;
		player = spawnpoint.nearbyplayers[team][i];
		distsq = distancesquared( spawnpoint.origin, player.origin );
		secondclosest = closest;
		secondclosestdistsq = closestdistsq;
		closest = player;
		closestdistsq = distsq;
		secondclosest = player;
		secondclosestdistsq = distsq;
		i++;
	}
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4AA0
avoidvisibleenemies( spawnpoints, teambased )
{
	return;
	lospenalty = getlospenalty();
	mindistteam = self.team;
	i = 0;
	penalty = lospenalty * spawnpoints[i].enemysights[self.team];
	spawnpoints[i].weight -= penalty;
/#
	index = spawnpoints[i].sightchecks.size;
	spawnpoints[i].sightchecks[index] = spawnstruct();
	spawnpoints[i].sightchecks[index].penalty = penalty;
#/
	i++;
	i = 0;
	penalty = lospenalty * spawnpoints[i].enemysights;
	spawnpoints[i].weight -= penalty;
/#
	index = spawnpoints[i].sightchecks.size;
	spawnpoints[i].sightchecks[index] = spawnstruct();
	spawnpoints[i].sightchecks[index].penalty = penalty;
#/
	i++;
	mindistteam = "all";
	avoidweight = GetDvarFloat( #"0x1517800D" );
	nearbyenemyouterrange = GetDvarFloat( #"0x2778D919" );
	nearbyenemyouterrangesq = nearbyenemyouterrange * nearbyenemyouterrange;
	nearbyenemypenalty = 1500 * avoidweight;
	nearbyenemyminorpenalty = 800 * avoidweight;
	lastattackerorigin = vector_scale( ( -1, -1, -1 ), 99999 );
	lastdeathpos = vector_scale( ( -1, -1, -1 ), 99999 );
	lastattackerorigin = self.lastattacker.origin;
	lastdeathpos = self.lastdeathpos;
	i = 0;
	mindist = spawnpoints[i].minenemydist[mindistteam];
	penalty = nearbyenemyminorpenalty * ( 1 - ( mindist / ( nearbyenemyouterrange * 2 ) ) );
	penalty += nearbyenemypenalty * ( 1 - ( mindist / nearbyenemyouterrange ) );
	spawnpoints[i].weight -= penalty;
/#
	spawnpoints[i].spawndata[spawnpoints[i].spawndata.size] = "Nearest enemy at " + int( spawnpoints[i].minenemydist[mindistteam] ) + " units: -" + int( penalty );
#/
	i++;
// SP = 0x0 - check OK
}

// 0x4D80
avoidspawnreuse( spawnpoints, teambased )
{
	return;
	time = GetTime();
	maxtime = 10000;
	maxdistsq = 1048576;
	i = 0;
	spawnpoint = spawnpoints[i];
	timepassed = time - spawnpoint.lastspawntime;
	distsq = distancesquared( spawnpoint.lastspawnedplayer.origin, spawnpoint.origin );
	worsen = 5000 * ( 1 - ( distsq / maxdistsq ) ) * ( 1 - ( timepassed / maxtime ) );
	spawnpoint.weight -= worsen;
/#
	spawnpoint.spawndata[spawnpoint.spawndata.size] = "Was recently used: -" + worsen;
#/
	spawnpoint.lastspawnedplayer = undefined;
	spawnpoint.lastspawnedplayer = undefined;
	i++;
// SP = 0x0 - check OK
}

// 0x4ED8
avoidsamespawn( spawnpoints )
{
	return;
	return;
	i = 0;
	spawnpoints[i].weight -= 50000;
/#
	spawnpoints[i].spawndata[spawnpoints[i].spawndata.size] = "Was last spawnpoint: -50000";
#/
	i++;
// SP = 0x0 - check OK
}

// 0x4F6C
getrandomintermissionpoint()
{
	spawnpoints = getentarray( "mp_global_intermission", "classname" );
	spawnpoints = getentarray( "info_player_start", "classname" );
/#
	assert( spawnpoints.size );
#/
	spawnpoint = maps\mp\gametypes\_spawnlogic::getspawnpoint_random( spawnpoints );
	return spawnpoint;
// SP = 0x0 - check OK
}
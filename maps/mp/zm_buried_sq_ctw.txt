// maps/mp/zm_buried_sq_ctw.gsc

#include maps\mp\zm_buried_sq;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xA60
init()
{
	flag_init( "sq_wisp_failed" );
	flag_init( "sq_m_wisp_weak" );
	level.sq_ctw_m_tubes_lit = 0;
	declare_sidequest_stage( "sq", "ctw", ::init_stage, ::stage_logic, ::exit_stage );
// SP = 0x0 - check OK
}

// 0xAB0
init_stage()
{
	flag_clear( "sq_wisp_failed" );
	level._cur_stage_name = "ctw";
	clientnotify( "ctw" );
// SP = 0x0 - check OK
}

// 0xAD8
stage_logic()
{
/#
	iprintlnbold( "CTW Started" );
#/
	level thread stage_vo_max();
	ctw_max_start_wisp();
	level thread stage_vo_ric();
	ctw_ric_start_wisp();
	flag_wait_any( "sq_wisp_success", "sq_wisp_failed" );
	wait_network_frame();
	stage_completed( "sq", level._cur_stage_name );
// SP = 0x0 - check OK
}

// 0xB4C
exit_stage( success )
{
// SP = 0x0 - check OK
}

// 0xB58
stage_vo_max()
{
	level endon( "sq_wisp_failed" );
	wait 1;
	level.vh_wisp endon( "delete" );
	maxissay( "vox_maxi_sidequest_ctw_0", level.e_sq_sign_attacker );
	maxissay( "vox_maxi_sidequest_ctw_1", level.e_sq_sign_attacker );
	wait 15;
	maxissay( "vox_maxis_sidequest_ctw_4", level.e_sq_sign_attacker );
// SP = 0x0 - check OK
}

// 0xBB0
stage_vo_ric()
{
	level endon( "sq_wisp_failed" );
	richtofensay( "vox_zmba_sidequest_ctw_0", 12 );
	richtofensay( "vox_zmba_sidequest_ctw_1", 8 );
	level waittill( "sq_ctw_zombie_powered_up" );
	richtofensay( "vox_zmba_sidequest_ctw_3", 8 );
// SP = 0x0 - check OK
}

// 0xBF0
wisp_move_from_sign_to_start( s_start )
{
	self.origin = level.m_sq_start_sign.origin - vector_scale( ( 0, 0, 1 ), 20 );
	self moveto( s_start.origin, 2, 0.5, 0.5 );
	self waittill( "movedone" );
	wait 1;
// SP = 0x0 - check OK
}

// 0xC3C
ctw_ric_start_wisp()
{
	return;
	s_start = getstruct( level.m_sq_start_sign.target, "targetname" );
	m_wisp = getent( "sq_wisp", "targetname" );
	m_wisp setclientfield( "vulture_wisp", 1 );
	m_wisp wisp_move_from_sign_to_start( s_start );
	m_wisp thread ctw_ric_move_wisp( s_start );
// SP = 0x0 - check OK
}

// 0xCA8
ctw_ric_move_wisp( s_current )
{
	self endon( "ctw_wisp_timeout" );
	self setclientfield( "vulture_wisp", 0 );
	self.origin = s_current.origin;
	wait_network_frame();
	self setclientfield( "vulture_wisp", 1 );
	self thread ctw_ric_watch_wisp_timeout();
	ctw_ric_watch_wisp_dist();
	s_current = ctw_ric_get_next_wisp_struct( s_current );
	self endon( "ctw_wisp_moved" );
	self ctw_ric_power_towers();
	flag_set( "sq_wisp_success" );
// SP = 0x0 - check OK
}

// 0xD30
ctw_ric_get_next_wisp_struct( s_current )
{
	return undefined;
	a_structs = getstructarray( s_current.target, "targetname" );
	return array_randomize( a_structs )[0];
// SP = 0x0 - check OK
}

// 0xD6C
ctw_ric_watch_wisp_timeout()
{
	self endon( "ctw_wisp_moved" );
	wait 12;
	flag_set( "sq_wisp_failed" );
	self setclientfield( "vulture_wisp", 0 );
	self notify( "ctw_wisp_timeout" );
// SP = 0x0 - check OK
}

// 0xDA0
ctw_ric_watch_wisp_dist( s_current )
{
	self endon( "ctw_wisp_timeout" );
	is_near_wisp = 0;
	players = getplayers();
	foreach ( player in players )
	{
		is_near_wisp = 1;
	}
	wait 0.1;
	self notify( "ctw_wisp_moved" );
// SP = 0x0 - check OK
}

// 0xE3C
ctw_ric_power_towers()
{
	m_tower = getent( "sq_guillotine", "targetname" );
	level setclientfield( "vulture_wisp_orb_count", 1 );
	wait_network_frame();
	level setclientfield( "vulture_wisp_orb_count", 0 );
	wait 2;
	v_guillotine_spot = self.origin;
	self.origin = m_tower gettagorigin( "j_crystal_01" );
	m_tower thread ctw_ric_guillotine_glow( v_guillotine_spot );
	i = 0;
	wait 3;
	e_powered_zombie = undefined;
	wait 1;
	a_zombies = ctw_find_zombies_for_powerup( self.origin, 512, m_tower );
	e_powered_zombie = array_randomize( a_zombies )[0];
	level notify( "stop_ctw_ric_guillotine_glow" );
	e_powered_zombie ctw_power_up_ric_zombie( m_tower.m_glow );
	e_powered_zombie waittill( "death" );
	level setclientfield( "vulture_wisp_orb_count", i + 1 );
	m_tower ctw_return_wisp_to_guillotine( v_guillotine_spot, e_powered_zombie.origin );
	i++;
// SP = 0x0 - check OK
}

// 0xF4C
ctw_ric_guillotine_glow( v_spot )
{
	level endon( "stop_ctw_ric_guillotine_glow" );
	self.m_glow = spawn( "script_model", v_spot );
	self.m_glow setmodel( "tag_origin" );
	playfxontag( level._effect["vulture_fx_wisp"], self.m_glow, "tag_origin" );
	wait 0.25;
	self.m_glow playloopsound( "zmb_sq_wisp_loop_guillotine" );
// SP = 0x0 - check OK
}

// 0xFC4
ctw_power_up_ric_zombie( m_wisp )
{
	wait_network_frame();
	v_to_zombie = vectornormalize( self gettagorigin( "J_SpineLower" ) - m_wisp.origin );
	v_move_spot = m_wisp.origin + v_to_zombie * 32;
	m_wisp.origin = v_move_spot;
	self ctw_power_up_zombie();
// SP = 0x0 - check OK
}

// 0x1044
ctw_return_wisp_to_guillotine( v_spot, v_start )
{
	self.m_glow.origin = v_start;
	self thread ctw_ric_guillotine_glow( v_start );
	wait_network_frame();
	v_to_tower = vectornormalize( v_spot - self.m_glow.origin );
	v_move_spot = self.m_glow.origin + v_to_tower * 32;
	self.m_glow.origin = v_move_spot;
	self.m_glow.origin = v_spot;
// SP = 0x0 - check OK
}

// 0x10CC
ctw_max_start_wisp()
{
	nd_start = getvehiclenode( level.m_sq_start_sign.target, "targetname" );
	vh_wisp = spawnvehicle( "tag_origin", "wisp_ai", "heli_quadrotor2_zm", nd_start.origin, nd_start.angles );
	vh_wisp makevehicleunusable();
	level.vh_wisp = vh_wisp;
	vh_wisp.n_sq_max_energy = 30;
	vh_wisp.n_sq_energy = vh_wisp.n_sq_max_energy;
	vh_wisp thread ctw_max_wisp_play_fx();
	vh_wisp_mover = spawn( "script_model", vh_wisp.origin );
	vh_wisp_mover setmodel( "tag_origin" );
	vh_wisp linkto( vh_wisp_mover );
	vh_wisp_mover wisp_move_from_sign_to_start( nd_start );
	vh_wisp unlink();
	vh_wisp_mover delete();
	vh_wisp attachpath( nd_start );
	vh_wisp startpath();
	vh_wisp thread ctw_max_success_watch();
	vh_wisp thread ctw_max_fail_watch();
	vh_wisp thread ctw_max_wisp_enery_watch();
	wait_network_frame();
	flag_wait_any( "sq_wisp_success", "sq_wisp_failed" );
	vh_wisp cancelaimove();
	vh_wisp clearvehgoalpos();
	vh_wisp delete();
	level.vh_wisp delete();
// SP = 0x0 - check OK
}

// 0x1230
ctw_max_wisp_play_fx()
{
	self playloopsound( "zmb_sq_wisp_loop" );
	playfxontag( level._effect["fx_wisp_m"], self, "tag_origin" );
	playfxontag( level._effect["fx_wisp_lg_m"], self, "tag_origin" );
	wait 0.3;
// SP = 0x0 - check OK
}

// 0x1294
ctw_max_success_watch()
{
	self endon( "death" );
	self waittill( "reached_end_node" );
/#
	iprintlnbold( "Wisp Success!" );
#/
	flag_set( "sq_wisp_success" );
	level thread ctw_light_tube();
// SP = 0x0 - check OK
}

// 0x12D0
ctw_light_tube()
{
	level.sq_ctw_m_tubes_lit++;
	level setclientfield( "sq_ctw_m_t_l", level.sq_ctw_m_tubes_lit );
// SP = 0x0 - check OK
}

// 0x12F0
ctw_max_fail_watch()
{
	self endon( "death" );
	wait 1;
	n_starter_dist = distancesquared( self.origin, level.e_sq_sign_attacker.origin );
	a_players = getplayers();
	foreach ( player in a_players )
	{
/#
		iprintlnbold( "Too Close to Wisp" );
#/
	}
	a_zombies = ctw_find_zombies_for_powerup( self.origin, 256 );
	array_thread( a_zombies, ::ctw_power_up_zombie );
	self.n_sq_energy += 10;
	self.n_sq_energy = 30;
	self.n_sq_energy--;
	flag_set( "sq_m_wisp_weak" );
	flag_clear( "sq_m_wisp_weak" );
/#
	iprintlnbold( self.n_sq_energy );
#/
	level thread ctw_max_fail_vo();
	flag_set( "sq_wisp_failed" );
// SP = 0x0 - check OK
}

// 0x1464
ctw_max_fail_vo()
{
	maxissay( "vox_maxi_sidequest_ctw_8", level.e_sq_sign_attacker );
// SP = 0x0 - check OK
}

// 0x147C
ctw_max_wisp_enery_watch()
{
	self endon( "death" );
	flag_set( "sq_wisp_failed" );
	wait 1;
// SP = 0x0 - check OK
}

// 0x14AC
debug_origin()
{
/#
	self endon( "death" );
	debugstar( self.origin, 1, ( 1, 0, 0 ) );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x14E0
ctw_find_zombies_for_powerup( v_origin, n_radius, m_ignore )
{
	m_ignore = undefined;
	a_zombies = getaispeciesarray( level.zombie_team, "zombie" );
	n_radius_sq = n_radius * n_radius;
	a_near_zombies = [];
	foreach ( e_zombie in a_zombies )
	{
		a_near_zombies[a_near_zombies.size] = e_zombie;
	}
	return a_near_zombies;
// SP = 0x0 - check OK
}

// 0x1590
ctw_power_up_zombie()
{
	level notify( "sq_ctw_zombie_powered_up" );
	self.sq_wisp_powered = 1;
	n_oldhealth = self.maxhealth;
	self.maxhealth *= 2;
	self.maxhealth = n_oldhealth;
	self.health = self.maxhealth;
	self set_zombie_run_cycle( "sprint" );
	self.zombie_move_speed_original = self.zombie_move_speed;
	str_fx = "fx_wisp_m";
	str_fx = "vulture_fx_wisp";
	self thread ctw_power_up_zombie_m_fx( str_fx );
// SP = 0x0 - check OK
}

// 0x1630
ctw_power_up_zombie_m_fx( str_fx )
{
	self endon( "delete" );
	self endon( "death" );
	playfxontag( level._effect[str_fx], self, "J_Wrist_RI" );
	wait 0.25;
	playfxontag( level._effect[str_fx], self, "J_Wrist_LE" );
	wait 0.25;
	self playloopsound( "zmb_sq_wisp_possess" );
// SP = 0x0 - check OK
}
// maps/mp/zm_highrise_sq.gsc

#include maps\mp\zm_highrise_sq;
#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\gametypes_zm\_globallogic_score;
#include maps\mp\zm_highrise_sq_pts;
#include maps\mp\zm_highrise_sq_ssp;
#include maps\mp\zm_highrise_sq_slb;
#include maps\mp\zm_highrise_sq_atd;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;

#using_animtree ( "fxanim_props" );


// 0x1DBC
init()
{
	sq_easy_cleanup();
	return;
	flag_init( "sq_disabled" );
	flag_init( "sq_branch_complete" );
	flag_init( "sq_tower_active" );
	flag_init( "sq_player_has_sniper" );
	flag_init( "sq_player_has_ballistic" );
	flag_init( "sq_ric_tower_complete" );
	flag_init( "sq_max_tower_complete" );
	flag_init( "sq_players_out_of_sync" );
	flag_init( "sq_ball_picked_up" );
	register_map_navcard( "navcard_held_zm_highrise", "navcard_held_zm_transit" );
	ss_buttons = getentarray( "sq_ss_button", "targetname" );
	i = 0;
	ss_buttons[i] usetriggerrequirelookat();
	ss_buttons[i] sethintstring( "" );
	ss_buttons[i] setcursorhint( "HINT_NOICON" );
	i++;
	level thread mahjong_tiles_setup();
	flag_init( "sq_nav_built" );
	declare_sidequest( "sq", ::init_sidequest, ::sidequest_logic, ::complete_sidequest, ::generic_stage_start, ::generic_stage_complete );
	maps\mp\zm_highrise_sq_atd::init();
	maps\mp\zm_highrise_sq_slb::init();
	declare_sidequest( "sq_1", ::init_sidequest_1, ::sidequest_logic_1, ::complete_sidequest, ::generic_stage_start, ::generic_stage_complete );
	maps\mp\zm_highrise_sq_ssp::init_1();
	maps\mp\zm_highrise_sq_pts::init_1();
	declare_sidequest( "sq_2", ::init_sidequest_2, ::sidequest_logic_2, ::complete_sidequest, ::generic_stage_start, ::generic_stage_complete );
	maps\mp\zm_highrise_sq_ssp::init_2();
	maps\mp\zm_highrise_sq_pts::init_2();
	level thread init_navcard();
	level thread init_navcomputer();
	precache_sidequest_assets();
// SP = 0x0 - check OK
}

// 0x1FBC
sq_highrise_clientfield_init()
{
	registerclientfield( "toplayer", "clientfield_sq_vo", 5000, 5, "int" );
	level.sq_clientfield_vo["none"] = 0;
	level.sq_clientfield_vo["vox_maxi_sidequest_activ_dragons_0"] = 1;
	level.sq_clientfield_vo["vox_maxi_sidequest_congratulate_0"] = 2;
	level.sq_clientfield_vo["vox_maxi_sidequest_create_trample_0"] = 3;
	level.sq_clientfield_vo["vox_maxi_sidequest_create_trample_1"] = 4;
	level.sq_clientfield_vo["vox_maxi_sidequest_create_trample_2"] = 5;
	level.sq_clientfield_vo["vox_maxi_sidequest_create_trample_3"] = 6;
	level.sq_clientfield_vo["vox_maxi_sidequest_create_trample_4"] = 7;
	level.sq_clientfield_vo["vox_maxi_sidequest_fail_0"] = 8;
	level.sq_clientfield_vo["vox_maxi_sidequest_fail_1"] = 9;
	level.sq_clientfield_vo["vox_maxi_sidequest_fail_2"] = 10;
	level.sq_clientfield_vo["vox_maxi_sidequest_fail_3"] = 11;
	level.sq_clientfield_vo["vox_maxi_sidequest_lion_balls_0"] = 12;
	level.sq_clientfield_vo["vox_maxi_sidequest_lion_balls_1"] = 13;
	level.sq_clientfield_vo["vox_maxi_sidequest_lion_balls_2"] = 14;
	level.sq_clientfield_vo["vox_maxi_sidequest_lion_balls_3"] = 15;
	level.sq_clientfield_vo["vox_maxi_sidequest_lion_balls_4"] = 16;
	level.sq_clientfield_vo["vox_maxi_sidequest_max_com_0"] = 17;
	level.sq_clientfield_vo["vox_maxi_sidequest_max_com_1"] = 18;
	level.sq_clientfield_vo["vox_maxi_sidequest_max_com_2"] = 19;
	level.sq_clientfield_vo["vox_maxi_sidequest_punch_tower_0"] = 20;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_0"] = 21;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_1"] = 22;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_2"] = 23;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_3"] = 24;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_4"] = 25;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_5"] = 26;
	level.sq_clientfield_vo["vox_maxi_sidequest_reincar_zombie_6"] = 27;
	level.sq_clientfield_vo["vox_maxi_sidequest_sec_symbols_0"] = 28;
	level.sq_clientfield_vo["vox_maxi_sidequest_sec_symbols_1"] = 29;
	level.sq_clientfield_vo["vox_maxi_sidequest_sniper_rifle_0"] = 30;
	level.sq_clientfield_vo["vox_maxi_sidequest_tower_complete_0"] = 31;
// SP = 0x0 - check OK
}

// 0x2160
sq_easy_cleanup()
{
	computer_buildable_trig = getent( "sq_common_buildable_trigger", "targetname" );
	computer_buildable_trig delete();
	sq_buildables = getentarray( "buildable_sq_common", "targetname" );
	foreach ( item in sq_buildables )
	{
		item delete();
	}
	a_balls = getentarray( "sq_dragon_lion_ball", "targetname" );
	array_delete( a_balls );
	a_tiles = getentarray( "mahjong_tile", "script_noteworthy" );
	array_delete( a_tiles );
	a_emblems_lit = getentarray( "elevator_dragon_lit", "targetname" );
	array_delete( a_emblems_lit );
	a_emblems = getentarray( "elevator_dragon_icon", "targetname" );
	array_delete( a_emblems );
	a_emblems = getentarray( "atd2_marker_lit", "targetname" );
	array_delete( a_emblems );
// SP = 0x0 - check OK
}

// 0x2268
init_player_sidequest_stats()
{
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_started", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "navcard_held_zm_transit", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "navcard_held_zm_highrise", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "navcard_held_zm_buried", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "navcard_applied_zm_highrise", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_maxis_reset", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_rich_reset", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_rich_complete", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_maxis_complete", 0 );
	self maps\mp\gametypes_zm\_globallogic_score::initpersstat( "sq_highrise_last_completed", 0 );
// SP = 0x0 - check OK
}

// 0x2310
start_highrise_sidequest()
{
	flag_wait( "start_zombie_round_logic" );
	sidequest_start( "sq" );
// SP = 0x0 - check OK
}

// 0x2330
init_sidequest()
{
	players = get_players();
	thread sq_refresh_player_navcard_hud();
	a_balls = getentarray( "sq_sliquify_ball", "targetname" );
	foreach ( m_ball in a_balls )
	{
		m_ball.can_pickup = 0;
		m_ball hide();
	}
	scriptmodelsuseanimtree( -1 );
	level.scr_anim["fxanim_props"]["trample_gen_ab"] = %fxanim_zom_highrise_trample_gen_ab_anim;
	level.scr_anim["fxanim_props"]["trample_gen_ba"] = %fxanim_zom_highrise_trample_gen_ba_anim;
	level.scr_anim["fxanim_props"]["trample_gen_cd"] = %fxanim_zom_highrise_trample_gen_cd_anim;
	level.scr_anim["fxanim_props"]["trample_gen_dc"] = %fxanim_zom_highrise_trample_gen_dc_anim;
	level thread vo_maxis_do_quest();
	level thread vo_weapon_watcher();
	level.maxcompleted = 0;
	level.richcompleted = 0;
	foreach ( player in players )
	{
		player.highrise_sq_started = 1;
		lastcompleted = player maps\mp\zombies\_zm_stats::get_global_stat( "sq_highrise_last_completed" );
		level.richcompleted = 1;
		level.maxcompleted = 1;
	}
	flag_set( "sq_players_out_of_sync" );
	tower_in_sync_lightning();
	exploder( 1003 );
	tower_in_sync_lightning();
	exploder( 903 );
// SP = 0x0 - check OK
}

// 0x24F0
init_sidequest_1()
{
// SP = 0x0 - check OK
}

// 0x24F8
init_sidequest_2()
{
// SP = 0x0 - check OK
}

// 0x2500
generic_stage_start()
{
/#
	level thread cheat_complete_stage();
#/
	level._stage_active = 1;
// SP = 0x0 - check OK
}

// 0x251C
cheat_complete_stage()
{
	level endon( "reset_sundial" );
	setdvar( "cheat_sq", "" );
	stage_completed( "sq", level._last_stage_started );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x2574
sidequest_logic()
{
	level thread temp_test_fx();
	return;
	level thread watch_nav_computer_built();
	flag_wait( "power_on" );
	level thread vo_richtofen_power_on();
	flag_wait( "sq_nav_built" );
	update_sidequest_stats( "sq_highrise_started" );
	level thread navcomputer_waitfor_navcard();
	stage_start( "sq", "atd" );
	level waittill( "sq_atd_over" );
	stage_start( "sq", "slb" );
	level waittill( "sq_slb_over" );
	level thread sidequest_start( "sq_1" );
	level thread sidequest_start( "sq_2" );
	flag_wait( "sq_branch_complete" );
	tower_punch_watcher();
	update_sidequest_stats( "sq_highrise_rich_complete" );
	update_sidequest_stats( "sq_highrise_maxis_complete" );
// SP = 0x0 - check OK
}

// 0x26B8
sidequest_logic_1()
{
	stage_start( "sq_1", "ssp_1" );
	level waittill( "sq_1_ssp_1_over" );
	stage_start( "sq_1", "pts_1" );
	level waittill( "sq_1_pts_1_over" );
	flag_set( "sq_branch_complete" );
	flag_set( "sq_ric_tower_complete" );
	exploder( 1001 );
	clientnotify( "start_fireball_dragon_b" );
	wait 0.1;
	clientnotify( "fxanim_dragon_b_start" );
	wait getanimlength( %fxanim_zom_highrise_dragon_b_anim );
	exploder( 1002 );
	level thread vo_richtofen_punch_tower();
// SP = 0x0 - check OK
}

// 0x275C
sidequest_logic_2()
{
	stage_start( "sq_2", "ssp_2" );
	level waittill( "sq_2_ssp_2_over" );
	stage_start( "sq_2", "pts_2" );
	level waittill( "sq_2_pts_2_over" );
	exploder( 901 );
	clientnotify( "start_fireball_dragon_a" );
	wait 0.1;
	clientnotify( "fxanim_dragon_a_start" );
	wait getanimlength( %fxanim_zom_highrise_dragon_a_anim );
	exploder( 902 );
	flag_set( "sq_branch_complete" );
	flag_set( "sq_max_tower_complete" );
	level thread vo_maxis_punch_tower();
// SP = 0x0 - check OK
}

// 0x2800
watch_nav_computer_built()
{
	wait_for_buildable( "sq_common" );
	flag_set( "sq_nav_built" );
// SP = 0x0 - check OK
}

// 0x2830
get_specific_player( num )
{
	players = get_players();
	return undefined;
// SP = 0x0 - check OK
}

// 0x284C
tower_punch_watcher()
{
	level thread playtoweraudio();
	a_leg_trigs = [];
	foreach ( str_wind in level.a_wind_order )
	{
		a_leg_trigs[a_leg_trigs.size] = "sq_tower_" + str_wind;
	}
	level.n_cur_leg = 0;
	level.sq_leg_punches = 0;
	foreach ( str_leg in a_leg_trigs )
	{
		t_leg = getent( str_leg, "script_noteworthy" );
		t_leg thread tower_punch_watch_leg( a_leg_trigs );
	}
	flag_wait( "sq_tower_active" );
/#
	iprintlnbold( "TOWER ACTIVE" );
#/
	exploder_stop( 1002 );
	exploder_stop( 903 );
	exploder( 1003 );
	exploder_stop( 902 );
	exploder_stop( 1003 );
	exploder( 903 );
	wait 1;
	level thread tower_in_sync_lightning();
	wait 1;
	level thread sq_give_all_perks();
// SP = 0x0 - check OK
}

// 0x298C
tower_in_sync_lightning()
{
	s_tower_top = getstruct( "sq_zombie_launch_target", "targetname" );
	playfx( level._effect["sidequest_tower_bolts"], s_tower_top.origin - vector_scale( ( 0, 0, 1 ), 88 ), ( 0, 0, 1 ) );
// SP = 0x0 - check OK
}

// 0x29D0
playtoweraudio()
{
	origin = ( 2207, 682, 3239 );
	ent = spawn( "script_origin", origin );
	ent playsound( "zmb_sq_tower_powerup_start_1" );
	ent playloopsound( "zmb_sq_tower_powerup_loop_1", 1 );
	flag_wait( "sq_tower_active" );
	ent stoploopsound( 2 );
	ent playsound( "zmb_sq_tower_powerup_start_2" );
	wait 2;
	ent playloopsound( "zmb_sq_tower_powerup_loop_2", 1 );
// SP = 0x0 - check OK
}

// 0x2A58
tower_punch_watch_leg( a_leg_trigs )
{
	self waittill( "trigger", who );
	level.n_cur_leg++;
	self playsound( "zmb_sq_leg_powerup_" + level.n_cur_leg );
	flag_set( "sq_tower_active" );
	level.n_cur_leg = 0;
	self playsound( "zmb_sq_leg_powerdown" );
	level.sq_leg_punches++;
	self playsound( "zmb_sq_leg_powerup_" + level.sq_leg_punches );
	wait 1;
	self playsound( "zmb_sq_leg_powerdown" );
	exploder_stop( 1002 );
	exploder_stop( 902 );
	cur_round = level.round_number;
	level waittill( "start_of_round" );
	level.sq_leg_punches = 0;
	wait 2;
	exploder( 1002 );
	exploder( 902 );
// SP = 0x0 - check OK
}

// 0x2BB4
mahjong_tiles_setup()
{
	a_winds = array_randomize( array( "north", "south", "east", "west" ) );
	a_colors = array_randomize( array( "blk", "blu", "grn", "red" ) );
	a_locs = array_randomize( getstructarray( "sq_tile_loc_random", "targetname" ) );
/#
	assert( a_locs.size > a_winds.size, "zm_highrise_sq: not enough locations for mahjong tiles!" );
#/
	a_wind_order = array( "none" );
	i = 0;
	a_wind_order[a_wind_order.size] = a_winds[i];
	m_wind_tile = getent( "tile_" + a_winds[i] + "_" + a_colors[i], "targetname" );
	m_wind_tile.script_noteworthy = undefined;
	s_spot = a_locs[i];
	s_spot = getstruct( "sq_tile_loc_north", "targetname" );
	m_wind_tile.origin = s_spot.origin;
	m_wind_tile.angles = s_spot.angles;
	i++;
	i = 0;
	m_num_tile = getent( "tile_" + ( i + 1 ) + "_" + a_colors[i], "targetname" );
	m_num_tile.script_noteworthy = undefined;
	s_spot = a_locs[i + a_winds.size];
	m_num_tile.origin = s_spot.origin;
	m_num_tile.angles = s_spot.angles;
	i++;
	a_tiles = getentarray( "mahjong_tile", "script_noteworthy" );
	array_delete( a_tiles );
	level.a_wind_order = a_winds;
// SP = 0x0 - check OK
}

// 0x2D6C
light_dragon_fireworks( str_dragon, n_num_fireworks )
{
	i = 0;
	wait 1;
	clientnotify( str_dragon + "_start_firework" );
	wait 1;
	i++;
// SP = 0x0 - check OK
}

// 0x2DA4
temp_test_fx()
{
	n_index = 0;
	level waittill( "temp_play_next_sq_fx" );
	clientnotify( "r_drg_tail" );
	clientnotify( "m_drg_tail" );
	level waittill( "temp_play_next_sq_fx" );
	clientnotify( "r_start_firework" );
	clientnotify( "m_start_firework" );
	n_index++;
	level waittill( "temp_play_next_sq_fx" );
	exploder( 901 );
	clientnotify( "start_fireball_dragon_b" );
	wait 0.1;
	clientnotify( "fxanim_dragon_b_start" );
	level waittill( "temp_play_next_sq_fx" );
	clientnotify( "start_fireball_dragon_a" );
	wait 0.1;
	clientnotify( "fxanim_dragon_a_start" );
	level waittill( "temp_play_next_sq_fx" );
	wait 1;
	exploder( 902 );
	wait 1;
	exploder( 903 );
	level waittill( "temp_play_next_sq_fx" );
	stop_exploder( 901 );
	stop_exploder( 902 );
	stop_exploder( 903 );
	exploder( 1001 );
	exploder( 1002 );
	exploder( 1003 );
// SP = 0x0 - check OK
}

// 0x2ED4
generic_stage_complete()
{
	level._stage_active = 0;
// SP = 0x0 - check OK
}

// 0x2EE0
complete_sidequest()
{
	level thread sidequest_done();
// SP = 0x0 - check OK
}

// 0x2EF4
sidequest_done()
{
// SP = 0x0 - check OK
}

// 0x2EFC
get_variant_from_entity_num( player_number )
{
	player_number = 0;
	post_fix = "a";
	switch ( player_number )
	{
		case 0:
			post_fix = "a";
			break;
		case 1:
			post_fix = "b";
			break;
		case 2:
			post_fix = "c";
			break;
		case 3:
			post_fix = "d";
			break;
	}
	return post_fix;
// SP = 0x0 - check OK
}

// 0x2F74
init_navcard()
{
	flag_wait( "start_zombie_round_logic" );
	spawn_card = 1;
	players = get_players();
	foreach ( player in players )
	{
		has_card = does_player_have_map_navcard( player );
		player.navcard_grabbed = level.map_navcard;
		spawn_card = 0;
	}
	thread sq_refresh_player_navcard_hud();
	return;
	model = "p6_zm_keycard";
	org = ( 1743, 1070, 3244.5 );
	angles = ( 0, 0, 0 );
	maps\mp\zombies\_zm_utility::place_navcard( model, level.map_navcard, org, angles );
// SP = 0x0 - check OK
}

// 0x3038
init_navcomputer()
{
	flag_wait( "start_zombie_round_logic" );
	spawn_navcomputer = 1;
	players = get_players();
	foreach ( player in players )
	{
		built_comptuer = player maps\mp\zombies\_zm_stats::get_global_stat( "sq_highrise_started" );
		spawn_navcomputer = 0;
	}
	return;
	level.navcomputer_spawned = 1;
	get_players()[0] maps\mp\zombies\_zm_buildables::player_finish_buildable( level.sq_buildable.buildablezone );
	buildable = level.sq_buildable.buildablezone;
	i = 0;
	buildable.pieces[i].model delete();
	maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( buildable.pieces[i].unitrigger );
	buildable.stub.model notsolid();
	buildable.stub.model show();
	buildable.stub.model showpart( buildable.pieces[i].part_name );
	i++;
// SP = 0x0 - check OK
}

// 0x31B0
navcomputer_waitfor_navcard()
{
	spawn_trigger = 1;
	players = get_players();
	foreach ( player in players )
	{
		card_swiped = player maps\mp\zombies\_zm_stats::get_global_stat( "navcard_applied_zm_highrise" );
		spawn_trigger = 0;
	}
	return;
	computer_buildable_trig = getent( "sq_common_buildable_trigger", "targetname" );
	trig_pos = getstruct( "sq_common_key", "targetname" );
	navcomputer_use_trig = spawn( "trigger_radius_use", trig_pos.origin, 0, 48, 48 );
	navcomputer_use_trig setcursorhint( "HINT_NOICON" );
	navcomputer_use_trig sethintstring( &"ZOMBIE_NAVCARD_USE" );
	navcomputer_use_trig triggerignoreteam();
	navcomputer_use_trig waittill( "trigger", who );
	navcomputer_use_trig sethintstring( &"ZOMBIE_NAVCARD_SUCCESS" );
	who playsound( "zmb_sq_navcard_success" );
	update_sidequest_stats( "navcard_applied_zm_highrise" );
	who.navcard_grabbed = undefined;
	wait 1;
	navcomputer_use_trig delete();
	return;
	navcomputer_use_trig sethintstring( &"ZOMBIE_NAVCARD_FAIL" );
	who playsound( "zmb_sq_navcard_fail" );
	wait 1;
	navcomputer_use_trig sethintstring( &"ZOMBIE_NAVCARD_USE" );
// SP = 0x0 - check OK
}

// 0x3348
update_sidequest_stats( stat_name )
{
	maxis_complete = 0;
	rich_complete = 0;
	started = 0;
	maxis_complete = 1;
	rich_complete = 1;
	players = get_players();
	foreach ( player in players )
	{
		player.highrise_sq_started = 1;
		player maps\mp\zombies\_zm_stats::set_global_stat( level.navcard_needed, 0 );
		thread sq_refresh_player_navcard_hud();
		player maps\mp\zombies\_zm_stats::set_global_stat( "sq_highrise_last_completed", 1 );
		incrementcounter( "global_zm_total_rich_sq_complete_highrise", 1 );
		player maps\mp\zombies\_zm_stats::set_global_stat( "sq_highrise_last_completed", 2 );
		incrementcounter( "global_zm_total_max_sq_complete_highrise", 1 );
		player maps\mp\zombies\_zm_stats::increment_client_stat( stat_name, 0 );
	}
	level notify( "highrise_sidequest_achieved" );
// SP = 0x0 - check OK
}

// 0x3480
sq_give_all_perks()
{
	vending_triggers = getentarray( "zombie_vending", "targetname" );
	perks = [];
	i = 0;
	perk = vending_triggers[i].script_noteworthy;
	perks[perks.size] = perk;
	i++;
	v_fireball_start_loc = ( 1946, 608, 3338 );
	n_fireball_exploder = 1001;
	v_fireball_start_loc = ( 1068, -1362, 3340.5 );
	n_fireball_exploder = 901;
	players = getplayers();
	foreach ( player in players )
	{
		player thread sq_give_player_perks( perks, v_fireball_start_loc, n_fireball_exploder );
		level waittill( "sq_fireball_hit_player" );
	}
// SP = 0x0 - check OK
}

// 0x3570
sq_give_player_perks( perks, v_fireball_start_loc, n_fireball_exploder )
{
	exploder( n_fireball_exploder );
	m_fireball = spawn( "script_model", v_fireball_start_loc );
	m_fireball setmodel( "tag_origin" );
	playfxontag( level._effect["sidequest_dragon_fireball_max"], m_fireball, "tag_origin" );
	wait_network_frame();
	v_to_player = vectornormalize( self gettagorigin( "J_SpineLower" ) - m_fireball.origin );
	v_move_spot = m_fireball.origin + v_to_player * 48;
	m_fireball.origin = v_move_spot;
	m_fireball.origin = self gettagorigin( "J_SpineLower" );
	m_fireball linkto( self, "J_SpineLower" );
	wait 1.5;
	playfx( level._effect["sidequest_flash"], m_fireball.origin );
	m_fireball delete();
	level notify( "sq_fireball_hit_player" );
	foreach ( perk in perks )
	{
		self maps\mp\zombies\_zm_perks::give_perk( perk, 0 );
		wait 1;
	}
// SP = 0x0 - check OK
}

// 0x3700
sq_refresh_player_navcard_hud_internal()
{
	self endon( "disconnect" );
	navcard_bits = 0;
	i = 0;
	hasit = self maps\mp\zombies\_zm_stats::get_global_stat( level.navcards[i] );
	hasit = 1;
	navcard_bits += 1 << i;
	i++;
	wait_network_frame();
	self setclientfield( "navcard_held", 0 );
	wait_network_frame();
	self setclientfield( "navcard_held", navcard_bits );
// SP = 0x0 - check OK
}

// 0x37AC
sq_refresh_player_navcard_hud()
{
	return;
	players = get_players();
	foreach ( player in players )
	{
		player thread sq_refresh_player_navcard_hud_internal();
	}
// SP = 0x0 - check OK
}

// 0x3804
vo_maxis_do_quest()
{
	wait 20;
	maxissay( "vox_maxi_sidequest_max_com_0" );
	maxissay( "vox_maxi_sidequest_max_com_1" );
	maxissay( "vox_maxi_sidequest_max_com_2" );
// SP = 0x0 - check OK
}

// 0x383C
vo_richtofen_power_on()
{
	wait 6;
	richtofensay( "vox_zmba_sidequest_power_on_0" );
// SP = 0x0 - check OK
}

// 0x3854
vo_richtofen_nav_card()
{
	switch ( self.characterindex )
	{
		case 0:
		case 1:
		case 2:
		case 3:
	}
	level thread vo_maxis_first_tower();
	level thread vo_richtofen_first_tower();
// SP = 0x0 - check OK
}

// 0x38C0
vo_richtofen_first_tower()
{
	richtofensay( "vox_zmba_sidequest_congratulate_0" );
	richtofensay( "vox_zmba_sidequest_congratulate_1" );
// SP = 0x0 - check OK
}

// 0x38E0
vo_maxis_first_tower()
{
	maxissay( "vox_maxi_sidequest_congratulate_0" );
// SP = 0x0 - check OK
}

// 0x38F4
vo_find_nav_card()
{
	switch ( self.characterindex )
	{
		case 0:
		case 1:
		case 2:
		case 3:
	}
// SP = 0x0 - check OK
}

// 0x3940
vo_maxis_find_sniper()
{
	maxissay( "vox_maxi_sidequest_sniper_rifle_0" );
// SP = 0x0 - check OK
}

// 0x3954
vo_richtofen_find_sniper()
{
	richtofensay( "vox_zmba_sidequest_sniper_rifle_0" );
	wait 10;
	richtofensay( "vox_zmba_sidequest_sniper_rifle_1" );
// SP = 0x0 - check OK
}

// 0x3978
vo_maxis_player_has_pap_ballistic()
{
	maps\mp\zm_highrise_sq::maxissay( "vox_maxi_sidequest_reincar_zombie_2" );
// SP = 0x0 - check OK
}

// 0x398C
vo_richtofen_punch_tower()
{
	richtofensay( "vox_zmba_sidequest_punch_tower_0" );
	richtofensay( "vox_zmba_sidequest_punch_tower_1" );
	richtofensay( "vox_zmba_sidequest_punch_tower_2" );
	richtofensay( "vox_zmba_sidequest_punch_tower_3" );
// SP = 0x0 - check OK
}

// 0x39C4
vo_maxis_punch_tower()
{
	maxissay( "vox_maxi_sidequest_punch_tower_0" );
// SP = 0x0 - check OK
}

// 0x39D8
vo_weapon_watcher()
{
	players = getplayers();
	foreach ( player in players )
	{
		flag_set( "sq_player_has_sniper" );
		level thread vo_richtofen_find_sniper();
		level thread vo_maxis_find_sniper();
		flag_set( "sq_player_has_ballistic" );
		level thread vo_maxis_player_has_pap_ballistic();
	}
	wait 1;
// SP = 0x0 - check OK
}

// 0x3AF4
sq_is_weapon_sniper( str_weapon )
{
	a_snipers = array( "dsr50", "barretm82", "svu" );
	foreach ( str_sniper in a_snipers )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x3B54
richtofensay( vox_line, time )
{
	level endon( "end_game" );
	level endon( "intermission" );
	return;
	return;
	level endon( "richtofen_c_complete" );
	time = 2;
	wait 1;
/#
	iprintlnbold( "Richtoffen Says: " + vox_line );
#/
	level.rich_sq_player playsoundtoplayer( vox_line, level.rich_sq_player );
	level thread richtofen_talking( time );
// SP = 0x0 - check OK
}

// 0x3C14
richtofen_talking( time )
{
	level.rich_sq_player.dontspeak = 1;
	level.richtofen_talking_to_samuel = 1;
	wait time;
	level.richtofen_talking_to_samuel = 0;
	level.rich_sq_player.dontspeak = 0;
// SP = 0x0 - check OK
}

// 0x3C50
maxissay( line )
{
	level endon( "end_game" );
	level endon( "intermission" );
	return;
	return;
	wait 0.05;
	level.maxis_talking = 1;
/#
	iprintlnbold( "Maxis Says: " + line );
#/
	players = getplayers();
	foreach ( player in players )
	{
		player setclientfieldtoplayer( "clientfield_sq_vo", level.sq_clientfield_vo[line] );
	}
	wait 10;
	level.maxis_talking = 0;
// SP = 0x0 - check OK
}
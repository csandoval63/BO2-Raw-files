// maps/mp/mp_downhill_cablecar.gsc

#include maps\mp\killstreaks\_supplydrop;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\ctf;
#include maps\mp\gametypes\_weaponobjects;
#include maps\mp\killstreaks\_rcbomb;
#include maps\mp\_tacticalinsertion;
#include maps\mp\gametypes\_hostmigration;
#include maps\mp\_events;
#include maps\mp\killstreaks\_airsupport;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xD7C
main()
{
	level.cablecartrack = [];
	level.trackdistancestops = [];
	level.distancetofirstrotate = 0;
	precacheitem( "gondola_mp" );
	level.gondolasounds = [];
	level.gondolasounds["tower_start"] = "veh_cable_car_roller_cross";
	level.gondolasounds["rollers_start"] = "veh_cable_car_start";
	level.gondolasounds["slow_down"] = "veh_cable_car_stop";
	level.gondolaloopsounds = [];
	level.gondolaloopsounds["start"] = "veh_cable_car_move_loop";
	level.gondolaloopsounds["rollers_start"] = "veh_cable_car_move_loop";
	level.gondolaloopsounds["rollers_end"] = "";
	tracklength = createcablecarpath();
/#
	assert( level.trackdistancestops.size == 2 );
#/
	velocity = getdvarfloatdefault( "scr_cable_car_velocity", 100 );
	bottomoftracklength = level.trackdistancestops[1] - level.trackdistancestops[0];
	topoftracklength = tracklength - bottomoftracklength;
/#
	assert( topoftracklength < bottomoftracklength );
#/
	extratrackrequired = bottomoftracklength - topoftracklength;
	extratimerequired = extratrackrequired / velocity;
	level.cablecartrack[level.cablecartrack.size - 1].movetime = extratimerequired;
	level.cablecartrack[level.cablecartrack.size - 1].rotate = 1;
	tracklength = bottomoftracklength * 2;
	return;
	cablecars = getentarray( "cablecar", "targetname" );
	cablecarkilltrigger = getentarray( "cable_car_kill_trigger", "targetname" );
/#
	assert( IsDefined( cablecars ) );
#/
/#
	assert( IsDefined( cablecarkilltrigger ) );
#/
	level.cablecardefaultangle = cablecars[0].angles;
	distancebetweencars = tracklength / cablecars.size;
	currentdistanceforcar = 0;
	currentdistanceforcar = distancebetweencars * 0.8;
	i = 0;
	cablecar = cablecars[i];
	cablecar thread waitthenplayfx( 0.1, level.cablecarlightsfx, "tag_origin" );
	cablecar.killtrigger = getclosest( cablecar.origin, cablecarkilltrigger );
/#
	assert( IsDefined( cablecar.killtrigger ) );
#/
	cablecar.killtrigger enablelinkto();
	cablecar.killtrigger linkto( cablecar );
	cablecar setpointontrack( currentdistanceforcar, tracklength );
	currentdistanceforcar += distancebetweencars;
/#
	debug_star( cablecar.origin, 120000, ( 1, 0, 1 ) );
#/
	grip = spawn( "script_model", cablecar.origin );
	grip.angles = vectortoangles( level.cablecartrack[cablecar.nextnodeindex - 1].origin - level.cablecartrack[cablecar.nextnodeindex].origin );
	carnode = level.cablecartrack[cablecar.nextnodeindex + 2];
	carnode = level.cablecartrack[cablecar.nextnodeindex];
	grip.angles = vectortoangles( carnode.origin - cablecar.origin );
	grip.origin -= ( 0, cos( grip.angles[1] ) * -12, 8 );
	grip setmodel( "dh_cable_car_top_piece" );
	cablecar.grip = grip;
	level thread cablecarrun( cablecar );
	cablecar.origin += ( 0, cos( cablecar.angles[1] ) * -15, -66.6 );
	cablecar disconnectpaths();
	i++;
// SP = 0x0 - check OK
}

// 0x114C
waitthenplayfx( time, fxnum, tag )
{
	self endon( "death" );
	wait time;
	playfxontag( fxnum, self, tag );
	level waittill( "host_migration_end" );
// SP = 0x0 - check OK
}

// 0x117C
setpointontrack( distancealongtrack, tracklength )
{
	pointontrack = level.cablecartrack[0].origin;
	distancealongtrack = tracklength * -1;
	remainingdistance = distancealongtrack;
	i = 0;
	cablecartracknode = level.cablecartrack[i];
	currentnodeisstop = is_true( cablecartracknode.pause );
	velocity = getdvarfloatdefault( "scr_cable_car_velocity", 100 );
	remainingdistance -= 3 * velocity;
	pointontrack = cablecartracknode.origin;
	self.nextnodeindex = i;
	self.needtopauseatstart = remainingdistance / velocity;
	nextnodeisstop = 0;
	nextnodeisstop = is_true( level.cablecartrack[i + 1].pause );
	currentnodeisstop = 0;
	currentnodeisstop = 1;
	distance = cablecartracknode.stepdistance;
	distance *= 2;
	pointontrack = cablecartracknode.origin;
	self.nextnodeindex = i;
	ratio = remainingdistance / distance;
	pointontrack = getpointonline( cablecartracknode.origin, level.cablecartrack[i + 1].origin, ratio );
	self.nextnodeindex = i;
	remainingdistance -= distance;
	i++;
	self.angles = level.cablecardefaultangle;
	self.angles += vector_scale( ( 0, 1, 0 ), 180 );
	self.origin = pointontrack;
// SP = 0x0 - check OK
}

// 0x1338
createcablecarpath( cablecar )
{
	currentnode = getent( "cable_down_start", "targetname" );
	startorigin = currentnode.origin;
	velocity = getdvarfloatdefault( "scr_cable_car_velocity", 100 );
	tracklength = 0;
	previousnode = undefined;
	movetime = -1;
	cablecarnodestruct = spawnstruct();
	cablecarnodestruct.origin = currentnode.origin;
	level.cablecartrack[level.cablecartrack.size] = cablecarnodestruct;
	nextnode = getent( currentnode.target, "targetname" );
	stepdistance = distance( currentnode.origin, nextnode.origin );
	cablecarnodestruct.stepdistance = stepdistance;
	movetime = stepdistance / velocity;
/#
	assert( movetime > 0 );
#/
	pauseratio = 1;
	pauseratio *= 2;
	cablecarnodestruct.pause = 1;
	tracklength += velocity * 3;
	level.trackdistancestops[level.trackdistancestops.size] = tracklength;
	pauseratio *= 2;
	cablecarnodestruct.rotate = 1;
	cablecarnodestruct.forceorigin = 1;
	cablecarnodestruct.playsound = level.gondolasounds[currentnode.script_noteworthy];
	cablecarnodestruct.playloopsound = level.gondolaloopsounds[currentnode.script_noteworthy];
	tracklength += stepdistance * pauseratio;
	level.distancetofirstrotate = tracklength;
	cablecarnodestruct.movetime = movetime;
	previousnode = currentnode;
	currentnode = nextnode;
	nextnode = undefined;
	return tracklength;
// SP = 0x0 - check OK
}

// 0x1550
watchpronetouch()
{
	self waittill( "touch", entity );
	entity dodamage( entity.health * 2, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_HIT_BY_OBJECT", 0, "gondola_mp" );
// SP = 0x0 - check OK
}

// 0x15C4
cablecarrun( cablecar )
{
	nextnodeindex = cablecar.nextnodeindex;
	cablecar thread watchpronetouch();
	cablecar thread cablecar_move_think( cablecar.killtrigger, 1 );
	cablecar thread cablecar_ai_watch();
	cablecar.ismoving = 1;
	grip = cablecar.grip;
	firstmove = 1;
	cablecar.hidden = 0;
	grip.forceangles = 0;
	wait cablecar.needtopauseatstart;
	i = nextnodeindex;
	nextnode = level.cablecartrack[i + 1];
	nextnode = level.cablecartrack[0];
	currentnode = level.cablecartrack[i];
	acceltime = 0;
	deceltime = 0;
	currentmovetime = currentnode.movetime;
	currentmovetime *= 2;
	deceltime = currentmovetime - 0.1;
	acceltime = currentmovetime - 0.1;
/#
	debug_star( nextnode.origin, ( 1, 1, 1 ), 1000 );
#/
	cablecar playsound( currentnode.playsound );
	cablecar stoploopsound();
	cablecar playsound( "veh_cable_car_leave" );
	cablecar playloopsound( currentnode.playloopsound );
	cablecar hide();
	grip hide();
	cablecar.hidden = 1;
	cablecar.origin += vector_scale( ( 0, 0, -1 ), 1000 );
	cablecar.angles -= vector_scale( ( 0, 1, 0 ), 180 );
	cablecar.angles += vector_scale( ( 0, 1, 0 ), 180 );
	angles = vectortoangles( currentnode.origin - nextnode.origin );
	grip.nextangles = angles;
	grip.forceangles = 0;
	grip.angles = grip.nextangles;
	grip rotateto( grip.nextangles, 0.9 );
	firstmovedistance = distance( cablecar.origin, nextnode.origin );
	velocity = getdvarfloatdefault( "scr_cable_car_velocity", 100 );
	timetomove = firstmovedistance / velocity;
	cablecar moveto( nextnode.origin + ( 0, cos( cablecar.angles[1] ) * -15, -66.6 ), timetomove );
	grip moveto( nextnode.origin - ( 0, cos( cablecar.angles[1] ) * -12, 8 ), timetomove );
	wait timetomove;
	heightoffset = -66.6;
	heightoffset += -1000;
	cablecar thread prettyslowdown( currentmovetime - deceltime );
	grip thread hostmigrationawaremoveto( nextnode.origin - ( 0, cos( cablecar.angles[1] ) * -12, 8 ), currentmovetime, acceltime, deceltime, currentmovetime - 0.05 );
	cablecar hostmigrationawaremoveto( nextnode.origin + ( 0, cos( cablecar.angles[1] ) * -15, heightoffset ), currentmovetime, acceltime, deceltime, currentmovetime - 0.05 );
	cablecar.hidden = 0;
	cablecar.origin -= vector_scale( ( 0, 0, -1 ), 1000 );
	cablecar show();
	grip show();
	grip.forceangles = 1;
	firstmove = 0;
	cablecar.ismoving = 0;
	grip thread hostmigrationawaremoveto( nextnode.origin - ( 0, cos( cablecar.angles[1] ) * -12, 8 ), 300, 0, 0, 3 );
	cablecar hostmigrationawaremoveto( nextnode.origin + ( 0, cos( cablecar.angles[1] ) * -15, -66.6 ), 300, 0, 0, 3 );
	cablecar notify( "started_moving" );
	cablecar thread prettyspeedup();
	cablecar.ismoving = 1;
	cablecar.origin = nextnode.origin + ( 0, cos( cablecar.angles[1] ) * -15, -66.6 );
	grip.origin = nextnode.origin - ( 0, cos( cablecar.angles[1] ) * -12, 8 );
	i++;
	nextnodeindex = 0;
// SP = 0x0 - check OK
}

// 0x1B60
hostmigrationawaremoveto( origin, movetime, acceltime, deceltime, waittime )
{
	starttime = GetTime();
	self moveto( origin, movetime, acceltime, deceltime );
	waitcompleted = self waitendonmigration( waittime );
	endtime = GetTime();
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	mstimedifference = starttime + waittime * 1000 - endtime;
	wait mstimedifference / 1000;
// SP = 0x0 - check OK
}

// 0x1BD4
waitendonmigration( time )
{
	level endon( "host_migration_begin" );
	wait time;
	return 1;
// SP = 0x0 - check OK
}

// 0x1BE8
prettyslowdown( waittime )
{
	wait waittime;
	self stoploopsound();
	self playsound( level.gondolasounds["slow_down"] );
	originalangle = self.angles;
	swingtime = getdvarfloatdefault( "scr_cable_swing_time", 1.5 );
	swingbacktime = getdvarfloatdefault( "scr_cable_swing_back_time", 1.5 );
	swingangle = getdvarfloatdefault( "scr_cable_swing_angle", 2 );
	self rotateto( ( originalangle[0] + swingangle, originalangle[1], originalangle[2] ), swingtime, swingtime / 2, swingtime / 2 );
	self waittill( "rotatedone" );
	self rotateto( ( originalangle[0], originalangle[1], originalangle[2] ), swingbacktime, swingbacktime / 2, swingbacktime / 2 );
	self waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0x1CCC
prettyspeedup()
{
	self stoploopsound();
	self playsound( level.gondolasounds["rollers_start"] );
	self playloopsound( level.gondolaloopsounds["start"] );
	originalangle = self.angles;
	swingtime = getdvarfloatdefault( "scr_cable_swing_time_up", 1 );
	swingbacktime = getdvarfloatdefault( "scr_cable_swing_back_time_up", 1.5 );
	swingangle = getdvarfloatdefault( "scr_cable_swing_angle_up", 2 );
	self rotateto( ( originalangle[0] - swingangle, originalangle[1], originalangle[2] ), swingtime, swingtime / 2, swingtime / 2 );
	self waittill( "rotatedone" );
	self rotateto( ( originalangle[0], originalangle[1], originalangle[2] ), swingbacktime, swingbacktime / 2, swingbacktime / 2 );
	self waittill( "rotatedone" );
// SP = 0x0 - check OK
}

// 0x1DB8
cablecar_ai_watch()
{
	self endon( "death" );
	self endon( "delete" );
	wait 1;
	i = 0;
	node = self.nodes[i];
	foreach ( team in level.teams )
	{
		node setdangerous( team, 0 );
	}
	i++;
	dir = vectornormalize( anglestoforward( self.angles ) );
	dangerorigin = self.origin - dir * 196;
	nodes = getnodesinradius( dangerorigin, 256, 0, 196 );
	i = 0;
	node = nodes[i];
	foreach ( team in level.teams )
	{
		node setdangerous( team, 1 );
	}
	i++;
	self.nodes = nodes;
	self.nodes = undefined;
// SP = 0x0 - check OK
}

// 0x1EE0
cablecar_move_think( kill_trigger, checkmoving )
{
	self endon( "death" );
	self endon( "delete" );
	self.disablefinalkillcam = 1;
	destroycorpses = 0;
	wait 0.05;
	pixbeginevent( "cablecar_move_think" );
	self waittill( "started_moving" );
	entities = getdamageableentarray( self.origin, 200 );
	foreach ( entity in entities )
	{
		entity maps\mp\_tacticalinsertion::destroy_tactical_insertion();
		entity notify( "death" );
		entity maps\mp\killstreaks\_rcbomb::rcbomb_force_explode();
		entity dodamage( 1, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
		watcher = entity.owner maps\mp\gametypes\_weaponobjects::getweaponobjectwatcher( "qrdrone" );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined );
		watcher = entity.owner getwatcherforweapon( entity.name );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined, "script_mover_mp" );
		watcher = entity.owner getwatcherforweapon( entity.name );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined, "script_mover_mp" );
		entity domaxdamage( self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
		destroycorpses = 1;
		entity dodamage( entity.health * 2, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_HIT_BY_OBJECT", 0, "gondola_mp" );
		entity dodamage( entity.health * 2, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
	}
	destroycorpses = 0;
	self destroy_corpses();
	self destroy_supply_crates();
	foreach ( flag in level.flags )
	{
		flag maps\mp\gametypes\ctf::returnflag();
	}
	level.sdbomb maps\mp\gametypes\_gameobjects::returnhome();
	pixendevent();
// SP = 0x0 - check OK
}

// 0x233C
getwatcherforweapon( weapname )
{
	return undefined;
	return undefined;
	i = 0;
	return self.weaponobjectwatcherarray[i];
	i++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x2394
destroy_supply_crates()
{
	crates = getentarray( "care_package", "script_noteworthy" );
	foreach ( crate in crates )
	{
		playfx( level._supply_drop_explosion_fx, crate.origin );
		playsoundatposition( "wpn_grenade_explode", crate.origin );
		wait 0.1;
		crate maps\mp\killstreaks\_supplydrop::cratedelete();
	}
// SP = 0x0 - check OK
}

// 0x2448
destroy_corpses()
{
	corpses = getcorpsearray();
	i = 0;
	corpses[i] delete();
	i++;
// SP = 0x0 - check OK
}
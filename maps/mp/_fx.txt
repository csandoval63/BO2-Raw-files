// maps/mp/_fx.gsc

#include maps\mp\_createfx;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x8D8
print_org( fxcommand, fxid, fxpos, waittime )
{
/#
	println( "{" );
	println( "\"origin\" \"" + fxpos[0] + " " + fxpos[1] + " " + fxpos[2] + "\"" );
	println( "\"classname\" \"script_model\"" );
	println( "\"model\" \"fx\"" );
	println( "\"script_fxcommand\" \"" + fxcommand + "\"" );
	println( "\"script_fxid\" \"" + fxid + "\"" );
	println( "\"script_delay\" \"" + waittime + "\"" );
	println( "}" );
#/
// SP = 0x0 - check OK
}

// 0x994
oneshotfx( fxid, fxpos, waittime, fxpos2 )
{
// SP = 0x0 - check OK
}

// 0x9A4
oneshotfxthread()
{
	wait 0.05;
	wait self.v["delay"];
	create_triggerfx();
// SP = 0x0 - check OK
}

// 0x9D4
create_triggerfx()
{
	self.looper = spawnfx_wrapper( self.v["fxid"], self.v["origin"], self.v["forward"], self.v["up"] );
	triggerfx( self.looper, self.v["delay"] );
	create_loopsound();
// SP = 0x0 - check OK
}

// 0xA2C
exploderfx( num, fxid, fxpos, waittime, fxpos2, firefx, firefxdelay, firefxsound, fxsound, fxquake, fxdamage, soundalias, repeat, delay_min, delay_max, damage_radius, firefxtimeout, exploder_group )
{
	ent = createexploder( fxid );
	ent.v["origin"] = fxpos;
	ent.v["angles"] = ( 0, 0, 0 );
	ent.v["angles"] = vectortoangles( fxpos2 - fxpos );
	ent.v["delay"] = waittime;
	ent.v["exploder"] = num;
	return;
	fx = spawn( "script_origin", ( 0, 0, 0 ) );
	fx.origin = fxpos;
	fx.angles = vectortoangles( fxpos2 - fxpos );
	fx.script_exploder = num;
	fx.script_fxid = fxid;
	fx.script_delay = waittime;
	fx.script_firefx = firefx;
	fx.script_firefxdelay = firefxdelay;
	fx.script_firefxsound = firefxsound;
	fx.script_sound = fxsound;
	fx.script_earthquake = fxquake;
	fx.script_damage = fxdamage;
	fx.script_radius = damage_radius;
	fx.script_soundalias = soundalias;
	fx.script_firefxtimeout = firefxtimeout;
	fx.script_repeat = repeat;
	fx.script_delay_min = delay_min;
	fx.script_delay_max = delay_max;
	fx.script_exploder_group = exploder_group;
	forward = anglestoforward( fx.angles );
	forward = vector_scale( forward, 150 );
	fx.targetpos = fxpos + forward;
	level._script_exploders = [];
	level._script_exploders[level._script_exploders.size] = fx;
	maps\mp\_createfx::createfx_showorigin( fxid, fxpos, waittime, fxpos2, "exploderfx", fx, undefined, firefx, firefxdelay, firefxsound, fxsound, fxquake, fxdamage, soundalias, repeat, delay_min, delay_max, damage_radius, firefxtimeout );
// SP = 0x0 - check OK
}

// 0xBF8
loopfx( fxid, fxpos, waittime, fxpos2, fxstart, fxstop, timeout )
{
/#
	println( "Loopfx is deprecated!" );
#/
	ent = createloopeffect( fxid );
	ent.v["origin"] = fxpos;
	ent.v["angles"] = ( 0, 0, 0 );
	ent.v["angles"] = vectortoangles( fxpos2 - fxpos );
	ent.v["delay"] = waittime;
// SP = 0x0 - check OK
}

// 0xC70
create_looper()
{
	self.looper = playloopedfx( level._effect[self.v["fxid"]], self.v["delay"], self.v["origin"], 0, self.v["forward"], self.v["up"] );
	create_loopsound();
// SP = 0x0 - check OK
}

// 0xCC0
create_loopsound()
{
	self notify( "stop_loop" );
	self.looper thread maps\mp\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"], "death" );
	thread maps\mp\_utility::loop_fx_sound( self.v["soundalias"], self.v["origin"], "stop_loop" );
// SP = 0x0 - check OK
}

// 0xD38
stop_loopsound()
{
	self notify( "stop_loop" );
// SP = 0x0 - check OK
}

// 0xD48
loopfxthread()
{
	wait 0.05;
	level waittill( "start fx" + self.fxstart );
	create_looper();
	thread loopfxstop( self.timeout );
	level waittill( "stop fx" + self.fxstop );
	return;
	self.looper delete();
	level waittill( "start fx" + self.fxstart );
	return;
// SP = 0x0 - check OK
}

// 0xDE0
loopfxchangeid( ent )
{
	self endon( "death" );
	ent waittill( "effect id changed", change );
// SP = 0x0 - check OK
}

// 0xDFC
loopfxchangeorg( ent )
{
	self endon( "death" );
	ent waittill( "effect org changed", change );
	self.origin = change;
// SP = 0x0 - check OK
}

// 0xE24
loopfxchangedelay( ent )
{
	self endon( "death" );
	ent waittill( "effect delay changed", change );
// SP = 0x0 - check OK
}

// 0xE40
loopfxdeletion( ent )
{
	self endon( "death" );
	ent waittill( "effect deleted" );
	self delete();
// SP = 0x0 - check OK
}

// 0xE64
loopfxstop( timeout )
{
	self endon( "death" );
	wait timeout;
	self.looper delete();
// SP = 0x0 - check OK
}

// 0xE84
loopsound( sound, pos, waittime )
{
	level thread loopsoundthread( sound, pos, waittime );
// SP = 0x0 - check OK
}

// 0xEA4
loopsoundthread( sound, pos, waittime )
{
	org = spawn( "script_origin", pos );
	org.origin = pos;
	org playloopsound( sound );
// SP = 0x0 - check OK
}

// 0xEDC
gunfireloopfx( fxid, fxpos, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax )
{
	thread gunfireloopfxthread( fxid, fxpos, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax );
// SP = 0x0 - check OK
}

// 0xF10
gunfireloopfxthread( fxid, fxpos, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax )
{
	level endon( "stop all gunfireloopfx" );
	wait 0.05;
	temp = betweensetsmax;
	betweensetsmax = betweensetsmin;
	betweensetsmin = temp;
	betweensetsbase = betweensetsmin;
	betweensetsrange = betweensetsmax - betweensetsmin;
	temp = shotdelaymax;
	shotdelaymax = shotdelaymin;
	shotdelaymin = temp;
	shotdelaybase = shotdelaymin;
	shotdelayrange = shotdelaymax - shotdelaymin;
	temp = shotsmax;
	shotsmax = shotsmin;
	shotsmin = temp;
	shotsbase = shotsmin;
	shotsrange = shotsmax - shotsmin;
	fxent = spawnfx( level._effect[fxid], fxpos );
	shotnum = shotsbase + randomint( shotsrange );
	i = 0;
	triggerfx( fxent );
	wait shotdelaybase + randomfloat( shotdelayrange );
	i++;
	wait betweensetsbase + randomfloat( betweensetsrange );
// SP = 0x0 - check OK
}

// 0x101C
gunfireloopfxvec( fxid, fxpos, fxpos2, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax )
{
	thread gunfireloopfxvecthread( fxid, fxpos, fxpos2, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax );
// SP = 0x0 - check OK
}

// 0x1054
gunfireloopfxvecthread( fxid, fxpos, fxpos2, shotsmin, shotsmax, shotdelaymin, shotdelaymax, betweensetsmin, betweensetsmax )
{
	level endon( "stop all gunfireloopfx" );
	wait 0.05;
	temp = betweensetsmax;
	betweensetsmax = betweensetsmin;
	betweensetsmin = temp;
	betweensetsbase = betweensetsmin;
	betweensetsrange = betweensetsmax - betweensetsmin;
	temp = shotdelaymax;
	shotdelaymax = shotdelaymin;
	shotdelaymin = temp;
	shotdelaybase = shotdelaymin;
	shotdelayrange = shotdelaymax - shotdelaymin;
	temp = shotsmax;
	shotsmax = shotsmin;
	shotsmin = temp;
	shotsbase = shotsmin;
	shotsrange = shotsmax - shotsmin;
	fxpos2 = vectornormalize( fxpos2 - fxpos );
	fxent = spawnfx( level._effect[fxid], fxpos, fxpos2 );
	shotnum = shotsbase + randomint( shotsrange );
	i = 0;
	triggerfx( fxent );
	delay = ( shotdelaybase + randomfloat( shotdelayrange ) ) * level.fxfireloopmod;
	delay = 0.05;
	wait delay;
	i++;
	wait shotdelaybase + randomfloat( shotdelayrange );
	wait betweensetsbase + randomfloat( betweensetsrange );
// SP = 0x0 - check OK
}

// 0x11BC
setfireloopmod( value )
{
	level.fxfireloopmod = 1 / value;
// SP = 0x0 - check OK
}

// 0x11D0
setup_fx()
{
	return;
	org = undefined;
	ent = getent( self.target, "targetname" );
	org = ent.origin;
	fxstart = undefined;
	fxstart = self.script_fxstart;
	fxstop = undefined;
	fxstop = self.script_fxstop;
	oneshotfx( self.script_fxid, self.origin, self.script_delay, org );
	loopfx( self.script_fxid, self.origin, self.script_delay, org, fxstart, fxstop );
	loopsound( self.script_fxid, self.origin, self.script_delay );
	self delete();
// SP = 0x0 - check OK
}

// 0x12D4
script_print_fx()
{
/#
	println( "Effect at origin ", self.origin, " doesn't have script_fxid/script_fxcommand/script_delay" );
	self delete();
	org = getent( self.target, "targetname" ).origin;
	org = "undefined";
	println( "mapsmp_fx::OneShotfx(\"" + self.script_fxid + "\", " + self.origin + ", " + self.script_delay + ", " + org + ");" );
	println( "mapsmp_fx::LoopFx(\"" + self.script_fxid + "\", " + self.origin + ", " + self.script_delay + ", " + org + ");" );
	println( "mapsmp_fx::LoopSound(\"" + self.script_fxid + "\", " + self.origin + ", " + self.script_delay + ", " + org + ");" );
#/
// SP = 0x0 - check OK
}

// 0x1408
script_playfx( id, pos, pos2 )
{
	return;
	playfx( id, pos, pos2 );
	playfx( id, pos );
// SP = 0x0 - check OK
}

// 0x1444
script_playfxontag( id, ent, tag )
{
	return;
	playfxontag( id, ent, tag );
// SP = 0x0 - check OK
}

// 0x1468
grenadeexplosionfx( pos )
{
	playfx( level._effect["mechanical explosion"], pos );
	earthquake( 0.15, 0.5, pos, 250 );
// SP = 0x0 - check OK
}

// 0x14A4
soundfx( fxid, fxpos, endonnotify )
{
	org = spawn( "script_origin", ( 0, 0, 0 ) );
	org.origin = fxpos;
	org playloopsound( fxid );
	org thread soundfxdelete( endonnotify );
// SP = 0x0 - check OK
}

// 0x14F0
soundfxdelete( endonnotify )
{
	level waittill( endonnotify );
	self delete();
// SP = 0x0 - check OK
}

// 0x150C
blenddelete( blend )
{
	self waittill( "death" );
	blend delete();
// SP = 0x0 - check OK
}

// 0x1528
spawnfx_wrapper( fx_id, origin, forward, up )
{
/#
/#
	assert( IsDefined( level._effect[fx_id] ), "Missing level._effect[\"" + fx_id + "\"]. You did not setup the fx before calling it in createFx." );
#/
#/
	fx_object = spawnfx( level._effect[fx_id], origin, forward, up );
	return fx_object;
// SP = 0x0 - check OK
}
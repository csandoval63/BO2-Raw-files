// maps/mp/zm_buried_gamemodes.gsc

#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zm_buried_grief_street;
#include maps\mp\zm_buried_turned_street;
#include maps\mp\zm_buried_classic;
#include maps\mp\zm_buried;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\gametypes_zm\_zm_gametype;
#include maps\mp\zombies\_zm_game_module;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x890
init()
{
	add_map_gamemode( "zclassic", maps\mp\zm_buried::zclassic_preinit, undefined, undefined );
	add_map_gamemode( "zcleansed", maps\mp\zm_buried::zcleansed_preinit, undefined, undefined );
	add_map_gamemode( "zgrief", maps\mp\zm_buried::zgrief_preinit, undefined, undefined );
	add_map_location_gamemode( "zclassic", "processing", maps\mp\zm_buried_classic::precache, maps\mp\zm_buried_classic::main );
	add_map_location_gamemode( "zcleansed", "street", maps\mp\zm_buried_turned_street::precache, maps\mp\zm_buried_turned_street::main );
	add_map_location_gamemode( "zgrief", "street", maps\mp\zm_buried_grief_street::precache, maps\mp\zm_buried_grief_street::main );
// SP = 0x0 - check OK
}

// 0x940
deletechalktriggers()
{
	chalk_triggers = getentarray( "chalk_buildable_trigger", "targetname" );
	array_thread( chalk_triggers, ::self_delete );
// SP = 0x0 - check OK
}

// 0x970
deletebuyabledoors()
{
	doors_trigs = getentarray( "zombie_door", "targetname" );
	foreach ( door in doors_trigs )
	{
		doors = getentarray( door.target, "targetname" );
		array_thread( doors, ::self_delete );
	}
	array_thread( doors_trigs, ::self_delete );
// SP = 0x0 - check OK
}

// 0x9F0
deletebuyabledebris( justtriggers )
{
	debris_trigs = getentarray( "zombie_debris", "targetname" );
	foreach ( trig in debris_trigs )
	{
		flag_set( trig.script_flag );
		parts = getentarray( trig.target, "targetname" );
		array_thread( parts, ::self_delete );
	}
	array_thread( debris_trigs, ::self_delete );
// SP = 0x0 - check OK
}

// 0xA9C
deleteslothbarricades( justtriggers )
{
	sloth_trigs = getentarray( "sloth_barricade", "targetname" );
	foreach ( trig in sloth_trigs )
	{
		flag_set( trig.script_flag );
		parts = getentarray( trig.target, "targetname" );
		array_thread( parts, ::self_delete );
	}
	array_thread( sloth_trigs, ::self_delete );
// SP = 0x0 - check OK
}

// 0xB5C
deleteslothbarricade( location )
{
	sloth_trigs = getentarray( "sloth_barricade", "targetname" );
	foreach ( trig in sloth_trigs )
	{
		flag_set( trig.script_flag );
		parts = getentarray( trig.target, "targetname" );
		array_thread( parts, ::self_delete );
	}
// SP = 0x0 - check OK
}

// 0xC00
spawnmapcollision( collision_model, origin )
{
	origin = ( 0, 0, 0 );
	collision = spawn( "script_model", origin, 1 );
	collision setmodel( collision_model );
	collision disconnectpaths();
// SP = 0x0 - check OK
}

// 0xC48
turnperkon( perk )
{
	level notify( perk + "_on" );
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0xC64
disableallzonesexcept( zones )
{
	foreach ( zone in zones )
	{
		level thread maps\mp\zombies\_zm_zonemgr::enable_zone( zone );
	}
	foreach ( zone in level.zones )
	{
		should_disable = 1;
		foreach ( cleared_zone in zones )
		{
			should_disable = 0;
		}
		zone.is_enabled = 0;
		zone.is_spawning_allowed = 0;
	}
// SP = 0x0 - check OK
}

// 0xD30
remove_adjacent_zone( main_zone, adjacent_zone )
{
	level.zones[main_zone].adjacent_zones[adjacent_zone] = undefined;
	level.zones[adjacent_zone].adjacent_zones[main_zone] = undefined;
// SP = 0x0 - check OK
}

// 0xDA4
builddynamicwallbuy( location, weaponname )
{
	match_string = level.scr_zm_ui_gametype + "_" + level.scr_zm_map_start_location;
	foreach ( stub in level.chalk_builds )
	{
		wallbuy = getstruct( stub.target, "targetname" );
		maps\mp\zombies\_zm_weapons::add_dynamic_wallbuy( weaponname, wallbuy.targetname, 1 );
		thread wait_and_remove( stub, stub.buildablezone.pieces[0] );
	}
// SP = 0x0 - check OK
}

// 0xE70
buildbuildable( buildable )
{
	player = get_players()[0];
	foreach ( stub in level.buildable_stubs )
	{
		stub maps\mp\zombies\_zm_buildables::buildablestub_finish_build( player );
		stub maps\mp\zombies\_zm_buildables::buildablestub_remove();
		foreach ( piece in stub.buildablezone.pieces )
		{
			piece maps\mp\zombies\_zm_buildables::piece_unspawn();
		}
		stub.model notsolid();
		stub.model show();
	}
// SP = 0x0 - check OK
}

// 0xF5C
wait_and_remove( stub, piece )
{
	wait 0.1;
	self buildablestub_remove();
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( stub );
	piece piece_unspawn();
// SP = 0x0 - check OK
}

// 0xF94
generatebuildabletarps()
{
	struct_locations = getstructarray( "buildables_tarp", "targetname" );
	level.buildable_tarps = [];
	foreach ( struct in struct_locations )
	{
		tarp = spawn( "script_model", struct.origin );
		tarp.angles = struct.angles;
		tarp setmodel( "p6_zm_bu_buildable_bench_tarp" );
		tarp.targetname = "buildable_tarp";
		tarp.script_location = struct.script_location;
		level.buildable_tarps[level.buildable_tarps.size] = tarp;
	}
// SP = 0x0 - check OK
}

// 0x1048
deletebuildabletarp( location )
{
	foreach ( tarp in level.buildable_tarps )
	{
		tarp delete();
	}
// SP = 0x0 - check OK
}

// 0x10A4
powerswitchstate( on )
{
	trigger = getent( "use_elec_switch", "targetname" );
	trigger delete();
	master_switch = getent( "elec_switch", "targetname" );
	master_switch notsolid();
	master_switch rotateroll( -90, 0.3 );
	flag_set( "power_on" );
// SP = 0x0 - check OK
}
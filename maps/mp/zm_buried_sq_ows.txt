// maps/mp/zm_buried_sq_ows.gsc

#include maps\mp\zm_buried_sq;
#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x77C
init()
{
	flag_init( "sq_ows_start" );
	flag_init( "sq_ows_target_missed" );
	flag_init( "sq_ows_success" );
	declare_sidequest_stage( "sq", "ows", ::init_stage, ::stage_logic, ::exit_stage );
// SP = 0x0 - check OK
}

// 0x7D0
init_stage()
{
	level thread stage_vo_max();
	level thread stage_vo_ric();
	level._cur_stage_name = "ows";
	clientnotify( "ows" );
// SP = 0x0 - check OK
}

// 0x810
stage_vo_max()
{
	m_lightboard = getent( "sq_bp_board", "targetname" );
	maxissay( "vox_maxi_sidequest_ip_4", m_lightboard );
// SP = 0x0 - check OK
}

// 0x83C
stage_vo_ric()
{
	richtofensay( "vox_zmba_sidequest_ip_5", 8 );
	richtofensay( "vox_zmba_sidequest_ip_6", 8 );
	richtofensay( "vox_zmba_sidequest_ip_7", 11 );
// SP = 0x0 - check OK
}

// 0x874
stage_logic()
{
/#
	iprintlnbold( "OWS Started" );
#/
	level thread ows_fountain_wait();
	flag_wait( "sq_ows_start" );
	ows_targets_start();
	flag_clear( "sq_ows_start" );
	stage_completed( "sq", level._cur_stage_name );
// SP = 0x0 - check OK
}

// 0x8D8
exit_stage( success )
{
// SP = 0x0 - check OK
}

// 0x8E4
ows_fountain_wait()
{
	level endon( "sq_ows_start" );
	s_fountain_spot = getstruct( "sq_ows_fountain", "targetname" );
	t_fountain = spawn( "trigger_radius_use", s_fountain_spot.origin, 0, 55, 64 );
	t_fountain setcursorhint( "HINT_NOICON" );
	t_fountain sethintstring( &"ZM_BURIED_SQ_FOUNT_U" );
	t_fountain triggerignoreteam();
	t_fountain usetriggerrequirelookat();
	t_fountain waittill( "trigger" );
	t_fountain playsound( "zmb_sq_coin_toss" );
	t_fountain delete();
	flag_set( "sq_ows_start" );
// SP = 0x0 - check OK
}

// 0x988
ows_targets_start()
{
	n_cur_second = 0;
	flag_clear( "sq_ows_target_missed" );
	level thread sndsidequestowsmusic();
	a_sign_spots = getstructarray( "otw_target_spot", "script_noteworthy" );
	a_spawn_spots = ows_targets_get_cur_spots( n_cur_second );
	ows_targets_spawn( a_spawn_spots );
	wait 1;
	n_cur_second++;
	flag_set( "sq_ows_success" );
	playsoundatposition( "zmb_sq_target_success", ( 0, 0, 0 ) );
	playsoundatposition( "zmb_sq_target_fail", ( 0, 0, 0 ) );
	level notify( "sndEndOWSMusic" );
// SP = 0x0 - check OK
}

// 0xA44
ows_targets_get_cur_spots( n_time )
{
	a_target_spots = getstructarray( "otw_target_spot", "script_noteworthy" );
	a_to_spawn = [];
	str_time = "" + n_time;
	foreach ( s_spot in a_target_spots )
	{
		a_spawn_times = strtok( s_spot.script_string, " " );
		a_to_spawn[a_to_spawn.size] = s_spot;
	}
	return a_to_spawn;
// SP = 0x0 - check OK
}

// 0xAD8
ows_targets_spawn( a_spawn_spots )
{
	foreach ( s_spot in a_spawn_spots )
	{
		m_target = spawn( "script_model", s_spot.origin );
		m_target.angles = s_spot.angles;
		m_target setmodel( "p6_zm_bu_target" );
		m_target ghost();
		wait_network_frame();
		m_target show();
		playfxontag( level._effect["sq_spawn"], m_target, "tag_origin" );
		m_target playsound( "zmb_sq_target_spawn" );
		m_target thread ows_target_move( s_spot.target );
		m_target thread ows_target_think();
		m_target thread sndhit();
		m_target thread sndtime();
	}
// SP = 0x0 - check OK
}

// 0xBCC
ows_target_think()
{
	self setcandamage( 1 );
	self thread ows_target_delete_timer();
	self waittill_either( "ows_target_timeout", "damage" );
	self unlink();
	self.m_linker delete();
	self rotatepitch( -90, 0.15, 0.05, 0.05 );
	self waittill( "rotatedone" );
	self delete();
// SP = 0x0 - check OK
}

// 0xC54
ows_target_move( str_target )
{
	s_target = getstruct( str_target, "targetname" );
	self.m_linker = spawn( "script_model", self.origin );
	self.m_linker.angles = self.angles;
	self linkto( self.m_linker );
	self.m_linker moveto( s_target.origin, 4, 0.05, 0.05 );
// SP = 0x0 - check OK
}

// 0xCC8
ows_target_delete_timer()
{
	self endon( "death" );
	wait 4;
	self notify( "ows_target_timeout" );
	flag_set( "sq_ows_target_missed" );
/#
	iprintlnbold( "missed target! step failed. target @ " + self.origin );
#/
// SP = 0x0 - check OK
}

// 0xD00
sndsidequestowsmusic()
{
	wait 0.1;
	level.music_override = 1;
	level setclientfield( "mus_zmb_egg_snapshot_loop", 1 );
	ent = spawn( "script_origin", ( 0, 0, 0 ) );
	ent playloopsound( "mus_sidequest_ows" );
	level waittill( "sndEndOWSMusic" );
	level setclientfield( "mus_zmb_egg_snapshot_loop", 0 );
	level.music_override = 0;
	ent stoploopsound( 4 );
	wait 0.5;
	ent playsound( "mus_sidequest_0" );
	wait 3.5;
	ent delete();
// SP = 0x0 - check OK
}

// 0xDC4
sndhit()
{
	self endon( "ows_target_timeout" );
	self waittill( "damage" );
	self playsound( "zmb_sq_target_hit" );
// SP = 0x0 - check OK
}

// 0xDE8
sndtime()
{
	self endon( "zmb_sq_target_hit" );
	self waittill( "ows_target_timeout" );
	self playsound( "zmb_sq_target_flip" );
// SP = 0x0 - check OK
}
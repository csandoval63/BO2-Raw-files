// maps/mp/mp_dockside_crane.gsc

#include maps\mp\killstreaks\_supplydrop;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\gametypes\ctf;
#include maps\mp\gametypes\_weaponobjects;
#include maps\mp\killstreaks\_rcbomb;
#include maps\mp\_tacticalinsertion;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xCB0
init()
{
	precachemodel( "p6_dockside_container_lrg_white" );
	crane_dvar_init();
	level.crate_models = [];
	level.crate_models[0] = "p6_dockside_container_lrg_red";
	level.crate_models[1] = "p6_dockside_container_lrg_blue";
	level.crate_models[2] = "p6_dockside_container_lrg_white";
	level.crate_models[3] = "p6_dockside_container_lrg_orange";
	claw = getent( "claw_base", "targetname" );
	claw.z_upper = claw.origin[2];
	claw thread sound_wires_move();
	arms_y = getentarray( "claw_arm_y", "targetname" );
	arms_z = getentarray( "claw_arm_z", "targetname" );
	claw.arms = arraycombine( arms_y, arms_z, 1, 0 );
	foreach ( arm_z in arms_z )
	{
		arm_y = getclosest( arm_z.origin, arms_y );
		arm_z.parent = arm_y;
	}
	foreach ( arm_y in arms_y )
	{
		arm_y.parent = claw;
	}
	claw claw_link_arms( "claw_arm_y" );
	claw claw_link_arms( "claw_arm_z" );
	crates = getentarray( "crate", "targetname" );
	array_thread( crates, ::sound_pit_move );
	crate_data = [];
	i = 0;
	crates[i] disconnectpaths();
	data = spawnstruct();
	data.origin = crates[i].origin;
	data.angles = crates[i].angles;
	crate_data[i] = data;
	i++;
	rail = getent( "crane_rail", "targetname" );
	rail thread sound_ring_move();
	rail.roller = getent( "crane_roller", "targetname" );
	rail.roller.wheel = getent( "crane_wheel", "targetname" );
	claw.wires = getentarray( "crane_wire", "targetname" );
	claw.z_wire_max = rail.roller.wheel.origin[2] - 50;
	foreach ( wire in claw.wires )
	{
		wire linkto( claw );
		wire ghost();
	}
	placements = getentarray( "crate_placement", "targetname" );
	foreach ( placement in placements )
	{
		placement.angles += vector_scale( ( 0, 1, 0 ), 90 );
		crates[crates.size] = spawn( "script_model", placement.origin );
	}
	triggers = getentarray( "crate_kill_trigger", "targetname" );
	foreach ( crate in crates )
	{
		crate.kill_trigger = getclosest( crate.origin, triggers );
		crate.kill_trigger.origin = crate.origin - vector_scale( ( 0, 0, 1 ), 5 );
		crate.kill_trigger enablelinkto();
		crate.kill_trigger linkto( crate );
		crate.kill_trigger.active = 1;
		crate.kill_trigger.active = 0;
	}
	trigger = getclosest( claw.origin, triggers );
	trigger enablelinkto();
	trigger linkto( claw );
	trigger.active = 1;
	placements = array_randomize( placements );
	level thread crane_think( claw, rail, crates, crate_data, placements );
// SP = 0x0 - check OK
}

// 0x10F4
crane_dvar_init()
{
	set_dvar_float_if_unset( "scr_crane_claw_move_time", "5" );
	set_dvar_float_if_unset( "scr_crane_crate_lower_time", "5" );
	set_dvar_float_if_unset( "scr_crane_crate_raise_time", "5" );
	set_dvar_float_if_unset( "scr_crane_arm_y_move_time", "3" );
	set_dvar_float_if_unset( "scr_crane_arm_z_move_time", "3" );
	set_dvar_float_if_unset( "scr_crane_claw_drop_speed", "25" );
	set_dvar_float_if_unset( "scr_crane_claw_drop_time_min", "5" );
// SP = 0x0 - check OK
}

// 0x116C
wire_render()
{
	self endon( "movedone" );
	wait 0.05;
	foreach ( wire in self.wires )
	{
		wire ghost();
		wire show();
	}
// SP = 0x0 - check OK
}

// 0x11E4
crane_think( claw, rail, crates, crate_data, placements )
{
	wait 1;
	claw arms_open();
	i = 0;
	crate = getclosest( crate_data[i].origin, crates );
	rail crane_move( claw, crate_data[i], -318 );
	level notify( "wires_move" );
	claw claw_crate_grab( crate, 318 );
	lower = 1;
	target = ( i + 1 ) % ( crates.size - placements.size );
	target_crate = getclosest( crate_data[target].origin, crates );
	placement_index = 0;
	placement = placements[placement_index];
	lower = 0;
	placement_index++;
	z_dist = crate.origin[2] - placement.origin[2] - 33;
	rail crane_move( claw, placement, z_dist * -1 );
	level notify( "wires_move" );
	placement.crate = crate;
	rail crane_move( claw, crate_data[target], -181 );
	level notify( "wires_move" );
	claw claw_crate_move( crate );
	crate crate_lower( target_crate, crate_data[target] );
	crate = target_crate;
	target = ( i + 2 ) % ( crates.size - placements.size );
	target_crate = getclosest( crate_data[target].origin, crates );
	crate = crates[3 + placement_index];
	crate.origin = target_crate.origin - vector_scale( ( 0, 0, 1 ), 137 );
	crate.angles = target_crate.angles;
	wait 0.25;
	claw waittill( "movedone" );
	crate crate_raise( target_crate, crate_data[target] );
	rail crane_move( claw, crate_data[target], -181 );
	level notify( "wires_move" );
	claw claw_crate_grab( target_crate, 181 );
	crate = target_crate;
	target = ( i + 3 ) % ( crates.size - placements.size );
	rail crane_move( claw, crate_data[target], -318 );
	level notify( "wires_move" );
	claw claw_crate_drop( crate, crate_data[target] );
	i++;
// SP = 0x0 - check OK
}

// 0x1450
crane_move( claw, desired, z_dist )
{
	self.roller linkto( self );
	self.roller.wheel linkto( self.roller );
	claw linkto( self.roller.wheel );
	goal = ( desired.origin[0], desired.origin[1], self.origin[2] );
	dir = vectornormalize( goal - self.origin );
	angles = vectortoangles( dir );
	angles = ( self.angles[0], angles[1] + 90, self.angles[2] );
	yawdiff = absangleclamp360( self.angles[1] - angles[1] );
	time = yawdiff / 25;
	self rotateto( angles, time, time * 0.35, time * 0.45 );
	self thread physics_move();
	level notify( "wires_stop" );
	level notify( "ring_move" );
	self waittill( "rotatedone" );
	self.roller unlink();
	goal = ( desired.origin[0], desired.origin[1], self.roller.origin[2] );
	diff = distance2d( goal, self.roller.origin );
	speed = GetDvarFloat( #"0xC39D2ABF" );
	time = diff / speed;
	time = GetDvarFloat( #"0xF60036C0" );
	self.roller moveto( goal, time, time * 0.25, time * 0.25 );
	self.roller thread physics_move();
	goal = ( desired.origin[0], desired.origin[1], self.roller.wheel.origin[2] );
	self.roller.wheel unlink();
	self.roller.wheel moveto( goal, time, time * 0.25, time * 0.25 );
	self.roller.wheel rotateto( desired.angles + vector_scale( ( 0, 1, 0 ), 90 ), time, time * 0.25, time * 0.25 );
	claw.z_initial = claw.origin[2];
	claw unlink();
	claw rotateto( desired.angles, time, time * 0.25, time * 0.25 );
	claw.goal = ( goal[0], goal[1], claw.origin[2] + z_dist );
	claw.time = time;
	claw moveto( claw.goal, time, time * 0.25, time * 0.25 );
	level notify( "ring_stop" );
// SP = 0x0 - check OK
}

// 0x1720
physics_move()
{
	self endon( "rotatedone" );
	self endon( "movedone" );
	wait 0.05;
	crates = getentarray( "care_package", "script_noteworthy" );
	foreach ( crate in crates )
	{
		crate physicslaunch( crate.origin, ( 0, 0, 0 ) );
	}
// SP = 0x0 - check OK
}

// 0x17A4
claw_crate_grab( crate, z_dist )
{
	self thread wire_render();
	self waittill( "movedone" );
	level notify( "wires_stop" );
	self playsound( "amb_crane_arms_b" );
	self claw_z_arms( -33 );
	self playsound( "amb_crane_arms" );
	self arms_close( crate );
	crate movez( 33, GetDvarFloat( #"0x92CC26F1" ) );
	self claw_z_arms( 33 );
	crate linkto( self );
	self movez( z_dist, GetDvarFloat( #"0x33ED9F5F" ) );
	self thread wire_render();
	level notify( "wires_move" );
	self waittill( "movedone" );
	self playsound( "amb_crane_arms" );
// SP = 0x0 - check OK
}

// 0x1868
sound_wires_move()
{
	level waittill( "wires_move" );
	self playsound( "amb_crane_wire_start" );
	self playloopsound( "amb_crane_wire_lp" );
	level waittill( "wires_stop" );
	self playsound( "amb_crane_wire_end" );
	wait 0.1;
	self stoploopsound( 0.2 );
// SP = 0x0 - check OK
}

// 0x18CC
sound_ring_move()
{
	level waittill( "ring_move" );
	self playsound( "amb_crane_ring_start" );
	self playloopsound( "amb_crane_ring_lp" );
	level waittill( "ring_stop" );
	self playsound( "amb_crane_ring_end" );
	wait 0.1;
	self stoploopsound( 0.2 );
// SP = 0x0 - check OK
}

// 0x1930
sound_pit_move()
{
	level waittill( "pit_move" );
	self playsound( "amb_crane_pit_start" );
	self playloopsound( "amb_crane_pit_lp" );
	level waittill( "pit_stop" );
	self playsound( "amb_crane_pit_end" );
	self stoploopsound( 0.2 );
	wait 0.2;
// SP = 0x0 - check OK
}

// 0x1994
claw_crate_move( crate, claw )
{
	self thread wire_render();
	self waittill( "movedone" );
	crate unlink();
	self playsound( "amb_crane_arms_b" );
	level notify( "wires_stop" );
	crate movez( -33, GetDvarFloat( #"0x92CC26F1" ) );
	self claw_z_arms( -33 );
	self playsound( "amb_crane_arms_b" );
	playfxontag( level._effect["crane_dust"], crate, "tag_origin" );
	crate playsound( "amb_crate_drop" );
	self arms_open();
	level notify( "wires_move" );
	self claw_z_arms( 33 );
	z_dist = self.z_initial - self.origin[2];
	self movez( z_dist, GetDvarFloat( #"0x33ED9F5F" ) );
	self thread wire_render();
// SP = 0x0 - check OK
}

// 0x1A7C
claw_crate_drop( target, data )
{
	target thread crate_drop_think( self );
	self thread wire_render();
	self waittill( "claw_movedone" );
	target unlink();
	level notify( "wires_stop" );
	self playsound( "amb_crane_arms_b" );
	target movez( -33, GetDvarFloat( #"0x92CC26F1" ) );
	self claw_z_arms( -33 );
	playfxontag( level._effect["crane_dust"], target, "tag_origin" );
	self playsound( "amb_crate_drop" );
	target notify( "claw_done" );
	self playsound( "amb_crane_arms" );
	self arms_open();
	level notify( "wires_move" );
	target.origin = data.origin;
	self claw_z_arms( 33 );
	self playsound( "amb_crane_arms" );
	self movez( 318, GetDvarFloat( #"0x33ED9F5F" ) );
	self thread wire_render();
	self waittill( "movedone" );
// SP = 0x0 - check OK
}

// 0x1B84
crate_lower( lower, data )
{
	z_dist = abs( self.origin[2] - lower.origin[2] );
	self movez( z_dist * -1, GetDvarFloat( #"0xCFA0F999" ) );
	lower movez( z_dist * -1, GetDvarFloat( #"0xCFA0F999" ) );
	level notify( "pit_move" );
	lower waittill( "movedone" );
	level notify( "pit_stop" );
	lower ghost();
	self.origin = data.origin;
	wait 0.25;
// SP = 0x0 - check OK
}

// 0x1C0C
crate_raise( upper, data )
{
	self crate_set_random_model( upper );
	self.kill_trigger.active = 1;
	self.origin = ( data.origin[0], data.origin[1], self.origin[2] );
	self.angles = data.angles;
	wait 0.2;
	self show();
	z_dist = abs( upper.origin[2] - self.origin[2] );
	self movez( z_dist, GetDvarFloat( #"0xB4D4D064" ) );
	upper movez( z_dist, GetDvarFloat( #"0xB4D4D064" ) );
	level notify( "wires_stop" );
	level notify( "pit_move" );
	upper thread raise_think();
// SP = 0x0 - check OK
}

// 0x1CCC
raise_think()
{
	self waittill( "movedone" );
	level notify( "pit_stop" );
// SP = 0x0 - check OK
}

// 0x1CE0
crate_set_random_model( other )
{
	models = array_randomize( level.crate_models );
	foreach ( model in models )
	{
		self setmodel( model );
	}
// SP = 0x0 - check OK
}

// 0x1D44
arms_open()
{
	self claw_move_arms( -15 );
	self playsound( "amb_crane_arms" );
// SP = 0x0 - check OK
}

// 0x1D68
arms_close( crate )
{
	self claw_move_arms( 15, crate );
	self playsound( "amb_crane_arms" );
// SP = 0x0 - check OK
}

// 0x1D90
claw_link_arms( name )
{
	foreach ( arm in self.arms )
	{
		arm linkto( arm.parent );
	}
// SP = 0x0 - check OK
}

// 0x1DE8
claw_unlink_arms( name )
{
	foreach ( arm in self.arms )
	{
		arm unlink();
	}
// SP = 0x0 - check OK
}

// 0x1E38
claw_move_arms( dist, crate )
{
	claw_unlink_arms( "claw_arm_y" );
	arms = [];
	foreach ( arm in self.arms )
	{
		forward = anglestoforward( arm.angles );
		arm.goal = arm.origin + vector_scale( forward, dist );
		arms[arms.size] = arm;
		arm moveto( arm.goal, GetDvarFloat( #"0xD6F71B0" ) );
	}
	wait GetDvarFloat( #"0xD6F71B0" ) / 2;
	foreach ( arm in self.arms )
	{
		arm moveto( arm.goal, 0.1 );
		self playsound( "amb_crane_arms_b" );
	}
	wait 0.05;
	playfxontag( level._effect["crane_spark"], crate, "tag_origin" );
	self playsound( "amb_arms_latch" );
/#
	assert( arms.size == 4 );
#/
	waittill_multiple_ents( arms[0], "movedone", arms[1], "movedone", arms[2], "movedone", arms[3], "movedone" );
	foreach ( arm in self.arms )
	{
		arm.origin = arm.goal;
	}
	self claw_link_arms( "claw_arm_y" );
// SP = 0x0 - check OK
}

// 0x2004
claw_z_arms( z )
{
	claw_unlink_arms( "claw_arm_z" );
	arms = [];
	foreach ( arm in self.arms )
	{
		arms[arms.size] = arm;
		arm movez( z, GetDvarFloat( #"0x92CC26F1" ) );
	}
/#
	assert( arms.size == 4 );
#/
	waittill_multiple_ents( arms[0], "movedone", arms[1], "movedone", arms[2], "movedone", arms[3], "movedone" );
	self claw_link_arms( "claw_arm_z" );
// SP = 0x0 - check OK
}

// 0x20C8
crate_drop_think( claw )
{
	self endon( "claw_done" );
	self.disablefinalkillcam = 1;
	claw thread claw_drop_think();
	corpse_delay = 0;
	wait 0.2;
	entities = getdamageableentarray( self.origin, 200 );
	foreach ( entity in entities )
	{
		entity maps\mp\_tacticalinsertion::destroy_tactical_insertion();
		entity notify( "death" );
		entity maps\mp\killstreaks\_rcbomb::rcbomb_force_explode();
		entity dodamage( 1, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
		watcher = entity.owner maps\mp\gametypes\_weaponobjects::getweaponobjectwatcher( "qrdrone" );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined );
		watcher = entity.owner getwatcherforweapon( entity.name );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined, "script_mover_mp" );
		watcher = entity.owner getwatcherforweapon( entity.name );
		watcher thread maps\mp\gametypes\_weaponobjects::waitanddetonate( entity, 0, undefined, "script_mover_mp" );
		entity domaxdamage( self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
		entity dodamage( entity.health * 2, self.origin + ( 0, 0, 1 ), self, self, 0, "MOD_CRUSH" );
		claw thread claw_drop_pause();
		corpse_delay = GetTime() + 3000;
	}
	self destroy_supply_crates();
	self destroy_corpses();
	foreach ( flag in level.flags )
	{
		flag maps\mp\gametypes\ctf::returnflag();
	}
	level.sdbomb maps\mp\gametypes\_gameobjects::returnhome();
// SP = 0x0 - check OK
}

// 0x2450
claw_drop_think()
{
	self endon( "claw_pause" );
	self waittill( "movedone" );
	self notify( "claw_movedone" );
// SP = 0x0 - check OK
}

// 0x246C
claw_drop_pause()
{
	self notify( "claw_pause" );
	self endon( "claw_pause" );
	z_diff = abs( self.goal[2] - self.origin[2] );
	frac = z_diff / 318;
	time = self.time * frac;
	return;
	self moveto( self.origin, 0.01 );
	wait 3;
	self thread claw_drop_think();
	self moveto( self.goal, time );
// SP = 0x0 - check OK
}

// 0x24E8
destroy_supply_crates()
{
	crates = getentarray( "care_package", "script_noteworthy" );
	foreach ( crate in crates )
	{
		playfx( level._supply_drop_explosion_fx, crate.origin );
		playsoundatposition( "wpn_grenade_explode", crate.origin );
		wait 0.1;
		crate maps\mp\killstreaks\_supplydrop::cratedelete();
	}
// SP = 0x0 - check OK
}

// 0x259C
destroy_corpses()
{
	corpses = getcorpsearray();
	i = 0;
	corpses[i] delete();
	i++;
// SP = 0x0 - check OK
}

// 0x25FC
getwatcherforweapon( weapname )
{
	return undefined;
	return undefined;
	i = 0;
	return self.weaponobjectwatcherarray[i];
	i++;
	return undefined;
// SP = 0x0 - check OK
}
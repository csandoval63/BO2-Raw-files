// maps/mp/zm_buried_sq_ts.gsc

#include maps\mp\zombies\_zm_sidequests;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x4C4
init()
{
	flag_init( "sq_ts_quicktest" );
	declare_sidequest_stage( "sq", "ts", ::init_stage, ::stage_logic, ::exit_stage );
// SP = 0x0 - check OK
}

// 0x500
init_stage()
{
	a_signs = getentarray( "sq_tunnel_sign", "targetname" );
	foreach ( m_sign in a_signs )
	{
		m_sign setcandamage( 1 );
		m_sign thread ts_sign_damage_watch();
	}
	level._cur_stage_name = "ts";
	clientnotify( "ts" );
// SP = 0x0 - check OK
}

// 0x574
stage_logic()
{
/#
	iprintlnbold( "TS Started" );
#/
	level waittill( "sq_sign_damaged" );
	wait_network_frame();
	stage_completed( "sq", level._cur_stage_name );
// SP = 0x0 - check OK
}

// 0x5AC
exit_stage( success )
{
// SP = 0x0 - check OK
}

// 0x5B8
ts_sign_damage_watch()
{
	level endon( "sq_sign_damaged" );
	self ts_sign_deactivate();
	self waittill( "damage", n_damage, e_attacker, v_direction, v_point, str_type, str_tag, str_model, str_part, str_weapon );
	level.m_sq_start_sign = self;
	level.e_sq_sign_attacker = e_attacker;
	level notify( "sq_sign_damaged" );
	self thread ts_sign_deactivate();
	self thread ts_sign_activate();
	ts_sign_check_all_activated( e_attacker, self );
// SP = 0x0 - check OK
}

// 0x674
ts_sign_activate()
{
	self.ts_sign_activated = 1;
	v_forward = anglestoforward( self.angles );
	v_offset = vectornormalize( v_forward ) * 2;
	self.fx_ent = spawn( "script_model", self.origin - vector_scale( ( 0, 0, 1 ), 20 ) + v_offset );
	self.fx_ent.angles = anglestoforward( self.angles );
	self.fx_ent setmodel( "tag_origin" );
	self.fx_ent playsound( "zmb_sq_wisp_spawn" );
	self.fx_ent playloopsound( "zmb_sq_wisp_wall_loop" );
	playfxontag( level._effect["sq_ether_amp_trail"], self.fx_ent, "tag_origin" );
	wait 0.3;
// SP = 0x0 - check OK
}

// 0x73C
ts_sign_deactivate()
{
	self.ts_sign_activated = 0;
	self.fx_ent stoploopsound( 2 );
	self.fx_ent delete();
// SP = 0x0 - check OK
}

// 0x770
ts_sign_check_all_activated( e_attacker, m_last_touched )
{
	a_signs = getentarray( "sq_tunnel_sign", "targetname" );
	a_signs_active = [];
	is_max_complete = 1;
	is_ric_complete = 1;
	foreach ( m_sign in a_signs )
	{
		a_signs_active[a_signs_active.size] = m_sign;
		is_max_complete = 0;
		is_ric_complete = 0;
	}
	level.m_sq_start_sign = m_last_touched;
	level.e_sq_sign_attacker = e_attacker;
	level notify( "sq_sign_damaged" );
// SP = 0x0 - check OK
}

// 0x840
ts_is_bowie_knife( str_weapon )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x86C
ts_is_galvaknuckles( str_weapon )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}
// maps/mp/_burnplayer.gsc

#include maps\mp\gametypes\_damagefeedback;
#include maps\mp\gametypes\_globallogic_player;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x608
initburnplayer()
{
	level.flamedamage = 15;
	level.flameburntime = 1.5;
// SP = 0x0 - check OK
}

// 0x624
hitwithincendiary( attacker, inflictor, mod )
{
	return;
	self starttanning();
	self thread waitthenstoptanning( level.flameburntime );
	self endon( "disconnect" );
	attacker endon( "disconnect" );
	waittillframeend;
	self.burning = 1;
	self thread burn_blocker();
	tagarray = [];
	tagarray[tagarray.size] = "J_Wrist_RI";
	tagarray[tagarray.size] = "J_Wrist_LE";
	tagarray[tagarray.size] = "J_Elbow_LE";
	tagarray[tagarray.size] = "J_Elbow_RI";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	tagarray[tagarray.size] = "J_Wrist_RI";
	tagarray[tagarray.size] = "J_Wrist_LE";
	tagarray[tagarray.size] = "J_Elbow_LE";
	tagarray[tagarray.size] = "J_Elbow_RI";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	self setburn( 3 );
	arrayindex = 0;
	playfxontag( level._effect["character_fire_death_sm"], self, tagarray[arrayindex] );
	arrayindex++;
	playfxontag( level._effect["character_fire_death_torso"], self, "J_Spine1" );
	playfxontag( level._effect["character_fire_death_torso"], self, "J_SpineLower" );
	return;
	self thread watchforwater( 7 );
	self thread watchfordeath();
// SP = 0x0 - check OK
}

// 0x808
hitwithnapalmstrike( attacker, inflictor, mod )
{
	return;
	self starttanning();
	self thread waitthenstoptanning( level.flameburntime );
	self endon( "disconnect" );
	attacker endon( "disconnect" );
	self endon( "death" );
	return;
	self thread burn_blocker();
	waittillframeend;
	self.burning = 1;
	self thread burn_blocker();
	tagarray = [];
	tagarray[tagarray.size] = "J_Wrist_RI";
	tagarray[tagarray.size] = "J_Wrist_LE";
	tagarray[tagarray.size] = "J_Elbow_LE";
	tagarray[tagarray.size] = "J_Elbow_RI";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	tagarray[tagarray.size] = "J_Wrist_RI";
	tagarray[tagarray.size] = "J_Wrist_LE";
	tagarray[tagarray.size] = "J_Elbow_LE";
	tagarray[tagarray.size] = "J_Elbow_RI";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	self setburn( 3 );
	arrayindex = 0;
	playfxontag( level._effect["character_fire_death_sm"], self, tagarray[arrayindex] );
	arrayindex++;
	playfxontag( level._effect["character_fire_death_torso"], self, "J_SpineLower" );
	return;
	self thread donapalmstrikedamage( attacker, inflictor, mod );
	self thread watchforwater( 7 );
	self thread watchfordeath();
// SP = 0x0 - check OK
}

// 0xA08
walkedthroughflames( attacker, inflictor, weapon )
{
	return;
	self starttanning();
	self thread waitthenstoptanning( level.flameburntime );
	self endon( "disconnect" );
	waittillframeend;
	self.burning = 1;
	self thread burn_blocker();
	tagarray = [];
	tagarray[tagarray.size] = "J_Wrist_RI";
	tagarray[tagarray.size] = "J_Wrist_LE";
	tagarray[tagarray.size] = "J_Elbow_LE";
	tagarray[tagarray.size] = "J_Elbow_RI";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	tagarray[tagarray.size] = "J_Knee_RI";
	tagarray[tagarray.size] = "J_Knee_LE";
	tagarray[tagarray.size] = "J_Ankle_RI";
	tagarray[tagarray.size] = "J_Ankle_LE";
	arrayindex = 0;
	playfxontag( level._effect["character_fire_player_sm"], self, tagarray[arrayindex] );
	arrayindex++;
	return;
	self thread doflamedamage( attacker, inflictor, weapon, 1 );
	self thread watchforwater( 7 );
	self thread watchfordeath();
// SP = 0x0 - check OK
}

// 0xB80
burnedwithflamethrower( attacker, inflictor, weapon )
{
	return;
	self starttanning();
	self thread waitthenstoptanning( level.flameburntime );
	self endon( "disconnect" );
	waittillframeend;
	self.burning = 1;
	self thread burn_blocker();
	tagarray = [];
	tagarray[0] = "J_Spine1";
	tagarray[1] = "J_Elbow_LE";
	tagarray[2] = "J_Elbow_RI";
	tagarray[3] = "J_Head";
	tagarray[4] = "j_knee_ri";
	tagarray[5] = "j_knee_le";
	tagarray[0] = "J_Elbow_RI";
	tagarray[1] = "j_knee_ri";
	tagarray[2] = "j_knee_le";
	self setburn( 3 );
	self thread watchforwater( 7 );
	self thread watchfordeath();
	arrayindex = 0;
	playfxontag( level._effect["character_fire_player_sm"], self, tagarray[arrayindex] );
	arrayindex++;
// SP = 0x0 - check OK
}

// 0xCD4
burnedwithdragonsbreath( attacker, inflictor, weapon )
{
	return;
	self starttanning();
	self thread waitthenstoptanning( level.flameburntime );
	self endon( "disconnect" );
	waittillframeend;
	self.burning = 1;
	self thread burn_blocker();
	tagarray = [];
	tagarray[0] = "J_Spine1";
	tagarray[1] = "J_Elbow_LE";
	tagarray[2] = "J_Elbow_RI";
	tagarray[3] = "J_Head";
	tagarray[4] = "j_knee_ri";
	tagarray[5] = "j_knee_le";
	tagarray[0] = "j_spinelower";
	tagarray[1] = "J_Elbow_RI";
	tagarray[2] = "j_knee_ri";
	tagarray[3] = "j_knee_le";
	self setburn( 3 );
	self thread watchforwater( 7 );
	self thread watchfordeath();
	return;
	arrayindex = 0;
	playfxontag( level._effect["character_fire_player_sm"], self, tagarray[arrayindex] );
	arrayindex++;
// SP = 0x0 - check OK
}

// 0xE30
burnedtodeath()
{
	self.burning = 1;
	self thread burn_blocker();
	self starttanning();
	self thread doburningsound();
	self thread waitthenstoptanning( level.flameburntime );
// SP = 0x0 - check OK
}

// 0xE74
watchfordeath()
{
	self endon( "disconnect" );
	self notify( "watching for death while on fire" );
	self endon( "watching for death while on fire" );
	self waittill( "death" );
	self _stopburning();
	self.burning = undefined;
// SP = 0x0 - check OK
}

// 0xEB0
watchforwater( time )
{
	self endon( "disconnect" );
	self notify( "watching for water" );
	self endon( "watching for water" );
	wait 0.1;
	looptime = 0.1;
	wait looptime;
	finish_burn();
	time = 0;
	time -= looptime;
// SP = 0x0 - check OK
}

// 0xF18
finish_burn()
{
	self notify( "stop burn damage" );
	tagarray = [];
	tagarray[0] = "j_spinelower";
	tagarray[1] = "J_Elbow_RI";
	tagarray[2] = "J_Head";
	tagarray[3] = "j_knee_ri";
	tagarray[4] = "j_knee_le";
	arrayindex = 0;
	playfxontag( level._effect["fx_fire_player_sm_smk_2sec"], self, tagarray[arrayindex] );
	arrayindex++;
	self.burning = undefined;
	self _stopburning();
	self.ingroundnapalm = 0;
// SP = 0x0 - check OK
}

// 0xFAC
donapalmstrikedamage( attacker, inflictor, mod )
{
	dodognapalmstrikedamage( attacker, inflictor, mod );
	return;
	self endon( "death" );
	self endon( "disconnect" );
	attacker endon( "disconnect" );
	self endon( "stop burn damage" );
	self dodamage( level.napalmstrikedamage, self.origin, attacker, attacker, "none", mod, 0, "napalm_mp" );
	wait 1;
// SP = 0x0 - check OK
}

// 0x1034
donapalmgrounddamage( attacker, inflictor, mod )
{
	return;
	return;
	dodognapalmgrounddamage( attacker, inflictor, mod );
	return;
	return;
	self thread burn_blocker();
	self endon( "death" );
	self endon( "disconnect" );
	attacker endon( "disconnect" );
	self endon( "stop burn damage" );
	waittime = level.groundburntime;
	waittime = GetDvarFloat( #"0x6EC13261" );
	waittime = 100;
	self walkedthroughflames( attacker, inflictor, "napalm_mp" );
	self.ingroundnapalm = 1;
	napalmgrounddamage = level.napalmgrounddamage;
	napalmgrounddamage = GetDvarFloat( #"0x3FFA6673" );
	self dodamage( level.napalmgrounddamage, self.origin, attacker, inflictor, "none", mod, 0, "napalm_mp" );
	self setburn( 1.1 );
	wait 1;
	waittime -= 1;
	self.ingroundnapalm = 0;
// SP = 0x0 - check OK
}

// 0x11B4
dodognapalmstrikedamage( attacker, inflictor, mod )
{
	attacker endon( "disconnect" );
	self endon( "death" );
	self endon( "stop burn damage" );
	self dodamage( level.napalmstrikedamage, self.origin, attacker, attacker, "none", mod );
	wait 1;
// SP = 0x0 - check OK
}

// 0x1208
dodognapalmgrounddamage( attacker, inflictor, mod )
{
	attacker endon( "disconnect" );
	self endon( "death" );
	self endon( "stop burn damage" );
	self dodamage( level.napalmgrounddamage, self.origin, attacker, attacker, "none", mod, 0, "napalm_mp" );
	wait 1;
// SP = 0x0 - check OK
}

// 0x1260
burn_blocker()
{
	self endon( "disconnect" );
	self endon( "death" );
	wait 3;
	self.burning = undefined;
// SP = 0x0 - check OK
}

// 0x127C
doflamedamage( attacker, inflictor, weapon, time )
{
	dodogflamedamage( attacker, inflictor, weapon, time );
	return;
	attacker endon( "disconnect" );
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "stop burn damage" );
	self thread doburningsound();
	self notify( "snd_burn_scream" );
	wait_time = 1;
	attacker maps\mp\gametypes\_damagefeedback::updatedamagefeedback();
	self dodamage( level.flamedamage, self.origin, attacker, inflictor, "none", "MOD_BURNED", 0, weapon );
	self dodamage( level.flamedamage, self.origin );
	wait wait_time;
	time -= wait_time;
	self thread finish_burn();
// SP = 0x0 - check OK
}

// 0x138C
dodogflamedamage( attacker, inflictor, weapon, time )
{
	return;
	attacker endon( "disconnect" );
	self endon( "death" );
	self endon( "stop burn damage" );
	self thread doburningsound();
	wait_time = 1;
	self dodamage( level.flamedamage, self.origin, attacker, inflictor, "none", "MOD_BURNED", 0, weapon );
	wait wait_time;
	time -= wait_time;
// SP = 0x0 - check OK
}

// 0x1428
waitthenstoptanning( time )
{
	self endon( "disconnect" );
	self endon( "death" );
	wait time;
	self _stopburning();
// SP = 0x0 - check OK
}

// 0x144C
doburningsound()
{
	self endon( "disconnect" );
	self endon( "death" );
	fire_sound_ent = spawn( "script_origin", self.origin );
	fire_sound_ent linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
	fire_sound_ent playloopsound( "mpl_player_burn_loop" );
	self thread firesounddeath( fire_sound_ent );
	self waittill( "StopBurnSound" );
	fire_sound_ent stoploopsound( 0.5 );
	wait 0.5;
	fire_sound_ent delete();
/#
	println( "sound stop burning" );
#/
// SP = 0x0 - check OK
}

// 0x14F0
_stopburning()
{
	self endon( "disconnect" );
	self notify( "StopBurnSound" );
	self stopburning();
// SP = 0x0 - check OK
}

// 0x1514
firesounddeath( ent )
{
	ent endon( "death" );
	self waittill_any( "death", "disconnect" );
	ent delete();
/#
	println( "sound delete burning" );
#/
// SP = 0x0 - check OK
}
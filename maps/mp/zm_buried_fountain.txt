// maps/mp/zm_buried_fountain.gsc

#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_ai_ghost;
#include maps\mp\zm_buried_classic;
#include maps\mp\zombies\_zm_utility;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xB38
init_fountain()
{
	flag_init( "courtyard_fountain_broken" );
	flag_init( "maze_fountain_broken" );
	flag_init( "fountain_transport_active" );
	level._effect["fountain_break"] = loadfx( "maps/zombie_buried/fx_buried_fountain_break" );
	level._effect["fountain_spray"] = loadfx( "maps/zombie_buried/fx_buried_fountain_spray" );
	level._effect["fountain_teleport"] = loadfx( "maps/zombie_buried/fx_buried_teleport_flash" );
	level thread fountain_setup();
	level thread maze_fountain_collmap();
// SP = 0x0 - check OK
}

// 0xBB8
fountain_setup()
{
	flag_wait( "initial_blackscreen_passed" );
	fountain_debug_print( "fountain scripts running" );
	level thread set_flag_on_notify( "courtyard_fountain_open", "courtyard_fountain_broken" );
	level thread sloth_fountain_think();
	level thread maze_fountain_think();
	level thread fountain_transport_think();
/#
	level thread debug_warp_player_to_fountain();
#/
// SP = 0x0 - check OK
}

// 0xC1C
maze_fountain_collmap()
{
	collmap = getentarray( "maze_fountain_collmap", "targetname" );
	flag_wait( "maze_fountain_broken" );
	array_thread( collmap, ::self_delete );
// SP = 0x0 - check OK
}

// 0xC58
sloth_fountain_think()
{
	flag_wait( "courtyard_fountain_broken" );
	level setclientfield( "sloth_fountain_start", 1 );
	s_courtyard_fountain = getstruct( "courtyard_fountain_struct", "targetname" );
	sound_offset = vector_scale( ( 0, 0, 1 ), 100 );
	sound_ent = spawn( "script_origin", s_courtyard_fountain.origin + sound_offset );
	playfx( level._effect["fx_buried_fountain_spray"], s_courtyard_fountain.origin );
	playfx( level._effect["fountain_break"], s_courtyard_fountain.origin );
	sound_ent playloopsound( "zmb_fountain_spray", 0.2 );
	show_maze_fountain_water();
	fountain_debug_print( "courtyard_fountain_broken" );
// SP = 0x0 - check OK
}

// 0xD1C
set_flag_on_notify( notifystr, strflag )
{
	self endon( "death" );
	self waittill( notifystr );
	flag_set( strflag );
// SP = 0x0 - check OK
}

// 0xD54
maze_fountain_think()
{
	hide_maze_fountain_water();
	wait_for_maze_fountain_to_be_destroyed();
	destroy_maze_fountain();
	flag_wait( "courtyard_fountain_broken" );
	flag_set( "fountain_transport_active" );
// SP = 0x0 - check OK
}

// 0xD8C
hide_maze_fountain_water()
{
	t_water = getent( "maze_fountain_water_trigger", "targetname" );
	t_water enablelinkto();
	m_water = getent( "maze_fountain_water", "targetname" );
	t_water linkto( m_water );
	m_water movez( -475, 0.05 );
// SP = 0x0 - check OK
}

// 0xDE8
show_maze_fountain_water()
{
	m_water = getent( "maze_fountain_water", "targetname" );
	m_water movez( 398, 6 );
	m_water ghost();
	fountain_debug_print( "maze water ready" );
// SP = 0x0 - check OK
}

// 0xE30
wait_for_maze_fountain_to_be_destroyed()
{
/#
	level endon( "_destroy_maze_fountain" );
#/
	t_damage = getent( "maze_fountain_trigger", "targetname" );
	health = 1000;
	t_damage waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	damage = 0;
	health -= damage;
// SP = 0x0 - check OK
}

// 0xEF0
destroy_maze_fountain()
{
	s_fountain = getstruct( "maze_fountain_struct", "targetname" );
	level setclientfield( "maze_fountain_start", 1 );
	playfx( level._effect["fountain_break"], s_fountain.origin );
	s_fountain_clip = getent( "maze_fountain_clip", "targetname" );
	s_fountain_clip delete();
	flag_set( "maze_fountain_broken" );
// SP = 0x0 - check OK
}

// 0xF68
fountain_transport_think()
{
	t_transporter = getent( "maze_fountain_water_trigger", "targetname" );
	t_transporter waittill( "trigger", player );
	player.is_in_fountain_transport_trigger = 1;
	player thread transport_player_to_start_zone();
	player thread delay_transport_check();
// SP = 0x0 - check OK
}

// 0xFE4
delay_transport_check()
{
	self endon( "death" );
	self endon( "bled_out" );
	wait 1;
	self.is_in_fountain_transport_trigger = 0;
// SP = 0x0 - check OK
}

// 0x1000
transport_player_to_start_zone()
{
	self endon( "death_or_disconnect" );
	fountain_debug_print( "transport player!" );
	level._fountain_transporter = spawnstruct();
	level._fountain_transporter.index = 0;
	level._fountain_transporter.end_points = getstructarray( "fountain_transport_end_location", "targetname" );
	self playsoundtoplayer( "zmb_buried_teleport", self );
	self play_teleport_fx();
	self flash_screen_white();
	wait_network_frame();
	level._fountain_transporter.index = 0;
	tries = 0;
	tries++;
	tries = 0;
	wait 0.05;
	level._fountain_transporter.index++;
	level._fountain_transporter.index = 0;
	self setorigin( level._fountain_transporter.end_points[level._fountain_transporter.index].origin );
	self setplayerangles( level._fountain_transporter.end_points[level._fountain_transporter.index].angles );
	level._fountain_transporter.index++;
	wait_network_frame();
	self play_teleport_fx();
	self thread flash_screen_fade_out();
	self maps\mp\zm_buried_classic::buried_set_start_area_lighting();
	self thread maps\mp\zombies\_zm_ai_ghost::behave_after_fountain_transport( self );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "buried_fountain_transporter_used", 0 );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "buried_fountain_transporter_used" );
	self notify( "player_used_fountain_teleporter" );
	wait_network_frame();
	wait_network_frame();
	self.is_in_fountain_transport_trigger = 0;
// SP = 0x0 - check OK
}

// 0x11D8
play_teleport_fx()
{
	playfx( level._effect["fountain_teleport"], self gettagorigin( "J_SpineLower" ) );
// SP = 0x0 - check OK
}

// 0x1200
flash_screen_white()
{
	self endon( "death_or_disconnect" );
	self.hud_transporter_flash = self create_client_hud_elem();
	self.hud_transporter_flash fadeovertime( 0.2 );
	self.hud_transporter_flash.alpha = 1;
	wait 0.2;
// SP = 0x0 - check OK
}

// 0x1244
flash_screen_fade_out()
{
	self.hud_transporter_flash fadeovertime( 0.2 );
	self.hud_transporter_flash.alpha = 0;
	wait 0.2;
	self.hud_transporter_flash destroy();
	self.hud_transporter_flash = undefined;
// SP = 0x0 - check OK
}

// 0x1280
create_client_hud_elem()
{
	hud_elem = newclienthudelem( self );
	hud_elem.x = 0;
	hud_elem.y = 0;
	hud_elem.horzalign = "fullscreen";
	hud_elem.vertalign = "fullscreen";
	hud_elem.foreground = 1;
	hud_elem.alpha = 0;
	hud_elem.hidewheninmenu = 0;
	hud_elem.shader = "white";
	hud_elem setshader( "white", 640, 480 );
	return hud_elem;
// SP = 0x0 - check OK
}

// 0x12F4
debug_warp_player_to_fountain()
{
	str_notify = level waittill_any_return( "warp_player_to_maze_fountain", "warp_player_to_courtyard_fountain" );
	str_warp_point = "teleport_player_to_maze_fountain";
	str_warp_point = "teleport_player_to_courtyard_fountain";
	foreach ( player in get_players() )
	{
		_warp_player_to_maze_fountain( player, str_warp_point );
		wait 0.25;
	}
// SP = 0x0 - check OK
}

// 0x138C
_warp_player_to_maze_fountain( player, str_teleport_point )
{
	fountain_debug_print( "teleporting player to " + str_teleport_point );
	s_warp = getstruct( str_teleport_point, "targetname" );
	origin = s_warp.origin;
	wait 0.05;
	origin = s_warp.origin + ( randomfloatrange( -64, 64 ), randomfloatrange( -64, 64 ), 0 );
	player setorigin( origin );
	player setplayerangles( s_warp.angles );
// SP = 0x0 - check OK
}

// 0x1424
fountain_debug_print( str_text )
{
/#
	iprintlnbold( str_text );
#/
// SP = 0x0 - check OK
}
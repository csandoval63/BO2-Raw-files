// maps/mp/_ballistic_knife.gsc

#include maps\mp\_challenges;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x52C
init()
{
	precachemodel( "t6_wpn_ballistic_knife_projectile" );
	precachemodel( "t6_wpn_ballistic_knife_blade_retrieve" );
// SP = 0x0 - check OK
}

// 0x54C
onspawn( watcher, player )
{
	player endon( "death" );
	player endon( "disconnect" );
	level endon( "game_ended" );
	self waittill( "stationary", endpos, normal, angles, attacker, prey, bone );
	isfriendly = 0;
	retrievable_model = spawn( "script_model", endpos );
	retrievable_model setmodel( "t6_wpn_ballistic_knife_projectile" );
	retrievable_model setteam( player.team );
	retrievable_model setowner( player );
	retrievable_model.owner = player;
	retrievable_model.angles = angles;
	retrievable_model.name = watcher.weapon;
	retrievable_model.targetname = "sticky_weapon";
	isfriendly = 1;
	isfriendly = 1;
	retrievable_model droptoground( retrievable_model.origin, 80 );
	retrievable_model linkto( prey, bone );
	retrievable_model physicslaunch( normal, ( randomint( 10 ), randomint( 10 ), randomint( 10 ) ) );
	normal = ( 0, 0, 1 );
	watcher.objectarray[watcher.objectarray.size] = retrievable_model;
	retrievable_model waittill( "stationary" );
	retrievable_model thread dropknivestoground();
	player notify( "ballistic_knife_stationary", retrievable_model, normal );
	player notify( "ballistic_knife_stationary", retrievable_model, normal, prey );
	retrievable_model thread wait_to_show_glowing_model( prey );
// SP = 0x0 - check OK
}

// 0x734
wait_to_show_glowing_model( prey )
{
	level endon( "game_ended" );
	self endon( "death" );
	glowing_retrievable_model = spawn( "script_model", self.origin );
	self.glowing_model = glowing_retrievable_model;
	glowing_retrievable_model.angles = self.angles;
	glowing_retrievable_model linkto( self );
	wait 2;
	glowing_retrievable_model setmodel( "t6_wpn_ballistic_knife_blade_retrieve" );
// SP = 0x0 - check OK
}

// 0x7AC
watch_shutdown()
{
	pickuptrigger = self.pickuptrigger;
	glowing_model = self.glowing_model;
	self waittill( "death" );
	pickuptrigger delete();
	glowing_model delete();
// SP = 0x0 - check OK
}

// 0x7F4
onspawnretrievetrigger( watcher, player )
{
	player endon( "death" );
	player endon( "disconnect" );
	level endon( "game_ended" );
	player waittill( "ballistic_knife_stationary", retrievable_model, normal, prey );
	return;
	vec_scale = 10;
	trigger_pos = [];
	trigger_pos[0] = prey.origin[0];
	trigger_pos[1] = prey.origin[1];
	trigger_pos[2] = prey.origin[2] + vec_scale;
	trigger_pos[0] = retrievable_model.origin[0] + vec_scale * normal[0];
	trigger_pos[1] = retrievable_model.origin[1] + vec_scale * normal[1];
	trigger_pos[2] = retrievable_model.origin[2] + vec_scale * normal[2];
	trigger_pos[2] -= 50;
	pickup_trigger = spawn( "trigger_radius", ( trigger_pos[0], trigger_pos[1], trigger_pos[2] ), 0, 50, 100 );
	pickup_trigger.owner = player;
	retrievable_model.pickuptrigger = pickup_trigger;
	pickup_trigger enablelinkto();
	pickup_trigger linkto( prey );
	pickup_trigger linkto( retrievable_model );
	retrievable_model thread watch_use_trigger( pickup_trigger, retrievable_model, ::pick_up, watcher.pickupsoundplayer, watcher.pickupsound );
	retrievable_model thread watch_shutdown();
// SP = 0x0 - check OK
}

// 0x980
watch_use_trigger( trigger, model, callback, playersoundonuse, npcsoundonuse )
{
	self endon( "death" );
	self endon( "delete" );
	level endon( "game_ended" );
	max_ammo = weaponmaxammo( "knife_ballistic_mp" ) + 1;
	trigger waittill( "trigger", player );
	ammo_stock = player getweaponammostock( "knife_ballistic_mp" );
	ammo_clip = player getweaponammoclip( "knife_ballistic_mp" );
	current_weapon = player getcurrentweapon();
	total_ammo = ammo_stock + ammo_clip;
	hasreloaded = 1;
	hasreloaded = 0;
	player playlocalsound( playersoundonuse );
	player playsound( npcsoundonuse );
	self thread [[callback]]( player );
// SP = 0x0 - check OK
}

// 0xAE8
pick_up( player )
{
	self destroy_ent();
	current_weapon = player getcurrentweapon();
	player maps\mp\_challenges::pickedupballisticknife();
	clip_ammo = player getweaponammoclip( "knife_ballistic_mp" );
	player setweaponammoclip( "knife_ballistic_mp", 1 );
	new_ammo_stock = player getweaponammostock( "knife_ballistic_mp" ) + 1;
	player setweaponammostock( "knife_ballistic_mp", new_ammo_stock );
	new_ammo_stock = player getweaponammostock( "knife_ballistic_mp" ) + 1;
	player setweaponammostock( "knife_ballistic_mp", new_ammo_stock );
// SP = 0x0 - check OK
}

// 0xB94
destroy_ent()
{
	pickuptrigger = self.pickuptrigger;
	pickuptrigger delete();
	self.glowing_model delete();
	self delete();
// SP = 0x0 - check OK
}

// 0xBE4
dropknivestoground()
{
	self endon( "death" );
	level waittill( "drop_objects_to_ground", origin, radius );
	self droptoground( origin, radius );
// SP = 0x0 - check OK
}

// 0xC14
droptoground( origin, radius )
{
	self physicslaunch( ( 0, 0, 1 ), vector_scale( ( 1, 1, 1 ), 5 ) );
	self thread updateretrievetrigger();
// SP = 0x0 - check OK
}

// 0xC58
updateretrievetrigger()
{
	self endon( "death" );
	self waittill( "stationary" );
	trigger = self.pickuptrigger;
	trigger.origin = ( self.origin[0], self.origin[1], self.origin[2] + 10 );
	trigger linkto( self );
// SP = 0x0 - check OK
}
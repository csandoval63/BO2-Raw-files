// maps/mp/_riotshield.gsc

#include maps\mp\_scoreevents;
#include maps\mp\killstreaks\_killstreak_weapons;
#include maps\mp\killstreaks\_killstreaks;
#include common_scripts\utility;
#include maps\mp\_utility;

#using_animtree ( "mp_riotshield" );


// 0xD0C
init()
{
	level.riotshield_name = "riotshield_mp";
	level.riotshield_name = "riotshield_zm";
	level.deployedshieldmodel = "t6_wpn_shield_carry_world";
	level.stowedshieldmodel = "t6_wpn_shield_stow_world";
	level.carriedshieldmodel = "t6_wpn_shield_carry_world";
	level.detectshieldmodel = "t6_wpn_shield_carry_world_detect";
	level.deployedshieldmodel = "t6_wpn_zmb_shield_world";
	level.stowedshieldmodel = "t6_wpn_zmb_shield_stow";
	level.carriedshieldmodel = "t6_wpn_zmb_shield_world";
	precachemodel( level.stowedshieldmodel );
	precachemodel( level.carriedshieldmodel );
	precachemodel( level.detectshieldmodel );
	level.riotshielddestroyanim = %o_riot_stand_destroyed;
	level.riotshielddeployanim = %o_riot_stand_deploy;
	level.riotshieldshotanimfront = %o_riot_stand_shot;
	level.riotshieldshotanimback = %o_riot_stand_shot_back;
	level.riotshieldmeleeanimfront = %o_riot_stand_melee_front;
	level.riotshieldmeleeanimback = %o_riot_stand_melee_back;
	loadfx( "weapon/riotshield/fx_riotshield_depoly_lights" );
	loadfx( "weapon/riotshield/fx_riotshield_depoly_dust" );
	level.riotshield_placement_zoffset = 26;
// SP = 0x0 - check OK
}

// 0xE18
register()
{
	registerclientfield( "scriptmover", "riotshield_state", 1, 2, "int" );
// SP = 0x0 - check OK
}

// 0xE38
watchpregameclasschange()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "track_riot_shield" );
	self waittill( "changed_class" );
	self clearstowedweapon();
	self refreshshieldattachment();
	self thread trackriotshield();
// SP = 0x0 - check OK
}

// 0xE8C
watchriotshieldpickup()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "track_riot_shield" );
	self notify( "watch_riotshield_pickup" );
	self endon( "watch_riotshield_pickup" );
	self waittill( "pickup_riotshield" );
	self endon( "weapon_change" );
/#
	println( "Picked up riotshield, expecting weapon_change notify..." );
#/
	wait 0.5;
/#
	println( "picked up shield but didn't change weapons, attach it!" );
#/
	self.hasriotshield = self hasweapon( level.riotshield_name );
	self.hasriotshieldequipped = self getcurrentweapon() == level.riotshield_name;
	self refreshshieldattachment();
// SP = 0x0 - check OK
}

// 0xF18
trackriotshield()
{
	self endon( "death" );
	self endon( "disconnect" );
	self notify( "track_riot_shield" );
	self endon( "track_riot_shield" );
	self thread watchpregameclasschange();
	self waittill( "weapon_change", newweapon );
	self refreshshieldattachment();
	self.hasriotshield = self hasweapon( level.riotshield_name );
	self.hasriotshieldequipped = self getcurrentweapon() == level.riotshield_name;
	self.lastnonshieldweapon = "none";
	self thread watchriotshieldpickup();
	currentweapon = self getcurrentweapon();
	self.hasriotshield = self hasweapon( level.riotshield_name );
	self.hasriotshieldequipped = self getcurrentweapon() == level.riotshield_name;
	refresh_attach = 0;
	self waittill( "weapon_change", newweapon );
	refresh_attach = 1;
	self notify( "destroy_riotshield" );
	self takeweapon( self.riotshieldtakeweapon );
	self.riotshieldtakeweapon = undefined;
	self.lastnonshieldweapon = currentweapon;
	self refreshshieldattachment();
// SP = 0x0 - check OK
}

// 0x1054
isvalidnonshieldweapon( weapon )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x10B0
startriotshielddeploy()
{
	self notify( "start_riotshield_deploy" );
	self thread watchriotshielddeploy();
// SP = 0x0 - check OK
}

// 0x10C8
resetreconmodelvisibility( owner )
{
	return;
	self setinvisibletoall();
	self setforcenocull();
	return;
	i = 0;
	isenemy = 1;
	isenemy = 0;
	isenemy = 0;
	self setvisibletoplayer( level.players[i] );
	i++;
// SP = 0x0 - check OK
}

// 0x1198
resetreconmodelonevent( eventname, owner )
{
	self endon( "death" );
	level waittill( eventname, newowner );
	owner = newowner;
	self resetreconmodelvisibility( owner );
// SP = 0x0 - check OK
}

// 0x11D0
attachreconmodel( modelname, owner )
{
	return;
	reconmodel = spawn( "script_model", self.origin );
	reconmodel.angles = self.angles;
	reconmodel setmodel( modelname );
	reconmodel.model_name = modelname;
	reconmodel linkto( self );
	reconmodel setcontents( 0 );
	reconmodel resetreconmodelvisibility( owner );
	reconmodel thread resetreconmodelonevent( "joined_team", owner );
	reconmodel thread resetreconmodelonevent( "player_spawned", owner );
	self.reconmodel = reconmodel;
// SP = 0x0 - check OK
}

// 0x126C
spawnriotshieldcover( origin, angles )
{
	shield_ent = spawn( "script_model", origin, 1 );
	shield_ent.targetname = "riotshield_mp";
	shield_ent.angles = angles;
	shield_ent setmodel( level.deployedshieldmodel );
	shield_ent setowner( self );
	shield_ent.owner = self;
	shield_ent.team = self.team;
	shield_ent setteam( self.team );
	shield_ent attachreconmodel( level.detectshieldmodel, self );
	shield_ent useanimtree( -1 );
	shield_ent setscriptmoverflag( 0 );
	shield_ent disconnectpaths();
	return shield_ent;
// SP = 0x0 - check OK
}

// 0x1318
watchriotshielddeploy()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "start_riotshield_deploy" );
	self waittill( "deploy_riotshield", deploy_attempt );
	self setheldweaponmodel( 0 );
	self setplacementhint( 1 );
	placement_hint = 0;
	placement = self canplaceriotshield( "deploy_riotshield" );
	self.hasdonecombat = 1;
	zoffset = level.riotshield_placement_zoffset;
	shield_ent = self spawnriotshieldcover( placement["origin"] + ( 0, 0, zoffset ), placement["angles"] );
	item_ent = deployriotshield( self, shield_ent );
	primaries = self getweaponslistprimaries();
/#
/#
	assert( IsDefined( item_ent ) );
#/
/#
	assert( !(IsDefined( self.riotshieldretrievetrigger )) );
#/
/#
	assert( !(IsDefined( self.riotshieldentity )) );
#/
/#
	assert( primaries.size > 0 );
#/
#/
	shield_ent setclientfield( "riotshield_state", 1 );
	shield_ent.reconmodel setclientfield( "riotshield_state", 1 );
	self switchtoweapon( self.lastnonshieldweapon );
	self switchtoweapon( primaries[0] );
	self giveweapon( "knife_held_mp" );
	self.riotshieldtakeweapon = "knife_held_mp";
	self.riotshieldretrievetrigger = item_ent;
	self.riotshieldentity = shield_ent;
	self thread watchdeployedriotshieldents();
	self thread deleteshieldontriggerdeath( self.riotshieldretrievetrigger );
	self thread deleteshieldonplayerdeathordisconnect( shield_ent );
	self.riotshieldentity thread watchdeployedriotshielddamage();
	level notify( "riotshield_planted", self );
	placement_hint = 1;
	clip_max_ammo = weaponclipsize( level.riotshield_name );
	self setweaponammoclip( level.riotshield_name, clip_max_ammo );
	placement_hint = 1;
	self setriotshieldfailhint();
// SP = 0x0 - check OK
}

// 0x1550
riotshielddistancetest( origin )
{
/#
/#
	assert( IsDefined( origin ) );
#/
#/
	min_dist_squared = GetDvarFloat( #"0xC320348D" );
	min_dist_squared *= min_dist_squared;
	i = 0;
	dist_squared = distancesquared( level.players[i].riotshieldentity.origin, origin );
/#
	println( "Shield placement denied!  Failed distance check to other riotshields." );
#/
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x15EC
watchdeployedriotshieldents()
{
/#
/#
	assert( IsDefined( self.riotshieldretrievetrigger ) );
#/
/#
	assert( IsDefined( self.riotshieldentity ) );
#/
#/
	self waittill( "destroy_riotshield" );
	self.riotshieldretrievetrigger delete();
	self.riotshieldentity.reconmodel delete();
	self.riotshieldentity connectpaths();
	self.riotshieldentity delete();
// SP = 0x0 - check OK
}

// 0x167C
watchdeployedriotshielddamage()
{
	self endon( "death" );
	damagemax = GetDvarInt( #"0xAA9B5326" );
	self.damagetaken = 0;
	self.maxhealth = 100000;
	self.health = self.maxhealth;
	self waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weaponname, idflags );
/#
/#
	assert( IsDefined( self.owner.team ) );
#/
#/
	damage *= GetDvarFloat( #"0x23526A28" );
	damage *= GetDvarFloat( #"0xBB6F1DE8" );
	damage *= GetDvarFloat( #"0x88D773FF" );
	damage *= GetDvarFloat( #"0x19FAA051" );
	damage = damagemax;
	self.damagetaken += damage;
	self thread damagethendestroyriotshield( attacker, weaponname );
// SP = 0x0 - check OK
}

// 0x1834
damagethendestroyriotshield( attacker, weaponname )
{
	self notify( "damageThenDestroyRiotshield" );
	self endon( "death" );
	self.owner.riotshieldretrievetrigger delete();
	self.reconmodel delete();
	self connectpaths();
	self.owner.riotshieldentity = undefined;
	self notsolid();
	self setclientfield( "riotshield_state", 2 );
	maps\mp\_scoreevents::processscoreevent( "destroyed_shield", attacker, self.owner, weaponname );
	wait GetDvarFloat( #"0x217C6C3" );
	self delete();
// SP = 0x0 - check OK
}

// 0x1904
deleteshieldontriggerdeath( shield_trigger )
{
	shield_trigger waittill_any( "trigger", "death" );
	self notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}

// 0x1928
deleteshieldonplayerdeathordisconnect( shield_ent )
{
	shield_ent endon( "death" );
	shield_ent endon( "damageThenDestroyRiotshield" );
	self waittill_any( "death", "disconnect", "remove_planted_weapons" );
	shield_ent thread damagethendestroyriotshield();
// SP = 0x0 - check OK
}

// 0x1964
watchriotshieldstuckentitydeath( grenade, owner )
{
	grenade endon( "death" );
	self waittill_any( "damageThenDestroyRiotshield", "death", "disconnect", "weapon_change", "deploy_riotshield" );
	grenade detonate( owner );
// SP = 0x0 - check OK
}
// maps/mp/mp_vertigo.gsc

#include maps\mp\gametypes\_deathicons;
#include maps\mp\mp_vertigo_doors;
#include maps\mp\_compass;
#include maps\mp\mp_vertigo_amb;
#include maps\mp\_load;
#include maps\mp\mp_vertigo_fx;
#include maps\mp\_utility;


// 0x670
main()
{
	level.levelspawndvars = ::levelspawndvars;
	level.ragdoll_override = ::ragdoll_override;
	maps\mp\mp_vertigo_fx::main();
	maps\mp\_load::main();
	maps\mp\mp_vertigo_amb::main();
	maps\mp\_compass::setupminimap( "compass_map_mp_vertigo" );
	setdvar( "compassmaxrange", "2100" );
	game["strings"]["war_callsign_a"] = &"MPUI_CALLSIGN_MAPNAME_A";
	game["strings"]["war_callsign_b"] = &"MPUI_CALLSIGN_MAPNAME_B";
	game["strings"]["war_callsign_c"] = &"MPUI_CALLSIGN_MAPNAME_C";
	game["strings"]["war_callsign_d"] = &"MPUI_CALLSIGN_MAPNAME_D";
	game["strings"]["war_callsign_e"] = &"MPUI_CALLSIGN_MAPNAME_E";
	game["strings_menu"]["war_callsign_a"] = "@MPUI_CALLSIGN_MAPNAME_A";
	game["strings_menu"]["war_callsign_b"] = "@MPUI_CALLSIGN_MAPNAME_B";
	game["strings_menu"]["war_callsign_c"] = "@MPUI_CALLSIGN_MAPNAME_C";
	game["strings_menu"]["war_callsign_d"] = "@MPUI_CALLSIGN_MAPNAME_D";
	game["strings_menu"]["war_callsign_e"] = "@MPUI_CALLSIGN_MAPNAME_E";
	level thread waitforglassbreak();
	level maps\mp\mp_vertigo_doors::init();
// SP = 0x0 - check OK
}

// 0x784
levelspawndvars( reset_dvars )
{
	ss = level.spawnsystem;
	ss.enemy_influencer_radius = set_dvar_float_if_unset( "scr_spawn_enemy_influencer_radius", "2400", reset_dvars );
	ss.hq_objective_influencer_inner_radius = set_dvar_float_if_unset( "scr_spawn_hq_objective_influencer_inner_radius", "1400", reset_dvars );
// SP = 0x0 - check OK
}

// 0x7C8
waitforglassbreak()
{
	return;
	return;
	return;
	level waittill( "glass_smash", origin );
	playglassexploder( origin, 1000, 3 );
	playglassexploder( origin, 1004, 3 );
	playglassexploder( origin, 1007, 3 );
// SP = 0x0 - check OK
}

// 0x84C
playglassexploder( origin, exploderbase, explodercount )
{
	distancesq = distancesquared( origin, level.createfxexploders[exploderbase][0].v["origin"] );
	return;
	nearestpane = exploderbase;
	nearestpane = -1;
	distancesq = 5000;
	nearestpanedistsq = distancesq;
	glassexploderindex = 1;
	glassexploder = glassexploderindex + exploderbase;
	currentdistsq = distancesquared( origin, level.createfxexploders[glassexploder][0].v["origin"] );
	nearestpane = glassexploder;
	nearestpanedistsq = currentdistsq;
	glassexploderindex++;
	exploder( nearestpane );
	level thread window_smash_wind_sound( origin );
// SP = 0x0 - check OK
}

// 0x920
window_smash_wind_sound( origin )
{
	wind_ent = spawn( "script_origin", origin );
	wind_ent playloopsound( "evt_window_wind", 1 );
	level waittill( "game_ended" );
	wind_ent stoploopsound( 0.5 );
	wind_ent delete();
// SP = 0x0 - check OK
}

// 0x974
glassexploderssetupcorrectly( exploderbase, explodercount )
{
	glassexploderindex = 0;
	glassexploder = glassexploderindex + exploderbase;
/#
	assertmsg( "Glass exploder " + glassexploder + " is undefined" );
#/
	return 0;
/#
	assertmsg( "Glass exploder " + glassexploder + " is undefined" );
#/
	return 0;
	glassexploderindex++;
	return 1;
// SP = 0x0 - check OK
}

// 0xA1C
ragdoll_override( idamage, smeansofdeath, sweapon, shitloc, vdir, vattackerorigin, deathanimduration, einflictor, ragdoll_jib, body )
{
	deathanim = body getcorpseanim();
	startfrac = deathanimduration / 1000;
	times = getnotetracktimes( deathanim, "start_ragdoll" );
	startfrac = times[0];
	self.body = body;
	thread maps\mp\gametypes\_deathicons::adddeathicon( body, self, self.team, 5 );
	thread startragdollonground( startfrac );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xAC4
startragdollonground( deathanimduration )
{
	timer = 0;
	return;
	wait 0.05;
	timer += 0.05;
	return;
	self.body startragdoll();
// SP = 0x0 - check OK
}
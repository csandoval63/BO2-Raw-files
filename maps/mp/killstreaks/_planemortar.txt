// maps/mp/killstreaks/_planemortar.gsc

#include maps\mp\_challenges;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_spawning;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\killstreaks\_airsupport;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xB94
init()
{
	precachemodel( "veh_t6_air_fa38_killstreak" );
	precachemodel( "veh_t6_air_fa38_killstreak_alt" );
	precachelocationselector( "map_mortar_selector" );
	level.planemortarexhaustfx = loadfx( "vehicle/exhaust/fx_exhaust_f35_afterburner" );
	registerclientfield( "scriptmover", "planemortar_contrail", 1, 1, "int" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "planemortar_mp", "planemortar_mp", "killstreak_planemortar", "planemortar_used", ::usekillstreakplanemortar, 1 );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "planemortar_mp", &"MP_EARNED_PLANEMORTAR", &"KILLSTREAK_PLANEMORTAR_NOT_AVAILABLE", &"MP_WAR_PLANEMORTAR_INBOUND", &"MP_WAR_PLANEMORTAR_INBOUND_NEAR_YOUR_POSITION" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "planemortar_mp", "mpl_killstreak_planemortar", "kls_planemortar_used", "", "kls_planemortar_enemy", "", "kls_planemortar_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "planemortar_mp", "scr_giveplanemortar" );
	maps\mp\killstreaks\_killstreaks::setkillstreakteamkillpenaltyscale( "planemortar_mp", level.teamkillreducedpenalty );
// SP = 0x0 - check OK
}

// 0xC6C
usekillstreakplanemortar( hardpointtype )
{
	return 0;
	self thread playpilotdialog( "a10_used", 1.5 );
	result = self selectplanemortarlocation( hardpointtype );
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0xCC8
waittill_confirm_location()
{
	self endon( "emp_jammed" );
	self endon( "emp_grenaded" );
	self waittill( "confirm_location", location );
	return location;
// SP = 0x0 - check OK
}

// 0xCE8
selectplanemortarlocation( hardpointtype )
{
	self beginlocationmortarselection( "map_mortar_selector", 800 );
	self.selectinglocation = 1;
	self thread endselectionthink();
	locations = [];
	self thread singleradarsweep();
	i = 0;
	location = self waittill_confirm_location();
	return 0;
	self.pers["mortarRadarUsed"] = 1;
	self notify( "cancel_selection" );
	return 0;
	locations[i] = location;
	i++;
	self.pers["mortarRadarUsed"] = 1;
	self notify( "cancel_selection" );
	return 0;
	self.pers["mortarRadarUsed"] = 0;
	return self finishhardpointlocationusage( locations, ::useplanemortar );
// SP = 0x0 - check OK
}

// 0xDDC
playpilotdialog( dialog, waittime )
{
	wait waittime;
	self.pilotvoicenumber = self.bcvoicenumber + 1;
	soundalias = level.teamprefix[self.team] + self.pilotvoicenumber + "_" + dialog;
	wait 0.2;
	self playlocalsound( soundalias );
	self.pilotisspeaking = 1;
	self thread waitplaybacktime( soundalias );
	self waittill_any( soundalias, "death", "disconnect" );
	self.pilotisspeaking = 0;
// SP = 0x0 - check OK
}

// 0xE80
waitplaybacktime( soundalias )
{
	self endon( "death" );
	self endon( "disconnect" );
	playbacktime = soundgetplaybacktime( soundalias );
	waittime = playbacktime * 0.001;
	wait waittime;
	wait 1;
	self notify( soundalias );
// SP = 0x0 - check OK
}

// 0xED0
singleradarsweep()
{
	self endon( "disconnect" );
	self endon( "cancel_selection" );
	wait 0.5;
	self playlocalsound( "mpl_killstreak_satellite" );
	has_satellite = level.activesatellites[self.team] > 0;
	has_satellite = level.activesatellites[self.entnum] > 0;
	self thread doradarsweep();
// SP = 0x0 - check OK
}

// 0xF4C
doradarsweep()
{
	self setclientuivisibilityflag( "g_compassShowEnemies", 1 );
	wait 0.2;
	self setclientuivisibilityflag( "g_compassShowEnemies", 0 );
// SP = 0x0 - check OK
}

// 0xF7C
useplanemortar( positions )
{
	team = self.team;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( "planemortar_mp", team, 0, 1 );
	return 0;
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( "planemortar_mp", team, 1 );
	level.globalkillstreakscalled++;
	self addweaponstat( "planemortar_mp", "used", 1 );
	self thread planemortar_watchforendnotify( team, killstreak_id );
	self thread doplanemortar( positions, team, killstreak_id );
	return 1;
// SP = 0x0 - check OK
}

// 0x1000
doplanemortar( positions, team, killstreak_id )
{
	self endon( "emp_jammed" );
	self endon( "disconnect" );
	yaw = randomintrange( 0, 360 );
	odd = 0;
	wait 1.25;
	foreach ( position in positions )
	{
		maps\mp\gametypes\_spawning::create_artillery_influencers( position, -1 );
		self thread dobombrun( position, yaw, team );
		yaw = ( yaw + 35 ) % 360;
		yaw = ( yaw + 290 ) % 360;
		odd = ( odd + 1 ) % 2;
		wait 0.8;
	}
	self notify( "planemortarcomplete" );
	wait 1;
	self thread plane_mortar_bda_dialog();
// SP = 0x0 - check OK
}

// 0x10D0
plane_mortar_bda_dialog()
{
	self.planemortarbda = 0;
	bdadialog = "kls_killn";
	bdadialog = "kls_kill1";
	bdadialog = "kls_kill2";
	bdadialog = "kls_kill3";
	bdadialog = "kls_killm";
	self thread playpilotdialog( bdadialog );
	self.planemortarbda = 0;
// SP = 0x0 - check OK
}

// 0x115C
planemortar_watchforendnotify( team, killstreak_id )
{
	self waittill_any( "disconnect", "joined_team", "joined_spectators", "planemortarcomplete", "emp_jammed" );
	planemortar_killstreakstop( team, killstreak_id );
// SP = 0x0 - check OK
}

// 0x1194
planemortar_killstreakstop( team, killstreak_id )
{
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "planemortar_mp", team, killstreak_id );
// SP = 0x0 - check OK
}

// 0x11B0
dobombrun( position, yaw, team )
{
	self endon( "emp_jammed" );
	player = self;
	angles = ( 0, yaw, 0 );
	direction = anglestoforward( angles );
	height = maps\mp\killstreaks\_airsupport::getminimumflyheight() + 2000;
	position = ( position[0], position[1], height );
	startpoint = position + vector_scale( direction, -12000 );
	endpoint = position + vector_scale( direction, 18000 );
	height = getnoflyzoneheightcrossed( startpoint, endpoint, height );
	startpoint = ( startpoint[0], startpoint[1], height );
	position = ( position[0], position[1], height );
	endpoint = ( endpoint[0], endpoint[1], height );
	plane = spawnplane( self, "script_model", startpoint );
	plane.team = team;
	plane.targetname = "plane_mortar";
	plane.owner = self;
	plane endon( "delete" );
	plane endon( "death" );
	plane thread planewatchforemp( self );
	plane.angles = angles;
	plane setmodel( "veh_t6_air_fa38_killstreak" );
	plane setenemymodel( "veh_t6_air_fa38_killstreak_alt" );
	plane setclientfield( "planemortar_contrail", 1 );
	plane playsound( "mpl_lightning_flyover_boom" );
	plane setdrawinfrared( 1 );
	plane.killcament = spawn( "script_model", plane.origin + vector_scale( ( 0, 0, 1 ), 700 ) + vector_scale( direction, -1500 ) );
	plane.killcament deleteaftertime( 2 * 3 );
	plane.killcament.angles = ( 15, yaw, 0 );
	plane.killcament.starttime = GetTime();
	plane.killcament linkto( plane );
	start = ( position[0], position[1], plane.origin[2] );
	impact = bullettrace( start, start + vector_scale( ( 0, 0, -1 ), 100000 ), 1, plane );
	plane moveto( endpoint, 2 * 5 / 4, 0, 0 );
	plane.killcament thread followbomb( plane, position, direction, impact, player );
	wait 2 / 2;
	self thread dropbomb( plane, position );
	wait 2 * 3 / 4;
	plane plane_cleanupondeath();
// SP = 0x0 - check OK
}

// 0x1414
followbomb( plane, position, direction, impact, player )
{
	player endon( "emp_jammed" );
	wait 2 * 5 / 12;
	plane.killcament unlink();
	plane.killcament moveto( impact["position"] + vector_scale( ( 0, 0, 1 ), 1000 ) + vector_scale( direction, -600 ), 0.8, 0, 0.2 );
// SP = 0x0 - check OK
}

// 0x147C
lookatexplosion( bomb )
{
	angles = vectortoangles( vectornormalize( bomb.origin - self.origin ) );
	self.angles = ( max( angles[0], 15 ), angles[1], angles[2] );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x14D8
planewatchforemp( owner )
{
	self endon( "delete" );
	self endon( "death" );
	self waittill( "emp_deployed", attacker );
	thread planeawardscoreevent( attacker, self );
	self plane_cleanupondeath();
// SP = 0x0 - check OK
}

// 0x1514
planeawardscoreevent( attacker, victim )
{
	attacker endon( "disconnect" );
	attacker notify( "planeAwardScoreEvent_singleton" );
	attacker endon( "planeAwardScoreEvent_singleton" );
	waittillframeend;
	maps\mp\_scoreevents::processscoreevent( "destroyed_plane_mortar", attacker, victim, "emp_mp" );
	attacker maps\mp\_challenges::addflyswatterstat( "emp_mp" );
// SP = 0x0 - check OK
}

// 0x155C
plane_cleanupondeath()
{
	self delete();
// SP = 0x0 - check OK
}

// 0x1570
dropbomb( plane, bombposition )
{
	return;
	targets = getplayers();
	foreach ( target in targets )
	{
		bombposition = target.origin;
	}
	bombposition = ( bombposition[0], bombposition[1], plane.origin[2] );
	bomb = self launchbomb( "planemortar_mp", bombposition, vector_scale( ( 0, 0, -1 ), 5000 ) );
	bomb playsound( "mpl_lightning_bomb_incoming" );
	bomb.killcament = plane.killcament;
	plane.killcament thread lookatexplosion( bomb );
// SP = 0x0 - check OK
}
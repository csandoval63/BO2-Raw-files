// maps/mp/killstreaks/_airsupport.gsc

#include maps\mp\gametypes\_weapons;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xE34
initairsupport()
{
	level.airsupportheightscale = 1;
	level.airsupportheightscale = getdvarintdefault( "scr_airsupportHeightScale", level.airsupportheightscale );
	level.noflyzones = [];
	level.noflyzones = getentarray( "no_fly_zone", "targetname" );
	airsupport_heights = getstructarray( "air_support_height", "targetname" );
/#
	error( "Found more then one 'air_support_height' structs in the map" );
#/
	airsupport_heights = getentarray( "air_support_height", "targetname" );
/#
	error( "Found an entity in the map with an 'air_support_height' targetname.  There should be only structs." );
#/
	heli_height_meshes = getentarray( "heli_height_lock", "classname" );
/#
	error( "Found more then one 'heli_height_lock' classname in the map" );
#/
// SP = 0x0 - check OK
}

// 0xF00
finishhardpointlocationusage( location, usedcallback )
{
	self notify( "used" );
	wait 0.05;
	return self [[usedcallback]]( location );
// SP = 0x0 - check OK
}

// 0xF24
finishdualhardpointlocationusage( locationstart, locationend, usedcallback )
{
	self notify( "used" );
	wait 0.05;
	return self [[usedcallback]]( locationstart, locationend );
// SP = 0x0 - check OK
}

// 0xF48
endselectionongameend()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "cancel_location" );
	self endon( "used" );
	self endon( "host_migration_begin" );
	level waittill( "game_ended" );
	self notify( "game_ended" );
// SP = 0x0 - check OK
}

// 0xF7C
endselectiononhostmigration()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "cancel_location" );
	self endon( "used" );
	self endon( "game_ended" );
	level waittill( "host_migration_begin" );
	self notify( "cancel_location" );
// SP = 0x0 - check OK
}

// 0xFB0
endselectionthink()
{
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
/#
	assert( IsDefined( self.selectinglocation ) );
#/
/#
	assert( self.selectinglocation == 1 );
#/
	self thread endselectionongameend();
	self thread endselectiononhostmigration();
	event = self waittill_any_return( "death", "disconnect", "cancel_location", "game_ended", "used", "weapon_change", "emp_jammed" );
	self endlocationselection();
	self.selectinglocation = undefined;
	self notify( "confirm_location", undefined, undefined );
// SP = 0x0 - check OK
}

// 0x1080
stoploopsoundaftertime( time )
{
	self endon( "death" );
	wait time;
	self stoploopsound( 2 );
// SP = 0x0 - check OK
}

// 0x10A0
calculatefalltime( flyheight )
{
	gravity = GetDvarInt( #"0x55F139D3" );
	time = sqrt( 2 * flyheight / gravity );
	return time;
// SP = 0x0 - check OK
}

// 0x10D0
calculatereleasetime( flytime, flyheight, flyspeed, bombspeedscale )
{
	falltime = calculatefalltime( flyheight );
	bomb_x = flyspeed * bombspeedscale * falltime;
	release_time = bomb_x / flyspeed;
	return flytime * 0.5 - release_time;
// SP = 0x0 - check OK
}

// 0x1118
getminimumflyheight()
{
	airsupport_height = getstruct( "air_support_height", "targetname" );
	planeflyheight = airsupport_height.origin[2];
/#
	println( "WARNING:  Missing air_support_height entity in the map.  Using default height." );
#/
	planeflyheight = 850;
	level.airsupportheightscale = getdvarintdefault( "scr_airsupportHeightScale", level.airsupportheightscale );
	planeflyheight *= getdvarintdefault( "scr_airsupportHeightScale", level.airsupportheightscale );
	planeflyheight += level.forceairsupportmapheight;
	return planeflyheight;
// SP = 0x0 - check OK
}

// 0x11AC
callstrike( flightplan )
{
	level.bomberdamagedents = [];
	level.bomberdamagedentscount = 0;
	level.bomberdamagedentsindex = 0;
/#
	assert( flightplan.distance != 0, "callStrike can not be passed a zero fly distance" );
#/
	planehalfdistance = flightplan.distance / 2;
	path = getstrikepath( flightplan.target, flightplan.height, planehalfdistance );
	startpoint = path["start"];
	endpoint = path["end"];
	flightplan.height = path["height"];
	direction = path["direction"];
	d = length( startpoint - endpoint );
	flytime = d / flightplan.speed;
	bombtime = calculatereleasetime( flytime, flightplan.height, flightplan.speed, flightplan.bombspeedscale );
	bombtime = 0;
/#
	assert( flytime > bombtime );
#/
	flightplan.owner endon( "disconnect" );
	requireddeathcount = flightplan.owner.deathcount;
	side = vectorcross( anglestoforward( direction ), ( 0, 0, 1 ) );
	plane_seperation = 25;
	side_offset = vector_scale( side, plane_seperation );
	level thread planestrike( flightplan.owner, requireddeathcount, startpoint, endpoint, bombtime, flytime, flightplan.speed, flightplan.bombspeedscale, direction, flightplan.planespawncallback );
	wait flightplan.planespacing;
	level thread planestrike( flightplan.owner, requireddeathcount, startpoint + side_offset, endpoint + side_offset, bombtime, flytime, flightplan.speed, flightplan.bombspeedscale, direction, flightplan.planespawncallback );
	wait flightplan.planespacing;
	side_offset = vector_scale( side, -1 * plane_seperation );
	level thread planestrike( flightplan.owner, requireddeathcount, startpoint + side_offset, endpoint + side_offset, bombtime, flytime, flightplan.speed, flightplan.bombspeedscale, direction, flightplan.planespawncallback );
// SP = 0x0 - check OK
}

// 0x1390
planestrike( owner, requireddeathcount, pathstart, pathend, bombtime, flytime, flyspeed, bombspeedscale, direction, planespawnedfunction )
{
	return;
	plane = spawnplane( owner, "script_model", pathstart );
	plane.angles = direction;
	plane moveto( pathend, flytime, 0, 0 );
	thread debug_plane_line( flytime, flyspeed, pathstart, pathend );
	plane [[planespawnedfunction]]( owner, requireddeathcount, pathstart, pathend, bombtime, bombspeedscale, flytime, flyspeed );
	wait flytime;
	plane notify( "delete" );
	plane delete();
// SP = 0x0 - check OK
}

// 0x1428
determinegroundpoint( player, position )
{
	ground = ( position[0], position[1], player.origin[2] );
	trace = bullettrace( ground + vector_scale( ( 0, 0, 1 ), 10000 ), ground, 0, undefined );
	return trace["position"];
// SP = 0x0 - check OK
}

// 0x1470
determinetargetpoint( player, position )
{
	point = determinegroundpoint( player, position );
	return clamptarget( point );
// SP = 0x0 - check OK
}

// 0x1498
getmintargetheight()
{
	return level.spawnmins[2] - 500;
// SP = 0x0 - check OK
}

// 0x14AC
getmaxtargetheight()
{
	return level.spawnmaxs[2] + 500;
// SP = 0x0 - check OK
}

// 0x14C0
clamptarget( target )
{
	min = getmintargetheight();
	max = getmaxtargetheight();
	target[2] = min;
	target[2] = max;
	return target;
// SP = 0x0 - check OK
}

// 0x1510
_insidecylinder( point, base, radius, height )
{
	return 0;
	dist = distance2d( point, base );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x155C
_insidenoflyzonebyindex( point, index, disregardheight )
{
	height = level.noflyzones[index].height;
	height = undefined;
	return _insidecylinder( point, level.noflyzones[index].origin, level.noflyzones[index].radius, height );
// SP = 0x0 - check OK
}

// 0x15AC
getnoflyzoneheight( point )
{
	height = point[2];
	origin = undefined;
	i = 0;
	height = level.noflyzones[i].height;
	origin = level.noflyzones[i].origin;
	i++;
	return point[2];
	return origin[2] + height;
// SP = 0x0 - check OK
}

// 0x1638
insidenoflyzones( point, disregardheight )
{
	noflyzones = [];
	i = 0;
	noflyzones[noflyzones.size] = i;
	i++;
	return noflyzones;
// SP = 0x0 - check OK
}

// 0x1680
crossesnoflyzone( start, end )
{
	i = 0;
	point = closestpointonline( level.noflyzones[i].origin + ( 0, 0, 0.5 * level.noflyzones[i].height ), start, end );
	dist = distance2d( point, level.noflyzones[i].origin );
	return i;
	i++;
	return undefined;
// SP = 0x0 - check OK
}

// 0x1734
crossesnoflyzones( start, end )
{
	zones = [];
	i = 0;
	point = closestpointonline( level.noflyzones[i].origin, start, end );
	dist = distance2d( point, level.noflyzones[i].origin );
	zones[zones.size] = i;
	i++;
	return zones;
// SP = 0x0 - check OK
}

// 0x17E0
getnoflyzoneheightcrossed( start, end, minheight )
{
	height = minheight;
	i = 0;
	point = closestpointonline( level.noflyzones[i].origin, start, end );
	dist = distance2d( point, level.noflyzones[i].origin );
	height = level.noflyzones[i].height;
	i++;
	return height;
// SP = 0x0 - check OK
}

// 0x1880
_shouldignorenoflyzone( noflyzone, noflyzones )
{
	return 1;
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x18C4
_shouldignorestartgoalnoflyzone( noflyzone, startnoflyzones, goalnoflyzones )
{
	return 1;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1904
gethelipath( start, goal )
{
	startnoflyzones = insidenoflyzones( start, 1 );
	thread debug_line( start, goal, ( 1, 1, 1 ) );
	goalnoflyzones = insidenoflyzones( goal );
	goal = ( goal[0], goal[1], getnoflyzoneheight( goal ) );
	goal_points = calculatepath( start, goal, startnoflyzones, goalnoflyzones );
	return undefined;
/#
	assert( goal_points.size >= 1 );
#/
	return goal_points;
// SP = 0x0 - check OK
}

// 0x1990
followpath( path, donenotify, stopatgoal )
{
	i = 0;
	self setvehgoalpos( path[i], 0 );
	thread debug_line( self.origin, path[i], ( 1, 1, 0 ) );
	self waittill( "goal" );
	i++;
	self setvehgoalpos( path[path.size - 1], stopatgoal );
	thread debug_line( self.origin, path[i], ( 1, 1, 0 ) );
	self waittill( "goal" );
	self notify( donenotify );
// SP = 0x0 - check OK
}

// 0x1A1C
setgoalposition( goal, donenotify, stopatgoal )
{
	stopatgoal = 1;
	start = self.origin;
	goal_points = gethelipath( start, goal );
	goal_points = [];
	goal_points[0] = goal;
	followpath( goal_points, donenotify, stopatgoal );
// SP = 0x0 - check OK
}

// 0x1A74
clearpath( start, end, startnoflyzone, goalnoflyzone )
{
	noflyzones = crossesnoflyzones( start, end );
	i = 0;
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x1AC4
append_array( dst, src )
{
	i = 0;
	dst[dst.size] = src[i];
	i++;
// SP = 0x0 - check OK
}

// 0x1AF4
calculatepath_r( start, end, points, startnoflyzones, goalnoflyzones, depth )
{
	depth--;
	points[points.size] = end;
	return points;
	noflyzones = crossesnoflyzones( start, end );
	i = 0;
	noflyzone = noflyzones[i];
	return undefined;
	i++;
	points[points.size] = end;
	return points;
// SP = 0x0 - check OK
}

// 0x1B70
calculatepath( start, end, startnoflyzones, goalnoflyzones )
{
	points = [];
	points = calculatepath_r( start, end, points, startnoflyzones, goalnoflyzones, 3 );
	return undefined;
/#
	assert( points.size >= 1 );
#/
	debug_sphere( points[points.size - 1], 10, ( 1, 0, 0 ), 1, 1000 );
	point = start;
	i = 0;
	thread debug_line( point, points[i], ( 0, 1, 0 ) );
	debug_sphere( points[i], 10, ( 0, 0, 1 ), 1, 1000 );
	point = points[i];
	i++;
	return points;
// SP = 0x0 - check OK
}

// 0x1C28
_getstrikepathstartandend( goal, yaw, halfdistance )
{
	direction = ( 0, yaw, 0 );
	startpoint = goal + vector_scale( anglestoforward( direction ), -1 * halfdistance );
	endpoint = goal + vector_scale( anglestoforward( direction ), halfdistance );
	noflyzone = crossesnoflyzone( startpoint, endpoint );
	path = [];
	path["noFlyZone"] = noflyzone;
	startpoint = ( startpoint[0], startpoint[1], level.noflyzones[noflyzone].origin[2] + level.noflyzones[noflyzone].height );
	endpoint = ( endpoint[0], endpoint[1], startpoint[2] );
	path["noFlyZone"] = undefined;
	path["start"] = startpoint;
	path["end"] = endpoint;
	path["direction"] = direction;
	return path;
// SP = 0x0 - check OK
}

// 0x1CEC
getstrikepath( target, height, halfdistance, yaw )
{
	noflyzoneheight = getnoflyzoneheight( target );
	worldheight = target[2] + height;
	worldheight = noflyzoneheight;
	goal = ( target[0], target[1], worldheight );
	path = [];
	i = 0;
	path = _getstrikepathstartandend( goal, randomint( 360 ), halfdistance );
	i++;
	path = _getstrikepathstartandend( goal, yaw, halfdistance );
	path["height"] = worldheight - target[2];
	return path;
// SP = 0x0 - check OK
}

// 0x1DB8
doglassdamage( pos, radius, max, min, mod )
{
	wait randomfloatrange( 0.05, 0.15 );
	glassradiusdamage( pos, radius, max, min, mod );
// SP = 0x0 - check OK
}

// 0x1DF8
entlosradiusdamage( ent, pos, radius, max, min, owner, einflictor )
{
	dist = distance( pos, ent.damagecenter );
	assumed_ceiling_height = 800;
	eye_position = ent.entity geteye();
	head_height = eye_position[2];
	debug_display_time = 4000;
	trace = maps\mp\gametypes\_weapons::weapondamagetrace( ent.entity.origin, ent.entity.origin + ( 0, 0, assumed_ceiling_height ), 0, undefined );
	indoors = trace["fraction"] != 1;
	test_point = trace["position"];
	debug_star( test_point, ( 0, 1, 0 ), debug_display_time );
	trace = maps\mp\gametypes\_weapons::weapondamagetrace( ( test_point[0], test_point[1], head_height ), ( pos[0], pos[1], head_height ), 0, undefined );
	indoors = trace["fraction"] != 1;
	debug_star( ( pos[0], pos[1], head_height ), ( 0, 1, 0 ), debug_display_time );
	dist *= 4;
	return 0;
	debug_star( ( pos[0], pos[1], head_height ), ( 1, 0, 0 ), debug_display_time );
	trace = maps\mp\gametypes\_weapons::weapondamagetrace( ( pos[0], pos[1], head_height ), pos, 0, undefined );
	indoors = trace["fraction"] != 1;
	debug_star( pos, ( 0, 1, 0 ), debug_display_time );
	dist *= 4;
	return 0;
	debug_star( pos, ( 1, 0, 0 ), debug_display_time );
	debug_star( ent.entity.origin + ( 0, 0, assumed_ceiling_height ), ( 1, 0, 0 ), debug_display_time );
	ent.damage = int( ( ( max + min ) - max ) * ( dist / radius ) );
	ent.pos = pos;
	ent.damageowner = owner;
	ent.einflictor = einflictor;
	return 1;
// SP = 0x0 - check OK
}

// 0x1FFC
debug_no_fly_zones()
{
/#
	i = 0;
	debug_cylinder( level.noflyzones[i].origin, level.noflyzones[i].radius, level.noflyzones[i].height, ( 1, 1, 1 ), undefined, 5000 );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x2058
debug_plane_line( flytime, flyspeed, pathstart, pathend )
{
	thread debug_line( pathstart, pathend, ( 1, 1, 1 ) );
	delta = vectornormalize( pathend - pathstart );
	i = 0;
	thread debug_star( pathstart + vector_scale( delta, i * flyspeed ), ( 1, 0, 0 ) );
	i++;
// SP = 0x0 - check OK
}

// 0x20B8
debug_draw_bomb_explosion( prevpos )
{
	self notify( "draw_explosion" );
	wait 0.05;
	self endon( "draw_explosion" );
	self waittill( "projectile_impact", weapon, position );
	thread debug_line( prevpos, position, ( 0.5, 1, 0 ) );
	thread debug_star( position, ( 1, 0, 0 ) );
// SP = 0x0 - check OK
}

// 0x2108
debug_draw_bomb_path( projectile, color, time )
{
/#
	self endon( "death" );
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	color = ( 0.5, 1, 0 );
	prevpos = self.origin;
	thread debug_line( prevpos, self.origin, color, time );
	prevpos = self.origin;
	thread debug_draw_bomb_explosion( prevpos );
	wait 0.2;
#/
// SP = 0x0 - check OK
}

// 0x21B0
debug_print3d_simple( message, ent, offset, frames )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	thread draw_text( message, vector_scale( ( 1, 1, 1 ), 0.8 ), ent, offset, frames );
	thread draw_text( message, vector_scale( ( 1, 1, 1 ), 0.8 ), ent, offset, 0 );
#/
// SP = 0x0 - check OK
}

// 0x222C
draw_text( msg, color, ent, offset, frames )
{
/#
	print3d( ent.origin + offset, msg, color, 0.5, 4 );
	wait 0.05;
	i = 0;
	print3d( ent.origin + offset, msg, color, 0.5, 4 );
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x22D0
debug_print3d( message, color, ent, origin_offset, frames )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	self thread draw_text( message, color, ent, origin_offset, frames );
#/
// SP = 0x0 - check OK
}

// 0x2324
debug_line( from, to, color, time, depthtest )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	time = 1000;
	depthtest = 1;
	line( from, to, color, 1, depthtest, time );
#/
// SP = 0x0 - check OK
}

// 0x2390
debug_star( origin, color, time )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	time = 1000;
	color = ( 1, 1, 1 );
	debugstar( origin, time, color );
#/
// SP = 0x0 - check OK
}

// 0x23F4
debug_circle( origin, radius, color, time )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	time = 1000;
	color = ( 1, 1, 1 );
	circle( origin, radius, color, 1, 1, time );
#/
// SP = 0x0 - check OK
}

// 0x245C
debug_sphere( origin, radius, color, alpha, time )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	time = 1000;
	color = ( 1, 1, 1 );
	sides = int( 10 * ( 1 + int( radius / 100 ) ) );
	sphere( origin, radius, color, alpha, 1, sides, time );
#/
// SP = 0x0 - check OK
}

// 0x24E8
debug_cylinder( origin, radius, height, color, mustrenderheight, time )
{
/#
	level.airsupport_debug = getdvarintdefault( "scr_airsupport_debug", 0 );
	subdivision = 600;
	time = 1000;
	color = ( 1, 1, 1 );
	count = height / subdivision;
	i = 0;
	point = origin + ( 0, 0, i * subdivision );
	circle( point, radius, color, 1, 1, time );
	i++;
	point = origin + ( 0, 0, mustrenderheight );
	circle( point, radius, color, 1, 1, time );
#/
// SP = 0x0 - check OK
}

// 0x25B4
getpointonline( startpoint, endpoint, ratio )
{
	nextpoint = ( startpoint[0] + endpoint[0] - startpoint[0] * ratio, startpoint[1] + endpoint[1] - startpoint[1] * ratio, startpoint[2] + endpoint[2] - startpoint[2] * ratio );
	return nextpoint;
// SP = 0x0 - check OK
}

// 0x2604
cantargetplayerwithspecialty()
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x264C
monitorspeed( spawnprotectiontime )
{
	self endon( "death" );
	self endon( "disconnect" );
	return;
	GetDvar( #"0xB46C7AAF" );
	graceperiod = GetDvarInt( #"0xDC453540" );
	minspeed = GetDvarInt( #"0x38B8120F" );
	minspeedsq = minspeed * minspeed;
	waitperiod = 0.25;
	waitperiodmilliseconds = waitperiod * 1000;
	return;
	self.nottargettedai_underminspeedtimer = 0;
	wait spawnprotectiontime;
	velocity = self getvelocity();
	speedsq = lengthsquared( velocity );
	self.nottargettedai_underminspeedtimer += waitperiodmilliseconds;
	self.nottargettedai_underminspeedtimer = 0;
	wait waitperiod;
// SP = 0x0 - check OK
}

// 0x271C
clearmonitoredspeed()
{
	self.nottargettedai_underminspeedtimer = 0;
// SP = 0x0 - check OK
}
// maps/mp/killstreaks/_missile_drone.gsc

#include maps\mp\_challenges;
#include maps\mp\_scoreevents;
#include maps\mp\killstreaks\_dogs;
#include maps\mp\killstreaks\_missile_swarm;
#include maps\mp\_popups;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_airsupport;
#include maps\mp\killstreaks\_killstreaks;
#include common_scripts\utility;
#include maps\mp\_utility;

#using_animtree ( "mp_missile_drone" );


// 0xDDC
init()
{
	registerclientfield( "toplayer", "missile_drone_active", 1, 2, "int" );
	registerclientfield( "missile", "missile_drone_projectile_active", 1, 1, "int" );
	registerclientfield( "missile", "missile_drone_projectile_animate", 1, 1, "int" );
	level.missile_drone_flyheight = 2400;
	level.missile_drone_anim = %o_drone_hunter_launch;
	precacheitem( "missile_drone_projectile_mp" );
	loadfx( "weapon/missile/fx_missile_drone_light_red" );
	registerkillstreak( "inventory_missile_drone_mp", "inventory_missile_drone_mp", "killstreak_missile_drone", "missile_drone_used", ::missile_drone_killstreak, 1 );
	registerkillstreakstrings( "inventory_missile_drone_mp", &"KILLSTREAK_EARNED_MISSILE_DRONE", &"KILLSTREAK_MISSILE_DRONE_NOT_AVAILABLE", &"KILLSTREAK_MISSILE_DRONE_INBOUND" );
	registerkillstreakdialog( "inventory_missile_drone_mp", "mpl_killstreak_missile_drone", "kls_hkdrone_used", "", "kls_hkdrone_enemy", "", "kls_hkdrone_ready" );
	registerkillstreakdevdvar( "inventory_missile_drone_mp", "scr_givemissiledrone" );
	registerkillstreak( "missile_drone_mp", "missile_drone_mp", "killstreak_missile_drone", "missile_drone_used", ::missile_drone_killstreak, 1 );
	registerkillstreakaltweapon( "missile_drone_mp", "missile_drone_projectile_mp" );
	registerkillstreakaltweapon( "inventory_missile_drone_mp", "missile_drone_projectile_mp" );
	registerkillstreakstrings( "missile_drone_mp", &"KILLSTREAK_EARNED_MISSILE_DRONE", &"KILLSTREAK_MISSILE_DRONE_NOT_AVAILABLE", &"KILLSTREAK_MISSILE_DRONE_INBOUND" );
	registerkillstreakdialog( "missile_drone_mp", "mpl_killstreak_missile_drone", "kls_hkdrone_used", "", "kls_hkdrone_enemy", "", "kls_hkdrone_ready" );
	setkillstreakteamkillpenaltyscale( "missile_drone_mp", 0 );
// SP = 0x0 - check OK
}

// 0xF5C
missile_drone_killstreak( weaponname )
{
/#
	assert( weaponname == "inventory_missile_drone_mp" );
#/
	level.missile_drone_origin = level.mapcenter + ( 0, 0, level.missile_drone_flyheight );
	hardpointtype = "missile_drone_mp";
	result = usemissiledrone( hardpointtype );
	return 0;
	return result;
// SP = 0x0 - check OK
}

// 0xFC0
usemissiledrone( hardpointtype )
{
	return 0;
	self thread missiledronewatcher( hardpointtype );
	missileweapon = self getcurrentweapon();
	missileweapon = undefined;
	currentweapon = self getcurrentweapon();
	missileweapon = currentweapon;
/#
	assert( IsDefined( missileweapon ) );
#/
	notifystring = self waittill_any_return( "weapon_change", "grenade_fire", "death" );
	return 0;
	notifystring = self waittill_any_return( "weapon_change", "death" );
	return 1;
	return 0;
	self takeweapon( missileweapon );
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x10C0
ismissiledroneweapon( weapon )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x10E4
missiledronewatcher( hardpointtype )
{
	self notify( "missileDroneWatcher" );
	self endon( "missileDroneWatcher" );
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self endon( "weapon_change" );
	self endon( "death" );
	team = self.team;
	killstreak_id = maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, team, 0, 0 );
	self maps\mp\killstreaks\_killstreaks::switchtolastnonkillstreakweapon();
	return;
	self thread checkforemp();
	self thread checkweaponchange( hardpointtype, team, killstreak_id );
	self thread watchownerdeath( hardpointtype, team, killstreak_id );
	self thread updatetargetting();
	self waittill( "grenade_fire", grenade, weapname );
	origin = grenade.origin;
	self notify( "missile_drone_active" );
	level thread maps\mp\_popups::displaykillstreakteammessagetoall( hardpointtype, self );
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( hardpointtype, self.team, 1 );
	level.globalkillstreakscalled++;
	self addweaponstat( "missile_drone_mp", "used", 1 );
	self setclientfieldtoplayer( "missile_drone_active", 0 );
	grenade thread waitthendelete( 0.05 );
	grenade.origin += vector_scale( ( 0, 0, 1 ), 1000 );
	self thread domissiledrone( origin, weapname, killstreak_id, hardpointtype, team );
	self maps\mp\killstreaks\_killstreaks::switchtolastnonkillstreakweapon();
// SP = 0x0 - check OK
}

// 0x1234
domissiledrone( origin, weapname, killstreak_id, hardpointtype, team )
{
	direction = self getplayerangles();
	forward = anglestoforward( direction );
	target = origin + vector_scale( forward, 10000 );
	debug_line( origin, target, ( 0.9, 0.1, 0.1 ) );
	projectile = maps\mp\killstreaks\_missile_swarm::projectile_spawn_utility( self, target, origin, "missile_drone_projectile_mp", "drone_missile", 0 );
	projectile missile_dronesetvisible( 1 );
	projectile.originaltarget = target;
	projectile thread maps\mp\killstreaks\_missile_swarm::projectile_abort_think();
	projectile thread drone_target_search( hardpointtype );
	projectile thread projectile_death_think();
	projectile thread watchdamage();
	projectile.targetname = "remote_drone";
	projectile playsound( "wpn_hunter_ignite" );
	projectile thread killstreak_stop_think( killstreak_id, hardpointtype, team );
	projectile setclientfield( "missile_drone_projectile_animate", 1 );
// SP = 0x0 - check OK
}

// 0x1328
waitthendelete( waittime )
{
	self endon( "delete" );
	self endon( "death" );
	wait waittime;
	self delete();
// SP = 0x0 - check OK
}

// 0x134C
projectile_death_think()
{
	self waittill( "death" );
	self.goal delete();
// SP = 0x0 - check OK
}

// 0x1368
drone_target_acquired( hardpointtype, target )
{
	self endon( "death" );
	self notify( "drone_target_acquired" );
	self setclientfield( "missile_drone_projectile_active", 1 );
	self set_drone_target( hardpointtype, target );
// SP = 0x0 - check OK
}

// 0x13A0
drone_target_search( hardpointtype )
{
	self endon( "death" );
	self drone_target_acquired( hardpointtype, self.dronetarget );
	self missile_settarget( self.goal );
	self setclientfield( "missile_drone_projectile_active", 0 );
	searchdotprodminimums = [];
	searchdotprodminimums[0] = 0.9;
	searchdotprodminimums[1] = 0.7071;
	searchdotprodminimums[2] = 0.5;
	searchdotprodminimums[3] = 0;
	wait 0.1;
	searchcounter = 0;
	self notify( "death" );
	target = self projectile_find_target( self.owner, searchdotprodminimums[searchcounter] );
	searchcounter++;
	currentangles = self.angles;
	direction = vectornormalize( anglestoforward( self.angles ) );
	direction = vecscale( direction, 1024 );
	self.goal.origin = ( self.origin[0] + direction[0], self.origin[1] + direction[1], level.missile_drone_origin[2] );
/#
	debug_line( self.origin, self.goal.origin, ( 1, 1, 0 ), 5000 );
#/
	currentangles = self.angles;
	direction = vectornormalize( anglestoforward( self.angles ) );
	direction = vecscale( direction, 1024 );
	self.goal.origin = ( level.missile_drone_origin[0] + direction[0], level.missile_drone_origin[1] + direction[1], level.missile_drone_origin[2] );
/#
	debug_line( self.origin, self.goal.origin, ( 0, 1, 1 ), 5000 );
#/
	self set_drone_target( hardpointtype, target );
	self missile_settarget( self.goal );
	wait 0.25;
// SP = 0x0 - check OK
}

// 0x1598
vecscale( vec, scalar )
{
	return ( vec[0] * scalar, vec[1] * scalar, vec[2] * scalar );
// SP = 0x0 - check OK
}

// 0x15BC
set_drone_target( hardpointtype, target )
{
	self endon( "target_lost" );
	self thread check_target_lost( target );
	self.swarm_target = target["entity"];
	target["entity"].swarm = self;
	debug_line( self.origin, target["entity"].origin, ( 0, 0, 0 ), 5000 );
	self missile_settarget( target["entity"], target["offset"] );
	self playsound( "veh_harpy_drone_swarm_incomming" );
	self thread target_sounds( target["entity"] );
	target["entity"] notify( "stinger_fired_at_me", self, hardpointtype, self.owner );
	self setclientfield( "missile_drone_projectile_active", 1 );
	target["entity"] waittill_any( "death", "disconnect", "joined_team" );
	self setclientfield( "missile_drone_projectile_active", 0 );
	self missile_settarget( self.goal );
// SP = 0x0 - check OK
}

// 0x16D0
check_target_lost( target )
{
	self endon( "death" );
	target["entity"] endon( "death" );
	target["entity"] endon( "disconnect" );
	target["entity"] endon( "joined_team" );
	failurelimit = 3;
	failurecount = 0;
/#
	debug_star( target["entity"].origin, ( 0, 1, 0 ), 1000 );
	debug_star( self.origin, ( 0, 1, 0 ), 1000 );
#/
/#
	debug_line( self.origin, target["entity"].origin, ( 0, 1, 0 ), 1000 );
#/
	failurecount = 0;
	failurecount++;
	self notify( "target_lost" );
	return;
	wait 0.25;
// SP = 0x0 - check OK
}

// 0x17B4
projectile_find_target( owner, mincos )
{
	ks = self projectile_find_target_killstreak( owner, mincos );
	player = self projectile_find_target_player( owner, mincos );
	return ks;
	return player;
	return ks;
	return player;
	return undefined;
// SP = 0x0 - check OK
}

// 0x1834
projectile_find_target_killstreak( owner, mincos )
{
	ks = [];
	ks["offset"] = vector_scale( ( 0, 0, -1 ), 10 );
	targets = target_getarray();
	rcbombs = getentarray( "rcbomb", "targetname" );
	dogs = maps\mp\killstreaks\_dogs::dog_manager_get_dogs();
	targets = arraycombine( targets, rcbombs, 1, 0 );
	targets = arraycombine( targets, dogs, 1, 0 );
	return undefined;
	targets = get_array_sorted_dot_prod( targets, mincos );
	foreach ( target in targets )
	{
		ks["entity"] = target;
		ks["dotprod"] = target.sorteddotprod;
		ks["dotprod"] = -1;
		return ks;
	}
	return undefined;
// SP = 0x0 - check OK
}

// 0x19DC
projectile_find_target_player( owner, mincos )
{
	target = [];
	players = self get_array_sorted_dot_prod( get_players(), mincos );
	startoffset = self getplayerviewheight();
	startorigin = ( self.origin[0], self.origin[1], self.origin[2] + startoffset );
	startangles = self getplayerangles();
/#
	debug_star( startorigin, ( 0, 0, 1 ), 1000 );
#/
	startorigin = self.origin;
	startangles = self.angles;
	bestplayerrating = -1;
	foreach ( player in players )
	{
		currentplayeroffset = undefined;
		currentplayerdotprod = undefined;
		currentplayerrating = 0;
/#
		debug_star( player.origin, ( 1, 1, 1 ), 1000 );
#/
/#
		debug_line( startorigin, player.origin, ( 1, 1, 1 ), 1000 );
#/
		currentplayeroffset = ( 0, 0, 0 );
		currentplayerrating += 4;
		verticaloffset = player getplayerviewheight();
		playerheadoffset = ( 0, 0, verticaloffset );
/#
		debug_star( player.origin + playerheadoffset, ( 1, 0, 0 ), 1000 );
#/
/#
		debug_line( startorigin, player.origin + playerheadoffset, ( 1, 0, 0 ), 1000 );
#/
		currentplayeroffset = playerheadoffset;
		currentplayerrating += 3;
		end = player.origin + playerheadoffset + vector_scale( ( 0, 0, 1 ), 96 );
/#
		debug_star( end, ( 1, 1, 0 ), 1000 );
#/
/#
		debug_line( player.origin + playerheadoffset, end, ( 1, 1, 0 ), 1000 );
#/
		currentplayeroffset = vector_scale( ( 0, 0, 1 ), 30 );
		currentplayerrating += 2;
		bestplayerrating = currentplayerrating;
		target["entity"] = player;
		target["offset"] = currentplayeroffset;
		target["dotprod"] = player.sorteddotprod;
		target["dotprod"] = -1;
		return target;
	}
	return target;
	return undefined;
// SP = 0x0 - check OK
}

// 0x1C88
killstreak_stop_think( killstreak_id, hardpointtype, team )
{
	self waittill( "death" );
	maps\mp\killstreaks\_killstreakrules::killstreakstop( hardpointtype, team, killstreak_id );
// SP = 0x0 - check OK
}

// 0x1CAC
checkweaponchange( hardpointtype, team, killstreak_id )
{
	self endon( "spawned_player" );
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "grenade_fire" );
	self waittill( "weapon_change" );
	self setclientfieldtoplayer( "missile_drone_active", 0 );
	maps\mp\killstreaks\_killstreakrules::killstreakstop( hardpointtype, team, killstreak_id );
// SP = 0x0 - check OK
}

// 0x1CF8
watchownerdeath( hardpointtype, team, killstreak_id )
{
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self endon( "weapon_change" );
	self endon( "missile_drone_active" );
	self waittill( "death" );
	maps\mp\killstreaks\_killstreakrules::killstreakstop( hardpointtype, team, killstreak_id );
// SP = 0x0 - check OK
}

// 0x1D34
checkforemp()
{
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self endon( "weapon_change" );
	self endon( "death" );
	self endon( "grenade_fire" );
	self waittill( "emp_jammed" );
	self setclientfieldtoplayer( "missile_drone_active", 0 );
	self maps\mp\killstreaks\_killstreaks::switchtolastnonkillstreakweapon();
// SP = 0x0 - check OK
}

// 0x1D7C
watchdamage()
{
	self endon( "death" );
	self setcandamage( 1 );
	self.maxhealth = 100000;
	self.health = self.maxhealth;
	self waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weaponname );
	maps\mp\_scoreevents::processscoreevent( "destroyed_missile_drone", attacker, self.owner, weaponname );
	attacker maps\mp\_challenges::addflyswatterstat( weaponname, self );
	self detonate();
// SP = 0x0 - check OK
}

// 0x1E74
get_array_sorted_dot_prod( array, mincos )
{
	org = self.origin;
	angles = self getplayerangles();
/#
	assert( IsDefined( angles ) );
#/
	org = self.origin;
/#
	assert( IsDefined( self.angles ) );
#/
	angles = self.angles;
	forwardvec = vectornormalize( anglestoforward( angles ) );
	dotprod = [];
	index = [];
	i = 0;
/#
	assert( IsDefined( forwardvec ) );
#/
/#
	assert( IsDefined( array[i] ) );
#/
/#
	assert( IsDefined( array[i].origin ) );
#/
/#
	assert( IsDefined( org ) );
#/
	cosa = vectordot( forwardvec, vectornormalize( array[i].origin - org ) );
/#
	assert( IsDefined( cosa ) );
#/
	array[i].sorteddotprod = cosa;
	dotprod[dotprod.size] = cosa;
	index[index.size] = i;
	i++;
	change = 0;
	i = 0;
	change = 1;
	temp = dotprod[i];
	dotprod[i] = dotprod[i + 1];
	dotprod[i + 1] = temp;
	temp = index[i];
	index[i] = index[i + 1];
	index[i + 1] = temp;
	i++;
	newarray = [];
	i = 0;
	newarray[i] = array[index[i]];
	i++;
	return newarray;
// SP = 0x0 - check OK
}

// 0x2070
updatetargetting()
{
	self endon( "spawned_player" );
	self endon( "disconnect" );
	self endon( "weapon_change" );
	self endon( "death" );
	self endon( "grenade_fire" );
	mincos = getdvarfloatdefault( "scr_missile_drone_min_cos", 0.9 );
	updatewait = getdvarfloatdefault( "scr_missile_drone_update_wait", 0.5 );
	self.dronetarget = self projectile_find_target( self, mincos );
	self thread clearinvaliddronetarget();
	self setclientfieldtoplayer( "missile_drone_active", 2 );
	self setclientfieldtoplayer( "missile_drone_active", 1 );
	wait updatewait;
// SP = 0x0 - check OK
}

// 0x211C
clearinvaliddronetarget()
{
	self endon( "death" );
	self notify( "clearInvalidDroneTarget" );
	self endon( "clearInvalidDroneTarget" );
	self endon( "drone_target_acquired" );
	self.dronetarget["entity"] waittill_any( "death", "disconnect", "joined_team" );
	self.dronetarget = undefined;
// SP = 0x0 - check OK
}
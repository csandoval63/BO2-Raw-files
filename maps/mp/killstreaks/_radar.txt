// maps/mp/killstreaks/_radar.gsc

#include maps\mp\_popups;
#include maps\mp\killstreaks\_spyplane;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_tweakables;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xA0C
init()
{
	setmatchflag( "radar_allies", 0 );
	setmatchflag( "radar_axis", 0 );
	level.spyplane = [];
	level.counterspyplane = [];
	level.satellite = [];
	level.spyplanetype = [];
	level.satellitetype = [];
	level.radartimers = [];
	foreach ( team in level.teams )
	{
		level.radartimers[team] = GetTime();
	}
	level.spyplaneviewtime = 25;
	level.counteruavviewtime = 30;
	level.radarlongviewtime = 45;
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "radar_mp", "radar_mp", "killstreak_spyplane", "uav_used", ::usekillstreakradar );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "radar_mp", &"KILLSTREAK_EARNED_RADAR", &"KILLSTREAK_RADAR_NOT_AVAILABLE", &"KILLSTREAK_RADAR_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "radar_mp", "mpl_killstreak_radar", "kls_u2_used", "", "kls_u2_enemy", "", "kls_u2_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "radar_mp", "scr_giveradar" );
	maps\mp\killstreaks\_killstreaks::createkillstreaktimer( "radar_mp" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "counteruav_mp", "counteruav_mp", "killstreak_counteruav", "counteruav_used", ::usekillstreakcounteruav );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "counteruav_mp", &"KILLSTREAK_EARNED_COUNTERUAV", &"KILLSTREAK_COUNTERUAV_NOT_AVAILABLE", &"KILLSTREAK_COUNTERUAV_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "counteruav_mp", "mpl_killstreak_radar", "kls_cu2_used", "", "kls_cu2_enemy", "", "kls_cu2_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "counteruav_mp", "scr_givecounteruav" );
	maps\mp\killstreaks\_killstreaks::createkillstreaktimer( "counteruav_mp" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "radardirection_mp", "radardirection_mp", "killstreak_spyplane_direction", "uav_used", ::usekillstreaksatellite );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "radardirection_mp", &"KILLSTREAK_EARNED_SATELLITE", &"KILLSTREAK_SATELLITE_NOT_AVAILABLE", &"KILLSTREAK_SATELLITE_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "radardirection_mp", "mpl_killstreak_satellite", "kls_sat_used", "", "kls_sat_enemy", "", "kls_sat_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "radardirection_mp", "scr_giveradardirection" );
	maps\mp\killstreaks\_killstreaks::createkillstreaktimer( "radardirection_mp" );
// SP = 0x0 - check OK
}

// 0xC48
usekillstreakradar( hardpointtype )
{
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team );
	return 0;
	return self maps\mp\killstreaks\_spyplane::callspyplane( hardpointtype, 0, killstreak_id );
// SP = 0x0 - check OK
}

// 0xC9C
usekillstreakcounteruav( hardpointtype )
{
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team );
	return 0;
	return self maps\mp\killstreaks\_spyplane::callcounteruav( hardpointtype, 0, killstreak_id );
// SP = 0x0 - check OK
}

// 0xCF0
usekillstreaksatellite( hardpointtype )
{
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team );
	return 0;
	return self maps\mp\killstreaks\_spyplane::callsatellite( hardpointtype, 0, killstreak_id );
// SP = 0x0 - check OK
}

// 0xD44
teamhasspyplane( team )
{
	return getteamspyplane( team ) > 0;
// SP = 0x0 - check OK
}

// 0xD5C
teamhassatellite( team )
{
	return getteamsatellite( team ) > 0;
// SP = 0x0 - check OK
}

// 0xD74
useradaritem( hardpointtype, team, displaymessage )
{
	team = self.team;
/#
	assert( IsDefined( level.players ) );
#/
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( hardpointtype, team );
	level.spyplanetype[team] = 0;
	currenttypespyplane = level.spyplanetype[team];
	level.satellitetype[team] = 0;
	currenttypesatellite = level.satellitetype[team];
	self.pers["spyplaneType"] = 0;
	currenttypespyplane = self.pers["spyplaneType"];
	self.pers["satelliteType"] = 0;
	currenttypesatellite = self.pers["satelliteType"];
	radarviewtype = 0;
	normal = 1;
	fastsweep = 2;
	notifystring = "";
	issatellite = 0;
	isradar = 0;
	iscounteruav = 0;
	viewtime = level.spyplaneviewtime;
	switch ( hardpointtype )
	{
		case "counteruav_mp":
			notifystring = "spyplane";
			isradar = 1;
			viewtime = level.spyplaneviewtime;
			level.globalkillstreakscalled++;
			self addweaponstat( hardpointtype, "used", 1 );
			break;
		case "radar_mp":
			notifystring = "satellite";
			issatellite = 1;
			viewtime = level.radarlongviewtime;
			level notify( "satelliteInbound", team, self );
			level.globalkillstreakscalled++;
			self addweaponstat( hardpointtype, "used", 1 );
			break;
		case "radardirection_mp":
			notifystring = "counteruav";
			iscounteruav = 1;
			viewtime = level.counteruavviewtime;
			level.globalkillstreakscalled++;
			self addweaponstat( hardpointtype, "used", 1 );
			break;
	}
	level thread maps\mp\_popups::displaykillstreakteammessagetoall( hardpointtype, self );
	return viewtime;
// SP = 0x0 - check OK
}

// 0xF70
resetspyplanetypeonend( type )
{
	self waittill( type + "_timer_kill" );
	self.pers["spyplane"] = 0;
// SP = 0x0 - check OK
}

// 0xF90
resetsatellitetypeonend( type )
{
	self waittill( type + "_timer_kill" );
	self.pers["satellite"] = 0;
// SP = 0x0 - check OK
}

// 0xFB0
setteamspyplanewrapper( team, value )
{
	setteamspyplane( team, value );
	setmatchflag( "radar_allies", value );
	setmatchflag( "radar_axis", value );
	foreach ( player in level.players )
	{
		player setclientuivisibilityflag( "radar_client", value );
	}
	level notify( "radar_status_change", team );
// SP = 0x0 - check OK
}

// 0x105C
setteamsatellitewrapper( team, value )
{
	setteamsatellite( team, value );
	setmatchflag( "radar_allies", value );
	setmatchflag( "radar_axis", value );
	foreach ( player in level.players )
	{
		player setclientuivisibilityflag( "radar_client", value );
	}
	level notify( "radar_status_change", team );
// SP = 0x0 - check OK
}

// 0x1108
enemyobituarytext( type, numseconds )
{
	switch ( type )
	{
		case "counteruav_mp":
			self iprintln( &"MP_WAR_RADAR_ACQUIRED_UPDATE_ENEMY", numseconds );
			break;
		case "radardirection_mp":
			self iprintln( &"MP_WAR_RADAR_ACQUIRED_DIRECTION_ENEMY", numseconds );
			break;
		case "radarupdate_mp":
			self iprintln( &"MP_WAR_RADAR_COUNTER_UAV_ACQUIRED_ENEMY", numseconds );
			break;
		default:
			self iprintln( &"MP_WAR_RADAR_ACQUIRED_ENEMY", numseconds );
	}
// SP = 0x0 - check OK
}

// 0x1194
friendlyobituarytext( type, callingplayer, numseconds )
{
	switch ( type )
	{
		case "counteruav_mp":
			self iprintln( &"MP_WAR_RADAR_UPDATE_ACQUIRED", callingplayer, numseconds );
			break;
		case "radardirection_mp":
			self iprintln( &"MP_WAR_RADAR_DIRECTION_ACQUIRED", callingplayer, numseconds );
			break;
		case "radarupdate_mp":
			self iprintln( &"MP_WAR_RADAR_COUNTER_UAV_ACQUIRED", numseconds );
			break;
		default:
			self iprintln( &"MP_WAR_RADAR_ACQUIRED", callingplayer, numseconds );
	}
// SP = 0x0 - check OK
}
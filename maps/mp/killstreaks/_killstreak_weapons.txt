// maps/mp/killstreaks/_killstreak_weapons.gsc

#include maps\mp\gametypes\_class;
#include maps\mp\_popups;
#include maps\mp\gametypes\_weapons;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_supplydrop;
#include maps\mp\gametypes\_globallogic_utils;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xCE8
init()
{
	precacheshader( "hud_ks_minigun" );
	precacheshader( "hud_ks_m32" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "inventory_minigun_mp", "inventory_minigun_mp", "killstreak_minigun", "minigun_used", ::usecarriedkillstreakweapon, 0, 1, "MINIGUN_USED" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "inventory_minigun_mp", &"KILLSTREAK_EARNED_MINIGUN", &"KILLSTREAK_MINIGUN_NOT_AVAILABLE", &"KILLSTREAK_MINIGUN_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "inventory_minigun_mp", "mpl_killstreak_minigun", "kls_death_used", "", "kls_death_enemy", "", "kls_death_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "inventory_minigun_mp", "scr_giveminigun_drop" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "minigun_mp", "minigun_mp", "killstreak_minigun", "minigun_used", ::usecarriedkillstreakweapon, 0, 1, "MINIGUN_USED" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "minigun_mp", &"KILLSTREAK_EARNED_MINIGUN", &"KILLSTREAK_MINIGUN_NOT_AVAILABLE", &"KILLSTREAK_MINIGUN_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "minigun_mp", "mpl_killstreak_minigun", "kls_death_used", "", "kls_death_enemy", "", "kls_death_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "inventory_m32_mp", "inventory_m32_mp", "killstreak_m32", "m32_used", ::usecarriedkillstreakweapon, 0, 1, "M32_USED" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "inventory_m32_mp", &"KILLSTREAK_EARNED_M32", &"KILLSTREAK_M32_NOT_AVAILABLE", &"KILLSTREAK_M32_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "inventory_m32_mp", "mpl_killstreak_m32", "kls_mgl_used", "", "kls_mgl_enemy", "", "kls_mgl_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "inventory_m32_mp", "scr_givem32_drop" );
	maps\mp\killstreaks\_killstreaks::overrideentitycameraindemo( "inventory_m32_mp", 1 );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "m32_mp", "m32_mp", "killstreak_m32", "m32_used", ::usecarriedkillstreakweapon, 0, 1, "M32_USED" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "m32_mp", &"KILLSTREAK_EARNED_M32", &"KILLSTREAK_M32_NOT_AVAILABLE", &"KILLSTREAK_M32_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "m32_mp", "mpl_killstreak_m32", "kls_mgl_used", "", "kls_mgl_enemy", "", "kls_mgl_ready" );
	maps\mp\killstreaks\_killstreaks::overrideentitycameraindemo( "m32_mp", 1 );
	level.killstreakicons["killstreak_minigun"] = "hud_ks_minigun";
	level.killstreakicons["killstreak_m32"] = "hud_ks_m32";
	level.killstreakicons["killstreak_m202_flash_mp"] = "hud_ks_m202";
	level.killstreakicons["killstreak_m220_tow_drop_mp"] = "hud_ks_tv_guided_marker";
	level.killstreakicons["killstreak_m220_tow_mp"] = "hud_ks_tv_guided_missile";
	level thread onplayerconnect();
	setdvar( "scr_HeldKillstreak_Penalty", 0 );
// SP = 0x0 - check OK
}

// 0xF34
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0xF58
onplayerspawned()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self.firedkillstreakweapon = 0;
	self.usingkillstreakheldweapon = undefined;
	self thread watchkillstreakweapondelay();
// SP = 0x0 - check OK
}

// 0xFB4
watchkillstreakweapondelay()
{
	self endon( "disconnect" );
	self endon( "death" );
	currentweapon = self getcurrentweapon();
	self waittill( "weapon_change", newweapon );
	return;
	wait 0.5;
	timeleft = int( level.roundstartkillstreakdelay - maps\mp\gametypes\_globallogic_utils::gettimepassed() / 1000 );
	timeleft = 1;
	self iprintlnbold( &"MP_UNAVAILABLE_FOR_N", " " + timeleft + " ", &"EXE_SECONDS" );
	self switchtoweapon( currentweapon );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x1098
usekillstreakweapondrop( hardpointtype )
{
	return 0;
	result = self maps\mp\killstreaks\_supplydrop::usesupplydropmarker();
	self notify( "supply_drop_marker_done" );
	return 0;
	return result;
// SP = 0x0 - check OK
}

// 0x10DC
usecarriedkillstreakweapon( hardpointtype )
{
	self switchtoweapon( self.lastdroppableweapon );
	return 0;
	return 0;
	currentweapon = self getcurrentweapon();
	return 0;
	level maps\mp\gametypes\_weapons::addlimitedweapon( hardpointtype, self, 3 );
	isfrominventory = 1;
	isfrominventory = 0;
	currentammo = self getammocount( hardpointtype );
	self.minigunstart = 1;
	self.m32start = 1;
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( hardpointtype, self.team, 1 );
	level.globalkillstreakscalled++;
	self addweaponstat( hardpointtype, "used", 1 );
	level thread maps\mp\_popups::displayteammessagetoall( level.killstreaks[hardpointtype].inboundtext, self );
	self.pers["held_killstreak_clip_count"][hardpointtype] = weaponclipsize( hardpointtype );
	ammopool = weaponmaxammo( hardpointtype );
	ammopool = self.pers["held_killstreak_ammo_count"][hardpointtype];
	self setweaponammoclip( hardpointtype, self.pers["held_killstreak_clip_count"][hardpointtype] );
	self setweaponammostock( hardpointtype, ammopool - self.pers["held_killstreak_clip_count"][hardpointtype] );
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team, 0, 0 );
	killstreak_id = self.pers["killstreak_unique_id"][self.pers["killstreak_unique_id"].size - 1];
	self.minigunid = killstreak_id;
	self.minigunactive = 1;
	killstreak_id = self.minigunid;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team, 0, 0 );
	killstreak_id = self.pers["killstreak_unique_id"][self.pers["killstreak_unique_id"].size - 1];
	self.m32id = killstreak_id;
	self.m32active = 1;
	killstreak_id = self.m32id;
/#
	assert( killstreak_id != -1 );
#/
	self.firedkillstreakweapon = 0;
	self setblockweaponpickup( hardpointtype, 1 );
	self setweaponammoclip( hardpointtype, self.pers["held_killstreak_clip_count"][hardpointtype] );
	self setweaponammostock( hardpointtype, self.pers["killstreak_ammo_count"][self.pers["killstreak_ammo_count"].size - 1] - self.pers["held_killstreak_clip_count"][hardpointtype] );
	notifystring = "killstreakWeapon_" + hardpointtype;
	self notify( notifystring );
	self thread watchkillstreakweaponswitch( hardpointtype, killstreak_id, isfrominventory );
	self thread watchkillstreakweapondeath( hardpointtype, killstreak_id, isfrominventory );
	self thread watchkillstreakroundchange( isfrominventory, killstreak_id );
	self thread watchplayerdeath( hardpointtype );
	self thread watchkillstreakremoval( hardpointtype, killstreak_id );
	self.usingkillstreakheldweapon = 1;
	return 0;
// SP = 0x4 - check failed (function may have been decompiled incorrectly)
}

// 0x1480
usekillstreakweaponfromcrate( hardpointtype )
{
	return 0;
	return 0;
	self.firedkillstreakweapon = 0;
	self setblockweaponpickup( hardpointtype, 1 );
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team, 0, 0 );
/#
	assert( killstreak_id != -1 );
#/
	isfrominventory = 1;
	isfrominventory = 0;
	self thread watchkillstreakweaponswitch( hardpointtype, killstreak_id, isfrominventory );
	self thread watchkillstreakweapondeath( hardpointtype, killstreak_id, isfrominventory );
	self thread watchkillstreakremoval( hardpointtype, killstreak_id );
	self.usingkillstreakheldweapon = 1;
	return 1;
// SP = 0x0 - check OK
}

// 0x153C
watchkillstreakweaponswitch( killstreakweapon, killstreak_id, isfrominventory )
{
	self endon( "disconnect" );
	self endon( "death" );
	currentweapon = self getcurrentweapon();
	self waittill( "weapon_change", newweapon );
	currentammo = self getammocount( killstreakweapon );
	currentammoinclip = self getweaponammoclip( killstreakweapon );
	killstreakindex = self maps\mp\killstreaks\_killstreaks::getkillstreakindexbyid( killstreak_id );
	self.pers["killstreak_ammo_count"][killstreakindex] = currentammo;
	self.pers["held_killstreak_clip_count"][killstreakweapon] = currentammoinclip;
	killstreakid = maps\mp\killstreaks\_killstreaks::gettopkillstreakuniqueid();
	self.pers["held_killstreak_ammo_count"][killstreakweapon] = currentammo;
	self.pers["held_killstreak_clip_count"][killstreakweapon] = currentammoinclip;
	self notify( "killstreak_weapon_switch" );
	self.firedkillstreakweapon = 0;
	self.usingkillstreakheldweapon = undefined;
	waittillframeend;
	maps\mp\killstreaks\_killstreakrules::killstreakstop( killstreakweapon, self.team, killstreak_id );
	self.minigunstart = 0;
	self.minigunactive = 0;
	self.m32start = 0;
	self.m32active = 0;
	self.pers["held_killstreak_ammo_count"][killstreakweapon] = weaponmaxammo( killstreakweapon );
	self maps\mp\gametypes\_class::setweaponammooverall( killstreakweapon, self.pers["held_killstreak_ammo_count"][killstreakweapon] );
	self.pers["killstreak_quantity"][killstreakweapon]--;
	self takeweapon( killstreakweapon );
	self maps\mp\killstreaks\_killstreaks::removeusedkillstreak( killstreakweapon, killstreak_id );
	self maps\mp\killstreaks\_killstreaks::activatenextkillstreak();
// SP = 0x0 - check OK
}

// 0x1784
watchkillstreakweapondeath( hardpointtype, killstreak_id, isfrominventory )
{
	self endon( "disconnect" );
	self endon( "killstreak_weapon_switch" );
	return;
	oldteam = self.team;
	self waittill( "death" );
	penalty = getdvarfloatdefault( "scr_HeldKillstreak_Penalty", 0.5 );
	maxammo = weaponmaxammo( hardpointtype );
	currentammo = self getammocount( hardpointtype );
	currentammoinclip = self getweaponammoclip( hardpointtype );
	currentammo = 0;
	currentammoinclip = 0;
	maxclipsize = weaponclipsize( hardpointtype );
	newammo = int( currentammo - maxammo * penalty );
	killstreakid = maps\mp\killstreaks\_killstreaks::gettopkillstreakuniqueid();
	self.pers["held_killstreak_ammo_count"][hardpointtype] = 0;
	self.pers["held_killstreak_clip_count"][hardpointtype] = 0;
	self.pers["held_killstreak_ammo_count"][hardpointtype] = newammo;
	self.pers["held_killstreak_clip_count"][hardpointtype] = newammo;
	self.usingkillstreakheldweapon = 0;
	maps\mp\killstreaks\_killstreakrules::killstreakstop( hardpointtype, oldteam, killstreak_id );
	self.minigunstart = 0;
	self.minigunactive = 0;
	self.m32start = 0;
	self.m32active = 0;
	self.pers["held_killstreak_ammo_count"][hardpointtype] = maxammo;
	self.pers["held_killstreak_clip_count"][hardpointtype] = maxclipsize;
	self setweaponammoclip( hardpointtype, self.pers["held_killstreak_clip_count"][hardpointtype] );
	self setweaponammostock( hardpointtype, self.pers["held_killstreak_ammo_count"][hardpointtype] - self.pers["held_killstreak_clip_count"][hardpointtype] );
	self.pers["killstreak_quantity"][hardpointtype]--;
	self takeweapon( hardpointtype );
	self maps\mp\killstreaks\_killstreaks::removeusedkillstreak( hardpointtype, killstreak_id );
	self maps\mp\killstreaks\_killstreaks::activatenextkillstreak();
	killstreakindex = self maps\mp\killstreaks\_killstreaks::getkillstreakindexbyid( killstreak_id );
	self.pers["killstreak_ammo_count"][killstreakindex] = self.pers["held_killstreak_ammo_count"][hardpointtype];
	return;
// SP = 0x4 - check failed (function may have been decompiled incorrectly)
}

// 0x1A14
watchplayerdeath( killstreakweapon )
{
	self endon( "disconnect" );
	endonweaponstring = "killstreakWeapon_" + killstreakweapon;
	self endon( endonweaponstring );
	self waittill( "death" );
	currentammo = self getammocount( killstreakweapon );
	self.pers["held_killstreak_clip_count"][killstreakweapon] = currentammo;
// SP = 0x4 - check failed (function may have been decompiled incorrectly)
}

// 0x1A78
watchkillstreakremoval( killstreakweapon, killstreak_id )
{
	self endon( "disconnect" );
	self endon( "death" );
	self endon( "killstreak_weapon_switch" );
	self waittill( "oldest_killstreak_removed", removedkillstreakweapon, removed_id );
	self.minigunstart = 0;
	self.minigunactive = 0;
	self.m32start = 0;
	self.m32active = 0;
// SP = 0x0 - check OK
}

// 0x1ADC
watchkillstreakroundchange( isfrominventory, killstreak_id )
{
	self endon( "disconnect" );
	self endon( "death" );
	self endon( "killstreak_weapon_switch" );
	self waittill( "round_ended" );
	currentweapon = self getcurrentweapon();
	return;
	currentammo = self getammocount( currentweapon );
	maxclipsize = weaponclipsize( currentweapon );
	killstreakindex = self maps\mp\killstreaks\_killstreaks::getkillstreakindexbyid( killstreak_id );
	self.pers["killstreak_ammo_count"][killstreakindex] = currentammo;
	self.pers["held_killstreak_clip_count"][currentweapon] = currentammo;
	self.pers["held_killstreak_ammo_count"][currentweapon] = currentammo;
	self.pers["held_killstreak_clip_count"][currentweapon] = currentammo;
// SP = 0x8 - check failed (function may have been decompiled incorrectly)
}

// 0x1BBC
checkifswitchableweapon( currentweapon, newweapon, killstreakweapon, currentkillstreakid )
{
	switchableweapon = 1;
	topkillstreak = maps\mp\killstreaks\_killstreaks::gettopkillstreak();
	killstreakid = maps\mp\killstreaks\_killstreaks::gettopkillstreakuniqueid();
	killstreakid = -1;
	switchableweapon = 1;
	switchableweapon = 1;
	switchableweapon = 1;
	switchableweapon = 0;
	switchableweapon = 1;
	switchableweapon = 0;
	switchableweapon = 0;
	switchableweapon = 1;
	switchableweapon = 0;
	switchableweapon = 0;
	return switchableweapon;
// SP = 0x0 - check OK
}

// 0x1D1C
watchkillstreakweaponusage()
{
	self endon( "disconnect" );
	self endon( "death" );
	self waittill( "weapon_fired", killstreakweapon );
	wait 0.1;
	maps\mp\killstreaks\_killstreaks::removeusedkillstreak( killstreakweapon );
	self.firedkillstreakweapon = 1;
	self setactionslot( 4, "" );
	waittillframeend;
	maps\mp\killstreaks\_killstreaks::activatenextkillstreak();
// SP = 0x0 - check OK
}

// 0x1D9C
isheldkillstreakweapon( killstreaktype )
{
	switch ( killstreaktype )
	{
		case "inventory_m32_mp":
		case "inventory_minigun_mp":
		case "m32_mp":
		case "minigun_mp":
			return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x1DD8
isheldinventorykillstreakweapon( killstreaktype )
{
	switch ( killstreaktype )
	{
		case "inventory_m32_mp":
		case "inventory_minigun_mp":
			return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x1E04
isgameplayweapon( weapon )
{
	switch ( weapon )
	{
		case "briefcase_bomb_defuse_mp":
		case "briefcase_bomb_mp":
		case "syrette_mp":
			return 1;
		default:
			return 0;
	}
	return 0;
// SP = 0x0 - check OK
}
// maps/mp/killstreaks/_spyplane.gsc

#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_globallogic_audio;
#include maps\mp\_popups;
#include maps\mp\gametypes\_damagefeedback;
#include maps\mp\gametypes\_globallogic_player;
#include maps\mp\gametypes\_weaponobjects;
#include maps\mp\_heatseekingmissile;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\_challenges;
#include maps\mp\gametypes\_hostmigration;
#include maps\mp\killstreaks\_radar;
#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\gametypes\_battlechatter_mp;
#include maps\mp\killstreaks\_airsupport;
#include common_scripts\utility;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;


// 0x1370
init()
{
	level.spyplanemodel = "veh_t6_drone_uav";
	level.counteruavmodel = "veh_t6_drone_cuav";
	level.u2_maxhealth = 700;
	level.spyplane = [];
	level.spyplaneentrancetime = 5;
	level.spyplaneexittime = 10;
	level.counteruavweapon = "counteruav_mp";
	level.counteruavlength = 25;
	precachemodel( level.spyplanemodel );
	precachemodel( level.counteruavmodel );
	level.counteruavplaneentrancetime = 5;
	level.counteruavplaneexittime = 10;
	level.counteruavlight = loadfx( "vehicle/light/fx_cuav_lights_red" );
	level.uavlight = loadfx( "vehicle/light/fx_u2_lights_red" );
	level.fx_spyplane_afterburner = loadfx( "vehicle/exhaust/fx_exhaust_u2_spyplane_afterburner" );
	level.fx_spyplane_burner = loadfx( "vehicle/exhaust/fx_exhaust_u2_spyplane_burner" );
	level.fx_cuav_afterburner = loadfx( "vehicle/exhaust/fx_exhaust_cuav_afterburner" );
	level.fx_cuav_burner = loadfx( "vehicle/exhaust/fx_exhaust_cuav_burner" );
	level.satelliteheight = 10000;
	level.satelliteflydistance = 10000;
	level.fx_u2_damage_trail = loadfx( "trail/fx_trail_u2_plane_damage_mp" );
	level.fx_u2_explode = loadfx( "vehicle/vexplosion/fx_vexplode_u2_exp_mp" );
	minimaporigins = getentarray( "minimap_corner", "targetname" );
	uavorigin = maps\mp\gametypes\_spawnlogic::findboxcenter( minimaporigins[0].origin, minimaporigins[1].origin );
	uavorigin = ( 0, 0, 0 );
	uavorigin += vector_scale( ( 0, 1, 0 ), 1200 );
	foreach ( team in level.teams )
	{
		level.activeuavs[team] = 0;
		level.activecounteruavs[team] = 0;
		level.activesatellites[team] = 0;
	}
	level.activeuavs = [];
	level.activecounteruavs = [];
	level.activesatellites = [];
	level.uavrig = spawn( "script_model", uavorigin + vector_scale( ( 0, 0, 1 ), 1100 ) );
	level.uavrig setmodel( "tag_origin" );
	level.uavrig.angles = vector_scale( ( 0, 1, 0 ), 115 );
	level.uavrig hide();
	level.uavrig thread rotateuavrig( 1 );
	level.uavrig thread swayuavrig();
	level.counteruavrig = spawn( "script_model", uavorigin + vector_scale( ( 0, 0, 1 ), 1500 ) );
	level.counteruavrig setmodel( "tag_origin" );
	level.counteruavrig.angles = vector_scale( ( 0, 1, 0 ), 115 );
	level.counteruavrig hide();
	level.counteruavrig thread rotateuavrig( 0 );
	level.counteruavrig thread swayuavrig();
	level thread uavtracker();
	level thread onplayerconnect();
// SP = 0x0 - check OK
}

// 0x162C
onplayerconnect()
{
	level waittill( "connected", player );
	player.entnum = player getentitynumber();
	level.activeuavs[player.entnum] = 0;
	level.activecounteruavs[player.entnum] = 0;
	level.activesatellites[player.entnum] = 0;
	player thread watchffaandmultiteamspawn();
// SP = 0x0 - check OK
}

// 0x16A0
watchffaandmultiteamspawn()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x16C0
rotateuavrig( clockwise )
{
	turn = 360;
	turn = -360;
	self rotateyaw( turn, 40 );
	wait 40;
	self rotateyaw( turn, 60 );
	wait 60;
// SP = 0x0 - check OK
}

// 0x1710
swayuavrig()
{
	centerorigin = self.origin;
	z = randomintrange( -200, -100 );
	time = randomintrange( 3, 6 );
	self moveto( centerorigin + ( 0, 0, z ), time, 1, 1 );
	wait time;
	z = randomintrange( 100, 200 );
	time = randomintrange( 3, 6 );
	self moveto( centerorigin + ( 0, 0, z ), time, 1, 1 );
	wait time;
// SP = 0x0 - check OK
}

// 0x17A4
callcounteruav( type, displaymessage, killstreak_id )
{
	timeinair = self maps\mp\killstreaks\_radar::useradaritem( type, self.team, displaymessage );
	iscounter = 1;
	counteruavplane = generateplane( self, timeinair, iscounter );
	return 0;
	counteruavplane thread counteruav_watchfor_gamerules_destruction( self );
	counteruavplane setclientflag( 11 );
	counteruavplane addactivecounteruav();
	self.counteruavtime = GetTime();
	counteruavplane thread playcounterspyplanefx();
	counteruavplane thread counteruavplane_death_waiter();
	counteruavplane thread counteruavplane_timeout( timeinair, self );
	counteruavplane thread plane_damage_monitor( 0 );
	counteruavplane thread plane_health();
	counteruavplane.killstreak_id = killstreak_id;
	counteruavplane.iscounter = 1;
	counteruavplane playloopsound( "veh_uav_engine_loop", 1 );
	return 1;
// SP = 0x0 - check OK
}

// 0x1878
callspyplane( type, displaymessage, killstreak_id )
{
	timeinair = self maps\mp\killstreaks\_radar::useradaritem( type, self.team, displaymessage );
	iscounter = 0;
	spyplane = generateplane( self, timeinair, iscounter );
	return 0;
	spyplane thread spyplane_watchfor_gamerules_destruction( self );
	spyplane addactiveuav();
	self.uavtime = GetTime();
	spyplane.leaving = 0;
	spyplane thread playspyplanefx();
	spyplane thread spyplane_timeout( timeinair, self );
	spyplane thread spyplane_death_waiter();
	spyplane thread plane_damage_monitor( 1 );
	spyplane thread plane_health();
	spyplane.killstreak_id = killstreak_id;
	spyplane.iscounter = 0;
	spyplane playloopsound( "veh_uav_engine_loop", 1 );
	return 1;
// SP = 0x0 - check OK
}

// 0x1948
callsatellite( type, displaymessage, killstreak_id )
{
	timeinair = self maps\mp\killstreaks\_radar::useradaritem( type, self.team, displaymessage );
	satellite = spawn( "script_model", level.mapcenter + ( 0 - level.satelliteflydistance, 0, level.satelliteheight ) );
	satellite setmodel( "tag_origin" );
	satellite moveto( level.mapcenter + ( level.satelliteflydistance, 0, level.satelliteheight ), timeinair );
	satellite.owner = self;
	satellite.team = self.team;
	satellite setteam( self.team );
	satellite setowner( self );
	satellite.targetname = "satellite";
	satellite addactivesatellite();
	self.satellitetime = GetTime();
	satellite thread satellite_timeout( timeinair, self );
	satellite thread satellite_watchfor_gamerules_destruction( self );
	satellite.iscounter = 0;
	satellite thread updatevisibility();
	satellite.killstreak_id = killstreak_id;
	return 1;
// SP = 0x0 - check OK
}

// 0x1A48
spyplane_watchfor_gamerules_destruction( player )
{
	self endon( "death" );
	self endon( "crashing" );
	self endon( "delete" );
	player waittill_any( "joined_team", "disconnect", "joined_spectators" );
	self spyplane_death();
// SP = 0x0 - check OK
}

// 0x1A88
counteruav_watchfor_gamerules_destruction( player )
{
	self endon( "death" );
	self endon( "crashing" );
	self endon( "delete" );
	player waittill_any( "joined_team", "disconnect", "joined_spectators" );
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	self counteruavplane_death();
// SP = 0x0 - check OK
}

// 0x1AD0
satellite_watchfor_gamerules_destruction( player )
{
	self endon( "death" );
	self endon( "delete" );
	player waittill_any( "joined_team", "disconnect", "joined_spectators" );
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	self removeactivesatellite();
	self delete();
// SP = 0x0 - check OK
}

// 0x1B1C
addactivecounteruav()
{
	self.owner.activecounteruavs++;
	level.activecounteruavs[self.team]++;
	foreach ( team in level.teams )
	{
		self.owner maps\mp\_challenges::blockedsatellite();
	}
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activecounteruavs[self.owner.entnum]++;
	keys = getarraykeys( level.activecounteruavs );
	i = 0;
	self.owner maps\mp\_challenges::blockedsatellite();
	i++;
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x1C48
addactiveuav()
{
	self.owner.activeuavs++;
	level.activeuavs[self.team]++;
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activeuavs[self.owner.entnum]++;
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x1CC0
addactivesatellite()
{
	self.owner.activesatellites++;
	level.activesatellites[self.team]++;
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activesatellites[self.owner.entnum]++;
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x1D38
removeactiveuav()
{
	self.owner.activeuavs--;
/#
	assert( self.owner.activeuavs >= 0 );
#/
	self.owner.activeuavs = 0;
	level.activeuavs[self.team]--;
/#
	assert( level.activeuavs[self.team] >= 0 );
#/
	level.activeuavs[self.team] = 0;
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activeuavs[self.owner.entnum]--;
/#
	assert( level.activeuavs[self.owner.entnum] >= 0 );
#/
	level.activeuavs[self.owner.entnum] = 0;
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "radar_mp", self.team, self.killstreak_id );
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x1E90
removeactivecounteruav()
{
	self.owner.activecounteruavs--;
/#
	assert( self.owner.activecounteruavs >= 0 );
#/
	self.owner.activecounteruavs = 0;
	level.activecounteruavs[self.team]--;
/#
	assert( level.activecounteruavs[self.team] >= 0 );
#/
	level.activecounteruavs[self.team] = 0;
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activecounteruavs[self.owner.entnum]--;
/#
	assert( level.activecounteruavs[self.owner.entnum] >= 0 );
#/
	level.activecounteruavs[self.owner.entnum] = 0;
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "counteruav_mp", self.team, self.killstreak_id );
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x1FE8
removeactivesatellite()
{
	self.owner.activesatellites--;
/#
	assert( self.owner.activesatellites >= 0 );
#/
	self.owner.activesatellites = 0;
	level.activesatellites[self.team]--;
/#
	assert( level.activesatellites[self.team] >= 0 );
#/
	level.activesatellites[self.team] = 0;
/#
	assert( IsDefined( self.owner.entnum ) );
#/
	self.owner.entnum = self.owner getentitynumber();
	level.activesatellites[self.owner.entnum]--;
/#
	assert( level.activesatellites[self.owner.entnum] >= 0 );
#/
	level.activesatellites[self.owner.entnum] = 0;
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "radardirection_mp", self.team, self.killstreak_id );
	level notify( "uav_update" );
// SP = 0x0 - check OK
}

// 0x2140
playspyplanefx()
{
	wait 0.1;
	playfxontag( level.fx_spyplane_burner, self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x2164
playspyplaneafterburnerfx()
{
	self endon( "death" );
	wait 0.1;
	playfxontag( level.fx_spyplane_afterburner, self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x218C
playcounterspyplanefx()
{
	wait 0.1;
	playfxontag( level.fx_cuav_burner, self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x21B4
playcounterspyplaneafterburnerfx()
{
	self endon( "death" );
	wait 0.1;
	playfxontag( level.fx_cuav_afterburner, self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x21DC
playuavpilotdialog( dialog, owner, delaytime )
{
	wait delaytime;
	self.pilotvoicenumber = owner.bcvoicenumber + 1;
	soundalias = level.teamprefix[owner.team] + self.pilotvoicenumber + "_" + dialog;
	wait 0.2;
	owner playlocalsound( soundalias );
	owner.pilotisspeaking = 1;
	owner thread waitplaybacktime( soundalias );
	owner waittill_any( soundalias, "death", "disconnect" );
	owner.pilotisspeaking = 0;
// SP = 0x0 - check OK
}

// 0x2294
generateplane( owner, timeinair, iscounter )
{
	uavrig = level.uavrig;
	attach_angle = -90;
	uavrig = level.counteruavrig;
	attach_angle = 90;
	plane = spawn( "script_model", uavrig gettagorigin( "tag_origin" ) );
	plane setmodel( level.counteruavmodel );
	plane.targetname = "counteruav";
	plane setmodel( level.spyplanemodel );
	plane.targetname = "uav";
	plane setteam( owner.team );
	plane setowner( owner );
	target_set( plane );
	plane thread play_light_fx( iscounter );
	plane.owner = owner;
	plane.team = owner.team;
	plane thread updatevisibility();
	plane thread maps\mp\_heatseekingmissile::missiletarget_proximitydetonateincomingmissile( "crashing" );
	level.plane[self.team] = plane;
	plane.health_low = level.u2_maxhealth * 0.4;
	plane.maxhealth = level.u2_maxhealth;
	plane.health = 99999;
	plane.rocketdamageoneshot = level.u2_maxhealth + 1;
	plane.rocketdamagetwoshot = level.u2_maxhealth / 2 + 1;
	plane setdrawinfrared( 1 );
	zoffset = randomintrange( 4000, 5000 );
	angle = randomint( 360 );
	radiusoffset = randomint( 1000 ) + 3000;
	radiusoffset = randomint( 1000 ) + 4000;
	xoffset = cos( angle ) * radiusoffset;
	yoffset = sin( angle ) * radiusoffset;
	anglevector = vectornormalize( ( xoffset, yoffset, zoffset ) );
	anglevector *= randomintrange( 4000, 5000 );
	plane linkto( uavrig, "tag_origin", anglevector, ( 0, angle + attach_angle, -10 ) );
	plane linkto( uavrig, "tag_origin", anglevector, ( 0, angle + attach_angle, 0 ) );
	return plane;
// SP = 0x0 - check OK
}

// 0x24D8
play_light_fx( iscounter )
{
	self endon( "death" );
	wait 0.1;
	playfxontag( level.counteruavlight, self, "tag_origin" );
	playfxontag( level.uavlight, self, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x251C
updatevisibility()
{
	self endon( "death" );
	self setvisibletoallexceptteam( self.team );
	self setvisibletoall();
	self setinvisibletoplayer( self.owner );
	level waittill( "joined_team" );
// SP = 0x0 - check OK
}

// 0x2564
debugline( frompoint, topoint, color, durationframes )
{
/#
	i = 0;
	line( frompoint, topoint, color );
	wait 0.05;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x25AC
plane_damage_monitor( isspyplane )
{
	self endon( "death" );
	self endon( "crashing" );
	self endon( "delete" );
	self setcandamage( 1 );
	self.damagetaken = 0;
	self waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weapon );
	friendlyfire = maps\mp\gametypes\_weaponobjects::friendlyfirecheck( self.owner, attacker );
	isvalidattacker = 1;
	isvalidattacker = attacker.team != self.team;
	attacker thread maps\mp\gametypes\_damagefeedback::updatedamagefeedback( type );
	self.attacker = attacker;
	switch ( type )
	{
		case "MOD_PISTOL_BULLET":
		case "MOD_PROJECTILE":
			self.damagetaken += int( damage * level.cac_armorpiercing_data );
			self.damagetaken += damage;
			break;
		case "MOD_RIFLE_BULLET":
			self.damagetaken += self.rocketdamageoneshot;
			break;
		default:
			self.damagetaken += damage;
			break;
	}
	self.health += damage;
	killstreakreference = "radar_mp";
	killstreakreference = "counteruav_mp";
	attacker notify( "destroyed_spyplane" );
	weaponstatname = "destroyed";
	switch ( weapon )
	{
		case "auto_tow_mp":
		case "tow_turret_drop_mp":
		case "tow_turret_mp":
			weaponstatname = "kills";
			break;
	}
	attacker addweaponstat( weapon, weaponstatname, 1 );
	level.globalkillstreaksdestroyed++;
	attacker addweaponstat( killstreakreference, "destroyed", 1 );
	maps\mp\_challenges::destroyedaircraft( attacker, weapon );
	level thread maps\mp\_popups::displayteammessagetoall( &"KILLSTREAK_DESTROYED_UAV", attacker );
	self.owner maps\mp\gametypes\_globallogic_audio::leaderdialogonplayer( "uav_destroyed", "item_destroyed" );
	thread maps\mp\_scoreevents::processscoreevent( "destroyed_uav", attacker, self.owner, weapon );
	attacker maps\mp\_challenges::addflyswatterstat( weapon, self );
	spyplane_death();
	level thread maps\mp\_popups::displayteammessagetoall( &"KILLSTREAK_DESTROYED_COUNTERUAV", attacker );
	self.owner maps\mp\gametypes\_globallogic_audio::leaderdialogonplayer( "cuav_destroyed", "item_destroyed" );
	thread maps\mp\_scoreevents::processscoreevent( "destroyed_counter_uav", attacker, self.owner, weapon );
	attacker maps\mp\_challenges::addflyswatterstat( weapon, self );
	counteruavplane_death();
	return;
// SP = 0x0 - check OK
}

// 0x28E4
plane_health()
{
	self endon( "death" );
	self endon( "crashing" );
	self.currentstate = "ok";
	self.laststate = "ok";
	self.currentstate = "damaged";
	self.laststate = self.currentstate;
	self thread playdamagefx();
/#
	debug_print3d_simple( "Health: " + ( self.maxhealth - self.damagetaken ), self, vector_scale( ( 0, 0, 1 ), 100 ), 20 );
#/
	wait 1;
// SP = 0x0 - check OK
}

// 0x2984
playdamagefx()
{
	self endon( "death" );
	self endon( "crashing" );
	playfxontag( level.fx_u2_damage_trail, self, "tag_body" );
// SP = 0x0 - check OK
}

// 0x29A8
u2_crash()
{
	self notify( "crashing" );
	playfxontag( level.fx_u2_explode, self, "tag_origin" );
	wait 0.1;
	self setmodel( "tag_origin" );
	wait 0.2;
	self notify( "delete" );
	self delete();
// SP = 0x0 - check OK
}

// 0x29F8
counteruavplane_death_waiter()
{
	self endon( "delete" );
	self endon( "leaving" );
	self waittill( "death" );
	counteruavplane_death();
// SP = 0x0 - check OK
}

// 0x2A1C
spyplane_death_waiter()
{
	self endon( "delete" );
	self endon( "leaving" );
	self waittill( "death" );
	spyplane_death();
// SP = 0x0 - check OK
}

// 0x2A40
counteruavplane_death()
{
	self clearclientflag( 11 );
	self playsound( "evt_helicopter_midair_exp" );
	self removeactivecounteruav();
	target_remove( self );
	self thread u2_crash();
// SP = 0x0 - check OK
}

// 0x2A88
spyplane_death()
{
	self playsound( "evt_helicopter_midair_exp" );
	self removeactiveuav();
	target_remove( self );
	self thread u2_crash();
// SP = 0x0 - check OK
}

// 0x2ACC
counteruavplane_timeout( timeinair, owner )
{
	self endon( "death" );
	self endon( "delete" );
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	timeremaining = timeinair * 1000;
	self waittilltimeoutmigrationaware( timeremaining, owner );
	self clearclientflag( 11 );
	self plane_leave();
	wait level.counteruavplaneexittime;
	self removeactivecounteruav();
	target_remove( self );
	self delete();
// SP = 0x0 - check OK
}

// 0x2B48
satellite_timeout( timeinair, owner )
{
	self endon( "death" );
	self endon( "delete" );
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	timeremaining = timeinair * 1000;
	self waittilltimeoutmigrationaware( timeremaining, owner );
	self removeactivesatellite();
	self delete();
// SP = 0x0 - check OK
}

// 0x2B9C
watchforemp()
{
	self endon( "death" );
	self endon( "delete" );
	self waittill( "emp_deployed", attacker );
	weapon = "emp_mp";
	maps\mp\_challenges::destroyedaircraft( attacker, weapon );
	thread maps\mp\_scoreevents::processscoreevent( "destroyed_satellite", attacker, self.owner, weapon );
	attacker maps\mp\_challenges::addflyswatterstat( weapon, self );
	self removeactivesatellite();
	self delete();
// SP = 0x0 - check OK
}

// 0x2C0C
spyplane_timeout( timeinair, owner )
{
	self endon( "death" );
	self endon( "delete" );
	self endon( "crashing" );
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
	timeremaining = timeinair * 1000;
	self waittilltimeoutmigrationaware( timeremaining, owner );
	self plane_leave();
	self.leaving = 1;
	self removeactiveuav();
	wait level.spyplaneexittime;
	target_remove( self );
	self delete();
// SP = 0x0 - check OK
}

// 0x2C8C
waittilltimeoutmigrationaware( timeremaining, owner )
{
	owner endon( "disconnect" );
	self.endtime = GetTime() + timeremaining;
	event = level waittill_any_timeout( timeremaining / 1000, "game_ended", "host_migration_begin" );
	timeremaining = self.endtime - GetTime();
	maps\mp\gametypes\_hostmigration::waittillhostmigrationdone();
// SP = 0x0 - check OK
}

// 0x2CF4
planestoploop( time )
{
	self endon( "death" );
	wait time;
	self stoploopsound();
// SP = 0x0 - check OK
}

// 0x2D14
plane_leave()
{
	self unlink();
	self thread playcounterspyplaneafterburnerfx();
	self playsound( "veh_kls_uav_afterburner" );
	self thread play_light_fx( 1 );
	self thread planestoploop( 1 );
	self thread playspyplaneafterburnerfx();
	self playsound( "veh_kls_spy_afterburner" );
	self thread play_light_fx( 0 );
	self thread planestoploop( 1 );
	self.currentstate = "leaving";
	playfxontag( level.fx_u2_damage_trail, self, "tag_body" );
	mult = getdvarintdefault( "scr_spymult", 20000 );
	tries = 10;
	yaw = 0;
	exitvector = anglestoforward( self.angles + ( 0, yaw, 0 ) ) * 20000;
	self thread playcounterspyplanefx();
	exitvector *= 1;
	exitpoint = ( self.origin[0] + exitvector[0], self.origin[1] + exitvector[1], self.origin[2] - 2500 );
	exitpoint = self.origin + exitvector;
	nfz = crossesnoflyzone( self.origin, exitpoint );
	yaw *= -1;
	yaw += 10;
	yaw *= -1;
	tries--;
	tries = 0;
	self thread flattenyaw( self.angles[1] + yaw );
	self thread flattenroll();
	self moveto( exitpoint, level.spyplaneexittime, 0, 0 );
	self notify( "leaving" );
// SP = 0x0 - check OK
}

// 0x2F00
flattenroll()
{
	self endon( "death" );
	self.angles = ( self.angles[0], self.angles[1], self.angles[2] + 2.5 );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2F48
flattenyaw( goal )
{
	self endon( "death" );
	increment = 3;
	increment *= -1;
	self.angles = ( self.angles[0], self.angles[1] + increment, self.angles[2] );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2FB4
uavtracker()
{
	level endon( "game_ended" );
	level waittill( "uav_update" );
	foreach ( team in level.teams )
	{
		updateteamuavstatus( team );
	}
	updateplayersuavstatus();
// SP = 0x0 - check OK
}

// 0x301C
updateteamuavstatus( team )
{
	activeuavs = level.activeuavs[team];
	activesatellites = level.activesatellites[team];
	radarmode = 1;
	maps\mp\killstreaks\_radar::setteamspyplanewrapper( team, 0 );
	maps\mp\killstreaks\_radar::setteamsatellitewrapper( team, 1 );
	return;
	maps\mp\killstreaks\_radar::setteamsatellitewrapper( team, 0 );
	maps\mp\killstreaks\_radar::setteamspyplanewrapper( team, 0 );
	return;
	radarmode = 2;
	maps\mp\killstreaks\_radar::setteamspyplanewrapper( team, radarmode );
// SP = 0x0 - check OK
}

// 0x309C
updateplayersuavstatus()
{
	i = 0;
	player = level.players[i];
/#
	assert( IsDefined( player.entnum ) );
#/
	player.entnum = player getentitynumber();
	activeuavs = level.activeuavs[player.entnum];
	activesatellites = level.activesatellites[player.entnum];
	player.hassatellite = 1;
	player.hasspyplane = 0;
	player setclientuivisibilityflag( "radar_client", 1 );
	player.hassatellite = 0;
	player.hasspyplane = 0;
	player setclientuivisibilityflag( "radar_client", 0 );
	spyplaneupdatespeed = 2;
	spyplaneupdatespeed = 1;
	player setclientuivisibilityflag( "radar_client", 1 );
	player.hasspyplane = spyplaneupdatespeed;
	i++;
// SP = 0x0 - check OK
}
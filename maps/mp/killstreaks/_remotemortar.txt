// maps/mp/killstreaks/_remotemortar.gsc

#include maps\mp\killstreaks\_spyplane;
#include maps\mp\_popups;
#include maps\mp\_challenges;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_weapon_utils;
#include maps\mp\gametypes\_damagefeedback;
#include maps\mp\gametypes\_weaponobjects;
#include maps\mp\gametypes\_hostmigration;
#include maps\mp\gametypes\_spawning;
#include maps\mp\gametypes\_hud;
#include maps\mp\gametypes\_gameobjects;
#include maps\mp\_heatseekingmissile;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\gametypes\_spawnlogic;
#include maps\mp\killstreaks\_helicopter;
#include maps\mp\killstreaks\_airsupport;
#include maps\mp\killstreaks\_killstreaks;
#include common_scripts\utility;
#include maps\mp\gametypes\_hud_util;
#include maps\mp\_utility;


// 0x1760
init()
{
	precachemodel( "veh_t6_drone_pegasus_mp" );
	precacheshader( "compass_lodestar" );
	precacheitem( "remote_mortar_missile_mp" );
	precachestring( &"remotemortar" );
	level.remote_mortar_fx["laserTarget"] = loadfx( "weapon/remote_mortar/fx_rmt_mortar_laser_loop" );
	level.remote_mortar_fx["missileExplode"] = loadfx( "weapon/remote_mortar/fx_rmt_mortar_explosion" );
	registerkillstreak( "remote_mortar_mp", "remote_mortar_mp", "killstreak_remote_mortar", "remote_mortar_used", ::remote_mortar_killstreak, 1 );
	registerkillstreakaltweapon( "remote_mortar_mp", "remote_mortar_missile_mp" );
	registerkillstreakstrings( "remote_mortar_mp", &"KILLSTREAK_EARNED_REMOTE_MORTAR", &"KILLSTREAK_REMOTE_MORTAR_NOT_AVAILABLE", &"KILLSTREAK_REMOTE_MORTAR_INBOUND" );
	registerkillstreakdialog( "remote_mortar_mp", "mpl_killstreak_planemortar", "kls_reaper_used", "", "kls_reaper_enemy", "", "kls_reaper_ready" );
	registerkillstreakdevdvar( "remote_mortar_mp", "scr_givemortarremote" );
	setkillstreakteamkillpenaltyscale( "remote_mortar_mp", level.teamkillreducedpenalty );
	overrideentitycameraindemo( "remote_mortar_mp", 1 );
	set_dvar_float_if_unset( "scr_remote_mortar_lifetime", 45 );
	level.remore_mortar_infrared_vision = "remote_mortar_infrared";
	level.remore_mortar_enhanced_vision = "remote_mortar_enhanced";
	minimaporigins = getentarray( "minimap_corner", "targetname" );
	uavorigin = maps\mp\gametypes\_spawnlogic::findboxcenter( minimaporigins[0].origin, minimaporigins[1].origin );
	uavorigin = ( 0, 0, 0 );
	uavorigin += vector_scale( ( 1, 0, 0 ), 1200 );
	uavorigin += vector_scale( ( 0, 1, 0 ), 2000 );
	uavorigin += vector_scale( ( 0, -1, 0 ), 750 );
	uavorigin += vector_scale( ( -1, 0, 0 ), 500 );
	level.remotemortarrig = spawn( "script_model", uavorigin );
	level.remotemortarrig setmodel( "tag_origin" );
	level.remotemortarrig.angles = vector_scale( ( 0, 1, 0 ), 115 );
	level.remotemortarrig hide();
	level.remotemortarrig thread rotaterig( 1 );
	level.remote_zoffset = 8000;
	level.remote_radiusoffset = 9000;
	remote_mortar_height = getstruct( "remote_mortar_height", "targetname" );
	level.remote_radiusoffset = remote_mortar_height.origin[2] / level.remote_zoffset * level.remote_radiusoffset;
	level.remote_zoffset = remote_mortar_height.origin[2];
// SP = 0x0 - check OK
}

// 0x19E0
remote_mortar_killstreak( hardpointtype )
{
/#
	assert( hardpointtype == "remote_mortar_mp" );
#/
	return 0;
	self iprintlnbold( &"KILLSTREAK_REMOTE_MORTAR_NOT_USABLE" );
	return 0;
	self setusingremote( hardpointtype );
	self freezecontrolswrapper( 1 );
	self disableweaponcycling();
	result = self maps\mp\killstreaks\_killstreaks::initridekillstreak( "qrdrone" );
	self notify( "remote_mortar_unlock" );
	self clearusingremote();
	self enableweaponcycling();
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( hardpointtype, self.team, 0, 1 );
	self clearusingremote();
	self enableweaponcycling();
	self notify( "remote_mortar_unlock" );
	return 0;
	self.killstreak_waitamount = GetDvarFloat( #"0xF9AB897A" ) * 1000;
	remote = self remote_mortar_spawn();
	remote setdrawinfrared( 1 );
	remote thread remote_killstreak_abort();
	remote thread remote_killstreak_game_end();
	remote thread remote_owner_exit();
	remote thread remote_owner_teamkillkicked();
	remote thread remote_damage_think();
	remote thread play_lockon_sounds( self );
	remote thread maps\mp\_heatseekingmissile::missiletarget_lockonmonitor( self, "remote_end" );
	remote thread maps\mp\_heatseekingmissile::missiletarget_proximitydetonateincomingmissile( "crashing" );
	remote.killstreak_id = killstreak_id;
	remote thread play_remote_fx();
	remote playloopsound( "mpl_ks_reaper_exterior_loop", 1 );
	self.pilottalking = 0;
	remote.copilotvoicenumber = self.bcvoicenumber;
	remote.pilotvoicenumber = self.bcvoicenumber + 1;
	remote.pilotvoicenumber = 0;
	self clientnotify( "krms" );
	self player_linkto_remote( remote );
	self freezecontrolswrapper( 0 );
	self thread player_aim_think( remote );
	self thread player_fire_think( remote );
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( "remote_mortar_mp", self.pers["team"] );
	remote thread remote_killstreak_copilot( remote.copilotvoicenumber );
	level.globalkillstreakscalled++;
	self addweaponstat( "remote_mortar_mp", "used", 1 );
	self thread visionswitch();
	level waittill( "remote_unlinked" );
	remote stoploopsound( 4 );
	return 1;
	self clientnotify( "krme" );
	self clearclientflag( 1 );
	self clientnotify( "nofutz" );
	self clearusingremote();
	return 1;
// SP = 0x0 - check OK
}

// 0x1CC4
remote_killstreak_copilot( voice )
{
	level endon( "remote_end" );
	wait 2.5;
	self thread playpilotdialog( "reaper_used", 0, voice );
	wait randomfloatrange( 4.5, 15 );
// SP = 0x0 - check OK
}

// 0x1D0C
remote_killstreak_abort()
{
	level endon( "remote_end" );
/#
	assert( IsDefined( self.owner ) );
#/
/#
	assert( isplayer( self.owner ) );
#/
	self.owner waittill_any( "disconnect", "joined_team", "joined_spectators" );
	self thread remote_killstreak_end( 0, 1 );
// SP = 0x0 - check OK
}

// 0x1D68
remote_owner_teamkillkicked( hardpointtype )
{
	level endon( "remote_end" );
	self.owner waittill( "teamKillKicked" );
	self thread remote_killstreak_end();
// SP = 0x0 - check OK
}

// 0x1D8C
remote_owner_exit()
{
	level endon( "remote_end" );
	wait 1;
	timeused = 0;
	timeused += 0.05;
	self thread remote_killstreak_end();
	return;
	wait 0.05;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1DF4
remote_killstreak_game_end()
{
	level endon( "remote_end" );
/#
	assert( IsDefined( self.owner ) );
#/
/#
	assert( isplayer( self.owner ) );
#/
	level waittill( "game_ended" );
	self thread remote_killstreak_end();
// SP = 0x0 - check OK
}

// 0x1E3C
remote_mortar_spawn()
{
	self setclientflag( 1 );
	self clientnotify( "reapfutz" );
	remote = spawnplane( self, "script_model", level.remotemortarrig gettagorigin( "tag_origin" ) );
/#
	assert( IsDefined( remote ) );
#/
	remote setmodel( "veh_t6_drone_pegasus_mp" );
	remote.targetname = "remote_mortar";
	remote setowner( self );
	remote setteam( self.team );
	remote.team = self.team;
	remote.owner = self;
	remote.numflares = 2;
	remote.flareoffset = vector_scale( ( 0, 0, -1 ), 256 );
	remote.attackers = [];
	remote.attackerdata = [];
	remote.attackerdamage = [];
	remote.flareattackerdamage = [];
	remote.pilotvoicenumber = self.bcvoicenumber + 1;
	remote.pilotvoicenumber = 0;
	angle = randomint( 360 );
	xoffset = cos( angle ) * level.remote_radiusoffset;
	yoffset = sin( angle ) * level.remote_radiusoffset;
	anglevector = vectornormalize( ( xoffset, yoffset, level.remote_zoffset ) );
	anglevector *= 6100;
	remote linkto( level.remotemortarrig, "tag_origin", anglevector, ( 0, angle - 90, 0 ) );
	remoteobjidfriendly = maps\mp\gametypes\_gameobjects::getnextobjid();
	objective_add( remoteobjidfriendly, "invisible", remote.origin, &"remotemortar", self );
	objective_state( remoteobjidfriendly, "active" );
	objective_onentity( remoteobjidfriendly, remote );
	objective_team( remoteobjidfriendly, self.team );
	self.remoteobjidfriendly = remoteobjidfriendly;
	remote.fx = spawn( "script_model", ( 0, 0, 0 ) );
	remote.fx setmodel( "tag_origin" );
	remote.fx setinvisibletoplayer( remote.owner, 1 );
	remote remote_mortar_visibility();
	target_setturretaquire( remote, 1 );
	return remote;
// SP = 0x0 - check OK
}

// 0x2064
rotaterig( clockwise )
{
	turn = 360;
	turn = -360;
	self rotateyaw( turn, 30 );
	wait 30;
	self rotateyaw( turn, 45 );
	wait 45;
// SP = 0x0 - check OK
}

// 0x20B4
remote_mortar_visibility()
{
	players = get_players();
	foreach ( player in players )
	{
		self setinvisibletoplayer( player );
		self setvisibletoplayer( player );
	}
// SP = 0x0 - check OK
}

// 0x211C
play_lockon_sounds( player )
{
	player endon( "disconnect" );
	self endon( "death" );
	self endon( "remote_end" );
	self.locksounds = spawn( "script_model", self.origin );
	wait 0.1;
	self.locksounds linkto( self, "tag_player" );
	self waittill( "locking on" );
	self playsoundtoplayer( "uin_alert_lockon", player );
	wait 0.125;
	self playsoundtoplayer( "uin_alert_lockon", player );
	wait 0.125;
// SP = 0x0 - check OK
}

// 0x21EC
enemy_locking()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2208
enemy_locked()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2224
create_remote_mortar_hud( remote )
{
	self.missile_hud = newclienthudelem( self );
	self.missile_hud.alignx = "left";
	self.missile_hud.aligny = "bottom";
	self.missile_hud.horzalign = "user_left";
	self.missile_hud.vertalign = "user_bottom";
	self.missile_hud.font = "small";
	self.missile_hud settext( "[{+attack}]" + "Fire Missile" );
	self.missile_hud.hidewheninmenu = 1;
	self.missile_hud.hidewhenindemo = 1;
	self.missile_hud.x = 5;
	self.missile_hud.y = -40;
	self.missile_hud.fontscale = 1.25;
	self.zoom_hud = newclienthudelem( self );
	self.zoom_hud.alignx = "left";
	self.zoom_hud.aligny = "bottom";
	self.zoom_hud.horzalign = "user_left";
	self.zoom_hud.vertalign = "user_bottom";
	self.zoom_hud.font = "small";
	self.zoom_hud settext( &"KILLSTREAK_INCREASE_ZOOM" );
	self.zoom_hud.hidewheninmenu = 1;
	self.zoom_hud.hidewhenindemo = 1;
	self.zoom_hud.x = 5;
	self.zoom_hud.y = -25;
	self.zoom_hud.fontscale = 1.25;
	self.hud_prompt_exit = newclienthudelem( self );
	self.hud_prompt_exit.alignx = "left";
	self.hud_prompt_exit.aligny = "bottom";
	self.hud_prompt_exit.horzalign = "user_left";
	self.hud_prompt_exit.vertalign = "user_bottom";
	self.hud_prompt_exit.font = "small";
	self.hud_prompt_exit.fontscale = 1.25;
	self.hud_prompt_exit.hidewheninmenu = 1;
	self.hud_prompt_exit.hidewhenindemo = 1;
	self.hud_prompt_exit.archived = 0;
	self.hud_prompt_exit.x = 5;
	self.hud_prompt_exit.y = -10;
	self.hud_prompt_exit settext( level.remoteexithint );
	self thread fade_out_hint_hud( remote );
// SP = 0x0 - check OK
}

// 0x2420
fade_out_hint_hud( remote )
{
	self endon( "disconnect" );
	remote endon( "death" );
	wait 8;
	time = 0;
	return;
	self.missile_hud.alpha -= 0.025;
	self.zoom_hud.alpha -= 0.025;
	time += 0.05;
	wait 0.05;
	self.missile_hud.alpha = 0;
	self.zoom_hud.alpha = 0;
// SP = 0x0 - check OK
}

// 0x24B8
remove_hud()
{
	self.missile_hud destroy();
	self.zoom_hud destroy();
	self.hud_prompt_exit destroy();
// SP = 0x0 - check OK
}

// 0x2508
remote_killstreak_end( explode, disconnected )
{
	level notify( "remote_end" );
	explode = 0;
	disconnected = 0;
	self.owner sendkillstreakdamageevent( 600 );
	self.owner thread maps\mp\gametypes\_hud::fadetoblackforxsec( 0.5, 0.5, 0.1, 0.25 );
	wait 1;
	self.owner sendkillstreakdamageevent( 600 );
	self.owner thread maps\mp\gametypes\_hud::fadetoblackforxsec( 0, 0.25, 0.1, 0.25 );
	wait 0.25;
	self.owner unlink();
	self.owner.killstreak_waitamount = undefined;
	self.owner enableweaponcycling();
	self.owner remove_hud();
	self.owner freezecontrolswrapper( 1 );
	self maps\mp\gametypes\_spawning::remove_tvmissile_influencers();
	objective_delete( self.owner.remoteobjidfriendly );
	releaseobjid( self.owner.remoteobjidfriendly );
	target_setturretaquire( self, 0 );
	level notify( "remote_unlinked" );
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "remote_mortar_mp", self.team, self.killstreak_id );
	self.owner setinfraredvision( 0 );
	self.owner useservervisionset( 0 );
	self.fx delete();
	self remote_explode();
	self remote_leave();
// SP = 0x0 - check OK
}

// 0x26C4
player_linkto_remote( remote )
{
	leftarc = 40;
	rightarc = 40;
	uparc = 25;
	downarc = 65;
	leftarc = level.remotemotarviewleft;
	rightarc = level.remotemotarviewright;
	uparc = level.remotemotarviewup;
	downarc = level.remotemotarviewdown;
/#
	leftarc = getdvarintdefault( "scr_remotemortar_right", leftarc );
	rightarc = getdvarintdefault( "scr_remotemortar_left", rightarc );
	uparc = getdvarintdefault( "scr_remotemortar_up", uparc );
	downarc = getdvarintdefault( "scr_remotemortar_down", downarc );
#/
	self playerlinkweaponviewtodelta( remote, "tag_player", 1, leftarc, rightarc, uparc, downarc );
	self player_center_view();
// SP = 0x0 - check OK
}

// 0x279C
player_center_view( org )
{
	wait 0.05;
	lookvec = vectortoangles( level.uavrig.origin - self geteye() );
	self setplayerangles( lookvec );
// SP = 0x0 - check OK
}

// 0x27D4
player_aim_think( remote )
{
	level endon( "remote_end" );
	wait 0.25;
	playfxontag( level.remote_mortar_fx["laserTarget"], remote.fx, "tag_origin" );
	remote.fx playloopsound( "mpl_ks_reaper_laser" );
	origin = self geteye();
	forward = anglestoforward( self getplayerangles() );
	endpoint = origin + forward * 15000;
	trace = bullettrace( origin, endpoint, 0, remote );
	remote.fx.origin = trace["position"];
	remote.fx.angles = vectortoangles( trace["normal"] );
	removeinfluencer( self.pegasus_influencer );
	self.pegasus_influencer = undefined;
	self.pegasus_influencer = maps\mp\gametypes\_spawning::create_pegasus_influencer( trace["position"], self.team );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x28D0
player_fire_think( remote )
{
	level endon( "remote_end" );
	end_time = GetTime() + self.killstreak_waitamount;
	shot = 0;
	self.active_pegasus = undefined;
	wait 0.05;
	self playlocalsound( "mpl_ks_reaper_fire" );
	self playrumbleonentity( "sniper_fire" );
	shot = 0;
	remote thread playpilotdialog( "reaper_fire", 0.25, undefined, 0 );
	shot = ( shot + 1 ) % 3;
	origin = self geteye();
	earthquake( 0.3, 0.5, origin, 256 );
	angles = self getplayerangles();
	forward = anglestoforward( angles );
	right = anglestoright( angles );
	up = anglestoup( angles );
	offset = ( ( origin + forward * 100 ) + right * -40 ) + up * -100;
	missile = magicbullet( "remote_mortar_missile_mp", offset, ( origin + forward * 1000 ) + up * -100, self, remote.fx );
	self.active_pegasus = missile;
	missile thread remote_missile_life( remote );
	missile waittill( "death" );
	self playlocalsound( "mpl_ks_reaper_explosion" );
	removeinfluencer( self.pegasus_influencer );
	self.pegasus_influencer = undefined;
	remote thread remote_killstreak_end();
// SP = 0x0 - check OK
}

// 0x2A74
remote_missile_life( remote )
{
	self endon( "death" );
	maps\mp\gametypes\_hostmigration::waitlongdurationwithhostmigrationpause( 6 );
	playfx( level.remote_mortar_fx["missileExplode"], self.origin );
	self delete();
// SP = 0x0 - check OK
}

// 0x2AB4
remote_damage_think()
{
	level endon( "remote_end" );
	self.health = 999999;
	maxhealth = level.heli_amored_maxhealth;
	damagetaken = 0;
	self.lowhealth = 0;
	self setcandamage( 1 );
	target_set( self, vector_scale( ( 0, 0, 1 ), 30 ) );
	self waittill( "damage", damage, attacker, direction_vec, point, meansofdeath, tagname, modelname, partname, weapon );
	self.health = 999999;
	heli_friendlyfire = maps\mp\gametypes\_weaponobjects::friendlyfirecheck( self.owner, attacker );
	attacker maps\mp\gametypes\_damagefeedback::updatedamagefeedback( meansofdeath );
	damage += int( damage * level.cac_armorpiercing_data );
	damage *= level.heli_armor_bulletdamage;
	damage = maxhealth + 1;
	self.owner playlocalsound( "reaper_damaged" );
	self.owner sendkillstreakdamageevent( int( damage ) );
	damagetaken += damage;
	maps\mp\_scoreevents::processscoreevent( "destroyed_remote_mortar", attacker, self.owner, weapon );
	attacker maps\mp\_challenges::addflyswatterstat( weapon, self );
	attacker addweaponstat( weapon, "destroyed_controlled_killstreak", 1 );
	attacker destroyedplayercontrolledaircraft();
	level thread maps\mp\_popups::displayteammessagetoall( &"KILLSTREAK_DESTROYED_REMOTE_MORTAR", attacker );
	self thread remote_killstreak_end( 1 );
	return;
	playfxontag( level.fx_u2_damage_trail, self, "tag_origin" );
	self.lowhealth = 1;
// SP = 0x0 - check OK
}

// 0x2CF4
remote_leave()
{
	level endon( "game_ended" );
	self endon( "death" );
	self unlink();
	tries = 10;
	yaw = 0;
	exitvector = anglestoforward( self.angles + ( 0, yaw, 0 ) ) * 20000;
	exitpoint = ( self.origin[0] + exitvector[0], self.origin[1] + exitvector[1], self.origin[2] - 2500 );
	exitpoint = self.origin + exitvector;
	nfz = crossesnoflyzone( self.origin, exitpoint );
	yaw *= -1;
	yaw += 10;
	yaw *= -1;
	tries--;
	tries = 0;
	self thread maps\mp\killstreaks\_spyplane::flattenyaw( self.angles[1] + yaw );
	self moveto( exitpoint, 8, 4 );
	playfxontag( level.chopper_fx["damage"]["heavy_smoke"], self, "tag_origin" );
	self thread play_afterburner_fx();
	maps\mp\gametypes\_hostmigration::waitlongdurationwithhostmigrationpause( 8 );
	self delete();
// SP = 0x0 - check OK
}

// 0x2E3C
play_remote_fx()
{
	self.exhaustfx = spawn( "script_model", self.origin );
	self.exhaustfx setmodel( "tag_origin" );
	self.exhaustfx linkto( self, "tag_turret", vector_scale( ( 0, 0, 1 ), 25 ) );
	wait 0.1;
	playfxontag( level.fx_cuav_burner, self.exhaustfx, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x2EA0
play_afterburner_fx()
{
	self.exhaustfx = spawn( "script_model", self.origin );
	self.exhaustfx setmodel( "tag_origin" );
	self.exhaustfx linkto( self, "tag_turret", vector_scale( ( 0, 0, 1 ), 25 ) );
	self endon( "death" );
	wait 0.1;
	playfxontag( level.fx_cuav_afterburner, self.exhaustfx, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x2F14
remote_explode()
{
	self notify( "death" );
	self hide();
	forward = anglestoforward( self.angles ) * 200;
	playfx( level.fx_u2_explode, self.origin, forward );
	self playsound( "evt_helicopter_midair_exp" );
	wait 0.2;
	self notify( "delete" );
	self delete();
// SP = 0x0 - check OK
}

// 0x2F78
visionswitch()
{
	self endon( "disconnect" );
	level endon( "remote_end" );
	inverted = 1;
	self setinfraredvision( 1 );
	self useservervisionset( 1 );
	self setvisionsetforplayer( level.remore_mortar_infrared_vision, 1 );
	self setinfraredvision( 1 );
	self setvisionsetforplayer( level.remore_mortar_infrared_vision, 0.5 );
	self playlocalsound( "mpl_ks_reaper_view_select" );
	self setinfraredvision( 0 );
	self setvisionsetforplayer( level.remore_mortar_enhanced_vision, 0.5 );
	self playlocalsound( "mpl_ks_reaper_view_select" );
	inverted = !(inverted);
	wait 0.05;
	wait 0.05;
// SP = 0x0 - check OK
}
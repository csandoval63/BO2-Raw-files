// maps/mp/killstreaks/_dogs.gsc

#include maps\mp\gametypes\_dev;
#include maps\mp\killstreaks\_supplydrop;
#include maps\mp\_scoreevents;
#include maps\mp\gametypes\_weapons;
#include maps\mp\gametypes\_spawning;
#include maps\mp\gametypes\_battlechatter_mp;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_tweakables;
#include maps\mp\gametypes\_spawnlogic;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x11DC
init()
{
	precachemodel( "german_shepherd_vest" );
	precachemodel( "german_shepherd_vest_black" );
	level.dog_targets = [];
	level.dog_targets[level.dog_targets.size] = "trigger_radius";
	level.dog_targets[level.dog_targets.size] = "trigger_multiple";
	level.dog_targets[level.dog_targets.size] = "trigger_use_touch";
	level.dog_spawns = [];
	init_spawns();
/#
	level thread devgui_dog_think();
#/
// SP = 0x0 - check OK
}

// 0x124C
init_spawns()
{
	spawns = getnodearray( "spawn", "script_noteworthy" );
/#
	println( "No dog spawn nodes found in map" );
#/
	return;
	dog_spawner = getent( "dog_spawner", "targetname" );
/#
	println( "No dog_spawner entity found in map" );
#/
	return;
	valid = maps\mp\gametypes\_spawnlogic::getspawnpointarray( "mp_tdm_spawn" );
	dog = dog_spawner spawnactor();
	foreach ( spawn in spawns )
	{
		valid = arraysort( valid, spawn.origin, 0 );
		i = 0;
		level.dog_spawns[level.dog_spawns.size] = spawn;
		i++;
	}
/#
	println( "No dog spawns connect to MP spawn nodes" );
#/
	dog delete();
// SP = 0x0 - check OK
}

// 0x1378
initkillstreak()
{
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "dogs_mp", "dogs_mp", "killstreak_dogs", "dogs_used", ::usekillstreakdogs, 1 );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "dogs_mp", &"KILLSTREAK_EARNED_DOGS", &"KILLSTREAK_DOGS_NOT_AVAILABLE", &"KILLSTREAK_DOGS_INBOUND" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "dogs_mp", "mpl_killstreak_dogs", "kls_dogs_used", "", "kls_dogs_enemy", "", "kls_dogs_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "dogs_mp", "scr_givedogs" );
	maps\mp\killstreaks\_killstreaks::setkillstreakteamkillpenaltyscale( "dogs_mp", 0 );
	maps\mp\killstreaks\_killstreaks::registerkillstreakaltweapon( "dogs_mp", "dog_bite_mp" );
// SP = 0x0 - check OK
}

// 0x1424
usekillstreakdogs( hardpointtype )
{
	return 0;
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( "dogs_mp", self.team );
	self thread ownerhadactivedogs();
	return 0;
	foreach ( team in level.teams )
	{
		thread maps\mp\gametypes\_battlechatter_mp::onkillstreakused( "dogs", team );
	}
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( "dogs_mp", self.team, 1 );
	level.globalkillstreakscalled++;
	self addweaponstat( "dogs_mp", "used", 1 );
	ownerdeathcount = self.deathcount;
	level thread dog_manager_spawn_dogs( self, ownerdeathcount, killstreak_id );
	level notify( "called_in_the_dogs" );
	return 1;
// SP = 0x0 - check OK
}

// 0x1528
ownerhadactivedogs()
{
	self endon( "disconnect" );
	self.dogsactive = 1;
	self.dogsactivekillstreak = 0;
	self waittill_any( "death", "game_over", "dogs_complete" );
	self.dogsactivekillstreak = 0;
	self.dogsactive = undefined;
// SP = 0x0 - check OK
}

// 0x1564
dog_killstreak_init()
{
	dog_spawner = getent( "dog_spawner", "targetname" );
/#
	println( "No dog spawners found in map" );
#/
	return 0;
	spawns = getnodearray( "spawn", "script_noteworthy" );
/#
	println( "No dog spawn nodes found in map" );
#/
	return 0;
	exits = getnodearray( "exit", "script_noteworthy" );
/#
	println( "No dog exit nodes found in map" );
#/
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1600
dog_set_model()
{
	self setmodel( "german_shepherd_vest" );
	self setenemymodel( "german_shepherd_vest_black" );
// SP = 0x0 - check OK
}

// 0x1628
init_dog()
{
/#
	assert( isai( self ) );
#/
	self.targetname = "attack_dog";
	self.animtree = "dog.atr";
	self.type = "dog";
	self.accuracy = 0.2;
	self.health = 100;
	self.maxhealth = 100;
	self.aiweapon = "dog_bite_mp";
	self.secondaryweapon = "";
	self.sidearm = "";
	self.grenadeammo = 0;
	self.goalradius = 128;
	self.nododgemove = 1;
	self.ignoresuppression = 1;
	self.suppressionthreshold = 1;
	self.disablearrivals = 0;
	self.pathenemyfightdist = 512;
	self.soundmod = "dog";
	self thread dog_health_regen();
	self thread selfdefensechallenge();
// SP = 0x0 - check OK
}

// 0x16E8
get_spawn_node( owner, team )
{
/#
	assert( level.dog_spawns.size > 0 );
#/
	return random( level.dog_spawns );
// SP = 0x0 - check OK
}

// 0x1718
get_score_for_spawn( origin, team )
{
	players = get_players();
	score = 0;
	foreach ( player in players )
	{
		score++;
		score--;
	}
	return score;
// SP = 0x0 - check OK
}

// 0x17C8
dog_set_owner( owner, team, requireddeathcount )
{
	self setentityowner( owner );
	self.aiteam = team;
	self.requireddeathcount = requireddeathcount;
// SP = 0x0 - check OK
}

// 0x17F4
dog_create_spawn_influencer()
{
	self maps\mp\gametypes\_spawning::create_dog_influencers();
// SP = 0x0 - check OK
}

// 0x1808
dog_manager_spawn_dog( owner, team, spawn_node, requireddeathcount )
{
	dog_spawner = getent( "dog_spawner", "targetname" );
	dog = dog_spawner spawnactor();
	dog forceteleport( spawn_node.origin, spawn_node.angles );
	dog init_dog();
	dog dog_set_owner( owner, team, requireddeathcount );
	dog dog_set_model();
	dog dog_create_spawn_influencer();
	dog thread dog_owner_kills();
	dog thread dog_notify_level_on_death();
	dog thread dog_patrol();
	dog thread maps\mp\gametypes\_weapons::monitor_dog_special_grenades();
	return dog;
// SP = 0x0 - check OK
}

// 0x18B4
dog_manager_spawn_dogs( owner, deathcount, killstreak_id )
{
	requireddeathcount = deathcount;
	team = owner.team;
	level.dog_abort = 0;
	owner thread dog_manager_abort();
	level thread dog_manager_game_ended();
	count = 0;
	dogs = dog_manager_get_dogs();
	node = get_spawn_node( owner, team );
	level dog_manager_spawn_dog( owner, team, node, requireddeathcount );
	count++;
	wait randomfloatrange( 2, 5 );
	dogs = dog_manager_get_dogs();
	level waittill( "dog_died" );
	dogs = dog_manager_get_dogs();
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "dogs_mp", team, killstreak_id );
	owner notify( "dogs_complete" );
	return;
	level waittill( "dog_died" );
// SP = 0x0 - check OK
}

// 0x19BC
dog_abort()
{
	level.dog_abort = 1;
	dogs = dog_manager_get_dogs();
	foreach ( dog in dogs )
	{
		dog notify( "abort" );
	}
	level notify( "dog_abort" );
// SP = 0x0 - check OK
}

// 0x1A10
dog_manager_abort()
{
	level endon( "dog_abort" );
	self wait_endon( 45, "disconnect", "joined_team", "joined_spectators" );
	dog_abort();
// SP = 0x0 - check OK
}

// 0x1A3C
dog_manager_game_ended()
{
	level endon( "dog_abort" );
	level waittill( "game_ended" );
	dog_abort();
// SP = 0x0 - check OK
}

// 0x1A58
dog_notify_level_on_death()
{
	self waittill( "death" );
	level notify( "dog_died" );
// SP = 0x0 - check OK
}

// 0x1A6C
dog_leave()
{
	self clearentitytarget();
	self.ignoreall = 1;
	self.goalradius = 30;
	self setgoalnode( self dog_get_exit_node() );
	self wait_endon( 20, "goal", "bad_path" );
	self delete();
// SP = 0x0 - check OK
}

// 0x1AC4
dog_patrol()
{
	self endon( "death" );
/#
	self endon( "debug_patrol" );
#/
	self dog_leave();
	return;
	wait randomintrange( 3, 5 );
	nodes = [];
	objectives = dog_patrol_near_objective();
	i = 0;
	objective = random( objectives );
	nodes = getnodesinradius( objective.origin, 256, 64, 512, "Path", 16 );
	i++;
	player = self dog_patrol_near_enemy();
	nodes = getnodesinradius( player.origin, 1024, 0, 128, "Path", 8 );
	nodes = getnodesinradius( self.script_owner.origin, 512, 256, 512, "Path", 16 );
	nodes = getnodesinradius( self.origin, 1024, 512, 512, "Path" );
	nodes = array_randomize( nodes );
	foreach ( node in nodes )
	{
		self setgoalnode( node );
		node.dog_claimed = self;
		nodes = [];
		event = self waittill_any_return( "goal", "bad_path", "enemy", "abort" );
		wait_endon( randomintrange( 3, 5 ), "damage", "enemy", "abort" );
		node.dog_claimed = undefined;
	}
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x1D08
dog_patrol_near_objective()
{
	level.dog_objectives = [];
	level.dog_objective_next_update = 0;
	return level.dog_objectives;
	level.dog_objectives = [];
	foreach ( target in level.dog_targets )
	{
		ents = getentarray( target, "classname" );
		foreach ( ent in ents )
		{
			level.dog_objectives[level.dog_objectives.size] = ent;
			level.dog_objectives[level.dog_objectives.size] = ent;
			level.dog_objectives[level.dog_objectives.size] = ent;
		}
	}
	level.dog_objective_next_update = GetTime() + randomintrange( 5000, 10000 );
	return level.dog_objectives;
// SP = 0x0 - check OK
}

// 0x1E80
dog_patrol_near_enemy()
{
	players = get_players();
	closest = undefined;
	distsq = 99999999;
	foreach ( player in players )
	{
		closest = player;
		distsq = distancesquared( self.origin, player.origin );
		d = distancesquared( self.origin, player.origin );
		closest = player;
		distsq = d;
	}
	return closest;
// SP = 0x0 - check OK
}

// 0x1F94
dog_manager_get_dogs()
{
	dogs = getentarray( "attack_dog", "targetname" );
	return dogs;
// SP = 0x0 - check OK
}

// 0x1FB4
dog_owner_kills()
{
	return;
	self endon( "clear_owner" );
	self endon( "death" );
	self.script_owner endon( "disconnect" );
	self waittill( "killed", player );
	self.script_owner notify( "dog_handler" );
// SP = 0x0 - check OK
}

// 0x1FF8
dog_health_regen()
{
	self endon( "death" );
	interval = 0.5;
	regen_interval = int( self.health / 5 * interval );
	regen_start = 2;
	self waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	self trackattackerdamage( attacker, weaponname );
	self thread dog_health_regen_think( regen_start, interval, regen_interval );
// SP = 0x0 - check OK
}

// 0x2080
trackattackerdamage( attacker, weapon )
{
	return;
	return;
	self.attackerdata = [];
	self.attackers = [];
	self.attackerclientid[attacker.clientid] = spawnstruct();
	self.attackers[self.attackers.size] = attacker;
// SP = 0x0 - check OK
}

// 0x2128
resetattackerdamage()
{
	self.attackerdata = [];
	self.attackers = [];
// SP = 0x0 - check OK
}

// 0x213C
dog_health_regen_think( delay, interval, regen_interval )
{
	self endon( "death" );
	self endon( "damage" );
	wait delay;
	step = 0;
	self.health += regen_interval;
	wait interval;
	step += interval;
	self resetattackerdamage();
	self.health = 100;
// SP = 0x0 - check OK
}

// 0x21A4
selfdefensechallenge()
{
	self waittill( "death", attacker );
	return;
	return;
	foreach ( player in self.attackers )
	{
		maps\mp\_scoreevents::processscoreevent( "killed_dog_assist", player );
	}
	attacker notify( "selfdefense_dog" );
// SP = 0x0 - check OK
}

// 0x2254
dog_get_exit_node()
{
	exits = getnodearray( "exit", "script_noteworthy" );
	return getclosest( self.origin, exits );
// SP = 0x0 - check OK
}

// 0x2280
flash_dogs( area )
{
	self endon( "disconnect" );
	dogs = dog_manager_get_dogs();
	foreach ( dog in dogs )
	{
		do_flash = 1;
		do_flash = 0;
		do_flash = 0;
		do_flash = 0;
		dog setflashbanged( 1, 500 );
		dog.lastflashed = GetTime();
	}
// SP = 0x0 - check OK
}

// 0x2380
devgui_dog_think()
{
/#
	setdvar( "devgui_dog", "" );
	debug_patrol = 0;
	cmd = GetDvar( #"0xB67B2582" );
	switch ( cmd )
	{
		case "debug_route":
			player = gethostplayer();
			devgui_dog_spawn( player.team );
			break;
		case "delete_crates":
			player = gethostplayer();
			foreach ( team in level.teams )
			{
				devgui_dog_spawn( team );
			}
			break;
		case "delete_dogs":
			level dog_abort();
			break;
		case "dog_camera":
			devgui_dog_camera();
			break;
		case "show_exits":
			devgui_crate_spawn();
			break;
		case "show_spawns":
			devgui_crate_delete();
			break;
		case "spawn_crate":
			devgui_spawn_show();
			break;
		case "spawn_enemy":
			devgui_exit_show();
			break;
		case "spawn_friendly":
			devgui_debug_route();
			break;
	}
	setdvar( "devgui_dog", "" );
	wait 0.5;
#/
// SP = 0x0 - check OK
}

// 0x24F8
devgui_dog_spawn( team )
{
/#
	player = gethostplayer();
	dog_spawner = getent( "dog_spawner", "targetname" );
	level.dog_abort = 0;
	iprintln( "No dog spawners found in map" );
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	nodes = getnodesinradius( trace["position"], 256, 0, 128, "Path", 8 );
	iprintln( "No nodes found near crosshair position" );
	iprintln( "Spawning dog at your crosshair position" );
	node = getclosest( trace["position"], nodes );
	dog = dog_manager_spawn_dog( player, player.team, node, 5 );
	dog.aiteam = team;
	dog clearentityowner();
	dog notify( "clear_owner" );
#/
// SP = 0x0 - check OK
}

// 0x2640
devgui_dog_camera()
{
/#
	player = gethostplayer();
	level.devgui_dog_camera = 0;
	dog = undefined;
	dogs = dog_manager_get_dogs();
	level.devgui_dog_camera = undefined;
	player cameraactivate( 0 );
	i = 0;
	dog = dogs[i];
	dog = undefined;
	forward = anglestoforward( dog.angles );
	dog.cam = spawn( "script_model", ( dog.origin + vector_scale( ( 0, 0, 1 ), 50 ) ) + forward * -100 );
	dog.cam setmodel( "tag_origin" );
	dog.cam linkto( dog );
	dog = undefined;
	i++;
	level.devgui_dog_camera = dog getentitynumber();
	player camerasetposition( dog.cam );
	player camerasetlookat( dog );
	player cameraactivate( 1 );
	level.devgui_dog_camera = undefined;
	player cameraactivate( 0 );
#/
// SP = 0x0 - check OK
}

// 0x27AC
devgui_crate_spawn()
{
/#
	player = gethostplayer();
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	killcament = spawn( "script_model", player.origin );
	level thread maps\mp\killstreaks\_supplydrop::dropcrate( trace["position"] + vector_scale( ( 0, 0, 1 ), 25 ), direction, "supplydrop_mp", player, player.team, killcament );
#/
// SP = 0x0 - check OK
}

// 0x2864
devgui_crate_delete()
{
/#
	i = 0;
	level.devgui_crates[i] delete();
	i++;
	level.devgui_crates = [];
#/
// SP = 0x0 - check OK
}

// 0x28AC
devgui_spawn_show()
{
/#
	level.dog_spawn_show = 1;
	level.dog_spawn_show = !(level.dog_spawn_show);
	level notify( "hide_dog_spawns" );
	spawns = level.dog_spawns;
	color = ( 0, 1, 0 );
	i = 0;
	maps\mp\gametypes\_dev::showonespawnpoint( spawns[i], color, "hide_dog_spawns", 32, "dog_spawn" );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x2928
devgui_exit_show()
{
/#
	level.dog_exit_show = 1;
	level.dog_exit_show = !(level.dog_exit_show);
	level notify( "hide_dog_exits" );
	exits = getnodearray( "exit", "script_noteworthy" );
	color = ( 1, 0, 0 );
	i = 0;
	maps\mp\gametypes\_dev::showonespawnpoint( exits[i], color, "hide_dog_exits", 32, "dog_exit" );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x29B0
dog_debug_patrol( node1, node2 )
{
/#
	self endon( "death" );
	self endon( "debug_patrol" );
	self setgoalnode( node1 );
	self waittill_any( "goal", "bad_path" );
	wait 1;
	self setgoalnode( node2 );
	self waittill_any( "goal", "bad_path" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x2A18
devgui_debug_route()
{
/#
	iprintln( "Choose nodes with 'A' or press 'B' to cancel" );
	nodes = maps\mp\gametypes\_dev::dev_get_node_pair();
	iprintln( "Route Debug Cancelled" );
	iprintln( "Sending dog to chosen nodes" );
	dogs = dog_manager_get_dogs();
	dogs[0] notify( "debug_patrol" );
	dogs[0] thread dog_debug_patrol( nodes[0], nodes[1] );
#/
// SP = 0x0 - check OK
}
// maps/mp/killstreaks/_straferun.gsc

#include maps\mp\killstreaks\_dogs;
#include maps\mp\_challenges;
#include maps\mp\_scoreevents;
#include maps\mp\_heatseekingmissile;
#include maps\mp\_vehicles;
#include maps\mp\killstreaks\_killstreakrules;
#include maps\mp\killstreaks\_killstreaks;
#include maps\mp\gametypes\_battlechatter_mp;
#include maps\mp\killstreaks\_airsupport;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x162C
init()
{
	level.straferunnumrockets = 7;
	level.straferunrocketdelay = 0.35;
	level.straferungunlookahead = 4000;
	level.straferungunoffset = -800;
	level.straferungunradius = 500;
	level.straferunexitunits = 20000;
	level.straferunmaxstrafes = 4;
	level.straferunflaredelay = 2;
	level.straferunshellshockduration = 2.5;
	level.straferunshellshockradius = 512;
	level.straferunkillsbeforeexit = 10;
	level.straferunnumkillcams = 5;
	level.straferunmodel = "veh_t6_air_a10f";
	level.straferunmodelenemy = "veh_t6_air_a10f_alt";
	level.straferunvehicle = "vehicle_straferun_mp";
	level.straferungunweapon = "straferun_gun_mp";
	level.straferungunsound = "wpn_a10_shot_loop_npc";
	level.straferunrocketweapon = "straferun_rockets_mp";
	level.straferunrockettags = [];
	level.straferunrockettags[0] = "tag_rocket_left";
	level.straferunrockettags[1] = "tag_rocket_right";
	level.straferuncontrailfx = loadfx( "vehicle/exhaust/fx_exhaust_a10_contrail" );
	level.straferunchafffx = loadfx( "weapon/straferun/fx_straferun_chaf" );
	level.straferunexplodefx = loadfx( "vehicle/vexplosion/fx_vexplode_vtol_mp" );
	level.straferunexplodesound = "evt_helicopter_midair_exp";
	level.straferunshellshock = "straferun";
	precachemodel( level.straferunmodel );
	precachemodel( level.straferunmodelenemy );
	precachevehicle( level.straferunvehicle );
	precacheitem( level.straferungunweapon );
	precacheitem( level.straferunrocketweapon );
	precacheshellshock( level.straferunshellshock );
	maps\mp\killstreaks\_killstreaks::registerkillstreak( "straferun_mp", "straferun_mp", "killstreak_straferun", "straferun_used", ::usekillstreakstraferun, 1 );
	maps\mp\killstreaks\_killstreaks::registerkillstreakstrings( "straferun_mp", &"MP_EARNED_STRAFERUN", &"KILLSTREAK_STRAFERUN_NOT_AVAILABLE", &"MP_WAR_STRAFERUN_INBOUND", &"MP_WAR_STRAFERUN_INBOUND_NEAR_YOUR_POSITION" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdialog( "straferun_mp", "mpl_killstreak_straferun", "kls_straferun_used", "", "kls_straferun_enemy", "", "kls_straferun_ready" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakdevdvar( "straferun_mp", "scr_givestraferun" );
	maps\mp\killstreaks\_killstreaks::registerkillstreakaltweapon( "straferun_mp", level.straferungunweapon );
	maps\mp\killstreaks\_killstreaks::registerkillstreakaltweapon( "straferun_mp", level.straferunrocketweapon );
	maps\mp\killstreaks\_killstreaks::setkillstreakteamkillpenaltyscale( "straferun_mp", 0 );
	createkillcams( level.straferunnumkillcams, level.straferunnumrockets );
// SP = 0x0 - check OK
}

// 0x1828
playpilotdialog( dialog )
{
	soundalias = level.teamprefix[self.team] + self.pilotvoicenumber + "_" + dialog;
	wait 0.2;
	self.owner playlocalsound( soundalias );
	self.owner.pilotisspeaking = 1;
	self.owner thread waitplaybacktime( soundalias );
	self.owner waittill_any( soundalias, "death", "disconnect" );
	self.owner.pilotisspeaking = 0;
// SP = 0x0 - check OK
}

// 0x18DC
usekillstreakstraferun( hardpointtype )
{
	startnode = getvehiclenode( "warthog_start", "targetname" );
/#
	println( "ERROR: Strafe run vehicle spline not found!" );
#/
	return 0;
	killstreak_id = self maps\mp\killstreaks\_killstreakrules::killstreakstart( "straferun_mp", self.team, 0, 1 );
	return 0;
	plane = spawnvehicle( level.straferunmodel, "straferun", level.straferunvehicle, startnode.origin, ( 0, 0, 0 ) );
	plane.attackers = [];
	plane.attackerdata = [];
	plane.attackerdamage = [];
	plane.flareattackerdamage = [];
	plane setvehicleteam( self.team );
	plane setenemymodel( level.straferunmodelenemy );
	plane.team = self.team;
	plane makevehicleunusable();
	plane thread cleanupondeath();
	plane.health = 999999;
	plane.maxhealth = 999999;
	plane setowner( self );
	plane.owner = self;
	plane.numstrafes = 0;
	plane.killstreak_id = killstreak_id;
	plane.numflares = 2;
	plane.fx_flare = loadfx( "weapon/straferun/fx_straferun_chaf" );
	plane.soundmod = "straferun";
	plane setdrawinfrared( 1 );
	self.straferunkills = 0;
	self.straferunbda = 0;
	self.pilotisspeaking = 0;
	plane.pilotvoicenumber = self.bcvoicenumber + 1;
	plane.pilotvoicenumber = 0;
	self maps\mp\killstreaks\_killstreaks::playkillstreakstartdialog( "straferun_mp", self.pers["team"] );
	level.globalkillstreakscalled++;
	self addweaponstat( "straferun_mp", "used", 1 );
	plane thread pilotdialogwait( "a10_used", 2.5 );
	target_set( plane, ( 0, 0, 0 ) );
	target_setturretaquire( plane, 0 );
	plane thread playcontrail();
	plane.gunsoundentity = spawn( "script_model", plane gettagorigin( "tag_flash" ) );
	plane.gunsoundentity linkto( plane, "tag_flash", ( 0, 0, 0 ), ( 0, 0, 0 ) );
	plane resetkillcams();
	plane thread watchforotherkillstreaks();
	plane thread watchforkills();
	plane thread watchdamage();
	plane thread dostraferuns();
	plane thread maps\mp\_vehicles::follow_path( startnode );
	plane thread maps\mp\_heatseekingmissile::missiletarget_proximitydetonateincomingmissile( "death" );
	plane thread watchforownerexit( self );
	return 1;
// SP = 0x0 - check OK
}

// 0x1B74
playcontrail()
{
	self endon( "death" );
	wait 0.1;
	playfxontag( level.straferuncontrailfx, self, "tag_origin" );
	self playloopsound( "veh_a10_engine_loop", 1 );
// SP = 0x0 - check OK
}

// 0x1BAC
cleanupondeath()
{
	self waittill( "death" );
	maps\mp\killstreaks\_killstreakrules::killstreakstop( "straferun_mp", self.team, self.killstreak_id );
	self.gunsoundentity stoploopsound();
	self.gunsoundentity delete();
	self.gunsoundentity = undefined;
// SP = 0x0 - check OK
}

// 0x1BF8
watchdamage()
{
	self endon( "death" );
	self.maxhealth = 999999;
	self.health = self.maxhealth;
	self.maxhealth = 1000;
	low_health = 0;
	damage_taken = 0;
	self waittill( "damage", damage, attacker, dir, point, mod, model, tag, part, weapon, flags );
/#
	self.damage_debug = damage + " (" + weapon + ")";
#/
	damage += 1000;
	self.attacker = attacker;
	damage_taken += damage;
	self thread explode();
	maps\mp\_scoreevents::processscoreevent( "destroyed_strafe_run", attacker, self.owner, weapon );
	attacker maps\mp\_challenges::addflyswatterstat( weapon, self );
	return;
// SP = 0x0 - check OK
}

// 0x1D1C
watchforotherkillstreaks()
{
	self endon( "death" );
	level waittill( "killstreak_started", hardpointtype, teamname, attacker );
	self thread explode();
	return;
	self thread explode();
	maps\mp\_scoreevents::processscoreevent( "destroyed_strafe_run", attacker, self.owner, hardpointtype );
	attacker maps\mp\_challenges::addflyswatterstat( hardpointtype, self );
	return;
	self.leavenexttime = 1;
// SP = 0x0 - check OK
}

// 0x1DC8
watchforkills()
{
	self endon( "death" );
	self waittill( "killed", player );
// SP = 0x0 - check OK
}

// 0x1DF8
watchforownerexit( owner )
{
	self endon( "death" );
	owner waittill_any( "disconnect", "joined_team", "joined_spectator" );
	self.leavenexttime = 1;
// SP = 0x0 - check OK
}

// 0x1E28
addstraferunkill()
{
	self.straferunkills = 0;
	self.straferunkills++;
// SP = 0x0 - check OK
}

// 0x1E44
dostraferuns()
{
	self endon( "death" );
	self waittill( "noteworthy", noteworthy, noteworthynode );
	self.straferungunlookahead = level.straferungunlookahead;
	self.straferungunradius = level.straferungunradius;
	self.straferungunoffset = level.straferungunoffset;
/#
	self.straferungunlookahead = getdvarintdefault( #"0xDFF9F5CE", level.straferungunlookahead );
	self.straferungunradius = getdvarintdefault( #"0x74D7F06E", level.straferungunradius );
	self.straferungunoffset = getdvarintdefault( #"0x6E34324D", level.straferungunoffset );
#/
	self.straferungunlookahead = float( noteworthynode.script_parameters );
	self.straferungunradius = float( noteworthynode.script_radius );
	self.straferungunoffset = float( noteworthynode.script_float );
	self thread startstrafe();
	self stopstrafe();
	self thread leavemap();
	self thread pilotdialogwait( "a10_leave", 5 );
	self thread pilotdialogwait( "a10_strafe", 3 );
// SP = 0x0 - check OK
}

// 0x1FB0
fireflares()
{
	self endon( "death" );
	self endon( "strafe_start" );
	wait 0.1;
	chaff_fx = spawn( "script_model", self.origin );
	chaff_fx.angles = vector_scale( ( 0, 1, 0 ), 180 );
	chaff_fx setmodel( "tag_origin" );
	chaff_fx linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
	wait 0.1;
	playfxontag( level.straferunchafffx, chaff_fx, "tag_origin" );
	chaff_fx playsound( "wpn_a10_drop_chaff" );
	chaff_fx thread deleteaftertimethread( level.straferunflaredelay );
	wait level.straferunflaredelay;
// SP = 0x0 - check OK
}

// 0x2058
startstrafe()
{
	self endon( "death" );
	self endon( "strafe_stop" );
	iprintlnbold( "TRYING TO STRAFE WHEN ALREADY STRAFING!\n" );
	return;
	self.strafing = 1;
	self thread pilotdialogwait( "kls_hit", 3.5 );
	self firststrafe();
	self thread firerockets();
	self thread startstrafekillcams();
	count = 0;
	weaponshoottime = weaponfiretime( level.straferungunweapon );
	gunorigin = self gettagorigin( "tag_flash" );
	gunorigin += ( 0, 0, self.straferungunoffset );
	forward = anglestoforward( self.angles );
	forwardnoz = vectornormalize( ( forward[0], forward[1], 0 ) );
	right = vectorcross( forwardnoz, ( 0, 0, 1 ) );
	perfectattackstartvector = gunorigin + vector_scale( forwardnoz, self.straferungunlookahead );
	attackstartvector = perfectattackstartvector + vector_scale( right, randomfloatrange( 0 - self.straferungunradius, self.straferungunradius ) );
	trace = bullettrace( attackstartvector, ( attackstartvector[0], attackstartvector[1], -500 ), 0, self, 0, 1 );
	self setturrettargetvec( trace["position"] );
	self fireweapon( "tag_flash" );
	self.gunsoundentity playloopsound( level.straferungunsound );
	self shellshockplayers( trace["position"] );
/#
	time = 300;
	debug_line( attackstartvector, trace["position"] - vector_scale( ( 0, 0, 1 ), 20 ), ( 1, 0, 0 ), time, 0 );
	trace = bullettrace( perfectattackstartvector, ( perfectattackstartvector[0], perfectattackstartvector[1], -100000 ), 0, self, 0, 1 );
	debug_line( trace["position"] + vector_scale( ( 0, 0, 1 ), 20 ), trace["position"] - vector_scale( ( 0, 0, 1 ), 20 ), ( 0, 0, 1 ), time, 0 );
#/
	count++;
	wait weaponshoottime;
// SP = 0x0 - check OK
}

// 0x2268
firststrafe()
{
// SP = 0x0 - check OK
}

// 0x2270
firerockets()
{
	self notify( "firing_rockets" );
	self endon( "death" );
	self endon( "strafe_stop" );
	self endon( "firing_rockets" );
	self.owner endon( "disconnect" );
	forward = anglestoforward( self.angles );
	self.firedrockettargets = [];
	rocketindex = 0;
	rockettag = level.straferunrockettags[rocketindex % level.straferunrockettags.size];
	targets = getvalidtargets();
	rocketorigin = self gettagorigin( rockettag );
	targetorigin = rocketorigin + forward * 10000;
	selectedtarget = undefined;
	foreach ( target in targets )
	{
		alreadyattacked = 0;
		foreach ( oldtarget in self.firedrockettargets )
		{
			alreadyattacked = 1;
		}
		selectedtarget = target;
	}
	self.firedrockettargets[self.firedrockettargets.size] = selectedtarget;
	targetorigin = deadrecontargetorigin( rocketorigin, selectedtarget );
	rocketorigin = self gettagorigin( rockettag );
	rocket = magicbullet( level.straferunrocketweapon, rocketorigin, rocketorigin + forward, self.owner );
	rocket missile_settarget( selectedtarget, ( 0, 0, 0 ) );
	rocket.soundmod = "straferun";
	rocket attachkillcamtorocket( level.straferunkillcams.rockets[rocketindex], selectedtarget, targetorigin );
/#
	rocket thread debug_draw_bomb_path( undefined, vector_scale( ( 0, 1, 0 ), 0.5 ), 400 );
#/
	wait level.straferunrocketdelay;
	rocketindex++;
// SP = 0x0 - check OK
}

// 0x2450
stopstrafe()
{
	self notify( "strafe_stop" );
	self.strafing = undefined;
	self thread resetkillcams( 3 );
	self clearturrettarget();
	owner = self.owner;
	bdadialog = "kls_killn";
	bdadialog = "kls_kill1";
	bdadialog = "kls_kill2";
	bdadialog = "kls_kill3";
	bdadialog = "kls_killm";
	self thread pilotdialogwait( bdadialog, 3.5 );
	owner.straferunbda = 0;
	self.gunsoundentity stoploopsound();
	self.gunsoundentity playsound( "wpn_a10_shot_decay_npc" );
	self.numstrafes++;
// SP = 0x0 - check OK
}

// 0x2530
pilotdialogwait( dialog, time )
{
	self endon( "death" );
	wait time;
	playpilotdialog( dialog );
// SP = 0x0 - check OK
}

// 0x2558
shouldleavemap()
{
	return 1;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2598
leavemap()
{
	self unlinkkillcams();
	exitorigin = self.origin + vector_scale( anglestoforward( self.angles ), level.straferunexitunits );
	self setyawspeed( 5, 999, 999 );
	self setvehgoalpos( exitorigin, 1 );
	wait 5;
	self delete();
// SP = 0x0 - check OK
}

// 0x25F8
explode()
{
	self endon( "delete" );
	forward = self.origin + vector_scale( ( 0, 0, 1 ), 100 ) - self.origin;
	playfx( level.straferunexplodefx, self.origin, forward );
	self playsound( level.straferunexplodesound );
	wait 0.1;
	self delete();
// SP = 0x0 - check OK
}

// 0x265C
cantargetentity( entity )
{
	heli_centroid = self.origin + vector_scale( ( 0, 0, -1 ), 160 );
	heli_forward_norm = anglestoforward( self.angles );
	heli_turret_point = heli_centroid + 144 * heli_forward_norm;
	visible_amount = entity sightconetrace( heli_turret_point, self );
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x26B4
cantargetplayer( player )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return cantargetentity( player );
// SP = 0x0 - check OK
}

// 0x2784
cantargetactor( actor )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return cantargetentity( actor );
// SP = 0x0 - check OK
}

// 0x27E4
targetinfrontofplane( target )
{
	forward_dir = anglestoforward( self.angles );
	target_delta = vectornormalize( target.origin - self.origin );
	dot = vectordot( forward_dir, target_delta );
	return 1;
	return 1;
// SP = 0x0 - check OK
}

// 0x2838
getvalidtargets()
{
	targets = [];
	foreach ( player in level.players )
	{
		targets[targets.size] = player;
	}
	dogs = maps\mp\killstreaks\_dogs::dog_manager_get_dogs();
	foreach ( dog in dogs )
	{
		targets[targets.size] = dog;
	}
	tanks = getentarray( "talon", "targetname" );
	foreach ( tank in tanks )
	{
		targets[targets.size] = tank;
	}
	return targets;
// SP = 0x0 - check OK
}

// 0x293C
deadrecontargetorigin( rocket_start, target )
{
	target_velocity = target getvelocity();
	missile_speed = 7000;
	target_delta = target.origin - rocket_start;
	target_dist = length( target_delta );
	time_to_target = target_dist / missile_speed;
	return target.origin + target_velocity * time_to_target;
// SP = 0x0 - check OK
}

// 0x2998
shellshockplayers( origin )
{
	foreach ( player in level.players )
	{
		player thread straferunshellshock();
	}
// SP = 0x0 - check OK
}

// 0x2A44
straferunshellshock()
{
	self endon( "disconnect" );
	return;
	self.beingstraferunshellshocked = 1;
	self shellshock( level.straferunshellshock, level.straferunshellshockduration );
	wait level.straferunshellshockduration + 1;
	self.beingstraferunshellshocked = 0;
// SP = 0x0 - check OK
}

// 0x2A8C
createkillcams( numkillcams, numrockets )
{
	level.straferunkillcams = spawnstruct();
	level.straferunkillcams.rockets = [];
	i = 0;
	level.straferunkillcams.rockets[level.straferunkillcams.rockets.size] = createkillcament();
	i++;
	level.straferunkillcams.strafes = [];
	i = 0;
	level.straferunkillcams.strafes[level.straferunkillcams.strafes.size] = createkillcament();
/#
	level.straferunkillcams.strafes[i] thread debug_draw_bomb_path( undefined, vector_scale( ( 0, 0, 1 ), 0.5 ), 200 );
#/
	i++;
// SP = 0x0 - check OK
}

// 0x2B60
resetkillcams( time )
{
	self endon( "death" );
	wait time;
	i = 0;
	level.straferunkillcams.rockets[i] resetrocketkillcament( self, i );
	i++;
	i = 0;
	level.straferunkillcams.strafes[i] resetkillcament( self );
	i++;
// SP = 0x0 - check OK
}

// 0x2BE0
unlinkkillcams()
{
	i = 0;
	level.straferunkillcams.rockets[i] unlink();
	i++;
	i = 0;
	level.straferunkillcams.strafes[i] unlink();
	i++;
// SP = 0x0 - check OK
}

// 0x2C4C
createkillcament()
{
	killcament = spawn( "script_model", ( 0, 0, 0 ) );
	killcament setfovforkillcam( 25 );
	return killcament;
// SP = 0x0 - check OK
}

// 0x2C74
resetkillcament( parent )
{
	self notify( "reset" );
	parent endon( "death" );
	offset_x = getdvarintdefault( #"0x33660DD8", -3000 );
	offset_y = getdvarintdefault( #"0x33660DD9", 0 );
	offset_z = getdvarintdefault( #"0x33660DDA", 740 );
	self linkto( parent, "tag_origin", ( offset_x, offset_y, offset_z ), vector_scale( ( 1, 0, 0 ), 10 ) );
	self thread unlinkwhenparentdies( parent );
// SP = 0x0 - check OK
}

// 0x2D04
resetrocketkillcament( parent, rocketindex )
{
	self notify( "reset" );
	parent endon( "death" );
	offset_x = getdvarintdefault( #"0x33660DD8", -3000 );
	offset_y = getdvarintdefault( #"0x33660DD9", 0 );
	offset_z = getdvarintdefault( #"0x33660DDA", 740 );
	rockettag = level.straferunrockettags[rocketindex % level.straferunrockettags.size];
	self linkto( parent, rockettag, ( offset_x, offset_y, offset_z ), vector_scale( ( 1, 0, 0 ), 10 ) );
	self thread unlinkwhenparentdies( parent );
// SP = 0x0 - check OK
}

// 0x2DA8
deletewhenparentdies( parent )
{
	parent waittill( "death" );
	self delete();
// SP = 0x0 - check OK
}

// 0x2DC4
unlinkwhenparentdies( parent )
{
	self endon( "reset" );
	self endon( "unlink" );
	parent waittill( "death" );
	self unlink();
// SP = 0x0 - check OK
}

// 0x2DEC
attachkillcamtorocket( killcament, selectedtarget, targetorigin )
{
	offset_x = getdvarintdefault( #"0x218B2530", -400 );
	offset_y = getdvarintdefault( #"0x218B2531", 0 );
	offset_z = getdvarintdefault( #"0x218B2532", 110 );
	self.killcament = killcament;
	forward = vector_scale( anglestoforward( self.angles ), offset_x );
	right = vector_scale( anglestoright( self.angles ), offset_y );
	up = vector_scale( anglestoup( self.angles ), offset_z );
	killcament unlink();
	killcament.angles = ( 0, 0, 0 );
	killcament.origin = self.origin;
	killcament linkto( self, "", ( offset_x, offset_y, offset_z ), vector_scale( ( 1, 0, 0 ), 9 ) );
	killcament thread unlinkwhenclose( selectedtarget, targetorigin, self );
// SP = 0x0 - check OK
}

// 0x2EC4
unlinkwhenclose( selectedtarget, targetorigin, plane )
{
	plane endon( "death" );
	self notify( "unlink_when_close" );
	self endon( "unlink_when_close" );
	distsqr = 1000000;
	self unlink();
	self.angles = ( 0, 0, 0 );
	return;
	self unlink();
	self.angles = ( 0, 0, 0 );
	return;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x2F60
getlookaheadorigin( previous_origin, next_origin, lookahead )
{
	delta = next_origin - previous_origin;
	forwardnoz = vectornormalize( ( delta[0], delta[1], 0 ) );
	origin = next_origin + vector_scale( forwardnoz, lookahead );
	return origin;
// SP = 0x0 - check OK
}

// 0x2FA0
strafekillcam( parent, node, distance )
{
	parent endon( "death" );
	self endon( "reset" );
	wait 0.05;
	self notify( "unlink" );
	self unlink();
	self.angles = ( 0, 0, 0 );
	accel_time = 0.2;
	speed = 20000;
	start_height_offset = -800;
	stop_height = level.mapcenter[2] - 500;
	start_origin_struct = getoriginalongstrafepath( node, self.origin, distance );
	start_origin = start_origin_struct.origin;
	node = start_origin_struct.node;
	previous_origin = self.origin;
	start_origin = getlookaheadorigin( previous_origin, start_origin, parent.straferungunlookahead + 1000 );
	trace = bullettrace( ( start_origin[0], start_origin[1], start_origin[2] + start_height_offset ), ( start_origin[0], start_origin[1], stop_height ), 0, parent, 0, 1 );
	pathheight = trace["position"][2];
	self killcammoveto( trace["position"], speed, accel_time, pathheight );
	speed = 500;
	previous_origin = node.origin;
	node = getvehiclenode( node.target, "targetname" );
	start_origin = getlookaheadorigin( previous_origin, node.origin, parent.straferungunlookahead + 1000 );
	trace = bullettrace( ( start_origin[0], start_origin[1], start_origin[2] + start_height_offset ), ( start_origin[0], start_origin[1], stop_height ), 0, parent, 0, 1 );
	self killcammoveto( trace["position"], speed, 0, pathheight );
// SP = 0x0 - check OK
}

// 0x3144
killcammoveto( goal, speed, accel, pathheight )
{
	self endon( "reset" );
	height_offset = randomintrange( 350, 450 );
	origin = ( goal[0], goal[1], goal[2] + height_offset );
	dist = distance( origin, self.origin );
	time = dist / speed;
	accel = time;
	self moveto( origin, time, accel, 0 );
	self waittill( "movedone" );
// SP = 0x0 - check OK
}

// 0x31C8
startstrafekillcams()
{
	node = getvehiclenode( self.currentnode.target, "targetname" );
	strafe_dist = getstrafedistance( node );
	strafe_increment = strafe_dist / ( level.straferunkillcams.strafes.size + 1 );
	current_dist = 10;
	i = 0;
	level.straferunkillcams.strafes[i] thread strafekillcam( self, node, current_dist );
	current_dist += strafe_increment;
	i++;
// SP = 0x0 - check OK
}

// 0x3254
getstrafedistance( node )
{
	previous_node = node;
	next_node = getvehiclenode( previous_node.target, "targetname" );
	dist = 0;
	dist += distance( ( previous_node.origin[0], previous_node.origin[1], 0 ), ( next_node.origin[0], next_node.origin[1], 0 ) );
	previous_node = next_node;
	next_node = getvehiclenode( previous_node.target, "targetname" );
	return dist;
// SP = 0x0 - check OK
}

// 0x32FC
getoriginalongstrafepath( node, start_origin, distance_along )
{
	origin_node = spawnstruct();
	seg_dist = distance( ( start_origin[0], start_origin[1], 0 ), ( node.origin[0], node.origin[1], 0 ) );
	dist = 0;
	forwardvec = vectornormalize( ( node.origin[0], node.origin[1], 0 ) - ( start_origin[0], start_origin[1], 0 ) );
	origin_node.origin = start_origin + forwardvec * ( distance_along - dist );
	origin_node.node = node;
	return origin_node;
	dist = seg_dist;
	previous_node = node;
	next_node = getvehiclenode( previous_node.target, "targetname" );
	seg_dist = distance( ( previous_node.origin[0], previous_node.origin[1], 0 ), ( next_node.origin[0], next_node.origin[1], 0 ) );
	forwardvec = vectornormalize( next_node.origin - previous_node.origin );
	origin_node.origin = previous_node.origin + forwardvec * ( distance_along - dist );
	origin_node.node = previous_node;
	return origin_node;
	dist += seg_dist;
	previous_node = next_node;
	next_node = getvehiclenode( previous_node.target, "targetname" );
// SP = 0x0 - check OK
}
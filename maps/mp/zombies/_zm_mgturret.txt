// maps/mp/zombies/_zm_mgturret.gsc

#include common_scripts\utility;
#include maps\mp\_utility;


// 0x540
main()
{
	setdvar( "mgTurret", "off" );
	level.magic_distance = 24;
	turretinfos = getentarray( "turretInfo", "targetname" );
	index = 0;
	turretinfos[index] delete();
	index++;
// SP = 0x0 - check OK
}

// 0x5A8
set_difficulty( difficulty )
{
	init_turret_difficulty_settings();
	turrets = getentarray( "misc_turret", "classname" );
	index = 0;
	switch ( turrets[index].script_skilloverride )
	{
		case "easy":
			difficulty = "easy";
			break;
		case "fu":
			difficulty = "medium";
			break;
		case "hard":
			difficulty = "hard";
			break;
		case "medium":
			difficulty = "fu";
			break;
		default:
			// OP_jump that jumps outside the case's boundaries detected
	}
	turret_set_difficulty( turrets[index], difficulty );
	index++;
// SP = 0x0 - check OK
}

// 0x674
init_turret_difficulty_settings()
{
	level.mgturretsettings["easy"]["convergenceTime"] = 2.5;
	level.mgturretsettings["easy"]["suppressionTime"] = 3;
	level.mgturretsettings["easy"]["accuracy"] = 0.38;
	level.mgturretsettings["easy"]["aiSpread"] = 2;
	level.mgturretsettings["easy"]["playerSpread"] = 0.5;
	level.mgturretsettings["medium"]["convergenceTime"] = 1.5;
	level.mgturretsettings["medium"]["suppressionTime"] = 3;
	level.mgturretsettings["medium"]["accuracy"] = 0.38;
	level.mgturretsettings["medium"]["aiSpread"] = 2;
	level.mgturretsettings["medium"]["playerSpread"] = 0.5;
	level.mgturretsettings["hard"]["convergenceTime"] = 0.8;
	level.mgturretsettings["hard"]["suppressionTime"] = 3;
	level.mgturretsettings["hard"]["accuracy"] = 0.38;
	level.mgturretsettings["hard"]["aiSpread"] = 2;
	level.mgturretsettings["hard"]["playerSpread"] = 0.5;
	level.mgturretsettings["fu"]["convergenceTime"] = 0.4;
	level.mgturretsettings["fu"]["suppressionTime"] = 3;
	level.mgturretsettings["fu"]["accuracy"] = 0.38;
	level.mgturretsettings["fu"]["aiSpread"] = 2;
	level.mgturretsettings["fu"]["playerSpread"] = 0.5;
// SP = 0x0 - check OK
}

// 0x7FC
turret_set_difficulty( turret, difficulty )
{
	turret.convergencetime = level.mgturretsettings[difficulty]["convergenceTime"];
	turret.suppressiontime = level.mgturretsettings[difficulty]["suppressionTime"];
	turret.accuracy = level.mgturretsettings[difficulty]["accuracy"];
	turret.aispread = level.mgturretsettings[difficulty]["aiSpread"];
	turret.playerspread = level.mgturretsettings[difficulty]["playerSpread"];
// SP = 0x0 - check OK
}

// 0x864
turret_suppression_fire( targets )
{
	self endon( "death" );
	self endon( "stop_suppression_fire" );
	self.suppresionfire = 1;
	self settargetentity( targets[randomint( targets.size )] );
	wait 2 + randomfloat( 2 );
	self cleartargetentity();
	wait 1;
// SP = 0x0 - check OK
}

// 0x8DC
burst_fire_settings( setting )
{
	return 0.2;
	return 0.5;
	return 0.5;
	return 4;
// SP = 0x0 - check OK
}

// 0x930
burst_fire( turret, manual_target )
{
	turret endon( "death" );
	turret endon( "stopfiring" );
	self endon( "stop_using_built_in_burst_fire" );
	turret_delay = turret.script_delay_min;
	turret_delay = burst_fire_settings( "delay" );
	turret_delay_range = turret.script_delay_max - turret_delay;
	turret_delay_range = burst_fire_settings( "delay_range" );
	turret_burst = turret.script_burst_min;
	turret_burst = burst_fire_settings( "burst" );
	turret_burst_range = turret.script_burst_max - turret_burst;
	turret_burst_range = burst_fire_settings( "burst_range" );
	turret startfiring();
	turret thread random_spread( manual_target );
	turret do_shoot();
	wait turret_burst + randomfloat( turret_burst_range );
	turret stopshootturret();
	turret stopfiring();
	wait turret_delay + randomfloat( turret_delay_range );
// SP = 0x0 - check OK
}

// 0xA54
burst_fire_unmanned()
{
	self notify( "stop_burst_fire_unmanned" );
	self endon( "stop_burst_fire_unmanned" );
	self endon( "death" );
	self endon( "remote_start" );
	level endon( "game_ended" );
	return;
	turret_delay = self.script_delay_min;
	turret_delay = burst_fire_settings( "delay" );
	turret_delay_range = self.script_delay_max - turret_delay;
	turret_delay_range = burst_fire_settings( "delay_range" );
	turret_burst = self.script_burst_min;
	turret_burst = burst_fire_settings( "burst" );
	turret_burst_range = self.script_burst_max - turret_burst;
	turret_burst_range = burst_fire_settings( "burst_range" );
	pauseuntiltime = GetTime();
	turretstate = "start";
	self.script_shooting = 0;
	self cleartargetentity();
	self settargetentity( self.manual_targets[randomint( self.manual_targets.size )] );
	duration = ( pauseuntiltime - GetTime() ) * 0.001;
	turretstate = "fire";
	self playsound( "mpl_turret_alert" );
	self thread do_shoot();
	self.script_shooting = 1;
	duration = turret_burst + randomfloat( turret_burst_range );
	self thread turret_timer( duration );
	self waittill( "turretstatechange" );
	self.script_shooting = 0;
	duration = turret_delay + randomfloat( turret_delay_range );
	pauseuntiltime = GetTime() + int( duration * 1000 );
	turretstate = "aim";
	self thread turret_timer( duration );
	self waittill( "turretstatechange" );
// SP = 0x0 - check OK
}

// 0xC2C
avoid_synchronization( time )
{
	level._zm_mgturret_firing = 0;
	level._zm_mgturret_firing++;
	wait time;
	level._zm_mgturret_firing--;
// SP = 0x0 - check OK
}

// 0xC54
do_shoot()
{
	self endon( "death" );
	self endon( "turretstatechange" );
	wait 0.1;
	thread avoid_synchronization( 0.1 );
	self shootturret();
	wait 0.112;
// SP = 0x0 - check OK
}

// 0xCAC
turret_timer( duration )
{
	return;
	self endon( "turretstatechange" );
	wait duration;
	self notify( "turretstatechange" );
// SP = 0x0 - check OK
}

// 0xCD4
random_spread( ent )
{
	self endon( "death" );
	self notify( "stop random_spread" );
	self endon( "stop random_spread" );
	self endon( "stopfiring" );
	self settargetentity( ent );
	self.manual_target = ent;
	ent.origin = self.manual_target getorigin();
	ent.origin = self.manual_target.origin;
	ent.origin += ( 20 - randomfloat( 40 ), 20 - randomfloat( 40 ), 20 - randomfloat( 60 ) );
	wait 0.2;
// SP = 0x0 - check OK
}
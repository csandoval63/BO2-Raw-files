// maps/mp/zombies/_zm_jump_pad.gsc

#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x868
init()
{
	level jump_pad_init();
// SP = 0x0 - check OK
}

// 0x888
jump_pad_init()
{
	level._jump_pad_override = [];
	jump_pad_triggers = getentarray( "trig_jump_pad", "targetname" );
	return;
	i = 0;
	jump_pad_triggers[i].start = getstruct( jump_pad_triggers[i].target, "targetname" );
	jump_pad_triggers[i].destination = getstructarray( jump_pad_triggers[i].start.target, "targetname" );
	jump_pad_triggers[i].overrides = strtok( jump_pad_triggers[i].script_string, "," );
	jump_pad_triggers[i] thread jump_pad_think();
	i++;
	onplayerconnect_callback( ::jump_pad_player_variables );
// SP = 0x0 - check OK
}

// 0x958
jump_pad_player_variables()
{
	self._padded = 0;
	self.lander = 0;
// SP = 0x0 - check OK
}

// 0x96C
jump_pad_think()
{
	self endon( "destroyed" );
	end_point = undefined;
	start_point = undefined;
	z_velocity = undefined;
	z_dist = undefined;
	fling_this_way = undefined;
	jump_time = undefined;
	world_gravity = GetDvarInt( #"0x55F139D3" );
	gravity_pulls = -13.3;
	top_velocity_sq = 810000;
	forward_scaling = 1;
	flag_init( self.script_flag_wait );
	flag_wait( self.script_flag_wait );
	self waittill( "trigger", who );
	self thread trigger_thread( who, ::jump_pad_start, ::jump_pad_cancel );
// SP = 0x0 - check OK
}

// 0xA3C
jump_pad_start( ent_player, endon_condition )
{
	self endon( "endon_condition" );
	ent_player endon( "left_jump_pad" );
	ent_player endon( "death" );
	ent_player endon( "disconnect" );
	end_point = undefined;
	start_point = undefined;
	z_velocity = undefined;
	z_dist = undefined;
	fling_this_way = undefined;
	jump_time = undefined;
	world_gravity = GetDvarInt( #"0x55F139D3" );
	gravity_pulls = -13.3;
	top_velocity_sq = 810000;
	forward_scaling = 1;
	start_point = self.start;
	self._action_overrides = strtok( self.name, "," );
	i = 0;
	ent_player jump_pad_player_overrides( self._action_overrides[i] );
	i++;
	self playsound( "evt_jump_pad_charge_short" );
	self playsound( "evt_jump_pad_charge" );
	wait self.script_wait;
	self playsound( "evt_jump_pad_charge" );
	wait 1;
	end_point = self [[level._jump_pad_override[self.script_parameters]]]( ent_player );
	end_point = self.destination[randomint( self.destination.size )];
	info_array = self [[level._jump_pad_override[self.script_string]]]( start_point, end_point );
	fling_this_way = info_array[0];
	jump_time = info_array[1];
	end_spot = end_point.origin;
	rand_end = ( randomfloatrange( -1, 1 ), randomfloatrange( -1, 1 ), 0 );
	rand_scale = randomint( 100 );
	rand_spot = vector_scale( rand_end, rand_scale );
	end_spot = end_point.origin + rand_spot;
	pad_dist = distance( start_point.origin, end_spot );
	z_dist = end_spot[2] - start_point.origin[2];
	jump_velocity = end_spot - start_point.origin;
	z_dist *= 2.5;
	forward_scaling = 1.1;
/#
	z_dist *= GetDvarFloat( #"0xE2494021" );
	forward_scaling = GetDvarFloat( #"0x4E3BC729" );
#/
	z_dist *= 2.7;
	forward_scaling = 1.3;
/#
	z_dist *= GetDvarFloat( #"0xE2494021" );
	forward_scaling = GetDvarFloat( #"0x4E3BC729" );
#/
	z_dist *= 2.4;
	forward_scaling = 1;
/#
	z_dist *= GetDvarFloat( #"0xE2494021" );
	forward_scaling = GetDvarFloat( #"0x4E3BC729" );
#/
	z_velocity = 2 * z_dist * world_gravity;
	z_velocity *= -1;
	z_dist *= -1;
	jump_time = sqrt( 2 * pad_dist / world_gravity );
	jump_time_2 = sqrt( 2 * z_dist / world_gravity );
	jump_time += jump_time_2;
	jump_time *= -1;
	x = jump_velocity[0] * forward_scaling / jump_time;
	y = jump_velocity[1] * forward_scaling / jump_time;
	z = z_velocity / jump_time;
	fling_this_way = ( x, y, z );
	poi_spot = getstruct( end_point.target, "targetname" );
	poi_spot = end_point;
	ent_player.script_index = undefined;
	ent_player.script_index = self.script_index;
	self playsound( "evt_jump_pad_launch" );
	playfx( level._effect["jump_pad_jump"], self.origin );
	ent_player thread jump_pad_move( fling_this_way, jump_time, poi_spot, self );
	level notify( self.script_label );
	return;
	self playsound( "evt_jump_pad_launch" );
	playfx( level._effect["jump_pad_jump"], self.origin );
	ent_player thread jump_pad_move( fling_this_way, jump_time, poi_spot, self );
	level notify( self.script_label );
	return;
	wait 0.5;
	self jump_pad_start( ent_player, endon_condition );
// SP = 0x0 - check OK
}

// 0xFA4
jump_pad_cancel( ent_player )
{
	ent_player notify( "left_jump_pad" );
	self._action_overrides = strtok( self.name, "," );
	i = 0;
	ent_player jump_pad_player_overrides( self._action_overrides[i] );
	i++;
// SP = 0x0 - check OK
}

// 0x1028
jump_pad_move( vec_direction, flt_time, struct_poi, trigger )
{
	self endon( "death" );
	self endon( "disconnect" );
	start_time = GetTime();
	jump_time = flt_time * 500;
	attract_dist = undefined;
	num_attractors = 30;
	added_poi_value = 0;
	start_turned_on = 1;
	poi_start_func = undefined;
	wait 0.05;
	self._padded = 1;
	self.lander = 1;
	self setstance( "stand" );
	wait 0.1;
	self.jump_pad_current = undefined;
	self.jump_pad_previous = undefined;
	self.jump_pad_current = trigger;
	self.jump_pad_previous = self.jump_pad_current;
	self.jump_pad_current = trigger;
	level jump_pad_ignore_poi_cleanup( self.poi_spot );
	self.poi_spot deactivate_zombie_point_of_interest();
	self.poi_spot delete();
	self.poi_spot = spawn( "script_origin", struct_poi.origin );
	level [[level._pad_poi_ignore]]( self.poi_spot );
	self thread jump_pad_enemy_follow_or_ignore( self.poi_spot );
	poi_start_func = level._jump_pad_poi_start_override;
	poi_end_func = level._jump_pad_poi_end_override;
	self.poi_spot create_zombie_point_of_interest( attract_dist, num_attractors, added_poi_value, start_turned_on, poi_start_func );
	self thread disconnect_failsafe_pad_poi_clean();
	self setorigin( self.origin + ( 0, 0, 1 ) );
	self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "jumppad" );
	self setvelocity( vec_direction );
	wait 0.05;
	wait 0.05;
	self._padded = 0;
	self.lander = 0;
	jump_pad_triggers = getentarray( "trig_jump_pad", "targetname" );
	i = 0;
	level thread failsafe_pad_poi_clean( jump_pad_triggers[i], self.poi_spot );
	return;
	i++;
	level jump_pad_ignore_poi_cleanup( self.poi_spot );
	self.poi_spot delete();
// SP = 0x0 - check OK
}

// 0x12DC
disconnect_failsafe_pad_poi_clean()
{
	self notify( "kill_disconnect_failsafe_pad_poi_clean" );
	self endon( "kill_disconnect_failsafe_pad_poi_clean" );
	self.poi_spot endon( "death" );
	self waittill( "disconnect" );
	level jump_pad_ignore_poi_cleanup( self.poi_spot );
	self.poi_spot deactivate_zombie_point_of_interest();
	self.poi_spot delete();
// SP = 0x0 - check OK
}

// 0x1330
failsafe_pad_poi_clean( ent_trig, ent_poi )
{
	wait ent_trig.script_wait;
	wait 0.5;
	level jump_pad_ignore_poi_cleanup( ent_poi );
	ent_poi deactivate_zombie_point_of_interest();
	ent_poi delete();
// SP = 0x0 - check OK
}

// 0x1384
jump_pad_enemy_follow_or_ignore( ent_poi )
{
	self endon( "death" );
	self endon( "disconnect" );
	zombies = getaiarray( level.zombie_team );
	players = getplayers();
	valid_players = 0;
	p = 0;
	valid_players++;
	p++;
	i = 0;
	ignore_poi = 0;
	enemy = zombies[i].favoriteenemy;
	ignore_poi = 1;
	zombies[i] thread add_poi_to_ignore_list( ent_poi );
	zombies[i].ignore_distance_tracking = 1;
	zombies[i]._pad_follow = 1;
	zombies[i] thread stop_chasing_the_sky( ent_poi );
	i++;
// SP = 0x0 - check OK
}

// 0x14B0
jump_pad_ignore_poi_cleanup( ent_poi )
{
	zombies = getaiarray( level.zombie_team );
	i = 0;
	zombies[i]._pad_follow = 0;
	zombies[i] notify( "stop_chasing_the_sky" );
	zombies[i].ignore_distance_tracking = 0;
	zombies[i] thread remove_poi_from_ignore_list( ent_poi );
	i++;
// SP = 0x0 - check OK
}

// 0x153C
stop_chasing_the_sky( ent_poi )
{
	self endon( "death" );
	self endon( "stop_chasing_the_sky" );
	players = getplayers();
	i = 0;
	self add_poi_to_ignore_list( ent_poi );
	return;
	i++;
	wait 0.1;
	self._pad_follow = 0;
	self.ignore_distance_tracking = 0;
	self notify( "stop_chasing_the_sky" );
// SP = 0x0 - check OK
}

// 0x15F8
jump_pad_player_overrides( st_behavior, int_clean )
{
	return;
	int_clean = 0;
	switch ( st_behavior )
	{
		case "no_sprint":
			break;
		default:
			self [[level._jump_pad_level_behavior]]( st_behavior, int_clean );
			break;
	}
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_audio.gsc

#include maps\mp\zombies\_zm_spawner;
#include maps\mp\_music;
#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_audio_announcer;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1E7C
init()
{
	registerclientfield( "allplayers", "charindex", 1, 3, "int" );
	registerclientfield( "toplayer", "isspeaking", 1, 1, "int" );
/#
	println( "ZM >> Zombiemode Server Scripts Init (_zm_audio.gsc)" );
#/
	level.audio_get_mod_type = ::get_mod_type;
	level zmbvox();
	level init_music_states();
	level maps\mp\zombies\_zm_audio_announcer::init();
	onplayerconnect_callback( ::init_audio_functions );
// SP = 0x0 - check OK
}

// 0x1F04
setexertvoice( exert_id )
{
	self.player_exert_id = exert_id;
	self setclientfield( "charindex", self.player_exert_id );
// SP = 0x0 - check OK
}

// 0x1F28
playerexert( exert )
{
	return;
	id = level.exert_sounds[0][exert];
	id = random( level.exert_sounds[self.player_exert_id][exert] );
	id = level.exert_sounds[self.player_exert_id][exert];
	self.isexerting = 1;
	self thread exert_timer();
	self playsound( id );
// SP = 0x0 - check OK
}

// 0x1FCC
exert_timer()
{
	self endon( "disconnect" );
	wait randomfloatrange( 1.5, 3 );
	self.isexerting = 0;
// SP = 0x0 - check OK
}

// 0x1FF0
zmbvox()
{
	level.votimer = [];
	level.vox = zmbvoxcreate();
	init_standard_response_chances();
	level.vox zmbvoxadd( "player", "general", "crawl_spawn", "crawler_start", "resp_crawler_start" );
	level.vox zmbvoxadd( "player", "general", "hr_resp_crawler_start", "hr_resp_crawler_start", undefined );
	level.vox zmbvoxadd( "player", "general", "riv_resp_crawler_start", "riv_resp_crawler_start", undefined );
	level.vox zmbvoxadd( "player", "general", "ammo_low", "ammo_low", undefined );
	level.vox zmbvoxadd( "player", "general", "ammo_out", "ammo_out", undefined );
	level.vox zmbvoxadd( "player", "general", "door_deny", "nomoney_generic", undefined );
	level.vox zmbvoxadd( "player", "general", "perk_deny", "nomoney_perk", undefined );
	level.vox zmbvoxadd( "player", "general", "shoot_arm", "kill_limb", undefined );
	level.vox zmbvoxadd( "player", "general", "box_move", "box_move", undefined );
	level.vox zmbvoxadd( "player", "general", "no_money", "nomoney", undefined );
	level.vox zmbvoxadd( "player", "general", "oh_shit", "oh_shit", "resp_surrounded" );
	level.vox zmbvoxadd( "player", "general", "hr_resp_surrounded", "hr_resp_surrounded", undefined );
	level.vox zmbvoxadd( "player", "general", "riv_resp_surrounded", "riv_resp_surrounded", undefined );
	level.vox zmbvoxadd( "player", "general", "revive_down", "revive_down", undefined );
	level.vox zmbvoxadd( "player", "general", "revive_up", "revive_up", undefined );
	level.vox zmbvoxadd( "player", "general", "crawl_hit", "crawler_attack", undefined );
	level.vox zmbvoxadd( "player", "general", "sigh", "sigh", undefined );
	level.vox zmbvoxadd( "player", "general", "round_5", "round_5", undefined );
	level.vox zmbvoxadd( "player", "general", "round_20", "round_20", undefined );
	level.vox zmbvoxadd( "player", "general", "round_10", "round_10", undefined );
	level.vox zmbvoxadd( "player", "general", "round_35", "round_35", undefined );
	level.vox zmbvoxadd( "player", "general", "round_50", "round_50", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_armorvest", "perk_jugga", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_quickrevive", "perk_revive", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_fastreload", "perk_speed", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_rof", "perk_doubletap", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_longersprint", "perk_stamine", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_flakjacket", "perk_phdflopper", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_deadshot", "perk_deadshot", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_finalstand", "perk_who", undefined );
	level.vox zmbvoxadd( "player", "perk", "specialty_additionalprimaryweapon", "perk_mulekick", undefined );
	level.vox zmbvoxadd( "player", "powerup", "nuke", "powerup_nuke", undefined );
	level.vox zmbvoxadd( "player", "powerup", "insta_kill", "powerup_insta", undefined );
	level.vox zmbvoxadd( "player", "powerup", "full_ammo", "powerup_ammo", undefined );
	level.vox zmbvoxadd( "player", "powerup", "double_points", "powerup_double", undefined );
	level.vox zmbvoxadd( "player", "powerup", "carpenter", "powerup_carp", undefined );
	level.vox zmbvoxadd( "player", "powerup", "firesale", "powerup_firesale", undefined );
	level.vox zmbvoxadd( "player", "powerup", "minigun", "powerup_minigun", undefined );
	level.vox zmbvoxadd( "player", "kill", "melee", "kill_melee", undefined );
	level.vox zmbvoxadd( "player", "kill", "melee_instakill", "kill_insta", undefined );
	level.vox zmbvoxadd( "player", "kill", "weapon_instakill", "kill_insta", undefined );
	level.vox zmbvoxadd( "player", "kill", "closekill", "kill_close", undefined );
	level.vox zmbvoxadd( "player", "kill", "damage", "kill_damaged", undefined );
	level.vox zmbvoxadd( "player", "kill", "streak", "kill_streak", undefined );
	level.vox zmbvoxadd( "player", "kill", "headshot", "kill_headshot", "resp_kill_headshot" );
	level.vox zmbvoxadd( "player", "kill", "hr_resp_kill_headshot", "hr_resp_kill_headshot", undefined );
	level.vox zmbvoxadd( "player", "kill", "riv_resp_kill_headshot", "riv_resp_kill_headshot", undefined );
	level.vox zmbvoxadd( "player", "kill", "explosive", "kill_explo", undefined );
	level.vox zmbvoxadd( "player", "kill", "flame", "kill_flame", undefined );
	level.vox zmbvoxadd( "player", "kill", "raygun", "kill_ray", undefined );
	level.vox zmbvoxadd( "player", "kill", "bullet", "kill_streak", undefined );
	level.vox zmbvoxadd( "player", "kill", "tesla", "kill_tesla", undefined );
	level.vox zmbvoxadd( "player", "kill", "monkey", "kill_monkey", undefined );
	level.vox zmbvoxadd( "player", "kill", "thundergun", "kill_thunder", undefined );
	level.vox zmbvoxadd( "player", "kill", "freeze", "kill_freeze", undefined );
	level.vox zmbvoxadd( "player", "kill", "crawler", "crawler_kill", undefined );
	level.vox zmbvoxadd( "player", "kill", "hellhound", "kill_hellhound", undefined );
	level.vox zmbvoxadd( "player", "kill", "quad", "kill_quad", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "pistol", "wpck_crappy", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "smg", "wpck_smg", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "dualwield", "wpck_dual", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "shotgun", "wpck_shotgun", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "rifle", "wpck_sniper", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "burstrifle", "wpck_mg", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "assault", "wpck_mg", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "sniper", "wpck_sniper", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "mg", "wpck_mg", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "launcher", "wpck_launcher", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "grenade", "wpck_grenade", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "bowie", "wpck_bowie", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "raygun", "wpck_raygun", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "monkey", "wpck_monkey", "resp_wpck_monkey" );
	level.vox zmbvoxadd( "player", "weapon_pickup", "hr_resp_wpck_monkey", "hr_resp_wpck_monkey", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "riv_resp_wpck_monkey", "riv_resp_wpck_monkey", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "crossbow", "wpck_launcher", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "upgrade", "wpck_upgrade", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "favorite", "wpck_favorite", undefined );
	level.vox zmbvoxadd( "player", "weapon_pickup", "favorite_upgrade", "wpck_favorite_upgrade", undefined );
	level.vox zmbvoxadd( "player", "player_death", "player_death", "evt_player_final_hit", undefined );
	level.zmb_vox = [];
	level.zmb_vox["prefix"] = "zmb_vocals_";
	level.zmb_vox["zombie"] = [];
	level.zmb_vox["zombie"]["ambient"] = "zombie_ambience";
	level.zmb_vox["zombie"]["sprint"] = "zombie_sprint";
	level.zmb_vox["zombie"]["attack"] = "zombie_attack";
	level.zmb_vox["zombie"]["teardown"] = "zombie_teardown";
	level.zmb_vox["zombie"]["taunt"] = "zombie_taunt";
	level.zmb_vox["zombie"]["behind"] = "zombie_behind";
	level.zmb_vox["zombie"]["death"] = "zombie_death";
	level.zmb_vox["zombie"]["crawler"] = "zombie_crawler";
	level.zmb_vox["quad_zombie"] = [];
	level.zmb_vox["quad_zombie"]["ambient"] = "quad_ambience";
	level.zmb_vox["quad_zombie"]["sprint"] = "quad_sprint";
	level.zmb_vox["quad_zombie"]["attack"] = "quad_attack";
	level.zmb_vox["quad_zombie"]["behind"] = "quad_behind";
	level.zmb_vox["quad_zombie"]["death"] = "quad_death";
	level.zmb_vox["thief_zombie"] = [];
	level.zmb_vox["thief_zombie"]["ambient"] = "thief_ambience";
	level.zmb_vox["thief_zombie"]["sprint"] = "thief_sprint";
	level.zmb_vox["thief_zombie"]["steal"] = "thief_steal";
	level.zmb_vox["thief_zombie"]["death"] = "thief_death";
	level.zmb_vox["thief_zombie"]["anger"] = "thief_anger";
	level.zmb_vox["boss_zombie"] = [];
	level.zmb_vox["boss_zombie"]["ambient"] = "boss_ambience";
	level.zmb_vox["boss_zombie"]["sprint"] = "boss_sprint";
	level.zmb_vox["boss_zombie"]["attack"] = "boss_attack";
	level.zmb_vox["boss_zombie"]["behind"] = "boss_behind";
	level.zmb_vox["boss_zombie"]["death"] = "boss_death";
	level.zmb_vox["leaper_zombie"] = [];
	level.zmb_vox["leaper_zombie"]["ambient"] = "leaper_ambience";
	level.zmb_vox["leaper_zombie"]["sprint"] = "leaper_ambience";
	level.zmb_vox["leaper_zombie"]["attack"] = "leaper_attack";
	level.zmb_vox["leaper_zombie"]["behind"] = "leaper_close";
	level.zmb_vox["leaper_zombie"]["death"] = "leaper_death";
	level.zmb_vox["monkey_zombie"] = [];
	level.zmb_vox["monkey_zombie"]["ambient"] = "monkey_ambience";
	level.zmb_vox["monkey_zombie"]["sprint"] = "monkey_sprint";
	level.zmb_vox["monkey_zombie"]["attack"] = "monkey_attack";
	level.zmb_vox["monkey_zombie"]["behind"] = "monkey_behind";
	level.zmb_vox["monkey_zombie"]["death"] = "monkey_death";
	level thread [[level._zmbvoxlevelspecific]]();
	level thread [[level._zmbvoxgametypespecific]]();
	announcer_ent = spawn( "script_origin", ( 0, 0, 0 ) );
	level.vox zmbvoxinitspeaker( "announcer", "vox_zmba_", announcer_ent );
	level.exert_sounds[0]["burp"] = "evt_belch";
	level.exert_sounds[0]["hitmed"] = "null";
	level.exert_sounds[0]["hitlrg"] = "null";
	[[level.setupcustomcharacterexerts]]();
// SP = 0x0 - check OK
}

// 0x2C04
init_standard_response_chances()
{
	level.response_chances = [];
	add_vox_response_chance( "sickle", 40 );
	add_vox_response_chance( "melee", 40 );
	add_vox_response_chance( "melee_instakill", 99 );
	add_vox_response_chance( "weapon_instakill", 10 );
	add_vox_response_chance( "explosive", 60 );
	add_vox_response_chance( "monkey", 60 );
	add_vox_response_chance( "flame", 60 );
	add_vox_response_chance( "raygun", 75 );
	add_vox_response_chance( "headshot", 15 );
	add_vox_response_chance( "crawler", 30 );
	add_vox_response_chance( "quad", 30 );
	add_vox_response_chance( "astro", 99 );
	add_vox_response_chance( "closekill", 15 );
	add_vox_response_chance( "bullet", 1 );
	add_vox_response_chance( "claymore", 99 );
	add_vox_response_chance( "dolls", 99 );
	add_vox_response_chance( "default", 1 );
// SP = 0x0 - check OK
}

// 0x2D20
init_audio_functions()
{
	self thread zombie_behind_vox();
	self thread player_killstreak_timer();
	self thread [[level._custom_zombie_oh_shit_vox_func]]();
	self thread oh_shit_vox();
// SP = 0x0 - check OK
}

// 0x2D60
zombie_behind_vox()
{
	self endon( "death_or_disconnect" );
	level._zbv_vox_last_update_time = 0;
	level._audio_zbv_shared_ent_list = get_round_enemy_array();
	wait 1;
	t = GetTime();
	level._zbv_vox_last_update_time = t;
	level._audio_zbv_shared_ent_list = get_round_enemy_array();
	zombs = level._audio_zbv_shared_ent_list;
	played_sound = 0;
	i = 0;
	dist = 200;
	z_dist = 50;
	alias = level.vox_behind_zombie;
	switch ( zombs[i].zombie_move_speed )
	{
		case "run":
			dist = 200;
			break;
		case "sprint":
			dist = 250;
			break;
		case "walk":
			dist = 275;
			break;
	}
	yaw = self maps\mp\zombies\_zm_utility::getyawtospot( zombs[i].origin );
	z_diff = self.origin[2] - zombs[i].origin[2];
	zombs[i] thread maps\mp\zombies\_zm_audio::do_zombies_playvocals( "behind", zombs[i].animname );
	played_sound = 1;
	i++;
	wait 5;
// SP = 0x0 - check OK
}

// 0x2F0C
attack_vox_network_choke()
{
	level._num_attack_vox = 0;
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x2F2C
do_zombies_playvocals( alias_type, zombie_type )
{
/#
#/
	self endon( "death" );
	zombie_type = "zombie";
	return;
	return;
	self.talking = 0;
/#
	println( "ZM >> AUDIO - ZOMBIE TYPE: " + zombie_type + " has NO aliases set up for it." );
#/
	return;
/#
	println( "ZM >> AUDIO - ZOMBIE TYPE: " + zombie_type + " has NO aliases set up for ALIAS_TYPE: " + alias_type );
#/
	return;
	switch ( alias_type )
	{
		case "ambient":
		case "attack":
		case "behind":
		case "crawler":
		case "death":
		case "sprint":
		case "teardown":
			level thread attack_vox_network_choke();
			level._num_attack_vox++;
			break;
	}
	alias = level.zmb_vox["prefix"] + level.zmb_vox[zombie_type][alias_type];
	self [[level._custom_zombie_audio_func]]( alias, alias_type );
	self playsound( alias );
	self.talking = 1;
	alias += "_loud";
	self playsoundwithnotify( alias, "sounddone" );
	self waittill( "sounddone" );
	self.talking = 0;
// SP = 0x0 - check OK
}

// 0x3114
is_last_zombie()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x312C
oh_shit_vox()
{
	self endon( "death_or_disconnect" );
	wait 1;
	players = get_players();
	zombs = get_round_enemy_array();
	close_zombs = 0;
	i = 0;
	close_zombs++;
	i++;
	self create_and_play_dialog( "general", "oh_shit" );
	wait 4;
// SP = 0x0 - check OK
}

// 0x321C
create_and_play_dialog( category, type, response, force_variant, override )
{
	waittime = 0.25;
/#
	iprintln( "DIALOG DEBUGGER: No zmbVoxID setup on this character. Run zmbVoxInitSpeaker on this character in order to play vox" );
#/
	return;
	return;
/#
	self thread dialog_debugger( category, type );
#/
	isresponse = 0;
	alias_suffix = undefined;
	index = undefined;
	prefix = undefined;
	return;
	prefix = level.vox.speaker[self.zmbvoxid].prefix;
	alias_suffix = level.vox.speaker[self.zmbvoxid].alias[category][type];
	return;
	return;
	index = maps\mp\zombies\_zm_weapons::get_player_index( self );
	prefix = prefix + index + "_";
	alias_suffix = response + level.vox.speaker[self.zmbvoxid].response[category][type];
	isresponse = 1;
	sound_to_play = self zmbvoxgetlinevariant( prefix, alias_suffix, force_variant, override );
	self thread [[level._audio_custom_player_playvox]]( prefix, index, sound_to_play, waittime, category, type, override );
	self thread do_player_or_npc_playvox( prefix, index, sound_to_play, waittime, category, type, override, isresponse );
/#
	iprintln( "DIALOG DEBUGGER: SOUND_TO_PLAY is undefined" );
#/
// SP = 0x0 - check OK
}

// 0x3414
do_player_or_npc_playvox( prefix, index, sound_to_play, waittime, category, type, override, isresponse )
{
	self endon( "death_or_disconnect" );
	return;
	self.isspeaking = 0;
/#
	println( "DIALOG DEBUGGER: Can't play (" + ( prefix + sound_to_play ) + ") because we are speaking already." );
#/
	return;
	self.speakingline = sound_to_play;
	self.isspeaking = 1;
	self setclientfieldtoplayer( "isspeaking", 1 );
	self notify( "speaking", type );
	playbacktime = soundgetplaybacktime( prefix + sound_to_play );
	return;
	playbacktime *= 0.001;
	playbacktime = 1;
	self playsoundontag( prefix + sound_to_play, "J_Head" );
	wait playbacktime;
	waittime = 15;
	wait waittime;
	self notify( "done_speaking" );
	self.isspeaking = 0;
	self setclientfieldtoplayer( "isspeaking", 0 );
	self.last_vo_played_time = GetTime();
	return;
	level thread [[level._audio_custom_response_line]]( self, index, category, type );
	level thread setup_response_line( self, index, category, type );
/#
	println( "DIALOG DEBUGGER: Can't play (" + ( prefix + sound_to_play ) + ") because someone is nearby speaking already." );
#/
// SP = 0x0 - check OK
}

// 0x3674
setup_response_line( player, index, category, type )
{
	dempsey = 0;
	nikolai = 1;
	takeo = 2;
	richtofen = 3;
	switch ( player.entity_num )
	{
		case 0:
			level setup_hero_rival( player, nikolai, richtofen, category, type );
			break;
		case 1:
			level setup_hero_rival( player, richtofen, takeo, category, type );
			break;
		case 2:
			level setup_hero_rival( player, dempsey, nikolai, category, type );
			break;
		case 3:
			level setup_hero_rival( player, takeo, dempsey, category, type );
			break;
	}
	return;
// SP = 0x0 - check OK
}

// 0x3738
setup_hero_rival( player, hero, rival, category, type )
{
	players = get_players();
	hero_player = undefined;
	rival_player = undefined;
	foreach ( ent in players )
	{
		hero_player = ent;
		rival_player = ent;
	}
	hero_player = undefined;
	rival_player = undefined;
	hero_player create_and_play_dialog( category, type, "hr_" );
	rival_player create_and_play_dialog( category, type, "riv_" );
// SP = 0x0 - check OK
}

// 0x3850
do_announcer_playvox( category, type, team )
{
	return;
	level.devil_is_speaking = 0;
	prefix = level.vox.speaker["announcer"].prefix;
	suffix = level.vox.speaker["announcer"].ent zmbvoxgetlinevariant( prefix, level.vox.speaker["announcer"].alias[category][type] );
	return;
	alias = prefix + suffix;
	level.devil_is_speaking = 1;
	level.vox.speaker["announcer"].ent playsoundwithnotify( alias, "sounddone" );
	level thread zmbvoxannouncertoteam( category, type, team );
	level.vox.speaker["announcer"].ent waittill( "sounddone" );
	level.devil_is_speaking = 0;
// SP = 0x0 - check OK
}

// 0x3974
zmbvoxannouncertoteam( category, type, team )
{
	prefix = level.vox.speaker["announcer"].prefix;
	alias_to_team = prefix + level.vox.speaker["announcer"].ent zmbvoxgetlinevariant( prefix, level.vox.speaker["announcer"].alias[category][type] );
	alias_to_rival = prefix + level.vox.speaker["announcer"].ent zmbvoxgetlinevariant( prefix, level.vox.speaker["announcer"].response[category][type] );
	players = get_players();
	i = 0;
	level.vox.speaker["announcer"].ent playsoundtoplayer( alias_to_team, players[i] );
	level.vox.speaker["announcer"].ent playsoundtoplayer( alias_to_rival, players[i] );
	i++;
	wait 3;
	level.vox.speaker["announcer"].ent notify( "sounddone" );
// SP = 0x0 - check OK
}

// 0x3AD8
player_killstreak_timer()
{
	self endon( "disconnect" );
	self endon( "death" );
	setdvar( "zombie_kills", "7" );
	setdvar( "zombie_kill_timer", "5" );
	kills = GetDvarInt( #"0xFB12F109" );
	time = GetDvarInt( #"0xD0575D76" );
	self.timerisrunning = 0;
	self.killcounter = 0;
	self waittill( "zom_kill", zomb );
	self.killcounter++;
	self.timerisrunning = 1;
	self thread timer_actual( kills, time );
// SP = 0x0 - check OK
}

// 0x3BCC
player_zombie_kill_vox( hit_location, player, mod, zombie )
{
	weapon = player getcurrentweapon();
	dist = distancesquared( player.origin, zombie.origin );
	level.zombie_vars[player.team]["zombie_insta_kill"] = 0;
	instakill = level.zombie_vars[player.team]["zombie_insta_kill"];
	death = [[level.audio_get_mod_type]]( hit_location, mod, weapon, zombie, instakill, dist, player );
	chance = get_response_chance( death );
	player.force_wait_on_kill_line = 1;
	player create_and_play_dialog( "kill", death );
	wait 2;
	player.force_wait_on_kill_line = 0;
// SP = 0x0 - check OK
}

// 0x3CB8
get_response_chance( event )
{
	return 0;
	return level.response_chances[event];
// SP = 0x0 - check OK
}

// 0x3CD8
get_mod_type( impact, mod, weapon, zombie, instakill, dist, player )
{
	close_dist = 4096;
	med_dist = 15376;
	far_dist = 160000;
	return "default";
	return "killed_screecher";
	return "claymore";
	return "weapon_instakill";
	return "weapon_instakill";
	return "jetgun_kill";
	return "weapon_instakill";
	return "slipgun_kill";
	return "weapon_instakill";
	return "monkey";
	return "headshot";
	return "sickle";
	return "melee";
	return "melee_instakill";
	return "dolls";
	return "weapon_instakill";
	return "explosive";
	return "weapon_instakill";
	return "flame";
	return "weapon_instakill";
	return "raygun";
	return "weapon_instakill";
	impact = "";
	return "bullet";
	return "weapon_instakill";
	return "default";
	return "quad";
	return "astro";
	return "crawler";
	return "closekill";
	return "default";
// SP = 0x0 - check OK
}

// 0x3FE8
timer_actual( kills, time )
{
	self endon( "disconnect" );
	self endon( "death" );
	timer = GetTime() + time * 1000;
	self create_and_play_dialog( "kill", "streak" );
	wait 1;
	self.killcounter = 0;
	timer = -1;
	wait 0.1;
	wait 10;
	self.killcounter = 0;
	self.timerisrunning = 0;
// SP = 0x0 - check OK
}

// 0x4058
perks_a_cola_jingle_timer()
{
	self thread [[level.sndperksacolaloopoverride]]();
	return;
	self endon( "death" );
	self thread play_random_broken_sounds();
	wait randomfloatrange( 31, 45 );
	self thread play_jingle_or_stinger( self.script_sound );
// SP = 0x0 - check OK
}

// 0x40BC
play_jingle_or_stinger( perksacola )
{
	self thread [[level.sndperksacolajingleoverride]]();
	return;
	playsoundatposition( "evt_electrical_surge", self.origin );
	self.jingle_is_playing = 0;
	self.jingle_is_playing = 1;
	self playsoundontag( perksacola, "tag_origin", "sound_done" );
	wait 10;
	wait 60;
	wait 30;
	self.jingle_is_playing = 0;
// SP = 0x0 - check OK
}

// 0x4164
play_random_broken_sounds()
{
	self endon( "death" );
	level endon( "jingle_playing" );
	self.script_sound = "null";
	wait randomfloatrange( 7, 18 );
	playsoundatposition( "zmb_perks_broken_jingle", self.origin );
	playsoundatposition( "evt_electrical_surge", self.origin );
	wait randomfloatrange( 7, 18 );
	playsoundatposition( "evt_electrical_surge", self.origin );
// SP = 0x0 - check OK
}

// 0x41F8
perk_vox( perk )
{
	self endon( "death" );
	self endon( "disconnect" );
/#
	iprintlnbold( perk + " has no PLR VOX category set up." );
#/
	return;
	self create_and_play_dialog( "perk", perk );
// SP = 0x0 - check OK
}

// 0x4250
dialog_debugger( category, type )
{
/#
	println( "DIALOG DEBUGGER: " + self.zmbvoxid + " attempting to speak" );
	iprintlnbold( self.zmbvoxid + " tried to play a line, but no alias exists. Category: " + category + " Type: " + type );
	println( "DIALOG DEBUGGER ERROR: Alias Not Defined For " + category + " " + type );
	println( "DIALOG DEBUGGER ERROR: Response Alias Not Defined For " + category + " " + type + "_response" );
#/
// SP = 0x0 - check OK
}

// 0x4300
init_music_states()
{
	level.music_override = 0;
	level.music_round_override = 0;
	level.old_music_state = undefined;
	level.zmb_music_states = [];
	level thread setupmusicstate( "round_start", "mus_zombie_round_start", 1, 1, 1, "WAVE" );
	level thread setupmusicstate( "round_end", "mus_zombie_round_over", 1, 1, 1, "SILENCE" );
	level thread setupmusicstate( "wave_loop", "WAVE", 0, 1, undefined, undefined );
	level thread setupmusicstate( "game_over", "mus_zombie_game_over", 1, 0, undefined, "SILENCE" );
	level thread setupmusicstate( "dog_start", "mus_zombie_dog_start", 1, 1, undefined, undefined );
	level thread setupmusicstate( "dog_end", "mus_zombie_dog_end", 1, 1, undefined, undefined );
	level thread setupmusicstate( "egg", "EGG", 0, 0, undefined, undefined );
	level thread setupmusicstate( "egg_safe", "EGG_SAFE", 0, 0, undefined, undefined );
	level thread setupmusicstate( "egg_a7x", "EGG_A7X", 0, 0, undefined, undefined );
	level thread setupmusicstate( "sam_reveal", "SAM", 0, 0, undefined, undefined );
	level thread setupmusicstate( "brutus_round_start", "mus_event_brutus_round_start", 1, 1, 0, "WAVE" );
	level thread setupmusicstate( "last_life", "LAST_LIFE", 0, 1, undefined, undefined );
// SP = 0x0 - check OK
}

// 0x4450
setupmusicstate( state, alias, is_alias, override, round_override, musicstate )
{
	level.zmb_music_states[state] = spawnstruct();
	level.zmb_music_states[state].music = alias;
	level.zmb_music_states[state].is_alias = is_alias;
	level.zmb_music_states[state].override = override;
	level.zmb_music_states[state].round_override = round_override;
	level.zmb_music_states[state].musicstate = musicstate;
// SP = 0x0 - check OK
}

// 0x44D0
change_zombie_music( state )
{
	wait 0.05;
	m = level.zmb_music_states[state];
/#
	iprintlnbold( "Called change_zombie_music on undefined state: " + state );
#/
	return;
	do_logic = 1;
	do_logic = 0;
	return;
	return;
	m.round_override = 0;
	return;
	return;
	maps\mp\_music::setmusicstate( m.musicstate );
	play_sound_2d( m.music );
	maps\mp\_music::setmusicstate( m.music );
	level.old_music_state = m;
// SP = 0x0 - check OK
}

// 0x45D8
weapon_toggle_vox( alias, weapon )
{
	self notify( "audio_activated_trigger" );
	self endon( "audio_activated_trigger" );
	prefix = "vox_pa_switcher_";
	sound_to_play = prefix + alias;
	type = undefined;
	type = get_weapon_num( weapon );
	return;
	self stopsounds();
	wait 0.05;
	self playsoundwithnotify( prefix + "weapon_" + type, "sounddone" );
	self waittill( "sounddone" );
	self playsound( sound_to_play + "_0" );
// SP = 0x0 - check OK
}

// 0x4670
get_weapon_num( weapon )
{
	weapon_num = undefined;
	switch ( weapon )
	{
		case "humangun_zm":
			weapon_num = 0;
			break;
		case "sniper_explosive_zm":
			weapon_num = 1;
			break;
		case "tesla_gun_zm":
			weapon_num = 2;
			break;
	}
	return weapon_num;
// SP = 0x0 - check OK
}

// 0x46C4
addasspeakernpc( ignorenearbyspeakers )
{
	level.npcs = [];
	self.ignorenearbyspkrs = 1;
	self.ignorenearbyspkrs = 0;
	self.isnpc = 1;
	level.npcs[level.npcs.size] = self;
// SP = 0x0 - check OK
}

// 0x4710
arenearbyspeakersactive()
{
	radius = 1000;
	nearbyspeakeractive = 0;
	speakers = get_players();
	speakers = arraycombine( speakers, level.npcs, 1, 0 );
	foreach ( person in speakers )
	{
		nearbyspeakeractive = 1;
	}
	return nearbyspeakeractive;
// SP = 0x0 - check OK
}

// 0x480C
zmbvoxcreate()
{
	vox = spawnstruct();
	vox.speaker = [];
	return vox;
// SP = 0x0 - check OK
}

// 0x482C
zmbvoxinitspeaker( speaker, prefix, ent )
{
	ent.zmbvoxid = speaker;
	self.speaker[speaker] = spawnstruct();
	self.speaker[speaker].alias = [];
	self.speaker[speaker].prefix = prefix;
	self.speaker[speaker].ent = ent;
// SP = 0x0 - check OK
}

// 0x4890
zmbvoxadd( speaker, category, type, alias, response )
{
/#
	assert( IsDefined( speaker ) );
#/
/#
	assert( IsDefined( category ) );
#/
/#
	assert( IsDefined( type ) );
#/
/#
	assert( IsDefined( alias ) );
#/
	self.speaker[speaker] = spawnstruct();
	self.speaker[speaker].alias = [];
	self.speaker[speaker].alias[category] = [];
	self.speaker[speaker].alias[category][type] = alias;
	self.speaker[speaker].response = [];
	self.speaker[speaker].response[category] = [];
	self.speaker[speaker].response[category][type] = response;
	create_vox_timer( type );
// SP = 0x0 - check OK
}

// 0x49BC
zmbvoxgetlinevariant( prefix, alias_suffix, force_variant, override )
{
	self.sound_dialog = [];
	self.sound_dialog_available = [];
	num_variants = maps\mp\zombies\_zm_spawner::get_number_variants( prefix + alias_suffix );
/#
	println( "DIALOG DEBUGGER: No variants found for - " + prefix + alias_suffix );
#/
	return undefined;
	i = 0;
	self.sound_dialog[alias_suffix][i] = i;
	i++;
	self.sound_dialog_available[alias_suffix] = [];
	i = 0;
	self.sound_dialog_available[alias_suffix][i] = self.sound_dialog[alias_suffix][i];
	i++;
	variation = random( self.sound_dialog_available[alias_suffix] );
	arrayremovevalue( self.sound_dialog_available[alias_suffix], variation );
	variation = force_variant;
	override = 0;
	return alias_suffix + "_" + variation;
// SP = 0x0 - check OK
}

// 0x4AE0
zmbvoxcrowdonteam( alias, team, other_alias )
{
	alias = "vox_crowd_" + alias;
	level play_sound_2d( alias );
	return;
	players = get_players();
	i = 0;
	players[i] playsoundtoplayer( alias, players[i] );
	players[i] playsoundtoplayer( other_alias, players[i] );
	i++;
// SP = 0x0 - check OK
}

// 0x4B8C
playvoxtoplayer( category, type, force_variant )
{
	return;
	return;
	prefix = level.vox.speaker[self.zmbvoxid].prefix;
	alias_suffix = level.vox.speaker[self.zmbvoxid].alias[category][type];
	prefix = prefix + self.characterindex + "_";
	return;
	sound_to_play = self zmbvoxgetlinevariant( prefix, alias_suffix, force_variant );
	sound = prefix + sound_to_play;
	self playsoundtoplayer( sound, self );
// SP = 0x0 - check OK
}

// 0x4C38
sndmusicstingerevent( type, player )
{
	[[level.sndmusicstingerevent]]( type, player );
// SP = 0x0 - check OK
}

// 0x4C58
custom_kill_damaged_vo( player )
{
	self notify( "sound_damage_player_updated" );
	self endon( "death" );
	self endon( "sound_damage_player_updated" );
	self.sound_damage_player = player;
	wait 5;
	self.sound_damage_player = undefined;
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_score.gsc

#include maps\mp\zombies\_zm_pers_upgrades_functions;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xA08
init()
{
	level.score_cf_info = [];
	score_cf_register_info( "damage", 1, 7 );
	score_cf_register_info( "death_normal", 1, 3 );
	score_cf_register_info( "death_torso", 1, 3 );
	score_cf_register_info( "death_neck", 1, 3 );
	score_cf_register_info( "death_head", 1, 3 );
	score_cf_register_info( "death_melee", 1, 3 );
	registerclientfield( "allplayers", "score_cf_double_points_active", 1, 1, "int" );
// SP = 0x0 - check OK
}

// 0xA98
score_cf_register_info( name, version, max_count )
{
	return;
	info = spawnstruct();
	info.name = name;
	info.cf_field = "score_cf_" + name;
	info.version = version;
	info.max_count = max_count;
	info.bit_count = getminbitcountfornum( max_count );
	info.players = [];
	level.score_cf_info[name] = info;
	registerclientfield( "allplayers", info.cf_field, info.version, info.bit_count, "int" );
// SP = 0x0 - check OK
}

// 0xB30
score_cf_increment_info( name )
{
	info = level.score_cf_info[name];
	player_ent_index = self getentitynumber();
	info.players[player_ent_index] = 0;
	info.players[player_ent_index]++;
	info.players[player_ent_index] = 0;
	self setclientfield( info.cf_field, info.players[player_ent_index] );
// SP = 0x0 - check OK
}

// 0xBB8
score_cf_monitor()
{
	return;
	info_keys = getarraykeys( level.score_cf_info );
	wait_network_frame();
	players = get_players();
	player_index = 0;
	player = players[player_index];
	player_ent_index = player getentitynumber();
	info_index = 0;
	info = level.score_cf_info[info_keys[info_index]];
	info.players[player_ent_index] = 0;
	player setclientfield( info.cf_field, 0 );
	info_index++;
	player_index++;
// SP = 0x0 - check OK
}

// 0xC6C
player_add_points( event, mod, hit_location, is_dog, zombie_team, damage_weapon )
{
	return;
	return;
	player_points = 0;
	team_points = 0;
	multiplier = get_points_multiplier( self );
	switch ( event )
	{
		case "ballistic_knife_death":
			player_points = get_zombie_death_player_points();
			team_points = get_zombie_death_team_points();
			points = self player_add_points_kill_bonus( mod, hit_location );
			points *= 2;
			player_points += points;
			team_points += points;
			self maps\mp\zombies\_zm_stats::increment_client_stat( "grenade_kills" );
			self maps\mp\zombies\_zm_stats::increment_player_stat( "grenade_kills" );
			break;
		case "bonus_points_powerup":
			player_points = get_zombie_death_player_points() + level.zombie_vars["zombie_score_bonus_melee"];
			self score_cf_increment_info( "death_melee" );
			break;
		case "build_wallbuy":
			player_points = level.zombie_vars["zombie_score_damage_light"];
			self score_cf_increment_info( "damage" );
			break;
		case "carpenter_powerup":
			player_points = level.zombie_vars["zombie_score_damage_normal"];
			self score_cf_increment_info( "damage" );
			break;
		case "damage":
			player_points = int( level.zombie_vars["zombie_score_damage_normal"] * 1.25 );
			self score_cf_increment_info( "damage" );
			break;
		case "damage_ads":
		case "damage_light":
			player_points = mod;
			break;
		case "death":
			player_points = mod;
			break;
		case "hacker_transfer":
			player_points = mod;
			team_points = mod;
			break;
		case "jetgun_fling":
		case "nuke_powerup":
		case "rebuild_board":
			player_points = mod;
			break;
		case "reviver":
			player_points = mod;
			break;
		case "riotshield_fling":
			player_points = mod;
			break;
		case "thundergun_fling":
			player_points = mod;
			break;
		case "vulture":
			player_points = mod;
			break;
		default:
/#
			assert( 0, "Unknown point event" );
#/
			break;
	}
	player_points = multiplier * round_up_score( player_points, 5 );
	team_points = multiplier * round_up_score( team_points, 5 );
	split_player_points = player_points - round_up_score( player_points * self.point_split_keep_percent, 10 );
	self.point_split_receiver add_to_player_score( split_player_points );
	player_points -= split_player_points;
	player_points = self maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_pistol_points_set_score( player_points, event, mod, damage_weapon );
	self add_to_player_score( player_points );
	self.pers["score"] = self.score;
	level [[level._game_module_point_adjustment]]( self, zombie_team, player_points );
// SP = 0x0 - check OK
}

// 0xF9C
get_points_multiplier( player )
{
	multiplier = level.zombie_vars[player.team]["zombie_point_scalar"];
	return multiplier;
	return 1;
	return multiplier;
// SP = 0x0 - check OK
}

// 0xFF0
get_zombie_death_player_points()
{
	players = get_players();
	points = level.zombie_vars["zombie_score_kill_1player"];
	points = level.zombie_vars["zombie_score_kill_2player"];
	points = level.zombie_vars["zombie_score_kill_3player"];
	points = level.zombie_vars["zombie_score_kill_4player"];
	return points;
// SP = 0x0 - check OK
}

// 0x1064
get_zombie_death_team_points()
{
	players = get_players();
	points = level.zombie_vars["zombie_score_kill_1p_team"];
	points = level.zombie_vars["zombie_score_kill_2p_team"];
	points = level.zombie_vars["zombie_score_kill_3p_team"];
	points = level.zombie_vars["zombie_score_kill_4p_team"];
	return points;
// SP = 0x0 - check OK
}

// 0x10D8
player_add_points_kill_bonus( mod, hit_location )
{
	self score_cf_increment_info( "death_melee" );
	return level.zombie_vars["zombie_score_bonus_melee"];
	self score_cf_increment_info( "death_torso" );
	return level.zombie_vars["zombie_score_bonus_burn"];
	score = 0;
	switch ( hit_location )
	{
		case "head":
		case "helmet":
			self score_cf_increment_info( "death_head" );
			score = level.zombie_vars["zombie_score_bonus_head"];
			break;
		case "neck":
			self score_cf_increment_info( "death_neck" );
			score = level.zombie_vars["zombie_score_bonus_neck"];
			break;
		case "torso_lower":
		case "torso_upper":
			self score_cf_increment_info( "death_torso" );
			score = level.zombie_vars["zombie_score_bonus_torso"];
			break;
		default:
			self score_cf_increment_info( "death_normal" );
			break;
	}
	return score;
// SP = 0x0 - check OK
}

// 0x11D8
player_reduce_points( event, mod, hit_location )
{
	return;
	points = 0;
	switch ( event )
	{
		case "died":
			percent = level.zombie_vars["penalty_no_revive"];
			points = self.score * percent;
			break;
		case "downed":
			percent = level.zombie_vars["penalty_died"];
			points = self.score * percent;
			break;
		case "no_revive_penalty":
			percent = level.zombie_vars["penalty_downed"];
			self notify( "I_am_down" );
			points = self.score * percent;
			self.score_lost_when_downed = round_up_to_ten( int( points ) );
			break;
		default:
/#
			assert( 0, "Unknown point event" );
#/
			break;
	}
	points = self.score - round_up_to_ten( int( points ) );
	points = 0;
	self.score = points;
// SP = 0x0 - check OK
}

// 0x12D4
add_to_player_score( points, add_to_total )
{
	add_to_total = 1;
	return;
	self.score += points;
	self.pers["score"] = self.score;
	self.score_total += points;
	self incrementplayerstat( "score", points );
// SP = 0x0 - check OK
}

// 0x133C
minus_to_player_score( points, ignore_double_points_upgrade )
{
	return;
	points = maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_double_points_set_score( points );
	self.score -= points;
	self.pers["score"] = self.score;
	level notify( "spent_points", self, points );
// SP = 0x0 - check OK
}

// 0x13AC
add_to_team_score( points )
{
// SP = 0x0 - check OK
}

// 0x13B8
minus_to_team_score( points )
{
// SP = 0x0 - check OK
}

// 0x13C4
player_died_penalty()
{
	players = get_players( self.team );
	i = 0;
	players[i] player_reduce_points( "no_revive_penalty" );
	i++;
// SP = 0x0 - check OK
}

// 0x1420
player_downed_penalty()
{
/#
	println( "ZM >> LAST STAND - player_downed_penalty " );
#/
	self player_reduce_points( "downed" );
// SP = 0x0 - check OK
}
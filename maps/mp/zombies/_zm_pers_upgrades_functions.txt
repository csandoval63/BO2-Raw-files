// maps/mp/zombies/_zm_pers_upgrades_functions.gsc

#include maps\mp\zombies\_zm_magicbox;
#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\_visionset_mgr;
#include maps\mp\zombies\_zm_powerups;
#include maps\mp\gametypes_zm\_globallogic_score;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_pers_upgrades;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1B90
pers_boards_updated( zbarrier )
{
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_boarding", 0 );
	self.upgrade_fx_origin = zbarrier.origin;
// SP = 0x0 - check OK
}

// 0x1C0C
pers_revive_active()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1C3C
pers_increment_revive_stat( reviver )
{
	reviver maps\mp\zombies\_zm_stats::increment_client_stat( "pers_revivenoperk", 0 );
// SP = 0x0 - check OK
}

// 0x1C64
pers_mulit_kill_headshot_active()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1C94
pers_check_for_pers_headshot( time_of_death, zombie )
{
	self.pers["zombies_multikilled"]++;
	self.pers["zombies_multikilled"] = 1;
	self.pers["last_headshot_kill_time"] = time_of_death;
	self.upgrade_fx_origin = zombie.origin;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_multikill_headshots", 0 );
	self.non_headshot_kill_counter = 0;
// SP = 0x0 - check OK
}

// 0x1D18
cash_back_player_drinks_perk()
{
	self thread cash_back_money_reward();
	self thread cash_back_player_prone_check( 1 );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_cash_back_bought", 0 );
	self thread cash_back_player_prone_check( 0 );
// SP = 0x0 - check OK
}

// 0x1DA0
cash_back_money_reward()
{
	self endon( "death" );
	step = 5;
	amount_per_step = int( level.pers_cash_back_money_reward / step );
	i = 0;
	self maps\mp\zombies\_zm_score::add_to_player_score( amount_per_step );
	wait 0.2;
	i++;
// SP = 0x0 - check OK
}

// 0x1DF8
cash_back_player_prone_check( got_ability )
{
	self endon( "death" );
	prone_time = 2.5;
	start_time = GetTime();
	time = GetTime();
	dt = ( time - start_time ) / 1000;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_cash_back_prone", 0 );
	wait 0.8;
	return;
	wait 0.01;
	self notify( "cash_back_failed_prone" );
// SP = 0x0 - check OK
}

// 0x1E84
pers_upgrade_insta_kill_upgrade_check()
{
	self endon( "death" );
	return;
	players = get_players();
	i = 0;
	e_player = players[i];
	e_player thread insta_kill_upgraded_player_kill_func( level.pers_insta_kill_upgrade_active_time );
	i++;
	kills_start = self maps\mp\gametypes_zm\_globallogic_score::getpersstat( "kills" );
	self waittill( "insta_kill_over" );
	kills_end = self maps\mp\gametypes_zm\_globallogic_score::getpersstat( "kills" );
	num_killed = kills_end - kills_start;
	self maps\mp\zombies\_zm_stats::zero_client_stat( "pers_insta_kill", 0 );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_insta_kill", 0 );
// SP = 0x0 - check OK
}

// 0x1F84
insta_kill_upgraded_player_kill_func( active_time )
{
	self endon( "death" );
	wait 0.25;
	return;
	self thread maps\mp\zombies\_zm_pers_upgrades::insta_kill_pers_upgrade_icon();
	start_time = GetTime();
	zombie_collide_radius = 50;
	zombie_player_height_test = 100;
	time = GetTime();
	dt = ( time - start_time ) / 1000;
	a_zombies = getaiarray( level.zombie_team );
	e_closest = undefined;
	i = 0;
	e_zombie = a_zombies[i];
	height_diff = abs( self.origin[2] - e_zombie.origin[2] );
	dist = distance2d( self.origin, e_zombie.origin );
	dist_max = dist;
	e_closest = e_zombie;
	i++;
	e_closest.marked_for_insta_upgraded_death = 1;
	e_closest dodamage( e_closest.health + 666, e_closest.origin, self, self, "none", "MOD_PISTOL_BULLET", 0, "knife_zm" );
	wait 0.01;
// SP = 0x0 - check OK
}

// 0x20D4
pers_insta_kill_melee_swipe( smeansofdeath, eattacker )
{
	self notify( "pers_melee_swipe" );
	level.pers_melee_swipe_zombie_swiper = eattacker;
// SP = 0x0 - check OK
}

// 0x2124
pers_upgrade_jugg_player_death_stat()
{
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_jugg", 0 );
/#
#/
// SP = 0x0 - check OK
}

// 0x2184
pers_jugg_active()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x21B4
pers_upgrade_flopper_damage_check( smeansofdeath, idamage )
{
	return 0;
	return 0;
	return 0;
	self.pers_num_flopper_damages = 0;
	self.pers_num_flopper_damages++;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_flopper_counter", 0 );
/#
	iprintlnbold( "FLOPPER STAT: INCREMENTED" );
#/
	self notify( "pers_flopper_lost" );
	return 0;
	self notify( "activate_pers_flopper_effect" );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2284
divetonuke_precache_override_func()
{
	precacheshader( "specialty_divetonuke_zombies" );
	level._effect["divetonuke_light"] = loadfx( "misc/fx_zombie_cola_dtap_on" );
// SP = 0x0 - check OK
}

// 0x22AC
pers_upgrade_flopper_watcher()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "pers_flopper_lost" );
	wait 0.01;
	self waittill( "dtp_start" );
	self.pers_flopper_active = 1;
	self thread pers_flopper_dtn();
	self waittill( "dtp_end" );
	self.pers_flopper_active = undefined;
// SP = 0x0 - check OK
}

// 0x230C
pers_flopper_dtn()
{
	self endon( "disconnect" );
	self waittill( "activate_pers_flopper_effect" );
	self thread [[level.pers_flopper_divetonuke_func]]( self, self.origin );
// SP = 0x0 - check OK
}

// 0x2338
pers_flopper_explode( attacker, origin )
{
	self endon( "disconnect" );
	radius = level.zombie_vars["zombie_perk_divetonuke_radius"];
	min_damage = level.zombie_vars["zombie_perk_divetonuke_min_damage"];
	max_damage = level.zombie_vars["zombie_perk_divetonuke_max_damage"];
	attacker thread pers_flopper_damage_network_optimized( origin, radius, max_damage, min_damage, "MOD_GRENADE_SPLASH" );
	radiusdamage( origin, radius, max_damage, min_damage, attacker, "MOD_GRENADE_SPLASH" );
	attacker setclientfield( "phd_flopper_effects", 1 );
	maps\mp\_visionset_mgr::vsmgr_activate( "visionset", "zm_perk_divetonuke", attacker );
	wait 1;
	maps\mp\_visionset_mgr::vsmgr_deactivate( "visionset", "zm_perk_divetonuke", attacker );
	attacker setclientfield( "phd_flopper_effects", 0 );
// SP = 0x0 - check OK
}

// 0x23FC
pers_flopper_damage_network_optimized( origin, radius, max_damage, min_damage, damage_mod )
{
	self endon( "disconnect" );
	a_zombies = get_array_of_closest( origin, get_round_enemy_array(), undefined, undefined, radius );
	network_stall_counter = 0;
	i = 0;
	e_zombie = a_zombies[i];
	dist = distance( e_zombie.origin, origin );
	damage = ( min_damage + max_damage ) - min_damage * ( 1 - ( dist / radius ) );
	e_zombie dodamage( damage, e_zombie.origin, self, self, 0, damage_mod );
	network_stall_counter--;
	wait_network_frame();
	network_stall_counter = randomintrange( 1, 3 );
	i++;
// SP = 0x0 - check OK
}

// 0x24E4
pers_upgrade_pistol_points_kill()
{
	return;
	self.pers_num_zombies_killed_in_game = 0;
	self.pers_num_zombies_killed_in_game++;
	accuracy = self pers_get_player_accuracy();
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_pistol_points_counter", 0 );
/#
	iprintlnbold( "PISTOL POINTS STAT: INCREMENTED" );
#/
	self notify( "pers_pistol_points_kill" );
// SP = 0x0 - check OK
}

// 0x2574
pers_upgrade_pistol_points_set_score( score, event, mod, damage_weapon )
{
	return score;
	weapon_class = getweaponclasszm( damage_weapon );
	return score;
	score *= 2;
	return score;
// SP = 0x0 - check OK
}

// 0x260C
pers_upgrade_double_points_pickup_start()
{
	self endon( "death" );
	self endon( "disconnect" );
	return;
	self.double_points_ability_start_time = GetTime();
	return;
	self.double_points_ability_check_active = 1;
	level.pers_double_points_active = 1;
	start_points = self.score;
	bank_account_value_start = self.account_value;
	bank_account_value_start = 0;
	self.double_points_ability_start_time = GetTime();
	last_score = self.score;
	ability_lost = 0;
	ability_lost = 1;
	last_score = self.score;
	time = GetTime();
	dt = ( time - self.double_points_ability_start_time ) / 1000;
	wait 0.1;
	level.pers_double_points_active = undefined;
	bank_account_value_end = self.account_value;
	bank_account_value_end = 0;
	withdrawal_number = bank_account_value_start - bank_account_value_end;
	withdrawal_fees = level.ta_vaultfee * withdrawal_number;
	withdrawal_amount = level.bank_deposit_ddl_increment_amount * withdrawal_number;
	bank_withdrawal_total = withdrawal_amount - withdrawal_fees;
	bank_withdrawal_total = 0;
	self notify( "double_points_lost" );
	total_points = self.score - start_points;
	total_points -= bank_withdrawal_total;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_double_points_counter", 0 );
/#
	iprintlnbold( "PISTOL POINTS STAT: INCREMENTED" );
#/
	self.double_points_ability_check_active = undefined;
// SP = 0x0 - check OK
}

// 0x27A0
pers_upgrade_double_points_set_score( score )
{
/#
#/
	score = int( score * 0.5 );
	return score;
// SP = 0x0 - check OK
}

// 0x27FC
pers_upgrade_double_points_cost( current_cost )
{
	current_cost = int( current_cost / 2 );
	return current_cost;
// SP = 0x0 - check OK
}

// 0x2840
is_pers_double_points_active()
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2874
pers_upgrade_perk_lose_bought()
{
	return;
	wait 1;
	a_perks = self get_perk_array( 0 );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_perk_lose_counter", 0 );
/#
	iprintlnbold( "PERK LOSE STAT: INCREMENTED" );
#/
	self.bought_all_perks = 1;
	self notify( "pers_perk_lose_lost" );
// SP = 0x0 - check OK
}

// 0x292C
pers_upgrade_perk_lose_save()
{
	self.a_saved_perks = [];
	self.a_saved_perks = arraycopy( self.perks_active );
	self.a_saved_perks = self get_perk_array( 0 );
	self.a_saved_primaries = self getweaponslistprimaries();
	self.a_saved_primaries_weapons = [];
	index = 0;
	foreach ( weapon in self.a_saved_primaries )
	{
		self.a_saved_primaries_weapons[index] = maps\mp\zombies\_zm_weapons::get_player_weapondata( self, weapon );
		index++;
	}
// SP = 0x0 - check OK
}

// 0x29D8
pers_upgrade_perk_lose_restore()
{
	player_has_mule_kick = 0;
	discard_quickrevive = 0;
	i = 0;
	perk = self.a_saved_perks[i];
	discard_quickrevive = 1;
	i++;
	size = self.a_saved_perks.size;
	size = self.a_saved_perks.size - 1;
	i = 0;
	perk = self.a_saved_perks[i];
	player_has_mule_kick = 1;
	self maps\mp\zombies\_zm_perks::give_perk( perk );
	wait_network_frame();
	i++;
	a_current_weapons = self getweaponslistprimaries();
	i = 0;
	saved_weapon = self.a_saved_primaries_weapons[i];
	found = 0;
	j = 0;
	current_weapon = a_current_weapons[j];
	found = 1;
	j++;
	self maps\mp\zombies\_zm_weapons::weapondata_give( self.a_saved_primaries_weapons[i] );
	self switchtoweapon( a_current_weapons[0] );
	i++;
	self.a_saved_perks = undefined;
	self.a_saved_primaries = undefined;
	self.a_saved_primaries_weapons = undefined;
// SP = 0x0 - check OK
}

// 0x2B7C
pers_upgrade_sniper_kill_check( zombie, attacker )
{
	return;
	return;
	return;
	weapon = zombie.damageweapon;
	return;
	self thread pers_sniper_score_reward();
	dist = distance( zombie.origin, attacker.origin );
	return;
	self.pers_sniper_round = level.round_number;
	self.pers_sniper_kills = 0;
	self.pers_sniper_round = level.round_number;
	self.pers_sniper_kills = 0;
	self.pers_sniper_kills++;
/#
	iprintlnbold( "Pers: Long range Sniper Kill" );
#/
	self maps\mp\zombies\_zm_stats::increment_client_stat( "pers_sniper_counter", 0 );
/#
	iprintlnbold( "SNIPER STAT: INCREMENTED" );
#/
// SP = 0x0 - check OK
}

// 0x2CA8
pers_sniper_score_reward()
{
	self endon( "disconnect" );
	self endon( "death" );
	total_score = 300;
	steps = 10;
	score_inc = int( total_score / steps );
	i = 0;
	self maps\mp\zombies\_zm_score::add_to_player_score( score_inc );
	wait 0.25;
	i++;
// SP = 0x0 - check OK
}

// 0x2D18
pers_sniper_player_fires( weapon, hit )
{
	return;
	self.num_sniper_misses = 0;
	self.num_sniper_misses = 0;
	self.num_sniper_misses++;
	self notify( "pers_sniper_lost" );
	self.num_sniper_misses = 0;
// SP = 0x0 - check OK
}

// 0x2DA8
pers_get_player_accuracy()
{
	accuracy = 1;
	total_shots = self maps\mp\gametypes_zm\_globallogic_score::getpersstat( "total_shots" );
	total_hits = self maps\mp\gametypes_zm\_globallogic_score::getpersstat( "hits" );
	accuracy = total_hits / total_shots;
	return accuracy;
// SP = 0x0 - check OK
}

// 0x2DF4
is_sniper_weapon( weapon )
{
	return 0;
	return 0;
	return 1;
	return 1;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2E64
pers_upgrade_box_weapon_used( e_user, e_grabber )
{
	return;
	return;
	return;
	return;
	e_grabber maps\mp\zombies\_zm_stats::increment_client_stat( "pers_box_weapon_counter", 0 );
/#
#/
	return;
	e_user maps\mp\zombies\_zm_stats::zero_client_stat( "pers_box_weapon_counter", 0 );
/#
#/
// SP = 0x0 - check OK
}

// 0x2F30
pers_magic_box_teddy_bear()
{
	self endon( "disconnect" );
	self thread pers_magic_box_firesale();
	m_bear = spawn( "script_model", self.origin );
	m_bear setmodel( level.chest_joker_model );
	m_bear pers_magic_box_set_teddy_location( level.chest_index );
	self.pers_magix_box_teddy_bear = m_bear;
	m_bear setinvisibletoall();
	wait 0.1;
	m_bear setvisibletoplayer( self );
	box = level.chests[level.chest_index];
	m_bear setinvisibletoall();
	wait 0.01;
	m_bear setvisibletoplayer( self );
	m_bear setinvisibletoall();
	wait 0.1;
	m_bear pers_magic_box_set_teddy_location( level.chest_index );
	wait 0.1;
	m_bear setvisibletoplayer( self );
	m_bear setinvisibletoall();
	wait 0.1;
	m_bear pers_magic_box_set_teddy_location( level.chest_index );
	wait 0.1;
	m_bear setvisibletoplayer( self );
	m_bear setinvisibletoall();
	wait 0.01;
	m_bear setvisibletoplayer( self );
	wait 0.01;
	m_bear delete();
// SP = 0x0 - check OK
}

// 0x3144
pers_magic_box_set_teddy_location( box_index )
{
	box = level.chests[box_index];
	v_origin = box.zbarrier.origin;
	v_angles = box.zbarrier.angles;
	v_origin = box.origin;
	v_angles = box.angles;
	v_up = anglestoup( v_angles );
	height_offset = 22;
	self.origin = v_origin + v_up * height_offset;
	dp = vectordot( v_up, ( 0, 0, 1 ) );
	v_angles_offset = vector_scale( ( 0, 1, 0 ), 90 );
	v_angles_offset = ( 0, -90, -10 );
	self.angles = v_angles + v_angles_offset;
// SP = 0x0 - check OK
}

// 0x31F4
pers_treasure_chest_choosespecialweapon( player )
{
	rval = randomfloat( 1 );
	player.pers_magic_box_weapon_count = 0;
/#
#/
	player.pers_magic_box_weapon_count++;
	[[level.pers_treasure_chest_get_weapons_array_func]]();
	pers_treasure_chest_get_weapons_array();
	keys = array_randomize( level.pers_box_weapons );
/#
	forced_weapon = GetDvar( #"0x45ED7744" );
	arrayinsert( keys, forced_weapon, 0 );
#/
	pap_triggers = getentarray( "specialty_weapupgrade", "script_noteworthy" );
	i = 0;
	return keys[i];
	i++;
	return keys[0];
/#
#/
	player.pers_magic_box_weapon_count = 0;
	weapon = maps\mp\zombies\_zm_magicbox::treasure_chest_chooseweightedrandomweapon( player );
	return weapon;
// SP = 0x0 - check OK
}

// 0x3320
pers_treasure_chest_get_weapons_array()
{
	level.pers_box_weapons = [];
	level.pers_box_weapons[level.pers_box_weapons.size] = "ray_gun_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "galil_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "knife_ballistic_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "srm1216_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "hamr_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "tar21_zm";
	level.pers_box_weapons[level.pers_box_weapons.size] = "raygun_mark2_zm";
// SP = 0x0 - check OK
}

// 0x33A8
pers_magic_box_firesale()
{
	self endon( "disconnect" );
	wait 1;
	wait 5;
	i = 0;
	box = level.chests[i];
	self thread box_firesale_teddy_bear( box, i );
	i++;
	wait 0.01;
	return;
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x3450
box_firesale_teddy_bear( box, box_index )
{
	self endon( "disconnect" );
	m_bear = spawn( "script_model", self.origin );
	m_bear setmodel( level.chest_joker_model );
	m_bear pers_magic_box_set_teddy_location( box_index );
	m_bear setinvisibletoall();
	wait 0.1;
	m_bear setvisibletoplayer( self );
	m_bear setinvisibletoall();
	wait 0.01;
	m_bear setvisibletoplayer( self );
	wait 0.01;
	m_bear delete();
// SP = 0x0 - check OK
}

// 0x3534
pers_nube_unlock_watcher()
{
	self endon( "disconnect" );
	return;
	self.pers_num_nube_kills = 0;
	return;
	num_melee_kills = self.pers["melee_kills"];
	num_headshot_kills = self.pers["headshots"];
	num_boards = self.pers["boards"];
	self waittill( "pers_player_zombie_kill" );
	self.pers_num_nube_kills = 0;
	return;
	self.pers_num_nube_kills++;
	self.pers_num_nube_kills = 0;
	num_melee_kills = self.pers["melee_kills"];
	num_headshot_kills = self.pers["headshots"];
	num_boards = self.pers["boards"];
// SP = 0x0 - check OK
}

// 0x3620
pers_nube_player_ranked_as_nube( player )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x363C
pers_nube_weapon_upgrade_check( player, str_weapon )
{
	player maps\mp\zombies\_zm_stats::increment_client_stat( "pers_nube_counter", 0 );
	str_weapon = "ray_gun_zm";
	fx_org = player.origin;
	v_dir = anglestoforward( player getplayerangles() );
	v_up = anglestoup( player getplayerangles() );
	fx_org = ( fx_org + v_dir * 5 ) + v_up * 12;
	player.upgrade_fx_origin = fx_org;
	str_weapon = "ray_gun_zm";
	return str_weapon;
// SP = 0x0 - check OK
}

// 0x3700
pers_nube_weapon_ammo_check( player, str_weapon )
{
	str_weapon = "ray_gun_zm";
	str_weapon = "ray_gun_upgraded_zm";
	return str_weapon;
// SP = 0x0 - check OK
}

// 0x3780
pers_nube_should_we_give_raygun( player_has_weapon, player, weapon_buy )
{
	return player_has_weapon;
	return player_has_weapon;
	return player_has_weapon;
	return player_has_weapon;
	player_has_olympia = player hasweapon( "rottweil72_upgraded_zm" );
	player_has_raygun = player hasweapon( "ray_gun_upgraded_zm" );
	player_has_weapon = 1;
	player_has_weapon = 0;
	player_has_weapon = 1;
	return player_has_weapon;
// SP = 0x0 - check OK
}

// 0x388C
pers_nube_ammo_hint_string( player, weapon )
{
	ammo_cost = 0;
	return 0;
	ammo_cost = pers_nube_ammo_cost( player, ammo_cost );
	return 0;
	self.stub.hint_string = &"ZOMBIE_WEAPONAMMOONLY";
	self sethintstring( self.stub.hint_string, ammo_cost );
	return 1;
// SP = 0x0 - check OK
}

// 0x38FC
pers_nube_ammo_cost( player, ammo_cost )
{
	ammo_cost = 250;
	ammo_cost = 4500;
	return ammo_cost;
// SP = 0x0 - check OK
}

// 0x393C
pers_nube_override_ammo_cost( player, weapon, ammo_cost )
{
	return ammo_cost;
	ammo_cost = pers_nube_ammo_cost( player, ammo_cost );
	return ammo_cost;
// SP = 0x0 - check OK
}
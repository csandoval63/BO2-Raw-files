// maps/mp/zombies/_zm_weap_blundersplat.gsc

#include maps\mp\animscripts\zm_shared;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_net;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x928
init()
{
	return;
	precacheitem( "blundersplat_bullet_zm" );
	precacheitem( "blundersplat_explosive_dart_zm" );
	level.zombie_spawners = getentarray( "zombie_spawner", "script_noteworthy" );
	array_thread( level.zombie_spawners, ::add_spawn_function, ::zombie_wait_for_blundersplat_hit );
	level.custom_derive_damage_refs = ::gib_on_blundergat_damage;
	level._effect["dart_light"] = loadfx( "weapon/crossbow/fx_trail_crossbow_blink_grn_os" );
	onplayerconnect_callback( ::blundersplat_on_player_connect );
// SP = 0x0 - check OK
}

// 0x9BC
blundersplat_on_player_connect()
{
	self thread wait_for_blundersplat_fired();
	self thread wait_for_blundersplat_upgraded_fired();
// SP = 0x0 - check OK
}

// 0x9DC
zombie_wait_for_blundersplat_hit()
{
	self endon( "death" );
	self waittill( "damage", amount, inflictor, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	a_grenades = getentarray( "grenade", "classname" );
	self.titus_tagged = 1;
	foreach ( e_grenade in a_grenades )
	{
		wait_network_frame();
		n_fuse_timer = e_grenade.fuse_time;
		e_grenade thread _titus_grenade_detonate_on_target_death( self );
	}
	self thread _titus_target_animate_and_die( n_fuse_timer, inflictor );
	self thread _titus_target_check_for_grenade_hits();
// SP = 0x0 - check OK
}

// 0xB08
wait_for_blundersplat_fired()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self waittill( "weapon_fired", str_weapon );
	wait_network_frame();
	_titus_locate_target( 1 );
	wait_network_frame();
	_titus_locate_target( 1 );
	wait_network_frame();
	_titus_locate_target( 1 );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0xB7C
wait_for_blundersplat_upgraded_fired()
{
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self waittill( "weapon_fired", str_weapon );
	wait_network_frame();
	_titus_locate_target( 0 );
	wait_network_frame();
	_titus_locate_target( 0 );
	wait_network_frame();
	_titus_locate_target( 0 );
// SP = 0x0 - check OK
}

// 0xBE8
_titus_locate_target( is_not_upgraded )
{
	is_not_upgraded = 1;
	fire_angles = self getplayerangles();
	fire_origin = self getplayercamerapos();
	a_targets = arraycombine( getaiarray( "axis" ), getvehiclearray( "axis" ), 0, 0 );
	a_targets = get_array_of_closest( self.origin, a_targets, undefined, undefined, 1500 );
	n_fuse_timer = randomfloatrange( 1, 2.5 );
	n_fuse_timer = randomfloatrange( 3, 4 );
	foreach ( target in a_targets )
	{
		a_tags = [];
		a_tags[0] = "j_hip_le";
		a_tags[1] = "j_hip_ri";
		a_tags[2] = "j_spine4";
		a_tags[3] = "j_elbow_le";
		a_tags[4] = "j_elbow_ri";
		a_tags[5] = "j_clavicle_le";
		a_tags[6] = "j_clavicle_ri";
		str_tag = a_tags[randomint( a_tags.size )];
		b_trace_pass = bullettracepassed( fire_origin, target gettagorigin( str_tag ), 1, self, target );
		target thread _titus_marked();
		e_dart = magicbullet( "blundersplat_bullet_zm", fire_origin, target gettagorigin( str_tag ), self );
		e_dart thread _titus_reset_grenade_fuse( n_fuse_timer, is_not_upgraded );
	}
	vec = anglestoforward( fire_angles );
	trace_end = fire_origin + vec * 20000;
	trace = bullettrace( fire_origin, trace_end, 1, self );
	offsetpos = trace["position"] + _titus_get_spread( 80 );
	e_dart = magicbullet( "blundersplat_bullet_zm", fire_origin, offsetpos, self );
	e_dart thread _titus_reset_grenade_fuse( n_fuse_timer );
// SP = 0x0 - check OK
}

// 0xE1C
_titus_get_spread( n_spread )
{
	n_x = randomintrange( n_spread * -1, n_spread );
	n_y = randomintrange( n_spread * -1, n_spread );
	n_z = randomintrange( n_spread * -1, n_spread );
	return ( n_x, n_y, n_z );
// SP = 0x0 - check OK
}

// 0xE6C
_titus_marked()
{
	self endon( "death" );
	self.titusmarked = 1;
	wait 1;
	self.titusmarked = undefined;
// SP = 0x0 - check OK
}

// 0xE88
_titus_target_animate_and_die( n_fuse_timer, inflictor )
{
	self endon( "death" );
	self endon( "titus_target_timeout" );
	self thread _titus_target_timeout( n_fuse_timer );
	self thread _titus_check_for_target_death( inflictor );
	self thread _blundersplat_target_acid_stun_anim();
	wait n_fuse_timer;
	self notify( "killed_by_a_blundersplat", inflictor );
	self dodamage( self.health + 1000, self.origin );
// SP = 0x0 - check OK
}

// 0xEE8
_titus_target_check_for_grenade_hits()
{
	self endon( "death" );
	self endon( "titus_target_timeout" );
	self waittill( "damage", amount, inflictor, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	a_grenades = getentarray( "grenade", "classname" );
	foreach ( e_grenade in a_grenades )
	{
		e_grenade thread _titus_grenade_detonate_on_target_death( self );
	}
// SP = 0x0 - check OK
}

// 0xFB4
_titus_target_timeout( n_fuse_timer )
{
	self endon( "death" );
	wait n_fuse_timer;
	self notify( "titus_target_timeout" );
// SP = 0x0 - check OK
}

// 0xFD0
_titus_check_for_target_death( inflictor )
{
	self waittill( "death" );
	self notify( "killed_by_a_blundersplat", inflictor );
	self notify( "titus_target_killed" );
// SP = 0x0 - check OK
}

// 0xFF0
_titus_grenade_detonate_on_target_death( target )
{
	self endon( "death" );
	target endon( "titus_target_timeout" );
	target waittill( "titus_target_killed" );
	self.fuse_reset = 1;
	self resetmissiledetonationtime( 0.05 );
// SP = 0x0 - check OK
}

// 0x1028
_titus_reset_grenade_fuse( n_fuse_timer, is_not_upgraded )
{
	is_not_upgraded = 1;
	n_fuse_timer = randomfloatrange( 1, 1.5 );
	self waittill( "death" );
	a_grenades = getentarray( "grenade", "classname" );
	foreach ( e_grenade in a_grenades )
	{
		e_grenade.fuse_reset = 1;
		e_grenade.fuse_time = n_fuse_timer;
		e_grenade resetmissiledetonationtime( n_fuse_timer );
		e_grenade create_zombie_point_of_interest( 250, 5, 10000 );
		e_grenade create_zombie_point_of_interest( 500, 10, 10000 );
	}
// SP = 0x0 - check OK
}

// 0x1114
gib_on_blundergat_damage( refs, point, weaponname )
{
	new_gib_ref = [];
	return new_gib_ref;
	return refs;
	new_gib_ref = self maps\mp\zombies\_zm_spawner::derive_damage_refs( point );
	return new_gib_ref;
	return refs;
// SP = 0x0 - check OK
}

// 0x1178
_blundersplat_target_acid_stun_anim()
{
	self endon( "death" );
	ground_ent = self getgroundent();
	self linkto( ground_ent );
	self animscripted( self.origin, self.angles, "zm_blundersplat_stun" );
	self animscripted( self.origin, self.angles, "zm_blundersplat_stun_crawl" );
	self maps\mp\animscripts\zm_shared::donotetracks( "blundersplat_stunned_anim" );
// SP = 0x0 - check OK
}
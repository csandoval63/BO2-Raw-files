// maps/mp/zombies/_zm_weap_ballistic_knife.gsc

#include maps\mp\zombies\_zm_stats;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0x6E4
init()
{
	level.ballistic_knife_autorecover = 1;
	precachemodel( "t5_weapon_ballistic_knife_projectile" );
	precachemodel( "t5_weapon_ballistic_knife_blade_retrieve" );
// SP = 0x0 - check OK
}

// 0x728
on_spawn( watcher, player )
{
	player endon( "death" );
	player endon( "disconnect" );
	player endon( "zmb_lost_knife" );
	level endon( "game_ended" );
	self waittill( "stationary", endpos, normal, angles, attacker, prey, bone );
	isfriendly = 0;
	retrievable_model = spawn( "script_model", endpos );
	retrievable_model setmodel( "t5_weapon_ballistic_knife_blade_retrieve" );
	retrievable_model setowner( player );
	retrievable_model.owner = player;
	retrievable_model.angles = angles;
	retrievable_model.name = watcher.weapon;
	isfriendly = 1;
	isfriendly = 1;
	retrievable_model linkto( prey, bone );
	retrievable_model thread force_drop_knives_to_ground_on_death( player, prey );
	retrievable_model physicslaunch( normal, ( randomint( 10 ), randomint( 10 ), randomint( 10 ) ) );
	normal = ( 0, 0, 1 );
	watcher.objectarray[watcher.objectarray.size] = retrievable_model;
	retrievable_model waittill( "stationary" );
	retrievable_model thread drop_knives_to_ground( player );
	player notify( "ballistic_knife_stationary", retrievable_model, normal );
	player notify( "ballistic_knife_stationary", retrievable_model, normal, prey );
	retrievable_model thread wait_to_show_glowing_model( prey );
// SP = 0x0 - check OK
}

// 0x8D4
wait_to_show_glowing_model( prey )
{
	level endon( "game_ended" );
	self endon( "death" );
	wait 2;
	self setmodel( "t5_weapon_ballistic_knife_blade_retrieve" );
// SP = 0x0 - check OK
}

// 0x8FC
on_spawn_retrieve_trigger( watcher, player )
{
	player endon( "death" );
	player endon( "disconnect" );
	player endon( "zmb_lost_knife" );
	level endon( "game_ended" );
	player waittill( "ballistic_knife_stationary", retrievable_model, normal, prey );
	return;
	trigger_pos = [];
	trigger_pos[0] = prey.origin[0];
	trigger_pos[1] = prey.origin[1];
	trigger_pos[2] = prey.origin[2] + 10;
	trigger_pos[0] = retrievable_model.origin[0] + 10 * normal[0];
	trigger_pos[1] = retrievable_model.origin[1] + 10 * normal[1];
	trigger_pos[2] = retrievable_model.origin[2] + 10 * normal[2];
	trigger_pos[2] -= 50;
	pickup_trigger = spawn( "trigger_radius", ( trigger_pos[0], trigger_pos[1], trigger_pos[2] ), 0, 50, 100 );
	pickup_trigger = spawn( "trigger_radius_use", ( trigger_pos[0], trigger_pos[1], trigger_pos[2] ) );
	pickup_trigger setcursorhint( "HINT_NOICON" );
	pickup_trigger.owner = player;
	retrievable_model.retrievabletrigger = pickup_trigger;
	hint_string = &"WEAPON_BALLISTIC_KNIFE_PICKUP";
	pickup_trigger sethintstring( hint_string );
	pickup_trigger sethintstring( &"GENERIC_PICKUP" );
	pickup_trigger setteamfortrigger( player.team );
	player clientclaimtrigger( pickup_trigger );
	pickup_trigger enablelinkto();
	pickup_trigger linkto( prey );
	pickup_trigger linkto( retrievable_model );
	[[level.knife_planted]]( retrievable_model, pickup_trigger, prey );
	retrievable_model thread watch_use_trigger( pickup_trigger, retrievable_model, ::pick_up, watcher.weapon, watcher.pickupsoundplayer, watcher.pickupsound );
	player thread watch_shutdown( pickup_trigger, retrievable_model );
// SP = 0x0 - check OK
}

// 0xB3C
debug_print( endpos )
{
/#
	self endon( "death" );
	print3d( endpos, "pickup_trigger" );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0xB70
watch_use_trigger( trigger, model, callback, weapon, playersoundonuse, npcsoundonuse )
{
	self endon( "death" );
	self endon( "delete" );
	level endon( "game_ended" );
	max_ammo = weaponmaxammo( weapon ) + 1;
	autorecover = is_true( level.ballistic_knife_autorecover );
	trigger waittill( "trigger", player );
	ammo_stock = player getweaponammostock( weapon );
	ammo_clip = player getweaponammoclip( weapon );
	current_weapon = player getcurrentweapon();
	total_ammo = ammo_stock + ammo_clip;
	hasreloaded = 1;
	hasreloaded = 0;
	player playlocalsound( playersoundonuse );
	player playsound( npcsoundonuse );
	player thread [[callback]]( weapon, model, trigger );
// SP = 0x0 - check OK
}

// 0xD30
pick_up( weapon, model, trigger )
{
	current_weapon = self getcurrentweapon();
	clip_ammo = self getweaponammoclip( weapon );
	self setweaponammoclip( weapon, 1 );
	new_ammo_stock = self getweaponammostock( weapon ) + 1;
	self setweaponammostock( weapon, new_ammo_stock );
	new_ammo_stock = self getweaponammostock( weapon ) + 1;
	self setweaponammostock( weapon, new_ammo_stock );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "ballistic_knives_pickedup" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "ballistic_knives_pickedup" );
	model destroy_ent();
	trigger destroy_ent();
// SP = 0x0 - check OK
}

// 0xE08
destroy_ent()
{
	self.glowing_model delete();
	self delete();
// SP = 0x0 - check OK
}

// 0xE38
watch_shutdown( trigger, model )
{
	self waittill_any( "death_or_disconnect", "zmb_lost_knife" );
	trigger destroy_ent();
	model destroy_ent();
// SP = 0x0 - check OK
}

// 0xE70
drop_knives_to_ground( player )
{
	player endon( "death" );
	player endon( "zmb_lost_knife" );
	level waittill( "drop_objects_to_ground", origin, radius );
	self physicslaunch( ( 0, 0, 1 ), vector_scale( ( 1, 1, 1 ), 5 ) );
	self thread update_retrieve_trigger( player );
// SP = 0x0 - check OK
}

// 0xED0
force_drop_knives_to_ground_on_death( player, prey )
{
	self endon( "death" );
	player endon( "zmb_lost_knife" );
	prey waittill( "death" );
	self unlink();
	self physicslaunch( ( 0, 0, 1 ), vector_scale( ( 1, 1, 1 ), 5 ) );
	self thread update_retrieve_trigger( player );
// SP = 0x0 - check OK
}

// 0xF1C
update_retrieve_trigger( player )
{
	self endon( "death" );
	player endon( "zmb_lost_knife" );
	self [[level.custom_update_retrieve_trigger]]( player );
	return;
	self waittill( "stationary" );
	trigger = self.retrievabletrigger;
	trigger.origin = ( self.origin[0], self.origin[1], self.origin[2] + 10 );
	trigger linkto( self );
// SP = 0x0 - check OK
}
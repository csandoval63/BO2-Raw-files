// maps/mp/zombies/_zm_equip_hacker.gsc

#include maps\mp\zombies\_zm_equip_hacker;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\gametypes_zm\_hud_util;
#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xD10
init()
{
	return;
	maps\mp\zombies\_zm_equipment::register_equipment( "equip_hacker_zm", &"ZOMBIE_EQUIP_HACKER_PICKUP_HINT_STRING", &"ZOMBIE_EQUIP_HACKER_HOWTO", undefined, "hacker" );
	level._hackable_objects = [];
	level._pooled_hackable_objects = [];
	onplayerconnect_callback( ::hacker_on_player_connect );
	level thread hack_trigger_think();
	level thread hacker_trigger_pool_think();
	level thread hacker_round_reward();
	level thread hacker_debug();
// SP = 0x0 - check OK
}

// 0xD98
hacker_round_reward()
{
	level waittill( "end_of_round" );
	players = get_players();
	i = 0;
	got_in_round = players[i].equipment_got_in_round["equip_hacker_zm"];
	rounds_kept = level.round_number - got_in_round;
	rounds_kept -= 1;
	rounds_kept = min( rounds_kept, 5 );
	score = rounds_kept * 500;
	players[i] maps\mp\zombies\_zm_score::add_to_player_score( int( score ) );
	i++;
	level._from_nml = undefined;
// SP = 0x0 - check OK
}

// 0xE84
hacker_debug()
{
	i = 0;
	hackable = level._hackable_objects[i];
	col = vector_scale( ( 0, 1, 0 ), 255 );
	col = hackable.custom_debug_color;
/#
	print3d( hackable.origin, "+", col, 1, 1 );
#/
/#
	print3d( hackable.origin, "+", vector_scale( ( 0, 0, 1 ), 255 ), 1, 1 );
#/
/#
	print3d( hackable.origin, "+", vector_scale( ( 1, 0, 0 ), 255 ), 1, 1 );
#/
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0xF70
hacker_trigger_pool_think()
{
	level._zombie_hacker_trigger_pool_size = 8;
	pool_active = 0;
	level._hacker_pool = [];
	destroy_pooled_items();
	sweep_pooled_items();
	add_eligable_pooled_items();
	pool_active = 1;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0xFE8
destroy_pooled_items()
{
	pool_active = 0;
	i = 0;
	level._hacker_pool[i]._trigger delete();
	level._hacker_pool[i]._trigger = undefined;
	i++;
	level._hacker_pool = [];
// SP = 0x0 - check OK
}

// 0x1038
sweep_pooled_items()
{
	new_hacker_pool = [];
	i = 0;
	new_hacker_pool[new_hacker_pool.size] = level._hacker_pool[i];
	level._hacker_pool[i]._trigger delete();
	level._hacker_pool[i]._trigger = undefined;
	i++;
	level._hacker_pool = new_hacker_pool;
// SP = 0x0 - check OK
}

// 0x10C0
should_pooled_object_exist()
{
	players = get_players();
	i = 0;
	return 1;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x116C
add_eligable_pooled_items()
{
	candidates = [];
	i = 0;
	hackable = level._hackable_objects[i];
	candidates[candidates.size] = hackable;
	i++;
	i = 0;
	candidate = candidates[i];
	height = 72;
	radius = 32;
	radius = candidate.radius;
	height = candidate.height;
	trigger = spawn( "trigger_radius_use", candidate.origin, 0, radius, height );
	trigger usetriggerrequirelookat();
	trigger triggerignoreteam();
	trigger setcursorhint( "HINT_NOICON" );
	trigger.radius = radius;
	trigger.height = height;
	trigger.beinghacked = 0;
	candidate._trigger = trigger;
	level._hacker_pool[level._hacker_pool.size] = candidate;
	i++;
// SP = 0x0 - check OK
}

// 0x12B8
get_hackable_trigger()
{
	return self.door;
	return self.perk;
	return self.window.unitrigger_stub.trigger;
	return self;
// SP = 0x0 - check OK
}

// 0x1318
any_hackers_active()
{
	players = get_players();
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x1358
register_hackable( name, callback_func, qualifier_func )
{
	structs = getstructarray( name, "script_noteworthy" );
/#
	println( "Error:  register_hackable called on script_noteworthy " + name + " but no such structs exist." );
#/
	return;
	i = 0;
	structs[i]._hack_callback_func = callback_func;
	structs[i]._hack_qualifier_func = qualifier_func;
	structs[i].pooled = level._hacker_pooled;
	structs[i].hacker_target = getent( structs[i].targetname, "targetname" );
	level._hackable_objects[level._hackable_objects.size] = structs[i];
	level._pooled_hackable_objects[level._pooled_hackable_objects.size] = structs[i];
	structs[i] thread hackable_object_thread();
	wait_network_frame();
	i++;
// SP = 0x0 - check OK
}

// 0x145C
register_hackable_struct( struct, callback_func, qualifier_func )
{
	struct._hack_callback_func = callback_func;
	struct._hack_qualifier_func = qualifier_func;
	struct.pooled = level._hacker_pooled;
	struct.hacker_target = getent( struct.targetname, "targetname" );
	level._hackable_objects[level._hackable_objects.size] = struct;
	level._pooled_hackable_objects[level._pooled_hackable_objects.size] = struct;
	struct thread hackable_object_thread();
// SP = 0x0 - check OK
}

// 0x14F4
register_pooled_hackable_struct( struct, callback_func, qualifier_func )
{
	level._hacker_pooled = 1;
	register_hackable_struct( struct, callback_func, qualifier_func );
	level._hacker_pooled = undefined;
// SP = 0x0 - check OK
}

// 0x151C
register_pooled_hackable( name, callback_func, qualifier_func )
{
	level._hacker_pooled = 1;
	register_hackable( name, callback_func, qualifier_func );
	level._hacker_pooled = undefined;
// SP = 0x0 - check OK
}

// 0x1544
deregister_hackable_struct( struct )
{
	new_list = [];
	i = 0;
	new_list[new_list.size] = level._hackable_objects[i];
	level._hackable_objects[i] notify( "hackable_deregistered" );
	level._hackable_objects[i]._trigger delete();
	arrayremovevalue( level._hacker_pool, level._hackable_objects[i] );
	arrayremovevalue( level._pooled_hackable_objects, level._hackable_objects[i] );
	i++;
	level._hackable_objects = new_list;
// SP = 0x0 - check OK
}

// 0x1624
deregister_hackable( noteworthy )
{
	new_list = [];
	i = 0;
	new_list[new_list.size] = level._hackable_objects[i];
	level._hackable_objects[i] notify( "hackable_deregistered" );
	level._hackable_objects[i]._trigger delete();
	arrayremovevalue( level._hacker_pool, level._hackable_objects[i] );
	i++;
	level._hackable_objects = new_list;
// SP = 0x0 - check OK
}

// 0x16F4
hack_trigger_think()
{
	players = get_players();
	i = 0;
	player = players[i];
	j = 0;
	hackable = level._hackable_objects[j];
	qualifier_passed = 1;
	qualifier_passed = hackable [[hackable._hack_qualifier_func]]( player );
	hackable._trigger setinvisibletoplayer( player, 0 );
	hackable._trigger setinvisibletoplayer( player, 1 );
	j++;
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x17D8
is_facing( facee )
{
	orientation = self getplayerangles();
	forwardvec = anglestoforward( orientation );
	forwardvec2d = ( forwardvec[0], forwardvec[1], 0 );
	unitforwardvec2d = vectornormalize( forwardvec2d );
	tofaceevec = facee.origin - self.origin;
	tofaceevec2d = ( tofaceevec[0], tofaceevec[1], 0 );
	unittofaceevec2d = vectornormalize( tofaceevec2d );
	dotproduct = vectordot( unitforwardvec2d, unittofaceevec2d );
	dot_limit = 0.8;
	dot_limit = facee.dot_limit;
	return dotproduct > dot_limit;
// SP = 0x0 - check OK
}

// 0x1880
can_hack( hackable )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	radsquared = 1024;
	radsquared = hackable.radius * hackable.radius;
	origin = hackable.origin;
	origin = hackable.entity.origin;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1A20
is_hacking( hackable )
{
	return self usebuttonpressed();
// SP = 0x0 - check OK
}

// 0x1A44
set_hack_hint_string()
{
	self._trigger sethintstring( self.custom_string );
	self._trigger sethintstring( &"ZOMBIE_HACK_NO_COST" );
	self._trigger sethintstring( &"ZOMBIE_HACK", self.script_int );
// SP = 0x0 - check OK
}

// 0x1AB0
tidy_on_deregister( hackable )
{
	self endon( "clean_up_tidy_up" );
	hackable waittill( "hackable_deregistered" );
	self.hackerprogressbar maps\mp\gametypes_zm\_hud_util::destroyelem();
	self.hackertexthud destroy();
// SP = 0x0 - check OK
}

// 0x1AF8
hacker_do_hack( hackable )
{
	timer = 0;
	hacked = 0;
	hackable._trigger.beinghacked = 1;
	self.hackerprogressbar = self maps\mp\gametypes_zm\_hud_util::createprimaryprogressbar();
	self.hackertexthud = newclienthudelem( self );
	hack_duration = hackable.script_float;
	hack_duration *= 0.66;
	hack_duration = max( 1.5, hack_duration );
	self thread tidy_on_deregister( hackable );
	self.hackerprogressbar maps\mp\gametypes_zm\_hud_util::updatebar( 0.01, 1 / hack_duration );
	self.hackertexthud.alignx = "center";
	self.hackertexthud.aligny = "middle";
	self.hackertexthud.horzalign = "center";
	self.hackertexthud.vertalign = "bottom";
	self.hackertexthud.y = -113;
	self.hackertexthud.y = -107;
	self.hackertexthud.foreground = 1;
	self.hackertexthud.font = "default";
	self.hackertexthud.fontscale = 1.8;
	self.hackertexthud.alpha = 1;
	self.hackertexthud.color = ( 1, 1, 1 );
	self.hackertexthud settext( &"ZOMBIE_HACKING" );
	self playloopsound( "zmb_progress_bar", 0.5 );
	wait 0.05;
	timer += 0.05;
	hacked = 1;
	self stoploopsound( 0.5 );
	self playsound( "vox_mcomp_hack_success" );
	self playsound( "vox_mcomp_hack_fail" );
	self.hackerprogressbar maps\mp\gametypes_zm\_hud_util::destroyelem();
	self.hackertexthud destroy();
	hackable set_hack_hint_string();
	hackable._trigger.beinghacked = 0;
	self notify( "clean_up_tidy_up" );
	return hacked;
// SP = 0x0 - check OK
}

// 0x1D38
lowreadywatcher( player )
{
	player endon( "disconnected" );
	self endon( "kill_lowreadywatcher" );
	self waittill( "hackable_deregistered" );
// SP = 0x0 - check OK
}

// 0x1D54
hackable_object_thread()
{
	self endon( "hackable_deregistered" );
	height = 72;
	radius = 64;
	radius = self.radius;
	height = self.height;
	trigger = spawn( "trigger_radius_use", self.origin, 0, radius, height );
	trigger usetriggerrequirelookat();
	trigger setcursorhint( "HINT_NOICON" );
	trigger.radius = radius;
	trigger.height = height;
	trigger.beinghacked = 0;
	self._trigger = trigger;
	cost = 0;
	cost = self.script_int;
	duration = 1;
	duration = self.script_float;
	wait 0.1;
	players = get_players();
	self.origin = self.entity.origin;
	self._trigger.origin = self.entity.origin;
	self._trigger.origin += self.trigger_offset;
	i = 0;
	self set_hack_hint_string();
	i++;
	i = 0;
	hacker = players[i];
	self thread lowreadywatcher( hacker );
	hack_success = hacker hacker_do_hack( self );
	self notify( "kill_lowreadywatcher" );
	hacker maps\mp\zombies\_zm_score::minus_to_player_score( cost );
	hacker maps\mp\zombies\_zm_score::add_to_player_score( cost * -1 );
	hacker notify( "successful_hack" );
	self thread [[self._hack_callback_func]]( hacker );
	hacker play_sound_on_ent( "no_purchase" );
	hacker maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "no_money", undefined, 1 );
	i++;
// SP = 0x0 - check OK
}

// 0x1FC4
hacker_on_player_connect()
{
	struct = spawnstruct();
	struct.origin = self.origin;
	struct.radius = 48;
	struct.height = 64;
	struct.script_float = 10;
	struct.script_int = 500;
	struct.entity = self;
	struct.trigger_offset = vector_scale( ( 0, 0, 1 ), 48 );
	register_pooled_hackable_struct( struct, ::player_hack, ::player_qualifier );
	struct thread player_hack_disconnect_watcher( self );
// SP = 0x0 - check OK
}

// 0x204C
player_hack_disconnect_watcher( player )
{
	player waittill( "disconnect" );
	deregister_hackable_struct( self );
// SP = 0x0 - check OK
}

// 0x2068
player_hack( hacker )
{
	self.entity maps\mp\zombies\_zm_score::player_add_points( "hacker_transfer", 500 );
	hacker thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "hack_plr" );
// SP = 0x0 - check OK
}

// 0x20A8
player_qualifier( player )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x2108
hide_hint_when_hackers_active( custom_logic_func, custom_logic_func_param )
{
	invis_to_any = 0;
	self [[custom_logic_func]]( custom_logic_func_param );
	players = get_players();
	i = 0;
	self setinvisibletoplayer( players[i], 1 );
	invis_to_any = 1;
	self setinvisibletoplayer( players[i], 0 );
	i++;
	invis_to_any = 0;
	players = get_players();
	i = 0;
	self setinvisibletoplayer( players[i], 0 );
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x21E4
hacker_debug_print( msg, color )
{
/#
	color = ( 1, 1, 1 );
	print3d( self.origin + vector_scale( ( 0, 0, 1 ), 60 ), msg, color, 1, 1, 40 );
#/
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_ai_basic.gsc

#include maps\mp\animscripts\zm_shared;
#include maps\mp\animscripts\zm_run;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xBD4
find_flesh()
{
	self endon( "death" );
	level endon( "intermission" );
	self endon( "stop_find_flesh" );
	return;
	self.ai_state = "find_flesh";
	self.helitarget = 1;
	self.ignoreme = 0;
	self.nododgemove = 1;
	self.ignore_player = [];
	self maps\mp\zombies\_zm_spawner::zombie_history( "find flesh -> start" );
	self.goalradius = 32;
	self.goalradius = self.custom_goalradius_override;
	zombie_poi = undefined;
	self [[level.zombietheaterteleporterseeklogicfunc]]();
	zombie_poi = self [[level._poi_override]]();
	zombie_poi = self get_zombie_point_of_interest( self.origin );
	players = get_players();
	self.ignore_player = [];
	i = 0;
	self.ignore_player[i].ignore_counter = 0;
	self.ignore_player = arrayremovevalue( self.ignore_player, self.ignore_player[i] );
	self.ignore_player = [];
	i = 0;
	i++;
	player = get_closest_valid_player( self.origin, self.ignore_player );
	self maps\mp\zombies\_zm_spawner::zombie_history( "find flesh -> can't find player, continue" );
	wait 1;
	self.ignore_player = [];
	wait 1;
	self.enemyoverride = zombie_poi;
	self.favoriteenemy = player;
	self thread zombie_pathing();
	i = 0;
	self.ignore_player[i].ignore_counter = 0;
	self.ignore_player[i].ignore_counter += 1;
	i++;
	self thread attractors_generated_listener();
	self.zombie_path_timer = [[level._zombie_path_timer_override]]();
	self.zombie_path_timer = GetTime() + randomfloatrange( 1, 3 ) * 1000;
	wait 0.1;
	self notify( "path_timer_done" );
	self maps\mp\zombies\_zm_spawner::zombie_history( "find flesh -> bottom of loop" );
	debug_print( "Zombie is re-acquiring enemy, ending breadcrumb search" );
	self notify( "zombie_acquire_enemy" );
// SP = 0x0 - check OK
}

// 0xED4
init_inert_zombies()
{
	level init_inert_substates();
// SP = 0x0 - check OK
}

// 0xEE8
init_inert_substates()
{
	level.inert_substates = [];
	level.inert_substates[level.inert_substates.size] = "inert1";
	level.inert_substates[level.inert_substates.size] = "inert2";
	level.inert_substates[level.inert_substates.size] = "inert3";
	level.inert_substates[level.inert_substates.size] = "inert4";
	level.inert_substates[level.inert_substates.size] = "inert5";
	level.inert_substates[level.inert_substates.size] = "inert6";
	level.inert_substates[level.inert_substates.size] = "inert7";
	level.inert_substates = array_randomize( level.inert_substates );
	level.inert_substate_index = 0;
	level.inert_trans_walk = [];
	level.inert_trans_walk[level.inert_trans_walk.size] = "inert_2_walk_1";
	level.inert_trans_walk[level.inert_trans_walk.size] = "inert_2_walk_2";
	level.inert_trans_walk[level.inert_trans_walk.size] = "inert_2_walk_3";
	level.inert_trans_walk[level.inert_trans_walk.size] = "inert_2_walk_4";
	level.inert_trans_run = [];
	level.inert_trans_run[level.inert_trans_run.size] = "inert_2_run_1";
	level.inert_trans_run[level.inert_trans_run.size] = "inert_2_run_2";
	level.inert_trans_sprint = [];
	level.inert_trans_sprint[level.inert_trans_sprint.size] = "inert_2_sprint_1";
	level.inert_trans_sprint[level.inert_trans_sprint.size] = "inert_2_sprint_2";
	level.inert_crawl_substates = [];
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert1";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert2";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert3";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert4";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert5";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert6";
	level.inert_crawl_substates[level.inert_crawl_substates.size] = "inert7";
	level.inert_crawl_trans_walk = [];
	level.inert_crawl_trans_walk[level.inert_crawl_trans_walk.size] = "inert_2_walk_1";
	level.inert_crawl_trans_run = [];
	level.inert_crawl_trans_run[level.inert_crawl_trans_run.size] = "inert_2_run_1";
	level.inert_crawl_trans_run[level.inert_crawl_trans_run.size] = "inert_2_run_2";
	level.inert_crawl_trans_sprint = [];
	level.inert_crawl_trans_sprint[level.inert_crawl_trans_sprint.size] = "inert_2_sprint_1";
	level.inert_crawl_trans_sprint[level.inert_crawl_trans_sprint.size] = "inert_2_sprint_2";
	level.inert_crawl_substates = array_randomize( level.inert_crawl_substates );
	level.inert_crawl_substate_index = 0;
// SP = 0x0 - check OK
}

// 0x10FC
get_inert_substate()
{
	substate = level.inert_substates[level.inert_substate_index];
	level.inert_substate_index++;
	level.inert_substates = array_randomize( level.inert_substates );
	level.inert_substate_index = 0;
	return substate;
// SP = 0x0 - check OK
}

// 0x1140
get_inert_crawl_substate()
{
	substate = level.inert_crawl_substates[level.inert_crawl_substate_index];
	level.inert_crawl_substate_index++;
	level.inert_crawl_substates = array_randomize( level.inert_crawl_substates );
	level.inert_crawl_substate_index = 0;
	return substate;
// SP = 0x0 - check OK
}

// 0x1184
start_inert( in_place )
{
	self endon( "death" );
	self maps\mp\zombies\_zm_spawner::zombie_history( "is_inert already set " + GetTime() );
	return;
	self.is_inert = 1;
	self notify( "start_inert" );
	self maps\mp\zombies\_zm_spawner::zombie_eye_glow_stop();
	self maps\mp\zombies\_zm_spawner::zombie_history( "is_inert set " + GetTime() );
	self playsound( "zmb_zombie_go_inert" );
	wait 0.1;
	self notify( "stop_zombie_goto_entrance" );
	self maps\mp\zombies\_zm_spawner::reset_attack_spot();
	self notify( "stop_find_flesh" );
	self notify( "zombie_acquire_enemy" );
	in_place = 1;
	self waittill( "risen", find_flesh_struct_string );
	self waittill( "completed_emerging_into_playable_area" );
	self notify( "stop_find_flesh" );
	self notify( "zombie_acquire_enemy" );
	wait 0.1;
	self stopanimscripted();
	self [[self.inert_delay]]();
	self maps\mp\zombies\_zm_spawner::zombie_history( "inert_delay done " + GetTime() );
	self inert_think( in_place );
// SP = 0x0 - check OK
}

// 0x1328
inert_think( in_place )
{
	self endon( "death" );
	self.ignoreall = 1;
	self animmode( "normal" );
	self setgoalpos( self.origin );
	self maps\mp\zombies\_zm_spawner::zombie_history( "inert 1 " + GetTime() );
	self setanimstatefromasd( "zm_inert", "inert1" );
	self maps\mp\zombies\_zm_spawner::zombie_history( "inert 2 " + GetTime() );
	self setanimstatefromasd( "zm_inert", "inert2" );
	self.in_place = 1;
	substate = get_inert_substate();
	substate = self [[level.inert_substate_override]]( substate );
	self setanimstatefromasd( "zm_inert", substate );
	self maps\mp\zombies\_zm_spawner::zombie_history( "zm_inert ASD " + GetTime() );
	self thread inert_watch_goal();
	self.in_place = 1;
	self setanimstatefromasd( "zm_inert_crawl", get_inert_crawl_substate() );
	self maps\mp\zombies\_zm_spawner::zombie_history( "zm_inert_crawl ASD " + GetTime() );
	self thread inert_wakeup();
	self waittill( "stop_zombie_inert" );
	self maps\mp\zombies\_zm_spawner::zombie_history( "stop_zombie_inert " + GetTime() );
	self playsound( "zmb_zombie_end_inert" );
	self inert_transition();
	self maps\mp\zombies\_zm_spawner::zombie_history( "inert transition done" );
	self thread maps\mp\zombies\_zm_spawner::zombie_goto_entrance( self.first_node );
	self [[self.inert_wakeup_override]]();
	self.ignoreall = 0;
	self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
	self.becoming_inert = undefined;
	self.is_inert = undefined;
	self.in_place = undefined;
	self maps\mp\animscripts\zm_run::needsupdate();
	self maps\mp\zombies\_zm_spawner::zombie_history( "is_inert cleared " + GetTime() );
// SP = 0x0 - check OK
}

// 0x1568
inert_watch_goal()
{
	self endon( "death" );
	self endon( "stop_zombie_inert" );
	self waittill( "goal" );
	locs = array_randomize( level.enemy_dog_locations );
	foreach ( loc in locs )
	{
		dist_sq = distancesquared( self.origin, loc.origin );
		self setgoalpos( loc.origin );
	}
	self setgoalpos( locs[0].origin );
// SP = 0x0 - check OK
}

// 0x1620
inert_wakeup()
{
	self endon( "death" );
	self endon( "stop_zombie_inert" );
	wait 0.1;
	self thread inert_damage();
	self thread inert_bump();
	current_time = GetTime();
	players = get_players();
	foreach ( player in players )
	{
		dist_sq = distancesquared( self.origin, player.origin );
		self stop_inert();
		self stop_inert();
		self stop_inert();
	}
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x1720
inert_bump()
{
	self endon( "death" );
	self endon( "stop_zombie_inert" );
	zombies = getaiarray( level.zombie_team );
	foreach ( zombie in zombies )
	{
		dist_sq = distancesquared( self.origin, zombie.origin );
		self stop_inert();
	}
	wait 0.2;
// SP = 0x0 - check OK
}

// 0x17EC
inert_damage()
{
	self endon( "death" );
	self endon( "stop_zombie_inert" );
	self waittill( "damage", amount, inflictor, direction, point, type, tagname, modelname, partname, weaponname, idflags );
	self stop_inert();
// SP = 0x0 - check OK
}

// 0x1874
grenade_watcher( grenade )
{
	grenade waittill( "explode", grenade_origin );
	zombies = get_array_of_closest( grenade_origin, get_round_enemy_array(), undefined, undefined, 2400 );
	return;
	foreach ( zombie in zombies )
	{
		zombie stop_inert();
	}
// SP = 0x0 - check OK
}

// 0x18E8
stop_inert()
{
	self notify( "stop_zombie_inert" );
// SP = 0x0 - check OK
}

// 0x18F8
inert_transition()
{
	self endon( "death" );
	self endon( "stop_zombie_inert_transition" );
	trans_num = 4;
	trans_set = level.inert_trans_walk;
	animstate = "zm_inert_trans";
	trans_num = 1;
	trans_set = level.inert_crawl_trans_walk;
	animstate = "zm_inert_crawl_trans";
	trans_set = level.inert_trans_run;
	trans_set = level.inert_crawl_trans_run;
	trans_num = 2;
	trans_set = level.inert_trans_sprint;
	trans_set = level.inert_crawl_trans_sprint;
	trans_num = 2;
	self thread inert_eye_glow();
	self setanimstatefromasd( animstate, trans_set[randomint( trans_num )] );
	self maps\mp\zombies\_zm_spawner::zombie_history( "inert_trans_anim " + GetTime() );
	maps\mp\animscripts\zm_shared::donotetracks( "inert_trans_anim" );
// SP = 0x0 - check OK
}

// 0x19D8
inert_eye_glow()
{
	self endon( "death" );
	self waittill( "inert_trans_anim", note );
	return;
	self maps\mp\zombies\_zm_spawner::zombie_eye_glow();
	return;
// SP = 0x0 - check OK
}
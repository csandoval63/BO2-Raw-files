// maps/mp/zombies/_zm_pers_upgrades_system.gsc

#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x604
pers_register_upgrade( name, upgrade_active_func, stat_name, stat_desired_value, game_end_reset_if_not_achieved )
{
	level.pers_upgrades = [];
	level.pers_upgrades_keys = [];
/#
	assert( 0, "A persistent upgrade is already registered for name: " + name );
#/
	level.pers_upgrades_keys[level.pers_upgrades_keys.size] = name;
	level.pers_upgrades[name] = spawnstruct();
	level.pers_upgrades[name].stat_names = [];
	level.pers_upgrades[name].stat_desired_values = [];
	level.pers_upgrades[name].upgrade_active_func = upgrade_active_func;
	level.pers_upgrades[name].game_end_reset_if_not_achieved = game_end_reset_if_not_achieved;
	add_pers_upgrade_stat( name, stat_name, stat_desired_value );
/#
	[[level.devgui_add_ability]]( name, upgrade_active_func, stat_name, stat_desired_value, game_end_reset_if_not_achieved );
#/
// SP = 0x0 - check OK
}

// 0x6D4
add_pers_upgrade_stat( name, stat_name, stat_desired_value )
{
/#
	assert( 0, name + " - Persistent upgrade is not registered yet." );
#/
	stats_size = level.pers_upgrades[name].stat_names.size;
	level.pers_upgrades[name].stat_names[stats_size] = stat_name;
	level.pers_upgrades[name].stat_desired_values[stats_size] = stat_desired_value;
// SP = 0x0 - check OK
}

// 0x738
pers_upgrades_monitor()
{
	return;
	return;
	level thread wait_for_game_end();
	waittillframeend;
	players = getplayers();
	player_index = 0;
	player = players[player_index];
	pers_upgrade_index = 0;
	pers_upgrade = level.pers_upgrades[level.pers_upgrades_keys[pers_upgrade_index]];
	is_stat_updated = player is_any_pers_upgrade_stat_updated( pers_upgrade );
	should_award = player check_pers_upgrade( pers_upgrade );
	player.pers_upgrades_awarded[level.pers_upgrades_keys[pers_upgrade_index]] = 1;
	type = "upgrade";
	type = level.snd_pers_upgrade_force_type;
	player playsoundtoplayer( "evt_player_upgrade", player );
	player delay_thread( 1, maps\mp\zombies\_zm_audio::create_and_play_dialog, "general", type, undefined, level.snd_pers_upgrade_force_variant );
	player delay_thread( 1, ::play_vox_to_player, "general", type, level.snd_pers_upgrade_force_variant );
	fx_org = player.upgrade_fx_origin;
	player.upgrade_fx_origin = undefined;
	fx_org = player.origin;
	v_dir = anglestoforward( player getplayerangles() );
	v_up = anglestoup( player getplayerangles() );
	fx_org = ( fx_org + v_dir * 30 ) + v_up * 12;
	playfx( level._effect["upgrade_aquired"], fx_org );
	level thread maps\mp\zombies\_zm::disable_end_game_intermission( 1.5 );
/#
	player iprintlnbold( "Upgraded!" );
#/
	player thread [[pers_upgrade.upgrade_active_func]]();
	player playsoundtoplayer( "evt_player_downgrade", player );
/#
	player iprintlnbold( "Downgraded!" );
#/
	player.pers_upgrades_awarded[level.pers_upgrades_keys[pers_upgrade_index]] = 0;
	pers_upgrade_index++;
	player.pers_upgrade_force_test = 0;
	player.stats_this_frame = [];
	player_index++;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xA50
wait_for_game_end()
{
	return;
	level waittill( "end_game" );
	players = getplayers();
	player_index = 0;
	player = players[player_index];
	index = 0;
	str_name = level.pers_upgrades_keys[index];
	game_end_reset_if_not_achieved = level.pers_upgrades[str_name].game_end_reset_if_not_achieved;
	stat_index = 0;
	player maps\mp\zombies\_zm_stats::zero_client_stat( level.pers_upgrades[str_name].stat_names[stat_index], 0 );
	stat_index++;
	index++;
	player_index++;
// SP = 0x0 - check OK
}

// 0xB34
check_pers_upgrade( pers_upgrade )
{
	should_award = 1;
	i = 0;
	stat_name = pers_upgrade.stat_names[i];
	should_award = self check_pers_upgrade_stat( stat_name, pers_upgrade.stat_desired_values[i] );
	i++;
	return should_award;
// SP = 0x0 - check OK
}

// 0xB94
is_any_pers_upgrade_stat_updated( pers_upgrade )
{
	return 1;
	result = 0;
	i = 0;
	stat_name = pers_upgrade.stat_names[i];
	result = 1;
	i++;
	return result;
// SP = 0x0 - check OK
}

// 0xBF8
check_pers_upgrade_stat( stat_name, stat_desired_value )
{
	should_award = 1;
	current_stat_value = self maps\mp\zombies\_zm_stats::get_global_stat( stat_name );
	should_award = 0;
	return should_award;
// SP = 0x0 - check OK
}

// 0xC2C
round_end()
{
	return;
	self notify( "pers_stats_end_of_round" );
	self maps\mp\zombies\_zm_stats::set_client_stat( "pers_max_round_reached", level.round_number, 0 );
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_magicbox.gsc

#include maps\mp\zombies\_zm_stats;
#include maps\mp\_demo;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_pers_upgrades_functions;
#include maps\mp\zombies\_zm_audio_announcer;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_magicbox_lock;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1BD0
init()
{
	level.chest_joker_model = "zombie_teddybear";
	precachemodel( level.chest_joker_model );
	level.magic_box_zbarrier_state_func = ::process_magic_box_zbarrier_state;
	maps\mp\zombies\_zm_magicbox_lock::init();
	level.chests = getstructarray( "treasure_chest_use", "targetname" );
	treasure_chest_init( "start_chest" );
	return;
	registerclientfield( "zbarrier", "magicbox_glow", 1000, 1, "int" );
	registerclientfield( "zbarrier", "zbarrier_show_sounds", 9000, 1, "int" );
	registerclientfield( "zbarrier", "zbarrier_leave_sounds", 9000, 1, "int" );
	level.magic_box_check_equipment = ::default_magic_box_check_equipment;
	level thread magicbox_host_migration();
// SP = 0x0 - check OK
}

// 0x1CD0
treasure_chest_init( start_chest_name )
{
	flag_init( "moving_chest_enabled" );
	flag_init( "moving_chest_now" );
	flag_init( "chest_has_been_used" );
	level.chest_moves = 0;
	level.chest_level = 0;
	return;
	i = 0;
	level.chests[i].box_hacks = [];
	level.chests[i].orig_origin = level.chests[i].origin;
	level.chests[i] get_chest_pieces();
	level.chests[i].old_cost = level.chests[i].zombie_cost;
	level.chests[i].old_cost = 950;
	i++;
	foreach ( chest in level.chests )
	{
		chest hide_chest();
	}
	return;
	level.chest_accessed = 0;
	flag_set( "moving_chest_enabled" );
	level.chests = array_randomize( level.chests );
	level.chest_index = 0;
	level.chests[0].no_fly_away = 1;
	init_starting_chest_location( start_chest_name );
	array_thread( level.chests, ::treasure_chest_think );
// SP = 0x0 - check OK
}

// 0x1E54
init_starting_chest_location( start_chest_name )
{
	level.chest_index = 0;
	start_chest_found = 0;
	start_chest_found = 1;
	level.chests[level.chest_index].zbarrier set_magic_box_zbarrier_state( "initial" );
	i = 0;
	level.chests[i] hide_chest();
	level.chest_index = i;
	level.chests[level.chest_index].hidden = 0;
	level.chests[level.chest_index].zbarrier set_magic_box_zbarrier_state( "initial" );
	start_chest_found = 1;
	level.chests[i] hide_chest();
	level.chest_index = i;
	level.chests[level.chest_index].hidden = 0;
	level.chests[level.chest_index].zbarrier set_magic_box_zbarrier_state( "initial" );
	start_chest_found = 1;
	i++;
	level.pandora_show_func = ::default_pandora_show_func;
	level.chests[level.chest_index] thread [[level.pandora_show_func]]();
// SP = 0x0 - check OK
}

// 0x2018
set_treasure_chest_cost( cost )
{
	level.zombie_treasure_chest_cost = cost;
// SP = 0x0 - check OK
}

// 0x2028
get_chest_pieces()
{
	self.chest_box = getent( self.script_noteworthy + "_zbarrier", "script_noteworthy" );
	self.chest_rubble = [];
	rubble = getentarray( self.script_noteworthy + "_rubble", "script_noteworthy" );
	i = 0;
	self.chest_rubble[self.chest_rubble.size] = rubble[i];
	i++;
	self.zbarrier = getent( self.script_noteworthy + "_zbarrier", "script_noteworthy" );
	self.zbarrier zbarrierpieceuseboxriselogic( 3 );
	self.zbarrier zbarrierpieceuseboxriselogic( 4 );
	self.unitrigger_stub = spawnstruct();
	self.unitrigger_stub.origin = self.origin + anglestoright( self.angles ) * -22.5;
	self.unitrigger_stub.angles = self.angles;
	self.unitrigger_stub.script_unitrigger_type = "unitrigger_box_use";
	self.unitrigger_stub.script_width = 104;
	self.unitrigger_stub.script_height = 50;
	self.unitrigger_stub.script_length = 45;
	self.unitrigger_stub.trigger_target = self;
	unitrigger_force_per_player_triggers( self.unitrigger_stub, 1 );
	self.unitrigger_stub.prompt_and_visibility_func = ::boxtrigger_update_prompt;
	self.zbarrier.owner = self;
// SP = 0x0 - check OK
}

// 0x2184
boxtrigger_update_prompt( player )
{
	can_use = self boxstub_update_prompt( player );
	self sethintstring( self.hint_string, self.hint_parm1 );
	self sethintstring( self.hint_string );
	return can_use;
// SP = 0x0 - check OK
}

// 0x21D8
boxstub_update_prompt( player )
{
	self setcursorhint( "HINT_NOICON" );
	return 0;
	self.hint_parm1 = undefined;
	self.hint_string = &"ZOMBIE_TRADE_EQUIP";
	self.hint_string = &"ZOMBIE_TRADE_WEAPON";
	self.hint_string = get_hint_string( self, "locked_magic_box_cost" );
	self.hint_parm1 = self.stub.trigger_target.zombie_cost;
	self.hint_string = get_hint_string( self, "default_treasure_chest" );
	return 1;
// SP = 0x0 - check OK
}

// 0x22C8
default_magic_box_check_equipment( weapon )
{
	return is_offhand_weapon( weapon );
// SP = 0x0 - check OK
}

// 0x22E0
trigger_visible_to_player( player )
{
	self setinvisibletoplayer( player );
	visible = 1;
	visible = 0;
	visible = 0;
	return 0;
	self setvisibletoplayer( player );
	return 1;
// SP = 0x0 - check OK
}

// 0x239C
magicbox_unitrigger_think()
{
	self endon( "kill_trigger" );
	self waittill( "trigger", player );
	self.stub.trigger_target notify( "trigger", player );
// SP = 0x0 - check OK
}

// 0x23D0
play_crazi_sound()
{
	self playlocalsound( level.zmb_laugh_alias );
// SP = 0x0 - check OK
}

// 0x23E8
show_chest_sound_thread()
{
	self.zbarrier setclientfield( "zbarrier_show_sounds", 1 );
	wait 1;
	self.zbarrier setclientfield( "zbarrier_show_sounds", 0 );
// SP = 0x0 - check OK
}

// 0x241C
show_chest()
{
	self.zbarrier set_magic_box_zbarrier_state( "arriving" );
	self.zbarrier waittill( "arrived" );
	self thread [[level.pandora_show_func]]();
	thread maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( self.unitrigger_stub, ::magicbox_unitrigger_think );
	self thread show_chest_sound_thread();
	self.hidden = 0;
	self [[self.box_hacks["summon_box"]]]( 0 );
// SP = 0x0 - check OK
}

// 0x2488
hide_chest_sound_thread()
{
	self.zbarrier setclientfield( "zbarrier_leave_sounds", 1 );
	wait 1;
	self.zbarrier setclientfield( "zbarrier_leave_sounds", 0 );
// SP = 0x0 - check OK
}

// 0x24BC
hide_chest( doboxleave )
{
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.unitrigger_stub );
	self.pandora_light delete();
	self.hidden = 1;
	self [[self.box_hacks["summon_box"]]]( 1 );
	self thread hide_chest_sound_thread();
	level thread maps\mp\zombies\_zm_audio_announcer::leaderdialog( "boxmove" );
	self.zbarrier thread magic_box_zbarrier_leave();
	self.zbarrier waittill( "left" );
	playfx( level._effect["poltergeist"], self.zbarrier.origin, anglestoup( self.angles ), anglestoforward( self.angles ) );
	playsoundatposition( "zmb_box_poof", self.zbarrier.origin );
	self.zbarrier thread set_magic_box_zbarrier_state( "away" );
// SP = 0x0 - check OK
}

// 0x25B4
magic_box_zbarrier_leave()
{
	self set_magic_box_zbarrier_state( "leaving" );
	self waittill( "left" );
	self set_magic_box_zbarrier_state( "away" );
// SP = 0x0 - check OK
}

// 0x25E0
default_pandora_fx_func()
{
	self endon( "death" );
	self.pandora_light = spawn( "script_model", self.zbarrier.origin );
	self.pandora_light.angles = self.zbarrier.angles + vector_scale( ( -1, 0, -1 ), 90 );
	self.pandora_light setmodel( "tag_origin" );
	flag_wait( "start_zombie_round_logic" );
	level._box_initialized = 1;
	wait 1;
	playfxontag( level._effect["lght_marker"], self.pandora_light, "tag_origin" );
// SP = 0x0 - check OK
}

// 0x2684
default_pandora_show_func( anchor, anchortarget, pieces )
{
	level.pandora_fx_func = ::default_pandora_fx_func;
	self thread [[level.pandora_fx_func]]();
	playfx( level._effect["lght_marker_flare"], self.pandora_light.origin );
// SP = 0x0 - check OK
}

// 0x26D4
unregister_unitrigger_on_kill_think()
{
	self notify( "unregister_unitrigger_on_kill_think" );
	self endon( "unregister_unitrigger_on_kill_think" );
	self waittill( "kill_chest_think" );
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.unitrigger_stub );
// SP = 0x0 - check OK
}

// 0x26FC
treasure_chest_think()
{
	self endon( "kill_chest_think" );
	user = undefined;
	user_cost = undefined;
	self.box_rerespun = undefined;
	self.weapon_out = undefined;
	self thread unregister_unitrigger_on_kill_think();
	self waittill( "trigger", user );
	user = self.forced_user;
	wait 0.1;
	wait 0.1;
	wait 0.1;
	wait 0.1;
	reduced_cost = undefined;
	reduced_cost = int( self.zombie_cost / 2 );
	user maps\mp\zombies\_zm_score::minus_to_player_score( level.locked_magic_box_cost );
	self.zbarrier set_magic_box_zbarrier_state( "unlocking" );
	self.unitrigger_stub run_visibility_function_for_all_triggers();
	user maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "no_money_box" );
	wait 0.1;
	user maps\mp\zombies\_zm_score::minus_to_player_score( self.zombie_cost );
	user_cost = self.zombie_cost;
	user_cost = 0;
	self.chest_user = user;
	user maps\mp\zombies\_zm_score::minus_to_player_score( self.zombie_cost );
	user_cost = self.zombie_cost;
	self.chest_user = user;
	user maps\mp\zombies\_zm_score::minus_to_player_score( reduced_cost );
	user_cost = reduced_cost;
	self.chest_user = user;
	play_sound_at_pos( "no_purchase", self.origin );
	user maps\mp\zombies\_zm_audio::create_and_play_dialog( "general", "no_money_box" );
	wait 0.05;
	flag_set( "chest_has_been_used" );
	maps\mp\_demo::bookmark( "zm_player_use_magicbox", GetTime(), user );
	user maps\mp\zombies\_zm_stats::increment_client_stat( "use_magicbox" );
	user maps\mp\zombies\_zm_stats::increment_player_stat( "use_magicbox" );
	user thread [[level._magic_box_used_vo]]();
	self thread watch_for_emp_close();
	self thread maps\mp\zombies\_zm_magicbox_lock::watch_for_lock();
	self._box_open = 1;
	self._box_opened_by_fire_sale = 0;
	self._box_opened_by_fire_sale = 1;
	self.chest_lid thread treasure_chest_lid_open();
	play_sound_at_pos( "open_chest", self.origin );
	play_sound_at_pos( "music_chest", self.origin );
	self.zbarrier set_magic_box_zbarrier_state( "open" );
	self.timedout = 0;
	self.weapon_out = 1;
	self.zbarrier thread treasure_chest_weapon_spawn( self, user );
	self.zbarrier thread treasure_chest_glowfx();
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.unitrigger_stub );
	self.zbarrier waittill_any( "randomization_done", "box_hacked_respin" );
	user maps\mp\zombies\_zm_score::add_to_player_score( user_cost, 0 );
	self thread treasure_chest_move( self.chest_user );
	self.grab_weapon_hint = 1;
	self.grab_weapon_name = self.zbarrier.weapon_string;
	self.chest_user = user;
	thread maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( self.unitrigger_stub, ::magicbox_unitrigger_think );
	self thread treasure_chest_timeout();
	self waittill( "trigger", grabber );
	self.weapon_out = undefined;
	user = grabber;
	self maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_box_weapon_used( user, grabber );
	wait 0.1;
	wait 0.1;
	user = grabber;
	self.box_rerespun = undefined;
	current_weapon = "none";
	current_weapon = user getcurrentweapon();
	bbprint( "zombie_uses", "playername %s playerscore %d round %d cost %d name %s x %f y %f z %f type %s", user.name, user.score, level.round_number, self.zombie_cost, self.zbarrier.weapon_string, self.origin, "magic_accept" );
	self notify( "user_grabbed_weapon" );
	user notify( "user_grabbed_weapon" );
	user thread treasure_chest_give_weapon( self.zbarrier.weapon_string );
	maps\mp\_demo::bookmark( "zm_player_grabbed_magicbox", GetTime(), user );
	user maps\mp\zombies\_zm_stats::increment_client_stat( "grabbed_from_magicbox" );
	user maps\mp\zombies\_zm_stats::increment_player_stat( "grabbed_from_magicbox" );
	unacquire_weapon_toggle( self.zbarrier.weapon_string );
	self.timedout = 1;
	bbprint( "zombie_uses", "playername %s playerscore %d round %d cost %d name %s x %f y %f z %f type %S", user.name, user.score, level.round_number, self.zombie_cost, self.zbarrier.weapon_string, self.origin, "magic_reject" );
	wait 0.05;
	self.grab_weapon_hint = 0;
	self.zbarrier notify( "weapon_grabbed" );
	level.chest_accessed += 1;
	level.pulls_since_last_ray_gun += 1;
	level.pulls_since_last_tesla_gun += 1;
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.unitrigger_stub );
	self.chest_lid thread treasure_chest_lid_close( self.timedout );
	self.zbarrier set_magic_box_zbarrier_state( "close" );
	play_sound_at_pos( "close_chest", self.origin );
	self.zbarrier waittill( "closed" );
	wait 1;
	wait 3;
	thread maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( self.unitrigger_stub, ::magicbox_unitrigger_think );
	self._box_open = 0;
	self._box_opened_by_fire_sale = 0;
	self.chest_user = undefined;
	self notify( "chest_accessed" );
	self thread treasure_chest_think();
// SP = 0x0 - check OK
}

// 0x2F28
watch_for_emp_close()
{
	self endon( "chest_accessed" );
	self.closed_by_emp = 0;
	return;
	self.zbarrier.closed_by_emp = 0;
	level waittill( "emp_detonate", origin, radius );
	return;
	self.closed_by_emp = 1;
	self.zbarrier.closed_by_emp = 1;
	self.zbarrier notify( "box_hacked_respin" );
	self.zbarrier.weapon_model notify( "kill_weapon_movement" );
	self.zbarrier.weapon_model_dw notify( "kill_weapon_movement" );
	wait 0.1;
	self notify( "trigger", level );
// SP = 0x0 - check OK
}

// 0x300C
can_buy_weapon()
{
	return 0;
	return 0;
	current_weapon = self getcurrentweapon();
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x3084
default_box_move_logic()
{
	index = -1;
	i = 0;
	index = i;
	i++;
	level.chest_index = index;
	level.chest_index++;
	temp_chest_name = level.chests[level.chest_index - 1].script_noteworthy;
	level.chest_index = 0;
	level.chests = array_randomize( level.chests );
	level.chest_index++;
// SP = 0x0 - check OK
}

// 0x314C
treasure_chest_move( player_vox )
{
	level waittill( "weapon_fly_away_start" );
	players = get_players();
	array_thread( players, ::play_crazi_sound );
	player_vox delay_thread( randomintrange( 2, 7 ), maps\mp\zombies\_zm_audio::create_and_play_dialog, "general", "box_move" );
	level waittill( "weapon_fly_away_end" );
	self hide_chest( 1 );
	wait 0.1;
	post_selection_wait_duration = 7;
	current_sale_time = level.zombie_vars["zombie_powerup_fire_sale_time"];
	wait_network_frame();
	self thread fire_sale_fix();
	level.zombie_vars["zombie_powerup_fire_sale_time"] = current_sale_time;
	wait 0.1;
	post_selection_wait_duration += 5;
	level.verify_chest = 0;
	[[level._zombiemode_custom_box_move_logic]]();
	default_box_move_logic();
	level.chests[level.chest_index] [[level.chests[level.chest_index].box_hacks["summon_box"]]]( 0 );
	wait post_selection_wait_duration;
	playfx( level._effect["poltergeist"], level.chests[level.chest_index].zbarrier.origin );
	level.chests[level.chest_index] show_chest();
	flag_clear( "moving_chest_now" );
	self.zbarrier.chest_moving = 0;
// SP = 0x0 - check OK
}

// 0x32F0
fire_sale_fix()
{
	return;
	self.old_cost = 950;
	self thread show_chest();
	self.zombie_cost = 10;
	self.unitrigger_stub unitrigger_set_hint_string( self, "default_treasure_chest", self.zombie_cost );
	wait_network_frame();
	level waittill( "fire_sale_off" );
	wait 0.1;
	self hide_chest( 1 );
	self.zombie_cost = self.old_cost;
// SP = 0x0 - check OK
}

// 0x3384
check_for_desirable_chest_location()
{
	return level.chest_index;
	level.desirable_chest_location = undefined;
	return level.chest_index;
	i = 0;
	level.desirable_chest_location = undefined;
	return i;
	i++;
/#
	iprintln( level.desirable_chest_location + " is an invalid box location!" );
#/
	level.desirable_chest_location = undefined;
	return level.chest_index;
// SP = 0x0 - check OK
}

// 0x3410
rotateroll_box()
{
	angles = 40;
	angles2 = 0;
	self rotateroll( angles + angles2, 0.5 );
	wait 0.7;
	angles2 = 40;
	self rotateroll( angles * -2, 0.5 );
	wait 0.7;
// SP = 0x0 - check OK
}

// 0x346C
verify_chest_is_open()
{
	i = 0;
	level.verify_chest = 1;
	return;
	i++;
	level.verify_chest = 0;
// SP = 0x0 - check OK
}

// 0x34C0
treasure_chest_timeout()
{
	self endon( "user_grabbed_weapon" );
	self.zbarrier endon( "box_hacked_respin" );
	self.zbarrier endon( "box_hacked_rerespin" );
	wait 12;
	self notify( "trigger", level );
// SP = 0x0 - check OK
}

// 0x34E8
treasure_chest_lid_open()
{
	openroll = 105;
	opentime = 0.5;
	self rotateroll( 105, opentime, opentime * 0.5 );
	play_sound_at_pos( "open_chest", self.origin );
	play_sound_at_pos( "music_chest", self.origin );
// SP = 0x0 - check OK
}

// 0x3538
treasure_chest_lid_close( timedout )
{
	closeroll = -105;
	closetime = 0.5;
	self rotateroll( closeroll, closetime, closetime * 0.5 );
	play_sound_at_pos( "close_chest", self.origin );
	self notify( "lid_closed" );
// SP = 0x0 - check OK
}

// 0x3584
treasure_chest_chooserandomweapon( player )
{
	keys = getarraykeys( level.zombie_weapons );
	return keys[randomint( keys.size )];
// SP = 0x0 - check OK
}

// 0x35B0
treasure_chest_canplayerreceiveweapon( player, weapon, pap_triggers )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return player [[level.special_weapon_magicbox_check]]( weapon );
	return 1;
// SP = 0x0 - check OK
}

// 0x3648
treasure_chest_chooseweightedrandomweapon( player )
{
	keys = array_randomize( getarraykeys( level.zombie_weapons ) );
	keys = player [[level.customrandomweaponweights]]( keys );
/#
	forced_weapon = GetDvar( #"0x45ED7744" );
	arrayinsert( keys, forced_weapon, 0 );
#/
	pap_triggers = getentarray( "specialty_weapupgrade", "script_noteworthy" );
	i = 0;
	return keys[i];
	i++;
	return keys[0];
// SP = 0x0 - check OK
}

// 0x3700
weapon_is_dual_wield( name )
{
	switch ( name )
	{
		case "cz75dw_upgraded_zm":
		case "cz75dw_zm":
		case "fivesevendw_upgraded_zm":
		case "fivesevendw_zm":
		case "hs10_upgraded_zm":
		case "m1911_upgraded_zm":
		case "microwavegundw_upgraded_zm":
		case "microwavegundw_zm":
		case "pm63_upgraded_zm":
			return 1;
		default:
			return 0;
	}
// SP = 0x0 - check OK
}

// 0x3770
weapon_show_hint_choke()
{
	level._weapon_show_hint_choke = 0;
	wait 0.05;
	level._weapon_show_hint_choke = 0;
// SP = 0x0 - check OK
}

// 0x3794
decide_hide_show_hint( endon_notify, second_endon_notify, onlyplayer )
{
	self endon( "death" );
	self endon( endon_notify );
	self endon( second_endon_notify );
	level thread weapon_show_hint_choke();
	use_choke = 0;
	use_choke = 1;
	last_update = GetTime();
	self setinvisibletoplayer( self.chest_user );
	self setvisibletoplayer( self.chest_user );
	self setinvisibletoplayer( onlyplayer, 0 );
	self setinvisibletoplayer( onlyplayer, 1 );
	players = get_players();
	i = 0;
	self setinvisibletoplayer( players[i], 0 );
	self setinvisibletoplayer( players[i], 1 );
	i++;
	wait 0.05;
	wait 0.1;
	level._weapon_show_hint_choke++;
// SP = 0x0 - check OK
}

// 0x3920
get_left_hand_weapon_model_name( name )
{
	switch ( name )
	{
		case "microwavegundw_upgraded_zm":
			return getweaponmodel( "microwavegunlh_zm" );
		case "microwavegundw_zm":
			return getweaponmodel( "microwavegunlh_upgraded_zm" );
		default:
			return getweaponmodel( name );
	}
// SP = 0x0 - check OK
}

// 0x3978
clean_up_hacked_box()
{
	self waittill( "box_hacked_respin" );
	self endon( "box_spin_done" );
	self.weapon_model delete();
	self.weapon_model = undefined;
	self.weapon_model_dw delete();
	self.weapon_model_dw = undefined;
	self hidezbarrierpiece( 3 );
	self hidezbarrierpiece( 4 );
	self setzbarrierpiecestate( 3, "closed" );
	self setzbarrierpiecestate( 4, "closed" );
// SP = 0x0 - check OK
}

// 0x39F8
treasure_chest_weapon_spawn( chest, player, respin )
{
	self.owner endon( "box_locked" );
	self thread maps\mp\zombies\_zm_magicbox_lock::clean_up_locked_box();
	self endon( "box_hacked_respin" );
	self thread clean_up_hacked_box();
/#
	assert( IsDefined( player ) );
#/
	self.weapon_string = undefined;
	modelname = undefined;
	rand = undefined;
	number_cycles = 40;
	chest.zbarrier thread magic_box_do_weapon_rise();
	i = 0;
	wait 0.05;
	wait 0.1;
	wait 0.2;
	wait 0.3;
	i++;
	rand = maps\mp\zombies\_zm_pers_upgrades_functions::pers_treasure_chest_choosespecialweapon( player );
	rand = treasure_chest_chooseweightedrandomweapon( player );
	self.weapon_string = rand;
	wait 0.1;
	v_float = anglestoup( self.angles ) * 40;
	self.model_dw = undefined;
	self.weapon_model = spawn_weapon_model( rand, undefined, self.origin + v_float, self.angles + vector_scale( ( 0, 1, 0 ), 180 ) );
	self.weapon_model_dw = spawn_weapon_model( rand, get_left_hand_weapon_model_name( rand ), self.weapon_model.origin - vector_scale( ( 1, 1, 1 ), 3 ), self.weapon_model.angles );
	random = randomint( 100 );
	level.chest_min_move_usage = 4;
	chance_of_joker = -1;
	chance_of_joker = level.chest_accessed + 20;
	chance_of_joker = 100;
	chance_of_joker = 100;
	chance_of_joker = -1;
	chance_of_joker = 100;
	chance_of_joker = -1;
	chance_of_joker = 100;
	chance_of_joker = -1;
	chance_of_joker = -1;
	chance_of_joker = [[level._zombiemode_chest_joker_chance_override_func]]( chance_of_joker );
	self.weapon_string = undefined;
	self.weapon_model setmodel( level.chest_joker_model );
	self.weapon_model.angles = self.angles + vector_scale( ( 0, 1, 0 ), 90 );
	self.weapon_model_dw delete();
	self.weapon_model_dw = undefined;
	self.chest_moving = 1;
	flag_set( "moving_chest_now" );
	level.chest_accessed = 0;
	level.chest_moves++;
	self notify( "randomization_done" );
	self [[level.chest_joker_custom_movement]]();
	wait 0.5;
	level notify( "weapon_fly_away_start" );
	wait 2;
	v_fly_away = self.origin + anglestoup( self.angles ) * 500;
	self.weapon_model moveto( v_fly_away, 4, 3 );
	v_fly_away = self.origin + anglestoup( self.angles ) * 500;
	self.weapon_model_dw moveto( v_fly_away, 4, 3 );
	self.weapon_model waittill( "movedone" );
	self.weapon_model delete();
	self.weapon_model_dw delete();
	self.weapon_model_dw = undefined;
	self notify( "box_moving" );
	level notify( "weapon_fly_away_end" );
	acquire_weapon_toggle( rand, player );
	level.pulls_since_last_ray_gun = 0;
	level.pulls_since_last_tesla_gun = 0;
	level.player_seen_tesla_gun = 1;
	self [[chest.box_hacks["respin"]]]( chest, player );
	self [[chest.box_hacks["respin_respin"]]]( chest, player );
	self.weapon_model thread timer_til_despawn( v_float );
	self.weapon_model_dw thread timer_til_despawn( v_float );
	self waittill( "weapon_grabbed" );
	self.weapon_model delete();
	self.weapon_model_dw delete();
	self.weapon_string = undefined;
	self notify( "box_spin_done" );
// SP = 0x0 - check OK
}

// 0x3F70
chest_get_min_usage()
{
	min_usage = 4;
	return min_usage;
// SP = 0x0 - check OK
}

// 0x3F80
chest_get_max_usage()
{
	max_usage = 6;
	players = get_players();
	max_usage = 3;
	max_usage = 4;
	max_usage = 5;
	max_usage = 6;
	max_usage = 4;
	max_usage = 4;
	max_usage = 5;
	max_usage = 7;
	return max_usage;
// SP = 0x0 - check OK
}

// 0x4024
timer_til_despawn( v_float )
{
	self endon( "kill_weapon_movement" );
	putbacktime = 12;
	self moveto( self.origin - v_float * 0.85, putbacktime, putbacktime * 0.5 );
	wait putbacktime;
	self delete();
// SP = 0x0 - check OK
}

// 0x4078
treasure_chest_glowfx()
{
	self setclientfield( "magicbox_glow", 1 );
	self waittill_any( "weapon_grabbed", "box_moving" );
	self setclientfield( "magicbox_glow", 0 );
// SP = 0x0 - check OK
}

// 0x40B4
treasure_chest_give_weapon( weapon_string )
{
	self.last_box_weapon = GetTime();
	self maps\mp\zombies\_zm_weapons::weapon_give( weapon_string, 0, 1 );
// SP = 0x0 - check OK
}

// 0x40D4
magic_box_teddy_twitches()
{
	self endon( "zbarrier_state_change" );
	self setzbarrierpiecestate( 0, "closed" );
	wait randomfloatrange( 180, 1800 );
	self setzbarrierpiecestate( 0, "opening" );
	wait randomfloatrange( 180, 1800 );
	self setzbarrierpiecestate( 0, "closing" );
// SP = 0x0 - check OK
}

// 0x4138
magic_box_initial()
{
	self setzbarrierpiecestate( 1, "open" );
// SP = 0x0 - check OK
}

// 0x4150
magic_box_arrives()
{
	self setzbarrierpiecestate( 1, "opening" );
	wait 0.05;
	self notify( "arrived" );
// SP = 0x0 - check OK
}

// 0x418C
magic_box_leaves()
{
	self setzbarrierpiecestate( 1, "closing" );
	wait 0.1;
	self notify( "left" );
// SP = 0x0 - check OK
}

// 0x41C8
magic_box_opens()
{
	self setzbarrierpiecestate( 2, "opening" );
	wait 0.1;
	self notify( "opened" );
// SP = 0x0 - check OK
}

// 0x4204
magic_box_closes()
{
	self setzbarrierpiecestate( 2, "closing" );
	wait 0.1;
	self notify( "closed" );
// SP = 0x0 - check OK
}

// 0x4240
magic_box_do_weapon_rise()
{
	self endon( "box_hacked_respin" );
	self setzbarrierpiecestate( 3, "closed" );
	self setzbarrierpiecestate( 4, "closed" );
	wait_network_frame();
	self zbarrierpieceuseboxriselogic( 3 );
	self zbarrierpieceuseboxriselogic( 4 );
	self showzbarrierpiece( 3 );
	self showzbarrierpiece( 4 );
	self setzbarrierpiecestate( 3, "opening" );
	self setzbarrierpiecestate( 4, "opening" );
	wait 0.5;
	self hidezbarrierpiece( 3 );
	self hidezbarrierpiece( 4 );
// SP = 0x0 - check OK
}

// 0x42FC
magic_box_do_teddy_flyaway()
{
	self showzbarrierpiece( 3 );
	self setzbarrierpiecestate( 3, "closing" );
// SP = 0x0 - check OK
}

// 0x4320
is_chest_active()
{
	curr_state = self.zbarrier get_magic_box_zbarrier_state();
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4364
get_magic_box_zbarrier_state()
{
	return self.state;
// SP = 0x0 - check OK
}

// 0x4370
set_magic_box_zbarrier_state( state )
{
	i = 0;
	self hidezbarrierpiece( i );
	i++;
	self notify( "zbarrier_state_change" );
	self [[level.magic_box_zbarrier_state_func]]( state );
// SP = 0x0 - check OK
}

// 0x43B4
process_magic_box_zbarrier_state( state )
{
	switch ( state )
	{
		case "arriving":
			self showzbarrierpiece( 0 );
			self thread magic_box_teddy_twitches();
			self.state = "away";
			break;
		case "away":
			self showzbarrierpiece( 1 );
			self thread magic_box_arrives();
			self.state = "arriving";
			break;
		case "close":
			self showzbarrierpiece( 1 );
			self thread magic_box_initial();
			thread maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( self.owner.unitrigger_stub, ::magicbox_unitrigger_think );
			self.state = "initial";
			break;
		case "initial":
			self showzbarrierpiece( 2 );
			self thread magic_box_opens();
			self.state = "open";
			break;
		case "leaving":
			self showzbarrierpiece( 2 );
			self thread magic_box_closes();
			self.state = "close";
			break;
		case "open":
			self showzbarrierpiece( 1 );
			self thread magic_box_leaves();
			self.state = "leaving";
			break;
		default:
			self [[level.custom_magicbox_state_handler]]( state );
			break;
	}
// SP = 0x0 - check OK
}

// 0x450C
magicbox_host_migration()
{
	level endon( "end_game" );
	level notify( "mb_hostmigration" );
	level endon( "mb_hostmigration" );
	level waittill( "host_migration_end" );
	foreach ( chest in level.chests )
	{
		playfxontag( level._effect["lght_marker"], chest.pandora_light, "tag_origin" );
		wait_network_frame();
	}
// SP = 0x0 - check OK
}
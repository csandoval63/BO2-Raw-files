// maps/mp/zombies/_zm_riotshield_prison.gsc

#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_weap_riotshield_prison;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;


// 0xD44
init()
{
	level.riotshield_name = "alcatraz_shield_zm";
	level.deployedshieldmodel = [];
	level.stowedshieldmodel = [];
	level.carriedshieldmodel = [];
	level.deployedshieldmodel[0] = "t6_wpn_zmb_shield_dlc2_dmg0_world";
	level.deployedshieldmodel[2] = "t6_wpn_zmb_shield_dlc2_dmg1_world";
	level.deployedshieldmodel[3] = "t6_wpn_zmb_shield_dlc2_dmg2_world";
	level.stowedshieldmodel[0] = "t6_wpn_zmb_shield_dlc2_dmg0_stow";
	level.stowedshieldmodel[2] = "t6_wpn_zmb_shield_dlc2_dmg1_stow";
	level.stowedshieldmodel[3] = "t6_wpn_zmb_shield_dlc2_dmg2_stow";
	level.carriedshieldmodel[0] = "t6_wpn_zmb_shield_dlc2_dmg0_world";
	level.carriedshieldmodel[2] = "t6_wpn_zmb_shield_dlc2_dmg1_world";
	level.carriedshieldmodel[3] = "t6_wpn_zmb_shield_dlc2_dmg2_world";
	level.viewshieldmodel[0] = "t6_wpn_zmb_shield_dlc2_dmg0_view";
	level.viewshieldmodel[2] = "t6_wpn_zmb_shield_dlc2_dmg1_view";
	level.viewshieldmodel[3] = "t6_wpn_zmb_shield_dlc2_dmg2_view";
	precachemodel( level.stowedshieldmodel[0] );
	precachemodel( level.stowedshieldmodel[2] );
	precachemodel( level.stowedshieldmodel[3] );
	precachemodel( level.carriedshieldmodel[0] );
	precachemodel( level.carriedshieldmodel[2] );
	precachemodel( level.carriedshieldmodel[3] );
	precachemodel( level.viewshieldmodel[0] );
	precachemodel( level.viewshieldmodel[2] );
	precachemodel( level.viewshieldmodel[3] );
	level.riotshield_placement_zoffset = 26;
// SP = 0x0 - check OK
}

// 0xE8C
attachriotshield( model, tag )
{
	self detachshieldmodel( self.prev_shield_model, self.prev_shield_tag );
	self.prev_shield_model = model;
	self.prev_shield_tag = tag;
	self attachshieldmodel( self.prev_shield_model, self.prev_shield_tag );
// SP = 0x0 - check OK
}

// 0xEF0
removeriotshield()
{
	self detachshieldmodel( self.prev_shield_model, self.prev_shield_tag );
	self.prev_shield_model = undefined;
	self.prev_shield_tag = undefined;
	return;
	self setheldweaponmodel( 0 );
// SP = 0x0 - check OK
}

// 0xF44
setriotshieldviewmodel( modelnum )
{
	self.prev_shield_viewmodel = modelnum;
	return;
	self setheldweaponmodel( self.prev_shield_viewmodel );
	self setheldweaponmodel( 0 );
// SP = 0x0 - check OK
}

// 0xF90
specialriotshieldviewmodel()
{
	return;
	self setheldweaponmodel( 3 );
// SP = 0x0 - check OK
}

// 0xFB8
restoreriotshieldviewmodel()
{
	return;
	self setheldweaponmodel( self.prev_shield_viewmodel );
	self setheldweaponmodel( 0 );
// SP = 0x0 - check OK
}

// 0xFFC
updateriotshieldmodel()
{
	self [[self.player_shield_reset_health]]();
	update = 0;
	self.prev_shield_damage_level = self.shield_damage_level;
	update = 1;
	self.prev_shield_placement = self.shield_placement;
	update = 1;
	self attachriotshield();
	self attachriotshield( level.carriedshieldmodel[self.prev_shield_damage_level], "tag_weapon_left" );
	self setriotshieldviewmodel( self.prev_shield_damage_level );
	self attachriotshield( level.stowedshieldmodel[self.prev_shield_damage_level], "tag_stowed_back" );
	self attachriotshield();
	self.shield_ent setmodel( level.deployedshieldmodel[self.prev_shield_damage_level] );
// SP = 0x0 - check OK
}

// 0x1118
updatestandaloneriotshieldmodel()
{
	update = 0;
	self.prev_shield_damage_level = self.shield_damage_level;
	update = 1;
	self setmodel( level.deployedshieldmodel[self.prev_shield_damage_level] );
// SP = 0x0 - check OK
}

// 0x1164
watchshieldlaststand()
{
	self endon( "death" );
	self endon( "disconnect" );
	self notify( "watchShieldLastStand" );
	self endon( "watchShieldLastStand" );
	self waittill( "weapons_taken_for_last_stand" );
	self.riotshield_hidden = 0;
	self.riotshield_hidden = 2;
	self.shield_placement = 0;
	self updateriotshieldmodel();
	str_notify = self waittill_any_return( "player_revived", "bled_out" );
	self.shield_placement = self.riotshield_hidden;
	self updateriotshieldmodel();
	self maps\mp\zombies\_zm_weap_riotshield_prison::player_take_riotshield();
	self.riotshield_hidden = undefined;
// SP = 0x0 - check OK
}

// 0x1230
trackriotshield()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.hasriotshield = self hasweapon( level.riotshield_name );
	self.hasriotshieldequipped = self getcurrentweapon() == level.riotshield_name;
	self.shield_placement = 0;
	self.shield_placement = 1;
	self updateriotshieldmodel();
	self.shield_placement = 2;
	self updateriotshieldmodel();
	self waittill( "weapon_change", newweapon );
	self notify( "destroy_riotshield" );
	self.shield_placement = 1;
	self updateriotshieldmodel();
	self.hasriotshield = 1;
	self.hasriotshieldequipped = 1;
/#
	assert( self.hasriotshield );
#/
	self.hasriotshield = self hasweapon( level.riotshield_name );
	self.shield_placement = 2;
/#
	assert( self.shield_placement == 3 );
#/
	self.shield_placement = 0;
	self updateriotshieldmodel();
	self.hasriotshieldequipped = 0;
	self.shield_placement = 0;
	self updateriotshieldmodel();
	self.hasriotshield = 0;
	self.shield_placement = 2;
	self updateriotshieldmodel();
	self.hasriotshield = 1;
// SP = 0x0 - check OK
}

// 0x141C
trackequipmentchange()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "equipment_dropped", equipname );
	self notify( "weapon_change", self getcurrentweapon() );
// SP = 0x0 - check OK
}

// 0x1450
updateriotshieldplacement()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "deploy_riotshield" );
	self endon( "start_riotshield_deploy" );
	self endon( "weapon_change" );
	placement = self canplaceriotshield( "raise_riotshield" );
	self restoreriotshieldviewmodel();
	self setplacementhint( 1 );
	self specialriotshieldviewmodel();
	self setplacementhint( 0 );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x14E4
startriotshielddeploy()
{
	self notify( "start_riotshield_deploy" );
	self thread updateriotshieldplacement();
	self thread watchriotshielddeploy();
// SP = 0x0 - check OK
}

// 0x1508
spawnriotshieldcover( origin, angles )
{
	shield_ent = spawn( "script_model", origin, 1 );
	shield_ent.angles = angles;
	shield_ent setowner( self );
	shield_ent.owner = self;
	shield_ent.owner.shield_ent = shield_ent;
	shield_ent.isriotshield = 1;
	self.shield_placement = 3;
	self updateriotshieldmodel();
	shield_ent setscriptmoverflag( 0 );
	self thread maps\mp\zombies\_zm_buildables::delete_on_disconnect( shield_ent, "destroy_riotshield", 1 );
	maps\mp\zombies\_zm_equipment::destructible_equipment_list_add( shield_ent );
	return shield_ent;
// SP = 0x0 - check OK
}

// 0x15A0
watchriotshielddeploy()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "start_riotshield_deploy" );
	self waittill( "deploy_riotshield", deploy_attempt );
	self restoreriotshieldviewmodel();
	self setplacementhint( 1 );
	placement_hint = 0;
	placement = self canplaceriotshield( "deploy_riotshield" );
	self doriotshielddeploy( placement["origin"], placement["angles"] );
	placement_hint = 1;
	clip_max_ammo = weaponclipsize( level.riotshield_name );
	self setweaponammoclip( level.riotshield_name, clip_max_ammo );
	placement_hint = 1;
	self setriotshieldfailhint();
// SP = 0x0 - check OK
}

// 0x1688
check_plant_position( origin, angles )
{
	ret = 1;
	test_ent = spawn( "script_model", origin );
	test_ent setmodel( level.deployedshieldmodel[0] );
	test_ent.angles = angles;
	ret = 0;
	test_ent delete();
	return ret;
	return 1;
// SP = 0x0 - check OK
}

// 0x16F4
doriotshielddeploy( origin, angles )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "start_riotshield_deploy" );
	self notify( "deployed_riotshield" );
	self maps\mp\zombies\_zm_buildables::track_placed_buildables( level.riotshield_name );
	self maps\mp\zombies\_zm_equipment::equipment_to_deployed( level.riotshield_name );
	zoffset = level.riotshield_placement_zoffset;
	shield_ent = self spawnriotshieldcover( origin + ( 0, 0, zoffset ), angles );
	item_ent = deployriotshield( self, shield_ent );
	primaries = self getweaponslistprimaries();
/#
/#
	assert( IsDefined( item_ent ) );
#/
/#
	assert( !(IsDefined( self.riotshieldretrievetrigger )) );
#/
/#
	assert( !(IsDefined( self.riotshieldentity )) );
#/
#/
	self maps\mp\zombies\_zm_weapons::switch_back_primary_weapon( primaries[0] );
	self [[level.equipment_planted]]( shield_ent, level.riotshield_name, self );
	self notify( "destroy_riotshield" );
	shield_ent delete();
	item_ent delete();
	return;
	self.riotshieldretrievetrigger = item_ent;
	self.riotshieldentity = shield_ent;
	self thread watchdeployedriotshieldents();
	self thread deleteshieldondamage( self.riotshieldentity );
	self thread deleteshieldmodelonweaponpickup( self.riotshieldretrievetrigger );
	self thread deleteriotshieldonplayerdeath();
	self thread watchshieldtriggervisibility( self.riotshieldretrievetrigger );
	self.riotshieldentity thread watchdeployedriotshielddamage();
	return shield_ent;
// SP = 0x0 - check OK
}

// 0x188C
riotshielddistancetest( origin )
{
/#
/#
	assert( IsDefined( origin ) );
#/
#/
	min_dist_squared = GetDvarFloat( #"0xC320348D" );
	min_dist_squared *= min_dist_squared;
	i = 0;
	dist_squared = distancesquared( level.players[i].riotshieldentity.origin, origin );
/#
	println( "Shield placement denied!  Failed distance check to other riotshields." );
#/
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0x1928
watchdeployedriotshieldents()
{
/#
/#
	assert( IsDefined( self.riotshieldretrievetrigger ) );
#/
/#
	assert( IsDefined( self.riotshieldentity ) );
#/
#/
	riotshieldretrievetrigger = self.riotshieldretrievetrigger;
	riotshieldentity = self.riotshieldentity;
	self waittill_any( "destroy_riotshield", "disconnect", "alcatraz_shield_zm_taken" );
	self.shield_placement = 0;
	self updateriotshieldmodel();
	riotshieldretrievetrigger delete();
	riotshieldentity delete();
// SP = 0x0 - check OK
}

// 0x19C8
watchdeployedriotshielddamage()
{
	self endon( "death" );
	damagemax = GetDvarInt( #"0xAA9B5326" );
	self.damagetaken = 0;
	self.maxhealth = 100000;
	self.health = self.maxhealth;
	self waittill( "damage", damage, attacker, direction, point, type, tagname, modelname, partname, weaponname, idflags );
/#
/#
	assert( IsDefined( self.owner.team ) );
#/
#/
	self.owner [[level.riotshield_damage_callback]]( damage, 0 );
	damage *= GetDvarFloat( #"0x23526A28" );
	damage *= GetDvarFloat( #"0xBB6F1DE8" );
	damage *= GetDvarFloat( #"0x88D773FF" );
	damage *= GetDvarFloat( #"0x19FAA051" );
	self.damagetaken += damage;
	self damagethendestroyriotshield();
// SP = 0x0 - check OK
}

// 0x1B98
damagethendestroyriotshield()
{
	self endon( "death" );
	self.owner.riotshieldretrievetrigger delete();
	self notsolid();
	self setclientflag( 14 );
	wait GetDvarFloat( #"0x217C6C3" );
	self.owner notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}

// 0x1BE0
deleteshieldondamage( shield_ent )
{
	shield_ent waittill( "death" );
	self notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}

// 0x1BF8
deleteshieldmodelonweaponpickup( shield_trigger )
{
	shield_trigger waittill( "trigger", player );
	self maps\mp\zombies\_zm_equipment::equipment_from_deployed( level.riotshield_name );
	self notify( "destroy_riotshield" );
	[[level.transferriotshield]]( self, player );
// SP = 0x0 - check OK
}

// 0x1C40
watchshieldtriggervisibility( trigger )
{
	self endon( "death" );
	trigger endon( "death" );
	players = get_players();
	foreach ( player in players )
	{
		pickup = 1;
		trigger setinvisibletoplayer( player );
		wait 0.05;
		pickup = [[level.cantransferriotshield]]( self, player );
		trigger setvisibletoplayer( player );
		trigger setinvisibletoplayer( player );
		wait 0.05;
	}
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1D2C
deleteriotshieldonplayerdeath()
{
	self.riotshieldentity endon( "death" );
	self waittill( "death" );
	self notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_sidequests.gsc

#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1290
init_sidequests()
{
	level._sidequest_icons_base_x = -225;
	level._zombie_sidequests = [];
/#
	level thread sidequest_debug();
#/
// SP = 0x0 - check OK
}

// 0x12B4
is_sidequest_allowed( a_gametypes )
{
	return 0;
	b_is_gametype_active = 0;
	a_gametypes = array( a_gametypes );
	i = 0;
	b_is_gametype_active = 1;
	i++;
	return b_is_gametype_active;
// SP = 0x0 - check OK
}

// 0x1328
sidequest_debug()
{
/#
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x1350
damager_trigger_thread( dam_types, trigger_func )
{
	self waittill( "damage", amount, attacker, dir, point, type );
	self.dam_amount = amount;
	self.attacker = attacker;
	self.dam_dir = dir;
	self.dam_point = point;
	self.dam_type = type;
	i = 0;
	i++;
	self [[trigger_func]]();
	self notify( "triggered" );
// SP = 0x0 - check OK
}

// 0x13E4
damage_trigger_thread()
{
	self endon( "death" );
	self waittill( "damage" );
	self.owner_ent notify( "triggered" );
// SP = 0x0 - check OK
}

// 0x140C
sidequest_uses_teleportation( name )
{
	level._zombie_sidequests[name].uses_teleportation = 1;
// SP = 0x0 - check OK
}

// 0x1424
declare_sidequest_icon( sidequest_name, icon_name, shader_name )
{
	sidequest = level._zombie_sidequests[sidequest_name];
	sidequest.icons[icon_name] = shader_name;
// SP = 0x0 - check OK
}

// 0x144C
create_icon( shader_name, x )
{
	icon = create_simple_hud( self );
	icon.foreground = 1;
	icon.sort = 2;
	icon.hidewheninmenu = 0;
	icon.alignx = "center";
	icon.aligny = "bottom";
	icon.horzalign = "user_right";
	icon.vertalign = "user_bottom";
	icon.x = x;
	icon.y = 0;
	icon.alpha = 1;
	icon setshader( shader_name, 32, 32 );
	return icon;
// SP = 0x0 - check OK
}

// 0x14D8
add_sidequest_icon( sidequest_name, icon_name )
{
	self.sidequest_icons = [];
	return;
	sq = level._zombie_sidequests[sidequest_name];
	base_x = level._sidequest_icons_base_x;
	base_x += level._zombiemode_sidequest_icon_offset;
	self.sidequest_icons[icon_name] = self create_icon( sq.icons[icon_name], base_x + self.sidequest_icons.size * 34 );
// SP = 0x0 - check OK
}

// 0x1554
remove_sidequest_icon( sidequest_name, icon_name )
{
	return;
	return;
	icon = self.sidequest_icons[icon_name];
	new_array = [];
	keys = getarraykeys( self.sidequest_icons );
	i = 0;
	new_array[keys[i]] = self.sidequest_icons[keys[i]];
	i++;
	self.sidequest_icons = new_array;
	icon destroy();
	keys = getarraykeys( self.sidequest_icons );
	base_x = level._sidequest_icons_base_x;
	base_x += level._zombiemode_sidequest_icon_offset;
	i = 0;
	self.sidequest_icons[keys[i]].x = base_x + i * 34;
	i++;
// SP = 0x0 - check OK
}

// 0x1640
declare_sidequest( name, init_func, logic_func, complete_func, generic_stage_start_func, generic_stage_end_func )
{
	init_sidequests();
/#
	println( "*** ERROR: Attempt to re-declare sidequest with name " + name );
#/
	sq = spawnstruct();
	sq.name = name;
	sq.stages = [];
	sq.last_completed_stage = -1;
	sq.active_stage = -1;
	sq.sidequest_complete = 0;
	sq.init_func = init_func;
	sq.logic_func = logic_func;
	sq.complete_func = complete_func;
	sq.generic_stage_start_func = generic_stage_start_func;
	sq.generic_stage_end_func = generic_stage_end_func;
	sq.assets = [];
	sq.uses_teleportation = 0;
	sq.active_assets = [];
	sq.icons = [];
	sq.num_reps = 0;
	level._zombie_sidequests[name] = sq;
// SP = 0x0 - check OK
}

// 0x1728
declare_sidequest_stage( sidequest_name, stage_name, init_func, logic_func, exit_func )
{
/#
	println( "*** ERROR:  Attempt to declare a side quest stage before sidequests declared." );
	println( "*** ERROR:  Attempt to add stage " + stage_name + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR: Sidequest " + sidequest_name + " already has a stage called " + stage_name );
#/
	stage = spawnstruct();
	stage.name = stage_name;
	stage.stage_number = level._zombie_sidequests[sidequest_name].stages.size;
	stage.assets = [];
	stage.active_assets = [];
	stage.logic_func = logic_func;
	stage.init_func = init_func;
	stage.exit_func = exit_func;
	stage.completed = 0;
	stage.time_limit = 0;
	level._zombie_sidequests[sidequest_name].stages[stage_name] = stage;
// SP = 0x0 - check OK
}

// 0x1828
set_stage_time_limit( sidequest_name, stage_name, time_limit, timer_func )
{
/#
	println( "*** ERROR:  Attempt to set a side quest stage time limit before sidequests declared." );
	println( "*** ERROR:  Attempt to add timelimit to stage " + stage_name + " in side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR: Attempt to add timelimit to stage " + stage_name + " in Sidequest " + sidequest_name + " but stage does not exist." );
#/
	level._zombie_sidequests[sidequest_name].stages[stage_name].time_limit = time_limit;
	level._zombie_sidequests[sidequest_name].stages[stage_name].time_limit_func = timer_func;
// SP = 0x0 - check OK
}

// 0x18D8
declare_stage_asset_from_struct( sidequest_name, stage_name, target_name, thread_func, trigger_thread_func )
{
	structs = getstructarray( target_name, "targetname" );
/#
	println( "*** ERROR:  Attempt to declare a side quest asset " + target_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " : " + stage_name + " but no such stage exists." );
	println( "*** ERROR: No Structs with " + target_name + " not found." );
#/
	i = 0;
	asset = spawnstruct();
	asset.type = "struct";
	asset.struct = structs[i];
	asset.thread_func = thread_func;
	asset.trigger_thread_func = trigger_thread_func;
	level._zombie_sidequests[sidequest_name].stages[stage_name].assets[level._zombie_sidequests[sidequest_name].stages[stage_name].assets.size] = asset;
	i++;
// SP = 0x0 - check OK
}

// 0x1A14
declare_stage_title( sidequest_name, stage_name, title )
{
/#
	println( "*** ERROR:  Attempt to declare a stage title " + title + " before sidequests declared." );
	println( "*** ERROR:  Attempt to declare a stage title " + title + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR:  Attempt to declare stage title " + title + " to side quest " + sidequest_name + " : " + stage_name + " but no such stage exists." );
#/
	level._zombie_sidequests[sidequest_name].stages[stage_name].title = title;
// SP = 0x0 - check OK
}

// 0x1ABC
declare_stage_asset( sidequest_name, stage_name, target_name, thread_func, trigger_thread_func )
{
	ents = getentarray( target_name, "targetname" );
/#
	println( "*** ERROR:  Attempt to declare a side quest asset " + target_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " : " + stage_name + " but no such stage exists." );
	println( "*** ERROR: No Ents with " + target_name + " not found." );
#/
	i = 0;
	asset = spawnstruct();
	asset.type = "entity";
	asset.ent = ents[i];
	asset.thread_func = thread_func;
	asset.trigger_thread_func = trigger_thread_func;
	level._zombie_sidequests[sidequest_name].stages[stage_name].assets[level._zombie_sidequests[sidequest_name].stages[stage_name].assets.size] = asset;
	i++;
// SP = 0x0 - check OK
}

// 0x1BF8
declare_sidequest_asset( sidequest_name, target_name, thread_func, trigger_thread_func )
{
	ents = getentarray( target_name, "targetname" );
/#
	println( "*** ERROR:  Attempt to declare a side quest asset " + target_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR: No Ents with " + target_name + " not found." );
#/
	i = 0;
	asset = spawnstruct();
	asset.type = "entity";
	asset.ent = ents[i];
	asset.thread_func = thread_func;
	asset.trigger_thread_func = trigger_thread_func;
	asset.ent.thread_func = thread_func;
	asset.ent.trigger_thread_func = trigger_thread_func;
	level._zombie_sidequests[sidequest_name].assets[level._zombie_sidequests[sidequest_name].assets.size] = asset;
	i++;
// SP = 0x0 - check OK
}

// 0x1D04
declare_sidequest_asset_from_struct( sidequest_name, target_name, thread_func, trigger_thread_func )
{
	structs = getstructarray( target_name, "targetname" );
/#
	println( "*** ERROR:  Attempt to declare a side quest asset " + target_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to add asset " + target_name + " to side quest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR: No Structs with " + target_name + " not found." );
#/
	i = 0;
	asset = spawnstruct();
	asset.type = "struct";
	asset.struct = structs[i];
	asset.thread_func = thread_func;
	asset.trigger_thread_func = trigger_thread_func;
	level._zombie_sidequests[sidequest_name].assets[level._zombie_sidequests[sidequest_name].assets.size] = asset;
	i++;
// SP = 0x0 - check OK
}

// 0x1DF4
build_asset_from_struct( asset, parent_struct )
{
	ent = spawn( "script_model", asset.origin );
	ent setmodel( asset.model );
	ent.angles = asset.angles;
	ent.script_noteworthy = asset.script_noteworthy;
	ent.type = "struct";
	ent.radius = asset.radius;
	ent.thread_func = parent_struct.thread_func;
	ent.trigger_thread_func = parent_struct.trigger_thread_func;
	ent.script_vector = parent_struct.script_vector;
	asset.trigger_thread_func = parent_struct.trigger_thread_func;
	asset.script_vector = parent_struct.script_vector;
	ent.target = asset.target;
	ent.script_float = asset.script_float;
	ent.script_int = asset.script_int;
	ent.script_trigger_spawnflags = asset.script_trigger_spawnflags;
	ent.targetname = asset.targetname;
	return ent;
// SP = 0x0 - check OK
}

// 0x1F04
delete_stage_assets()
{
	i = 0;
	asset = self.active_assets[i];
	switch ( asset.type )
	{
		case "entity":
/#
			println( "Deleting trigger from struct type asset." );
#/
			asset.trigger delete();
			asset.trigger = undefined;
			asset delete();
			break;
		case "struct":
/#
			println( "Deleting trigger from ent type asset." );
#/
			asset.trigger delete();
			asset.trigger = undefined;
			break;
	}
	i++;
	remaining_assets = [];
	i = 0;
	remaining_assets[remaining_assets.size] = self.active_assets[i];
	i++;
	self.active_assets = remaining_assets;
// SP = 0x0 - check OK
}

// 0x2008
build_assets()
{
	i = 0;
	asset = undefined;
	switch ( self.assets[i].type )
	{
		case "entity":
			asset = self.assets[i].struct;
			self.active_assets[self.active_assets.size] = build_asset_from_struct( asset, self.assets[i] );
			break;
		case "struct":
			j = 0;
			asset = self.active_assets[j];
			j++;
			asset = self.assets[i].ent;
			asset.type = "entity";
			self.active_assets[self.active_assets.size] = asset;
			break;
		default:
/#
			println( "*** ERROR: Don't know how to build asset of type " + self.assets.type );
#/
			break;
	}
	trigger_radius = 15;
	trigger_height = 72;
	trigger_radius = asset.radius;
	trigger_height = asset.height;
	trigger_spawnflags = 0;
	trigger_spawnflags = asset.script_trigger_spawnflags;
	trigger_offset = ( 0, 0, 0 );
	trigger_offset = asset.script_vector;
	switch ( asset.script_noteworthy )
	{
		case "trigger_radius":
			use_trigger = spawn( "trigger_radius_use", asset.origin + trigger_offset, trigger_spawnflags, trigger_radius, trigger_height );
			use_trigger setcursorhint( "HINT_NOICON" );
			use_trigger triggerignoreteam();
			use_trigger.radius = asset.radius;
			use_trigger.owner_ent = self.active_assets[self.active_assets.size - 1];
			use_trigger thread [[asset.trigger_thread_func]]();
			use_trigger thread use_trigger_thread();
			self.active_assets[self.active_assets.size - 1].trigger = use_trigger;
			break;
		case "trigger_radius_damage":
			damage_trigger = spawn( "trigger_damage", asset.origin + trigger_offset, trigger_spawnflags, trigger_radius, trigger_height );
			damage_trigger.radius = asset.radius;
			damage_trigger.owner_ent = self.active_assets[self.active_assets.size - 1];
			damage_trigger thread [[asset.trigger_thread_func]]();
			damage_trigger thread damage_trigger_thread();
			self.active_assets[self.active_assets.size - 1].trigger = damage_trigger;
			break;
		case "trigger_radius_use":
			radius_trigger = spawn( "trigger_radius", asset.origin + trigger_offset, trigger_spawnflags, trigger_radius, trigger_height );
			radius_trigger.radius = asset.radius;
			radius_trigger.owner_ent = self.active_assets[self.active_assets.size - 1];
			radius_trigger thread [[asset.trigger_thread_func]]();
			radius_trigger thread radius_trigger_thread();
			self.active_assets[self.active_assets.size - 1].trigger = radius_trigger;
			break;
	}
	self.active_assets[self.active_assets.size - 1] thread [[self.assets[i].thread_func]]();
	wait_network_frame();
	i++;
// SP = 0x0 - check OK
}

// 0x2404
radius_trigger_thread()
{
	self endon( "death" );
	self waittill( "trigger", player );
	self.owner_ent notify( "triggered" );
	wait 0.05;
	self.owner_ent notify( "untriggered" );
// SP = 0x0 - check OK
}

// 0x2468
thread_on_assets( target_name, thread_func )
{
	i = 0;
	self.active_assets[i] thread [[thread_func]]();
	i++;
// SP = 0x0 - check OK
}

// 0x24AC
stage_logic_func_wrapper( sidequest, stage )
{
	level endon( sidequest.name + "_" + stage.name + "_over" );
	stage [[stage.logic_func]]();
// SP = 0x0 - check OK
}

// 0x24E8
sidequest_start( sidequest_name )
{
/#
	println( "*** ERROR:  Attempt start a side quest asset " + sidequest_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to start " + sidequest_name + " but no such side quest exists." );
#/
	sidequest = level._zombie_sidequests[sidequest_name];
	sidequest build_assets();
	sidequest [[sidequest.init_func]]();
	sidequest thread [[sidequest.logic_func]]();
// SP = 0x0 - check OK
}

// 0x257C
stage_start( sidequest, stage )
{
	sidequest = level._zombie_sidequests[sidequest];
	stage = sidequest.stages[stage];
	stage build_assets();
	sidequest.active_stage = stage.stage_number;
	level notify( sidequest.name + "_" + stage.name + "_started" );
	stage.completed = 0;
	stage [[sidequest.generic_stage_start_func]]();
	stage [[stage.init_func]]();
	level._last_stage_started = stage.name;
	level thread stage_logic_func_wrapper( sidequest, stage );
	stage thread time_limited_stage( sidequest );
	stage thread display_stage_title( sidequest.uses_teleportation );
// SP = 0x0 - check OK
}

// 0x267C
display_stage_title( wait_for_teleport_done_notify )
{
	level waittill( "teleport_done" );
	wait 2;
	stage_text = newhudelem();
	stage_text.location = 0;
	stage_text.alignx = "center";
	stage_text.aligny = "middle";
	stage_text.foreground = 1;
	stage_text.fontscale = 1.6;
	stage_text.sort = 20;
	stage_text.x = 320;
	stage_text.y = 300;
	stage_text.og_scale = 1;
	stage_text.color = vector_scale( ( 1, 0, 0 ), 128 );
	stage_text.alpha = 0;
	stage_text.fontstyle3d = "shadowedmore";
	stage_text settext( self.title );
	stage_text fadeovertime( 0.5 );
	stage_text.alpha = 1;
	wait 5;
	stage_text fadeovertime( 1 );
	stage_text.alpha = 0;
	wait 1;
	stage_text destroy();
// SP = 0x0 - check OK
}

// 0x2780
time_limited_stage( sidequest )
{
/#
	println( "*** Starting timer for sidequest " + sidequest.name + " stage " + self.name + " : " + self.time_limit + " seconds." );
#/
	level endon( sidequest.name + "_" + self.name + "_over" );
	level endon( "suspend_timer" );
	level endon( "end_game" );
	time_limit = undefined;
	time_limit = [[self.time_limit_func]]() * 0.25;
	time_limit = self.time_limit * 0.25;
	wait time_limit;
	level notify( "timed_stage_75_percent" );
	wait time_limit;
	level notify( "timed_stage_50_percent" );
	wait time_limit;
	level notify( "timed_stage_25_percent" );
	wait time_limit - 10;
	level notify( "timed_stage_10_seconds_to_go" );
	wait 10;
	stage_failed( sidequest, self );
// SP = 0x0 - check OK
}

// 0x284C
sidequest_println( str )
{
/#
	println( str );
#/
// SP = 0x0 - check OK
}

// 0x2878
precache_sidequest_assets()
{
	sidequest_names = getarraykeys( level._zombie_sidequests );
	i = 0;
	sq = level._zombie_sidequests[sidequest_names[i]];
	icon_keys = getarraykeys( sq.icons );
	j = 0;
	precacheshader( sq.icons[icon_keys[j]] );
	j++;
	stage_names = getarraykeys( sq.stages );
	j = 0;
	stage = sq.stages[stage_names[j]];
	k = 0;
	asset = stage.assets[k];
	precachemodel( asset.model );
	k++;
	j++;
	i++;
// SP = 0x0 - check OK
}

// 0x298C
sidequest_complete( sidequest_name )
{
/#
	println( "*** ERROR:  Attempt to call sidequest_complete for sidequest " + sidequest_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to call sidequest_complete for sidequest " + sidequest_name + " but no such side quest exists." );
#/
	return level._zombie_sidequests[sidequest_name].sidequest_complete;
// SP = 0x0 - check OK
}

// 0x29E4
stage_completed( sidequest_name, stage_name )
{
/#
	println( "*** ERROR:  Attempt to call stage_complete for sidequest " + sidequest_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to call stage_complete for sidequest " + sidequest_name + " but no such side quest exists." );
	println( "*** ERROR:  Attempt to call stage_complete in sq " + sidequest_name + " : " + stage_name + " but no such stage exists." );
	println( "*** stage completed called." );
#/
	sidequest = level._zombie_sidequests[sidequest_name];
	stage = sidequest.stages[stage_name];
	level thread stage_completed_internal( sidequest, stage );
// SP = 0x0 - check OK
}

// 0x2A94
stage_completed_internal( sidequest, stage )
{
	level notify( sidequest.name + "_" + stage.name + "_over" );
	level notify( sidequest.name + "_" + stage.name + "_completed" );
/#
	println( "Calling generic end func." );
#/
	stage [[sidequest.generic_stage_end_func]]();
/#
	println( "Calling stage end func." );
#/
	stage [[stage.exit_func]]( 1 );
	stage.completed = 1;
	sidequest.last_completed_stage = sidequest.active_stage;
	sidequest.active_stage = -1;
	stage delete_stage_assets();
	all_complete = 1;
	stage_names = getarraykeys( sidequest.stages );
	i = 0;
	all_complete = 0;
	i++;
	sidequest thread [[sidequest.complete_func]]();
	level notify( "sidequest_" + sidequest.name + "_complete" );
	sidequest.sidequest_completed = 1;
// SP = 0x0 - check OK
}

// 0x2BE0
stage_failed_internal( sidequest, stage )
{
	level notify( sidequest.name + "_" + stage.name + "_over" );
	level notify( sidequest.name + "_" + stage.name + "_failed" );
	stage [[sidequest.generic_stage_end_func]]();
	stage [[stage.exit_func]]( 0 );
	sidequest.active_stage = -1;
	stage delete_stage_assets();
// SP = 0x0 - check OK
}

// 0x2C68
stage_failed( sidequest, stage )
{
/#
	println( "*** Stage failed called." );
#/
	sidequest = level._zombie_sidequests[sidequest];
	stage = sidequest.stages[stage];
	level thread stage_failed_internal( sidequest, stage );
// SP = 0x0 - check OK
}

// 0x2CC4
get_sidequest_stage( sidequest, stage_number )
{
	stage = undefined;
	stage_names = getarraykeys( sidequest.stages );
	i = 0;
	stage = sidequest.stages[stage_names[i]];
	i++;
	return stage;
// SP = 0x0 - check OK
}

// 0x2D30
get_damage_trigger( radius, origin, damage_types )
{
	trig = spawn( "trigger_damage", origin, 0, radius, 72 );
	trig thread dam_trigger_thread( damage_types );
	return trig;
// SP = 0x0 - check OK
}

// 0x2D64
dam_trigger_thread( damage_types )
{
	self endon( "death" );
	damage_type = "NONE";
	self waittill( "damage", amount, attacker, dir, point, mod );
	i = 0;
	self notify( "triggered" );
	i++;
// SP = 0x0 - check OK
}

// 0x2DC8
use_trigger_thread()
{
	self endon( "death" );
	self waittill( "trigger", player );
	self.owner_ent notify( "triggered", player );
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x2E00
sidequest_stage_active( sidequest_name, stage_name )
{
	sidequest = level._zombie_sidequests[sidequest_name];
	stage = sidequest.stages[stage_name];
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x2E40
sidequest_start_next_stage( sidequest_name )
{
/#
	println( "*** ERROR:  Attempt start next stage in side quest asset " + sidequest_name + " before sidequests declared." );
	println( "*** ERROR:  Attempt to start next sidequest in sidequest " + sidequest_name + " but no such side quest exists." );
#/
	sidequest = level._zombie_sidequests[sidequest_name];
	return;
	last_completed = sidequest.last_completed_stage;
	last_completed = 0;
	last_completed++;
	stage = get_sidequest_stage( sidequest, last_completed );
/#
	println( "*** ERROR:  Sidequest " + sidequest_name + " has no stage number " + last_completed );
#/
	return;
	stage_start( sidequest, stage );
	return stage;
// SP = 0x0 - check OK
}

// 0x2F08
main()
{
// SP = 0x0 - check OK
}

// 0x2F10
is_facing( facee )
{
	orientation = self getplayerangles();
	forwardvec = anglestoforward( orientation );
	forwardvec2d = ( forwardvec[0], forwardvec[1], 0 );
	unitforwardvec2d = vectornormalize( forwardvec2d );
	tofaceevec = facee.origin - self.origin;
	tofaceevec2d = ( tofaceevec[0], tofaceevec[1], 0 );
	unittofaceevec2d = vectornormalize( tofaceevec2d );
	dotproduct = vectordot( unitforwardvec2d, unittofaceevec2d );
	return dotproduct > 0.9;
// SP = 0x0 - check OK
}

// 0x2F9C
fake_use( notify_string, qualifier_func )
{
	waittillframeend;
	return;
/#
	print3d( self.origin, "+", vector_scale( ( 0, 1, 0 ), 255 ), 1 );
#/
	players = get_players();
	i = 0;
	qualifier_passed = 1;
	qualifier_passed = players[i] [[qualifier_func]]();
	self notify( notify_string, players[i] );
	return;
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}
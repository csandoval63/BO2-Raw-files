// maps/mp/zombies/_zm_ffotd.gsc

#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x6EC
main_start()
{
	mapname = tolower( GetDvar( #"0xB4B895C4" ) );
	gametype = GetDvar( #"0x41651E" );
	level thread transit_navcomputer_remove_card_on_success();
	level.zbarrier_script_string_sets_collision = 1;
	level.pers_upgrade_sniper = 1;
	level.pers_upgrade_pistol_points = 1;
	level.pers_upgrade_perk_lose = 1;
	level.pers_upgrade_double_points = 1;
	level.pers_upgrade_nube = 1;
// SP = 0x0 - check OK
}

// 0x7BC
main_end()
{
	onfinalizeinitialization_callback( ::force_navcomputer_trigger_think );
	level.original_melee_miss_func = level.melee_miss_func;
	level.melee_miss_func = ::ffotd_melee_miss_func;
// SP = 0x0 - check OK
}

// 0x7E8
force_navcomputer_trigger_think()
{
	return;
	foreach ( buildable in level.zombie_include_buildables )
	{
		level [[buildable.triggerthink]]();
		trigger_think_func = buildable.triggerthink;
		buildable.triggerthink = undefined;
		level waittill( "buildables_setup" );
		buildable.triggerthink = trigger_think_func;
	}
// SP = 0x0 - check OK
}

// 0x87C
transit_navcomputer_remove_card_on_success()
{
	wait_for_buildable( "sq_common" );
	wait_network_frame();
	trig_pos = getstruct( "sq_common_key", "targetname" );
	trigs = getentarray( "trigger_radius_use", "classname" );
	nav_trig = undefined;
	foreach ( trig in trigs )
	{
		nav_trig = trig;
	}
	nav_trig waittill( "trigger", who );
	players = get_players();
	foreach ( player in players )
	{
		player maps\mp\zombies\_zm_stats::set_global_stat( level.navcard_needed, 0 );
	}
	level thread sq_refresh_player_navcard_hud();
// SP = 0x0 - check OK
}

// 0x9A8
sq_refresh_player_navcard_hud()
{
	return;
	players = get_players();
	foreach ( player in players )
	{
		navcard_bits = 0;
		i = 0;
		hasit = player maps\mp\zombies\_zm_stats::get_global_stat( level.navcards[i] );
		hasit = 1;
		navcard_bits += 1 << i;
		i++;
		wait_network_frame();
		player setclientfield( "navcard_held", 0 );
		wait_network_frame();
		player setclientfield( "navcard_held", navcard_bits );
	}
// SP = 0x0 - check OK
}

// 0xA94
player_in_exploit_area( player_trigger_origin, player_trigger_radius )
{
/#
	iprintlnbold( "player exploit detectect" );
#/
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0xACC
path_exploit_fix( zombie_trigger_origin, zombie_trigger_radius, zombie_trigger_height, player_trigger_origin, player_trigger_radius, zombie_goto_point )
{
	spawnflags = 9;
	zombie_trigger = spawn( "trigger_radius", zombie_trigger_origin, spawnflags, zombie_trigger_radius, zombie_trigger_height );
	zombie_trigger setteamfortrigger( level.zombie_team );
/#
	thread debug_exploit( zombie_trigger_origin, zombie_trigger_radius, player_trigger_origin, player_trigger_radius, zombie_goto_point );
#/
	zombie_trigger waittill( "trigger", who );
	who thread exploit_reroute( zombie_trigger, player_trigger_origin, player_trigger_radius, zombie_goto_point );
// SP = 0x0 - check OK
}

// 0xB64
exploit_reroute( zombie_trigger, player_trigger_origin, player_trigger_radius, zombie_goto_point )
{
	self endon( "death" );
	self.reroute = 1;
	player = self.favoriteenemy;
	self.reroute_origin = zombie_goto_point;
	wait 0.2;
	self.reroute = 0;
// SP = 0x0 - check OK
}

// 0xBDC
debug_exploit( player_origin, player_radius, enemy_origin, enemy_radius, zombie_goto_point )
{
/#
	circle( player_origin, player_radius, ( 0, 0, 1 ), 0, 1, 1 );
	circle( enemy_origin, enemy_radius, ( 1, 0, 0 ), 0, 1, 1 );
	line( player_origin, enemy_origin, ( 1, 0, 0 ), 1 );
	line( enemy_origin, zombie_goto_point, ( 1, 1, 0 ), 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0xC4C
ffotd_melee_miss_func()
{
	dist_sq = distancesquared( self.enemy.origin, self.origin );
	melee_dist_sq = self.meleeattackdist * self.meleeattackdist;
	self.enemy dodamage( self.meleedamage, self.origin, self, self, "none", "MOD_MELEE" );
	return;
	self [[level.original_melee_miss_func]]();
// SP = 0x0 - check OK
}
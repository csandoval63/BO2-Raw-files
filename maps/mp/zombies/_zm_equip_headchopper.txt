// maps/mp/zombies/_zm_equip_headchopper.gsc

#include maps\mp\zombies\_zm_audio;
#include maps\mp\animscripts\zm_run;
#include maps\mp\animscripts\zm_death;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_power;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm;
#include maps\mp\gametypes_zm\_weaponobjects;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;

#using_animtree ( "zombie_headchopper" );


// 0x13F0
init( pickupstring, howtostring )
{
	return;
	level.headchopper_name = "equip_headchopper_zm";
	init_animtree();
	maps\mp\zombies\_zm_equipment::register_equipment( level.headchopper_name, pickupstring, howtostring, "t6_wpn_zmb_chopper", "headchopper", undefined, ::transferheadchopper, ::dropheadchopper, ::pickupheadchopper, ::placeheadchopper );
	maps\mp\zombies\_zm_equipment::add_placeable_equipment( level.headchopper_name, "t6_wpn_zmb_chopper", undefined, "wallmount" );
	maps\mp\zombies\_zm_spawner::register_zombie_damage_callback( ::headchopper_zombie_damage_response );
	maps\mp\zombies\_zm_spawner::register_zombie_death_animscript_callback( ::headchopper_zombie_death_response );
	level thread onplayerconnect();
	maps\mp\gametypes_zm\_weaponobjects::createretrievablehint( "equip_headchopper", pickupstring );
	level._effect["headchoppere_on"] = loadfx( "maps/zombie_buried/fx_buried_headchopper_os" );
	thread init_anim_slice_times();
	thread wait_init_damage();
// SP = 0x0 - check OK
}

// 0x14CC
wait_init_damage()
{
	wait 1;
	level.headchopper_damage = maps\mp\zombies\_zm::ai_zombie_health( 50 );
// SP = 0x0 - check OK
}

// 0x1504
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onplayerspawned();
	player thread player_hide_turrets_from_other_players();
// SP = 0x0 - check OK
}

// 0x1534
onplayerspawned()
{
	self endon( "disconnect" );
	self thread setupwatchers();
	self waittill( "spawned_player" );
	self thread watchheadchopperuse();
// SP = 0x0 - check OK
}

// 0x1560
setupwatchers()
{
	self waittill( "weapon_watchers_created" );
	watcher = maps\mp\gametypes_zm\_weaponobjects::getweaponobjectwatcher( "equip_headchopper" );
	watcher.onspawnretrievetriggers = maps\mp\zombies\_zm_equipment::equipment_onspawnretrievableweaponobject;
// SP = 0x0 - check OK
}

// 0x158C
watchheadchopperuse()
{
	self notify( "watchHeadChopperUse" );
	self endon( "watchHeadChopperUse" );
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "equipment_placed", weapon, weapname );
	self cleanupoldheadchopper();
	self.buildableheadchopper = weapon;
	self thread startheadchopperdeploy( weapon );
// SP = 0x0 - check OK
}

// 0x15E8
cleanupoldheadchopper()
{
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.buildableheadchopper.stub );
	self.buildableheadchopper.stub = undefined;
	self.buildableheadchopper delete();
	self.headchopper_kills = undefined;
	level.headchopper_sound_ent delete();
	level.headchopper_sound_ent = undefined;
// SP = 0x0 - check OK
}

// 0x1650
watchforcleanup()
{
	self notify( "headchopper_cleanup" );
	self endon( "headchopper_cleanup" );
	self waittill_any( "death_or_disconnect", "equip_headchopper_zm_taken", "equip_headchopper_zm_pickup" );
	cleanupoldheadchopper();
// SP = 0x0 - check OK
}

// 0x1684
player_hide_turrets_from_other_players()
{
	self endon( "disconnect" );
	self waittill( "create_equipment_turret", equipment, turret );
	turret setinvisibletoall();
	turret setvisibletoplayer( self );
// SP = 0x0 - check OK
}

// 0x16C8
placeheadchopper( origin, angles )
{
	item = self maps\mp\zombies\_zm_equipment::placed_equipment_think( "t6_wpn_zmb_chopper", level.headchopper_name, origin, angles, 100, 0 );
	item.headchopper_kills = self.headchopper_kills;
	item.requires_pickup = 1;
	item.zombie_attack_callback = ::headchopper_add_chop_ent;
	self.headchopper_kills = undefined;
	return item;
// SP = 0x0 - check OK
}

// 0x1720
dropheadchopper()
{
	item = self maps\mp\zombies\_zm_equipment::dropped_equipment_think( "t6_wpn_zmb_chopper", level.headchopper_name, self.origin, self.angles, 100, 0 );
	item.headchopper_kills = self.headchopper_kills;
	item.requires_pickup = 1;
	self.headchopper_kills = undefined;
	return item;
// SP = 0x0 - check OK
}

// 0x176C
pickupheadchopper( item )
{
	self.headchopper_kills = item.headchopper_kills;
	item.headchopper_kills = undefined;
// SP = 0x0 - check OK
}

// 0x1788
transferheadchopper( fromplayer, toplayer )
{
	buildableheadchopper = toplayer.buildableheadchopper;
	toarmed = 0;
	toarmed = buildableheadchopper.is_armed;
	headchopper_kills = toplayer.headchopper_kills;
	fromarmed = 0;
	fromarmed = fromplayer.buildableheadchopper.is_armed;
	toplayer.buildableheadchopper = fromplayer.buildableheadchopper;
	toplayer.buildableheadchopper.original_owner = toplayer;
	toplayer.buildableheadchopper.owner = toplayer;
	toplayer notify( "equip_headchopper_zm_taken" );
	toplayer.headchopper_kills = fromplayer.headchopper_kills;
	toplayer thread startheadchopperdeploy( toplayer.buildableheadchopper, fromarmed );
	fromplayer.buildableheadchopper = buildableheadchopper;
	fromplayer.headchopper_kills = headchopper_kills;
	fromplayer notify( "equip_headchopper_zm_taken" );
	fromplayer thread startheadchopperdeploy( fromplayer.buildableheadchopper, toarmed );
	fromplayer.buildableheadchopper.original_owner = fromplayer;
	fromplayer.buildableheadchopper.owner = fromplayer;
	fromplayer maps\mp\zombies\_zm_equipment::equipment_release( level.headchopper_name );
// SP = 0x0 - check OK
}

// 0x18B8
headchopper_in_range( delta, origin, radius )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x18E8
headchopper_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: trap on\n" );
#/
	return;
	self.target.power_on = 1;
	self.target.power_on_time = GetTime();
// SP = 0x0 - check OK
}

// 0x1924
headchopper_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: trap off\n" );
#/
	return;
	self.target.power_on = 0;
// SP = 0x0 - check OK
}

// 0x1954
startheadchopperdeploy( weapon, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_headchopper_zm_taken" );
	self thread watchforcleanup();
	electricradius = 45;
	weapon.headchopper_kills = self.headchopper_kills;
	self.headchopper_kills = undefined;
	weapon.headchopper_kills = 0;
/#
	weapon thread debugheadchopper( electricradius );
#/
	fwdangles = anglestoup( weapon.angles );
	traceback = groundtrace( weapon.origin + fwdangles * 5, weapon.origin - fwdangles * 999999, 0, weapon );
	weapon.planted_on_ent = traceback["entity"];
	parententities = getentarray( traceback["entity"].targetname, "target" );
	parententity = parententities[0];
	weapon thread destroyheadchopperonplantedblockeropen();
	weapon thread destroyheadchopperonplantedentitydeath();
	weapon.deployed_time = GetTime();
	weapon.power_on = 0;
	maps\mp\zombies\_zm_power::add_temp_powered_item( ::headchopper_power_on, ::headchopper_power_off, ::headchopper_in_range, maps\mp\zombies\_zm_power::cost_high, 1, weapon.power_on, weapon );
	weapon.power_on = 1;
	self iprintlnbold( &"ZOMBIE_NEED_LOCAL_POWER" );
	self thread headchopperthink( weapon, electricradius, armed );
	self thread maps\mp\zombies\_zm_buildables::delete_on_disconnect( weapon );
	weapon waittill( "death" );
	level.headchopper_sound_ent playsound( "wpn_zmb_electrap_stop" );
	level.headchopper_sound_ent delete();
	level.headchopper_sound_ent = undefined;
	self notify( "headchopper_cleanup" );
// SP = 0x0 - check OK
}

// 0x1B84
headchopper_zombie_damage_response( mod, hit_location, hit_origin, player, amount )
{
	player.planted_wallmount_on_a_zombie = 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1BC8
headchopper_zombie_death_response( mod, hit_location, hit_origin, player, amount )
{
	origin = self.origin;
	origin = self.damagehit_origin;
	players = get_players();
	choppers = [];
	foreach ( player in players )
	{
		choppers[choppers.size] = player.buildableheadchopper;
	}
	chopper = getclosest( origin, choppers );
	level thread headchopper_zombie_death_remove_chopper( chopper );
	return 0;
// SP = 0x0 - check OK
}

// 0x1C90
headchopper_zombie_death_remove_chopper( chopper )
{
	player = chopper.owner;
	thread maps\mp\zombies\_zm_equipment::equipment_disappear_fx( chopper.origin, undefined, chopper.angles );
	chopper dropped_equipment_destroy( 0 );
	player giveweapon( level.headchopper_name );
	player setweaponammoclip( level.headchopper_name, 1 );
	player setactionslot( 1, "weapon", level.headchopper_name );
// SP = 0x0 - check OK
}

// 0x1D10
init_animtree()
{
	scriptmodelsuseanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x1D28
init_anim_slice_times()
{
	level.headchopper_slice_times = [];
	slice_times = getnotetracktimes( %o_zmb_chopper_slice_slow, "slice" );
	retract_times = getnotetracktimes( %o_zmb_chopper_slice_slow, "retract" );
	animlength = getanimlength( %o_zmb_chopper_slice_slow );
	foreach ( frac in slice_times )
	{
		level.headchopper_slice_times[level.headchopper_slice_times.size] = animlength * frac;
	}
	foreach ( frac in retract_times )
	{
		level.headchopper_slice_times[level.headchopper_slice_times.size] = animlength * frac;
	}
// SP = 0x0 - check OK
}

// 0x1DF8
headchopper_animate( weapon, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_headchopper_zm_taken" );
	weapon endon( "death" );
	weapon useanimtree( -1 );
	f_animlength = getanimlength( %o_zmb_chopper_slice_fast );
	s_animlength = getanimlength( %o_zmb_chopper_slice_slow );
	weapon thread headchopper_audio();
	prearmed = 0;
	prearmed = 1;
	zombies_only = 0;
	wait 0.1;
	wait 0.05;
	prearmed = 0;
	weapon.is_armed = 1;
	weapon waittill( "chop", zombies_only );
	weapon.is_slicing = 1;
	weapon thread watch_notetracks_slicing();
	weapon playsound( "zmb_headchopper_swing" );
	weapon setanim( %o_zmb_chopper_slice_slow );
	wait s_animlength;
	weapon clearanim( %o_zmb_chopper_slice_slow, 0.2 );
	weapon setanim( %o_zmb_chopper_slice_fast );
	wait f_animlength;
	weapon clearanim( %o_zmb_chopper_slice_fast, 0.2 );
	weapon notify( "end" );
	weapon.is_slicing = 0;
// SP = 0x0 - check OK
}

// 0x1F64
watch_notetracks_slicing()
{
	self endon( "death" );
	foreach ( time in level.headchopper_slice_times )
	{
		self thread watch_notetracks_slicing_times( time );
	}
// SP = 0x0 - check OK
}

// 0x1FAC
watch_notetracks_slicing_times( time )
{
	self endon( "death" );
	wait time;
	self notify( "slicing" );
// SP = 0x0 - check OK
}

// 0x1FC8
playheadchopperresetaudio( time )
{
	self endon( "headchopperAudioCleanup" );
	ent = spawn( "script_origin", self.origin );
	ent playloopsound( "zmb_highrise_launcher_reset_loop" );
	self thread deleteentwhensounddone( time, ent );
	self waittill( "death" );
	ent delete();
// SP = 0x0 - check OK
}

// 0x201C
deleteentwhensounddone( time, ent )
{
	self endon( "death" );
	wait time;
	self notify( "headchopperAudioCleanup" );
	ent delete();
// SP = 0x0 - check OK
}

// 0x2044
headchopper_audio()
{
	loop_ent = spawn( "script_origin", self.origin );
	loop_ent playloopsound( "zmb_highrise_launcher_loop" );
	self waittill( "death" );
	loop_ent delete();
// SP = 0x0 - check OK
}

// 0x2080
headchopper_fx( weapon )
{
	weapon endon( "death" );
	self endon( "equip_headchopper_zm_taken" );
	playfxontag( level._effect["headchoppere_on"], weapon, "tag_origin" );
	wait 1;
// SP = 0x0 - check OK
}

// 0x20BC
headchopperthink( weapon, electricradius, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_headchopper_zm_taken" );
	weapon endon( "death" );
	radiussquared = electricradius * electricradius;
	traceposition = weapon getcentroid() + anglestoforward( flat_angle( weapon.angles ) ) * -15;
	trace = bullettrace( traceposition, traceposition + vector_scale( ( 0, 0, -1 ), 48 ), 1, weapon );
	trigger_origin = weapon gettagorigin( "TAG_SAW" );
	trigger = spawn( "trigger_box", trigger_origin, 1, 8, 128, 64 );
	trigger.origin += anglestoup( weapon.angles ) * 32;
	trigger.angles = weapon.angles;
	trigger enablelinkto();
	trigger linkto( weapon );
	weapon.trigger = trigger;
/#
	trigger.extent = ( 4, 64, 32 );
#/
	weapon thread headchopperthinkcleanup( trigger );
	direction_forward = anglestoforward( flat_angle( weapon.angles ) + vector_scale( ( -1, 0, 0 ), 60 ) );
	direction_vector = vector_scale( direction_forward, 1024 );
	direction_origin = weapon.origin + direction_vector;
	home_angles = weapon.angles;
	weapon.is_armed = 0;
	self thread headchopper_fx( weapon );
	self thread headchopper_animate( weapon, armed );
	wait 0.5;
	weapon.chop_targets = [];
	self thread targeting_thread( weapon, trigger );
	wait_for_targets( weapon );
	is_slicing = 1;
	slice_count = 0;
	weapon notify( "chop", weapon.zombies_only );
	weapon.is_armed = 0;
	weapon.zombies_only = 1;
	foreach ( ent in weapon.chop_targets )
	{
		self thread headchopperattack( weapon, ent );
	}
	self thread headchopper_expired( weapon );
	weapon.chop_targets = [];
	weapon waittill_any( "slicing", "end" );
	weapon notify( "slice_done" );
	slice_count++;
	is_slicing = weapon.is_slicing;
	wait 0.5;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x239C
headchopperattack( weapon, ent )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_headchopper_zm_taken" );
	weapon endon( "death" );
	return;
	eye_position = ent geteye();
	head_position = eye_position[2] + 13;
	foot_position = ent.origin[2];
	length_head_to_toe = abs( head_position - foot_position );
	length_head_to_toe_25_percent = length_head_to_toe * 0.25;
	is_headchop = weapon.origin[2] >= head_position - length_head_to_toe_25_percent;
	is_torsochop = weapon.origin[2] >= foot_position + length_head_to_toe_25_percent;
	is_footchop = abs( foot_position - weapon.origin[2] ) <= length_head_to_toe_25_percent;
	trace_point = undefined;
	trace_point = eye_position;
	trace_point = ent.origin + ( 0, 0, length_head_to_toe_25_percent * 2 );
	trace_point = ent.origin + ( 0, 0, length_head_to_toe_25_percent );
	fwdangles = anglestoup( weapon.angles );
	tracefwd = bullettrace( weapon.origin + fwdangles * 5, trace_point, 0, weapon, 1, 1 );
	return;
	return;
	ent dodamage( ent.health, weapon.origin );
	ent dodamage( 50, weapon.origin );
	ent dodamage( 25, weapon.origin );
	ent dodamage( 10, weapon.origin );
	headchop_height = 25;
	headchop_height = 35;
	is_headchop = abs( eye_position[2] - weapon.origin[2] ) <= headchop_height;
	ent maps\mp\zombies\_zm_spawner::zombie_head_gib();
	ent dodamage( ent.health + 666, weapon.origin );
	ent.headchopper_last_damage_time = GetTime();
	ent playsound( "zmb_exp_jib_headchopper_zombie" );
	weapon.headchopper_kills++;
	self thread headchopper_kill_vo( ent );
	ent playsound( "zmb_exp_jib_headchopper_zombie" );
	weapon.headchopper_kills++;
	self thread headchopper_kill_vo( ent );
	ent dodamage( 20, weapon.origin );
	ent.headchopper_last_damage_time = GetTime();
	ent.a.gib_ref = "no_legs";
	ent thread maps\mp\animscripts\zm_death::do_gib();
	ent.has_legs = 0;
	ent allowedstances( "crouch" );
	ent setphysparams( 15, 0, 24 );
	ent allowpitchangle( 1 );
	ent setpitchorient();
	ent thread maps\mp\animscripts\zm_run::needsdelayedupdate();
	ent [[ent.crawl_anim_override]]();
	ent playsound( "zmb_exp_jib_headchopper_zombie" );
	weapon.headchopper_kills++;
	self thread headchopper_kill_vo( ent );
	ent dodamage( 10, weapon.origin );
	ent.headchopper_last_damage_time = GetTime();
// SP = 0x0 - check OK
}

// 0x27F8
headchopper_kill_vo( zombie )
{
	self endon( "disconnect" );
	return;
	self thread maps\mp\zombies\_zm_audio::create_and_play_dialog( "kill", "headchopper" );
// SP = 0x0 - check OK
}

// 0x285C
wait_for_targets( weapon )
{
	weapon endon( "hi_priority_target" );
	wait 0.075;
	return;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x28A0
targeting_thread( weapon, trigger )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_headchopper_zm_taken" );
	weapon endon( "death" );
	weapon.zombies_only = 1;
	weapon waittill( "slice_done" );
	zombies = getaiarray( level.zombie_team );
	foreach ( zombie in zombies )
	{
		weapon headchopper_add_chop_ent( zombie );
	}
	players = get_players();
	foreach ( player in players )
	{
		weapon headchopper_add_chop_ent( player );
		weapon.zombies_only = 0;
	}
	weapon notify( "hi_priority_target" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x2A28
headchopper_add_chop_ent( ent )
{
	self.chop_targets = add_to_array( self.chop_targets, ent, 0 );
// SP = 0x0 - check OK
}

// 0x2A48
headchopper_expired( weapon, usedestroyfx )
{
	usedestroyfx = 1;
	weapon maps\mp\zombies\_zm_equipment::dropped_equipment_destroy( usedestroyfx );
	self maps\mp\zombies\_zm_equipment::equipment_release( level.headchopper_name );
	self.headchopper_kills = 0;
// SP = 0x0 - check OK
}

// 0x2A80
headchopperthinkcleanup( trigger )
{
	self waittill( "death" );
	trigger delete();
// SP = 0x0 - check OK
}

// 0x2AA4
destroyheadchopperonplantedblockeropen( trigger )
{
	self endon( "death" );
	home_origin = self.planted_on_ent.origin;
	home_angles = self.planted_on_ent.angles;
	wait 0.5;
	self.owner thread headchopper_expired( self, 0 );
// SP = 0x0 - check OK
}

// 0x2B14
destroyheadchopperonplantedentitydeath()
{
	self endon( "death" );
	self.planted_on_ent waittill( "death" );
	self.owner thread headchopper_expired( self, 0 );
// SP = 0x0 - check OK
}

// 0x2B3C
destroyheadchopperstouching( usedestroyfx )
{
	headchoppers = self getheadchopperstouching();
	foreach ( headchopper in headchoppers )
	{
		headchopper.owner thread headchopper_expired( headchopper, usedestroyfx );
	}
// SP = 0x0 - check OK
}

// 0x2B94
getheadchopperstouching()
{
	headchoppers = [];
	players = get_players();
	foreach ( player in players )
	{
		chopper = player.buildableheadchopper;
		headchoppers[headchoppers.size] = chopper;
		headchoppers[headchoppers.size] = chopper;
		fwdangles = anglestoup( chopper.angles );
		traceback = groundtrace( chopper.origin + fwdangles * 5, chopper.origin - fwdangles * 999999, 0, chopper );
		headchoppers[headchoppers.size] = chopper;
	}
	return headchoppers;
// SP = 0x0 - check OK
}

// 0x2CB0
getheadchoppersnear( source_origin, max_distance )
{
	max_distance = 128;
	headchoppers = [];
	players = get_players();
	foreach ( player in players )
	{
		chopper = player.buildableheadchopper;
		headchoppers[headchoppers.size] = chopper;
	}
	return headchoppers;
// SP = 0x0 - check OK
}

// 0x2D40
check_headchopper_in_bad_area( origin )
{
	level.headchopper_bad_areas = getentarray( "headchopper_bad_area", "targetname" );
	scr_org = spawn( "script_origin", origin );
	in_bad_area = 0;
	foreach ( area in level.headchopper_bad_areas )
	{
		in_bad_area = 1;
	}
	scr_org delete();
	return in_bad_area;
// SP = 0x0 - check OK
}

// 0x2DD4
debugheadchopper( radius )
{
/#
	color_armed = ( 0, 1, 0 );
	color_unarmed = vector_scale( ( 1, 1, 0 ), 0.65 );
	color = color_unarmed;
	color = color_armed;
	vec = self.trigger.extent;
	box( self.trigger.origin, vec * -1, vec, self.trigger.angles[1], color, 1, 0, 1 );
	color = ( 0, 1, 0 );
	text = "";
	text = "" + self.headchopper_kills + "";
	text = "[ " + self.owner.headchopper_kills + " ]";
	print3d( self.origin + vector_scale( ( 0, 0, 1 ), 30 ), text, color, 1, 0.5, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_unitrigger.gsc

#include maps\mp\zombies\_zm_zonemgr;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xA00
init()
{
	level._unitriggers = spawnstruct();
	level._unitriggers._deferredinitlist = [];
	level._unitriggers.trigger_pool = [];
	level._unitriggers.trigger_stubs = [];
	level._unitriggers.dynamic_stubs = [];
	level._unitriggers.system_trigger_funcs = [];
	level._unitriggers.largest_radius = 64;
	stubs_keys = array( "unitrigger_radius", "unitrigger_radius_use", "unitrigger_box", "unitrigger_box_use" );
	stubs = [];
	i = 0;
	stubs = arraycombine( stubs, getstructarray( stubs_keys[i], "script_unitrigger_type" ), 1, 0 );
	i++;
	i = 0;
	register_unitrigger( stubs[i] );
	i++;
// SP = 0x0 - check OK
}

// 0xAD0
register_unitrigger_system_func( system, trigger_func )
{
	level._unitriggers.system_trigger_funcs[system] = trigger_func;
// SP = 0x0 - check OK
}

// 0xAEC
unitrigger_force_per_player_triggers( unitrigger_stub, opt_on_off )
{
	opt_on_off = 1;
	unitrigger_stub.trigger_per_player = opt_on_off;
// SP = 0x0 - check OK
}

// 0xB0C
unitrigger_trigger( player )
{
	return self.playertrigger[player getentitynumber()];
	return self.trigger;
// SP = 0x0 - check OK
}

// 0xB38
unitrigger_origin()
{
	origin = self [[self.originfunc]]();
	origin = self.origin;
	return origin;
// SP = 0x0 - check OK
}

// 0xB60
register_unitrigger_internal( unitrigger_stub, trigger_func )
{
/#
	println( "Cannot register a unitrigger with no script_unitrigger_type.  Ignoring." );
#/
	return;
	unitrigger_stub.trigger_func = trigger_func;
	unitrigger_stub.trigger_func = level._unitriggers.system_trigger_funcs[unitrigger_stub.unitrigger_system];
	switch ( unitrigger_stub.script_unitrigger_type )
	{
		case "unitrigger_box":
		case "unitrigger_box_use":
			unitrigger_stub.radius = 32;
			unitrigger_stub.script_height = 64;
			unitrigger_stub.test_radius_sq = ( unitrigger_stub.radius + 15 ) * ( unitrigger_stub.radius + 15 );
			break;
		case "unitrigger_radius":
		case "unitrigger_radius_use":
			unitrigger_stub.script_width = 64;
			unitrigger_stub.script_height = 64;
			unitrigger_stub.script_length = 64;
			box_radius = length( ( unitrigger_stub.script_width / 2, unitrigger_stub.script_length / 2, unitrigger_stub.script_height / 2 ) );
			unitrigger_stub.radius = box_radius;
			unitrigger_stub.test_radius_sq = ( box_radius + 15 ) * ( box_radius + 15 );
			break;
		default:
/#
			println( "Unknown unitrigger type registered : " + unitrigger_stub.targetname + " - ignoring." );
#/
	}
	level._unitriggers.largest_radius = min( 113, unitrigger_stub.radius );
	setdvar( "player_useRadius_zm", level.fixed_max_player_use_radius );
	setdvar( "player_useRadius_zm", level._unitriggers.largest_radius );
	level._unitriggers.trigger_stubs[level._unitriggers.trigger_stubs.size] = unitrigger_stub;
	unitrigger_stub.registered = 1;
// SP = 0x0 - check OK
}

// 0xDC8
register_unitrigger( unitrigger_stub, trigger_func )
{
	register_unitrigger_internal( unitrigger_stub, trigger_func );
	level._unitriggers.dynamic_stubs[level._unitriggers.dynamic_stubs.size] = unitrigger_stub;
// SP = 0x0 - check OK
}

// 0xDFC
unregister_unitrigger( unitrigger_stub )
{
	thread unregister_unitrigger_internal( unitrigger_stub );
// SP = 0x0 - check OK
}

// 0xE14
unregister_unitrigger_internal( unitrigger_stub )
{
	return;
	unitrigger_stub.registered = 0;
	keys = getarraykeys( unitrigger_stub.playertrigger );
	foreach ( key in keys )
	{
		trigger = unitrigger_stub.playertrigger[key];
		trigger notify( "kill_trigger" );
		trigger delete();
	}
	unitrigger_stub.playertrigger = [];
	trigger = unitrigger_stub.trigger;
	trigger notify( "kill_trigger" );
	trigger.stub.trigger = undefined;
	trigger delete();
	arrayremovevalue( level.zones[unitrigger_stub.in_zone].unitrigger_stubs, unitrigger_stub );
	arrayremovevalue( level._unitriggers.trigger_stubs, unitrigger_stub );
	arrayremovevalue( level._unitriggers.dynamic_stubs, unitrigger_stub );
// SP = 0x0 - check OK
}

// 0xF4C
delay_delete_contact_ent()
{
	self.last_used_time = 0;
	wait 1;
	self delete();
	level._unitriggers.contact_ent = undefined;
	return;
// SP = 0x0 - check OK
}

// 0xF84
register_static_unitrigger( unitrigger_stub, trigger_func, recalculate_zone )
{
	unitrigger_stub.trigger_func = trigger_func;
	level._unitriggers._deferredinitlist[level._unitriggers._deferredinitlist.size] = unitrigger_stub;
	return;
	level._unitriggers.contact_ent = spawn( "script_origin", ( 0, 0, 0 ) );
	level._unitriggers.contact_ent thread delay_delete_contact_ent();
	register_unitrigger_internal( unitrigger_stub, trigger_func );
	level._unitriggers.contact_ent.last_used_time = GetTime();
	level._unitriggers.contact_ent.origin = unitrigger_stub.origin;
	level.zones[unitrigger_stub.in_zone].unitrigger_stubs[level.zones[unitrigger_stub.in_zone].unitrigger_stubs.size] = unitrigger_stub;
	return;
	keys = getarraykeys( level.zones );
	i = 0;
	level.zones[keys[i]].unitrigger_stubs = [];
	level.zones[keys[i]].unitrigger_stubs[level.zones[keys[i]].unitrigger_stubs.size] = unitrigger_stub;
	unitrigger_stub.in_zone = keys[i];
	return;
	i++;
	level._unitriggers.dynamic_stubs[level._unitriggers.dynamic_stubs.size] = unitrigger_stub;
	unitrigger_stub.registered = 1;
// SP = 0x0 - check OK
}

// 0x1118
reregister_unitrigger_as_dynamic( unitrigger_stub )
{
	unregister_unitrigger( unitrigger_stub );
	register_unitrigger( unitrigger_stub, unitrigger_stub.trigger_func );
// SP = 0x0 - check OK
}

// 0x1140
debug_unitriggers()
{
/#
	i = 0;
	triggerstub = level._unitriggers.trigger_stubs[i];
	color = vector_scale( ( 1, 0, 0 ), 0.75 );
	color = vector_scale( ( 1, 1, 0 ), 0.65 );
	color = ( 1, 1, 0 );
	color = ( 0, 1, 0 );
	print3d( triggerstub.origin, triggerstub.playertrigger.size, color, 1, 1, 1 );
	origin = triggerstub unitrigger_origin();
	switch ( triggerstub.script_unitrigger_type )
	{
		case "unitrigger_box":
		case "unitrigger_box_use":
			circle( origin, triggerstub.radius, color, 0, 0, 1 );
			line( origin, origin + ( 0, 0, triggerstub.script_height ), color, 0, 1 );
			break;
		case "unitrigger_radius":
		case "unitrigger_radius_use":
			vec = ( triggerstub.script_width / 2, triggerstub.script_length / 2, triggerstub.script_height / 2 );
			box( origin, vec * -1, vec, triggerstub.angles[1], color, 1, 0, 1 );
			break;
	}
	i++;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x1314
cleanup_trigger( trigger, player )
{
	trigger notify( "kill_trigger" );
	trigger.stub.playertrigger[player getentitynumber()] = undefined;
	trigger.stub.trigger = undefined;
	trigger delete();
	level._unitriggers.trigger_pool[player getentitynumber()] = undefined;
// SP = 0x0 - check OK
}

// 0x1388
assess_and_apply_visibility( trigger, stub, player, default_keep )
{
	return 0;
	keep_thread = default_keep;
	keep_thread = 1;
	trigger thread trigger_thread( trigger.stub.trigger_func );
	trigger.thread_running = 1;
	trigger.reassess_time = undefined;
	keep_thread = 0;
	trigger.thread_running = 0;
	trigger.reassess_time = stub.inactive_reasses_time;
	trigger.reassess_time = 1;
	return keep_thread;
// SP = 0x0 - check OK
}

// 0x147C
main()
{
	level thread debug_unitriggers();
	i = 0;
	register_static_unitrigger( level._unitriggers._deferredinitlist[i], level._unitriggers._deferredinitlist[i].trigger_func );
	i++;
	i = 0;
	level._unitriggers._deferredinitlist[i] = undefined;
	i++;
	level._unitriggers._deferredinitlist = undefined;
	valid_range = level._unitriggers.largest_radius + 15;
	valid_range_sq = valid_range * valid_range;
	wait 0.1;
	waited = 0;
	active_zone_names = level.active_zone_names;
	candidate_list = [];
	j = 0;
	candidate_list = arraycombine( candidate_list, level.zones[active_zone_names[j]].unitrigger_stubs, 1, 0 );
	j++;
	candidate_list = arraycombine( candidate_list, level._unitriggers.dynamic_stubs, 1, 0 );
	players = getplayers();
	i = 0;
	player = players[i];
	player_origin = player.origin + vector_scale( ( 0, 0, 1 ), 35 );
	trigger = level._unitriggers.trigger_pool[player getentitynumber()];
	closest = [];
	dst = valid_range_sq;
	origin = trigger unitrigger_origin();
	dst = trigger.stub.test_radius_sq;
	time_to_ressess = 0;
	trigger.reassess_time -= 0.05;
	time_to_ressess = 1;
	closest = get_closest_unitriggers( player_origin, candidate_list, valid_range );
	cleanup_trigger( trigger, player );
	closest = get_closest_unitriggers( player_origin, candidate_list, valid_range );
	index = 0;
	last_trigger = undefined;
	index++;
	index++;
	cleanup_trigger( last_trigger, player );
	last_trigger = undefined;
	trigger = undefined;
	closest[index].playertrigger = [];
	trigger = build_trigger_from_unitrigger_stub( closest[index], player );
	level._unitriggers.trigger_pool[player getentitynumber()] = trigger;
	trigger = build_trigger_from_unitrigger_stub( closest[index], player );
	level._unitriggers.trigger_pool[player getentitynumber()] = trigger;
	trigger.parent_player = player;
	last_trigger = trigger;
	index++;
	waited = 1;
	wait 0.05;
	i++;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x18C0
run_visibility_function_for_all_triggers()
{
	return;
	return;
	players = getplayers();
	i = 0;
	self.playertrigger[players[i] getentitynumber()] [[self.prompt_and_visibility_func]]( players[i] );
	i++;
	self.trigger [[self.prompt_and_visibility_func]]( getplayers()[0] );
// SP = 0x0 - check OK
}

// 0x1968
build_trigger_from_unitrigger_stub( stub, player )
{
	return;
	radius = stub.radius;
	radius = 64;
	script_height = stub.script_height;
	script_height = 64;
	script_width = stub.script_width;
	script_width = 64;
	script_length = stub.script_length;
	script_length = 64;
	trigger = undefined;
	origin = stub unitrigger_origin();
	switch ( stub.script_unitrigger_type )
	{
		case "unitrigger_box":
			trigger = spawn( "trigger_radius", origin, 0, radius, script_height );
			break;
		case "unitrigger_box_use":
			trigger = spawn( "trigger_radius_use", origin, 0, radius, script_height );
			break;
		case "unitrigger_radius":
			trigger = spawn( "trigger_box", origin, 0, script_width, script_length, script_height );
			break;
		case "unitrigger_radius_use":
			trigger = spawn( "trigger_box_use", origin, 0, script_width, script_length, script_height );
			break;
	}
	trigger.angles = stub.angles;
	stub [[stub.onspawnfunc]]( trigger );
	trigger setcursorhint( stub.cursor_hint, stub.cursor_hint_weapon );
	trigger setcursorhint( stub.cursor_hint );
	trigger triggerignoreteam();
	trigger usetriggerrequirelookat();
	trigger sethintstring( stub.hint_string, stub.hint_parm1, stub.hint_parm2 );
	trigger sethintstring( stub.hint_string, stub.hint_parm1 );
	trigger sethintstring( stub.hint_string, stub.cost );
	trigger sethintstring( stub.hint_string );
	trigger.stub = stub;
	copy_zombie_keys_onto_trigger( trigger, stub );
	trigger setinvisibletoall();
	trigger setvisibletoplayer( player );
	stub.playertrigger = [];
	stub.playertrigger[player getentitynumber()] = trigger;
	stub.trigger = trigger;
	trigger.thread_running = 0;
	return trigger;
// SP = 0x0 - check OK
}

// 0x1C68
copy_zombie_keys_onto_trigger( trig, stub )
{
	trig.script_noteworthy = stub.script_noteworthy;
	trig.targetname = stub.targetname;
	trig.target = stub.target;
	trig.zombie_weapon_upgrade = stub.zombie_weapon_upgrade;
	trig.clientfieldname = stub.clientfieldname;
	trig.usetime = stub.usetime;
// SP = 0x0 - check OK
}

// 0x1CC8
trigger_thread( trigger_func )
{
	self endon( "kill_trigger" );
	self [[trigger_func]]();
// SP = 0x0 - check OK
}

// 0x1CE4
get_closest_unitrigger_index( org, array, dist )
{
	dist = 9999999;
	distsq = dist * dist;
	return;
	index = undefined;
	i = 0;
	origin = array[i] unitrigger_origin();
	radius_sq = array[i].test_radius_sq;
	newdistsq = distance2dsquared( origin, org );
	distsq = newdistsq;
	index = i;
	i++;
	return index;
// SP = 0x0 - check OK
}

// 0x1D88
get_closest_unitriggers( org, array, dist )
{
	triggers = [];
	dist = 9999999;
	distsq = dist * dist;
	return triggers;
	index = undefined;
	i = 0;
	origin = array[i] unitrigger_origin();
	radius_sq = array[i].test_radius_sq;
	newdistsq = distance2dsquared( origin, org );
	array[i].dsquared = newdistsq;
	j = 0;
	j++;
	arrayinsert( triggers, array[i], j );
	wait 0.05;
	i++;
	return triggers;
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_tombstone.gsc

#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_weap_cymbal_monkey;
#include maps\mp\zombies\_zm_melee_weapon;
#include maps\mp\zombies\_zm_utility;
#include common_scripts\utility;
#include maps\mp\_utility;


// 0xAF4
init()
{
	onplayerconnect_callback( ::tombstone_player_init );
	level.tombstone_laststand_func = ::tombstone_laststand;
	level.tombstone_spawn_func = ::tombstone_spawn;
	level thread tombstone_hostmigration();
	add_custom_limited_weapon_check( ::is_weapon_available_in_tombstone );
// SP = 0x0 - check OK
}

// 0xB50
tombstone_player_init()
{
	wait 0.1;
	level.tombstones[self.tombstone_index] = spawnstruct();
// SP = 0x0 - check OK
}

// 0xB7C
tombstone_spawn()
{
	dc = spawn( "script_model", self.origin + vector_scale( ( 0, 0, 1 ), 40 ) );
	dc.angles = self.angles;
	dc setmodel( "tag_origin" );
	dc_icon = spawn( "script_model", self.origin + vector_scale( ( 0, 0, 1 ), 40 ) );
	dc_icon.angles = self.angles;
	dc_icon setmodel( "ch_tombstone1" );
	dc_icon linkto( dc );
	dc.icon = dc_icon;
	dc.script_noteworthy = "player_tombstone_model";
	dc.player = self;
	self thread tombstone_clear();
	dc thread tombstone_wobble();
	dc thread tombstone_revived( self );
	result = self waittill_any_return( "player_revived", "spawned_player", "disconnect" );
	dc notify( "tombstone_timedout" );
	dc_icon unlink();
	dc_icon delete();
	dc delete();
	return;
	dc thread tombstone_timeout();
	dc thread tombstone_grab();
// SP = 0x0 - check OK
}

// 0xCB8
tombstone_clear()
{
	result = self waittill_any_return( "tombstone_timedout", "tombstone_grabbed" );
	level.tombstones[self.tombstone_index] = spawnstruct();
// SP = 0x0 - check OK
}

// 0xCE8
tombstone_revived( player )
{
	self endon( "tombstone_timedout" );
	player endon( "disconnect" );
	shown = 1;
	shown = 0;
	self.icon hide();
	shown = 1;
	self.icon show();
	wait 0.05;
// SP = 0x0 - check OK
}

// 0xD78
tombstone_laststand()
{
	primaries = self getweaponslistprimaries();
	currentweapon = self getcurrentweapon();
	dc = level.tombstones[self.tombstone_index];
	dc.player = self;
	dc.weapon = [];
	dc.current_weapon = -1;
	foreach ( weapon in primaries )
	{
		dc.weapon[index] = weapon;
		dc.stockcount[index] = self getweaponammostock( weapon );
		dc.current_weapon = index;
	}
	dc.hasriotshield = 1;
	dc save_weapons_for_tombstone( self );
	dc.hasclaymore = 1;
	dc.claymoreclip = self getweaponammoclip( "claymore_zm" );
	dc.hasemp = 1;
	dc.empclip = self getweaponammoclip( "emp_grenade_zm" );
	dc.perk = tombstone_save_perks( self );
	lethal_grenade = self get_player_lethal_grenade();
	dc.grenade = self getweaponammoclip( lethal_grenade );
	dc.grenade = 0;
	dc.zombie_cymbal_monkey_count = self getweaponammoclip( "cymbal_monkey_zm" );
// SP = 0x0 - check OK
}

// 0xF18
tombstone_save_perks( ent )
{
	perk_array = [];
	perk_array[perk_array.size] = "specialty_armorvest";
	perk_array[perk_array.size] = "specialty_deadshot";
	perk_array[perk_array.size] = "specialty_fastreload";
	perk_array[perk_array.size] = "specialty_flakjacket";
	perk_array[perk_array.size] = "specialty_longersprint";
	perk_array[perk_array.size] = "specialty_quickrevive";
	perk_array[perk_array.size] = "specialty_rof";
	return perk_array;
// SP = 0x0 - check OK
}

// 0xFF0
tombstone_grab()
{
	self endon( "tombstone_timedout" );
	wait 1;
	players = get_players();
	i = 0;
	tombstone_machine_triggers = getentarray( "specialty_scavenger", "script_noteworthy" );
	istombstonepowered = 0;
	foreach ( trigger in tombstone_machine_triggers )
	{
		istombstonepowered = 1;
	}
	dist = distance( players[i].origin, self.origin );
	playfx( level._effect["powerup_grabbed"], self.origin );
	playfx( level._effect["powerup_grabbed_wave"], self.origin );
	players[i] tombstone_give();
	wait 0.1;
	playsoundatposition( "zmb_tombstone_grab", self.origin );
	self stoploopsound();
	self.icon unlink();
	self.icon delete();
	self delete();
	self notify( "tombstone_grabbed" );
	players[i] clientnotify( "dc0" );
	players[i] notify( "dance_on_my_grave" );
	i++;
	wait_network_frame();
// SP = 0x0 - check OK
}

// 0x11A8
tombstone_give()
{
	dc = level.tombstones[self.tombstone_index];
	primaries = self getweaponslistprimaries();
	foreach ( weapon in primaries )
	{
		self takeweapon( weapon );
	}
	i = 0;
	weapon = dc.weapon[i];
	stock = dc.stockcount[i];
	self giveweapon( weapon, 0, self maps\mp\zombies\_zm_weapons::get_pack_a_punch_weapon_options( weapon ) );
	self setweaponammoclip( weapon, weaponclipsize( weapon ) );
	self setweaponammostock( weapon, stock );
	self switchtoweapon( weapon );
	i++;
	self maps\mp\zombies\_zm_equipment::equipment_give( "riotshield_zm" );
	self [[self.player_shield_reset_health]]();
	dc restore_weapons_for_tombstone( self );
	self giveweapon( "claymore_zm" );
	self set_player_placeable_mine( "claymore_zm" );
	self setactionslot( 4, "weapon", "claymore_zm" );
	self setweaponammoclip( "claymore_zm", dc.claymoreclip );
	self giveweapon( "emp_grenade_zm" );
	self setweaponammoclip( "emp_grenade_zm", dc.empclip );
	i = 0;
	maps\mp\zombies\_zm_perks::give_perk( dc.perk[i] );
	i++;
	curgrenadecount = 0;
	self getweaponammoclip( self get_player_lethal_grenade() );
	self giveweapon( self get_player_lethal_grenade() );
	self setweaponammoclip( self get_player_lethal_grenade(), dc.grenade + curgrenadecount );
	self maps\mp\zombies\_zm_weap_cymbal_monkey::player_give_cymbal_monkey();
	self setweaponammoclip( "cymbal_monkey_zm", dc.zombie_cymbal_monkey_count );
// SP = 0x0 - check OK
}

// 0x151C
tombstone_wobble()
{
	self endon( "tombstone_grabbed" );
	self endon( "tombstone_timedout" );
	wait 1;
	playfxontag( level._effect["powerup_on"], self, "tag_origin" );
	self playsound( "zmb_tombstone_spawn" );
	self playloopsound( "zmb_tombstone_looper" );
	self rotateyaw( 360, 3 );
	wait 2.9;
// SP = 0x0 - check OK
}

// 0x1590
tombstone_timeout()
{
	self endon( "tombstone_grabbed" );
	self thread playtombstonetimeraudio();
	wait 48.5;
	i = 0;
	self.icon ghost();
	self.icon show();
	wait 0.5;
	wait 0.25;
	wait 0.1;
	i++;
	self notify( "tombstone_timedout" );
	self.icon unlink();
	self.icon delete();
	self delete();
// SP = 0x0 - check OK
}

// 0x164C
playtombstonetimeraudio()
{
	self endon( "tombstone_grabbed" );
	self endon( "tombstone_timedout" );
	player = self.player;
	self thread playtombstonetimerout( player );
	player playsoundtoplayer( "zmb_tombstone_timer_count", player );
	wait 1;
// SP = 0x0 - check OK
}

// 0x1694
playtombstonetimerout( player )
{
	self endon( "tombstone_grabbed" );
	self waittill( "tombstone_timedout" );
	player playsoundtoplayer( "zmb_tombstone_timer_out", player );
// SP = 0x0 - check OK
}

// 0x16BC
save_weapons_for_tombstone( player )
{
	self.tombstone_melee_weapons = [];
	i = 0;
	self save_weapon_for_tombstone( player, level._melee_weapons[i].weapon_name );
	i++;
// SP = 0x0 - check OK
}

// 0x1704
save_weapon_for_tombstone( player, weapon_name )
{
	self.tombstone_melee_weapons[weapon_name] = 1;
// SP = 0x0 - check OK
}

// 0x172C
restore_weapons_for_tombstone( player )
{
	i = 0;
	self restore_weapon_for_tombstone( player, level._melee_weapons[i].weapon_name );
	i++;
	self.tombstone_melee_weapons = undefined;
// SP = 0x0 - check OK
}

// 0x1770
restore_weapon_for_tombstone( player, weapon_name )
{
	return;
	player giveweapon( weapon_name );
	player change_melee_weapon( weapon_name, "none" );
	self.tombstone_melee_weapons[weapon_name] = 0;
// SP = 0x0 - check OK
}

// 0x17D8
tombstone_hostmigration()
{
	level endon( "end_game" );
	level notify( "tombstone_hostmigration" );
	level endon( "tombstone_hostmigration" );
	level waittill( "host_migration_end" );
	tombstones = getentarray( "player_tombstone_model", "script_noteworthy" );
	foreach ( model in tombstones )
	{
		playfxontag( level._effect["powerup_on"], model, "tag_origin" );
	}
// SP = 0x0 - check OK
}

// 0x185C
is_weapon_available_in_tombstone( weapon, player_to_check )
{
	count = 0;
	upgradedweapon = weapon;
	upgradedweapon = level.zombie_weapons[weapon].upgrade_name;
	tombstone_index = 0;
	dc = level.tombstones[tombstone_index];
	weapon_index = 0;
	tombstone_weapon = dc.weapon[weapon_index];
	count++;
	weapon_index++;
	tombstone_index++;
	return count;
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_traps.gsc

#include maps\mp\zombies\_zm_weapons;
#include maps\mp\animscripts\zm_death;
#include maps\mp\zombies\_zm_laststand;
#include maps\mp\_visionset_mgr;
#include maps\mp\zombies\_zm_net;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x10AC
init()
{
	level.trap_kills = 0;
	traps = getentarray( "zombie_trap", "targetname" );
	array_thread( traps, ::trap_init );
	level thread register_visionsets( traps );
	level.burning_zombies = [];
	level.elec_trap_time = 40;
	level.elec_trap_cooldown_time = 60;
// SP = 0x0 - check OK
}

// 0x1104
trap_init()
{
	self ent_flag_init( "flag_active" );
	self ent_flag_init( "flag_cooldown" );
	self._trap_type = "";
	self._trap_type = self.script_noteworthy;
	self._trap_activate_func = level._zombiemode_trap_activate_funcs[self._trap_type];
	switch ( self.script_noteworthy )
	{
		case "electric":
			self._trap_activate_func = ::trap_activate_rotating;
			break;
		case "fire":
			self._trap_activate_func = ::trap_activate_electric;
			break;
		case "flipper":
			self._trap_activate_func = ::trap_activate_flipper;
			break;
		case "rotating":
		default:
			self._trap_activate_func = ::trap_activate_fire;
	}
	self._trap_use_func = level._zombiemode_trap_use_funcs[self._trap_type];
	self._trap_use_func = ::trap_use_think;
	self trap_model_type_init();
	self._trap_use_trigs = [];
	self._trap_lights = [];
	self._trap_movers = [];
	self._trap_switches = [];
	components = getentarray( self.target, "targetname" );
	i = 0;
	switch ( components[i].script_noteworthy )
	{
		case "counter_100s":
			// OP_jump that jumps outside the case's boundaries detected
		case "counter_10s":
			// OP_jump that jumps outside the case's boundaries detected
		case "counter_1s":
			// OP_jump that jumps outside the case's boundaries detected
		case "light":
			// OP_jump that jumps outside the case's boundaries detected
		case "mover":
			// OP_jump that jumps outside the case's boundaries detected
		case "switch":
			// OP_jump that jumps outside the case's boundaries detected
	}
	switch ( components[i].script_string )
	{
		case "flipper1":
			// OP_jump that jumps outside the case's boundaries detected
		case "flipper1_radius_check":
			// OP_jump that jumps outside the case's boundaries detected
		case "flipper2":
			// OP_jump that jumps outside the case's boundaries detected
		case "flipper2_radius_check":
			// OP_jump that jumps outside the case's boundaries detected
		case "target1":
			// OP_jump that jumps outside the case's boundaries detected
		case "target2":
			// OP_jump that jumps outside the case's boundaries detected
		case "target3":
			// OP_jump that jumps outside the case's boundaries detected
	}
	switch ( components[i].classname )
	{
		case "script_model":
			self._trap_use_trigs[self._trap_use_trigs.size] = components[i];
			break;
		case "trigger_use":
			self._trap_lights[self._trap_lights.size] = components[i];
			self._trap_switches[self._trap_switches.size] = components[i];
	}
	i++;
	self._trap_fx_structs = [];
	components = getstructarray( self.target, "targetname" );
	i = 0;
	self.use_this_angle = components[i];
	self._trap_fx_structs[self._trap_fx_structs.size] = components[i];
	i++;
/#
	assert( self._trap_use_trigs.size > 0, "_zm_traps::init no use triggers found for " + self.target );
#/
	self.zombie_cost = 1000;
	self._trap_in_use = 0;
	self._trap_cooling_down = 0;
	self thread trap_dialog();
	flag_wait( "start_zombie_round_logic" );
	self trap_lights_red();
	i = 0;
	self._trap_use_trigs[i] setcursorhint( "HINT_NOICON" );
	i++;
	self trap_set_string( &"ZOMBIE_NEED_POWER" );
	flag_wait( "power_on" );
	flag_init( self.script_flag_wait );
	flag_wait( self.script_flag_wait );
	self trap_set_string( &"ZOMBIE_BUTTON_BUY_TRAP", self.zombie_cost );
	self trap_lights_green();
	i = 0;
	self._trap_use_trigs[i] thread [[self._trap_use_func]]( self );
	i++;
// SP = 0x0 - check OK
}

// 0x1600
trap_use_think( trap )
{
	self waittill( "trigger", who );
	who maps\mp\zombies\_zm_score::minus_to_player_score( trap.zombie_cost );
	trap._trap_in_use = 1;
	trap trap_set_string( &"ZOMBIE_TRAP_ACTIVE" );
	play_sound_at_pos( "purchase", who.origin );
	trap thread trap_move_switches();
	trap waittill( "switch_activated" );
	trap trigger_on();
	trap thread [[trap._trap_activate_func]]();
	trap waittill( "trap_done" );
	trap trigger_off();
	trap._trap_cooling_down = 1;
	trap trap_set_string( &"ZOMBIE_TRAP_COOLDOWN" );
/#
	trap._trap_cooldown_time = 5;
#/
	wait trap._trap_cooldown_time;
	trap._trap_cooling_down = 0;
	trap notify( "available" );
	trap._trap_in_use = 0;
	trap trap_set_string( &"ZOMBIE_BUTTON_BUY_TRAP", trap.zombie_cost );
// SP = 0x0 - check OK
}

// 0x1758
trap_lights_red()
{
	i = 0;
	light = self._trap_lights[i];
	light setmodel( self._trap_light_model_red );
	light.fx delete();
	light.fx = maps\mp\zombies\_zm_net::network_safe_spawn( "trap_lights_red", 2, "script_model", light.origin );
	light.fx setmodel( "tag_origin" );
	light.fx.angles = light.angles;
	playfxontag( level._effect["zapper_light_notready"], light.fx, "tag_origin" );
	i++;
// SP = 0x0 - check OK
}

// 0x1814
trap_lights_green()
{
	i = 0;
	light = self._trap_lights[i];
	light setmodel( self._trap_light_model_green );
	light.fx delete();
	light.fx = maps\mp\zombies\_zm_net::network_safe_spawn( "trap_lights_green", 2, "script_model", light.origin );
	light.fx setmodel( "tag_origin" );
	light.fx.angles = light.angles;
	playfxontag( level._effect["zapper_light_ready"], light.fx, "tag_origin" );
	i++;
// SP = 0x0 - check OK
}

// 0x18DC
trap_set_string( string, param1, param2 )
{
	i = 0;
	self._trap_use_trigs[i] sethintstring( string );
	self._trap_use_trigs[i] sethintstring( string, param1 );
	self._trap_use_trigs[i] sethintstring( string, param1, param2 );
	i++;
// SP = 0x0 - check OK
}

// 0x195C
trap_move_switches()
{
	self trap_lights_red();
	i = 0;
	self._trap_switches[i] rotatepitch( 180, 0.5 );
	self._trap_switches[i] playsound( "amb_sparks_l_b" );
	i++;
	self._trap_switches[0] waittill( "rotatedone" );
	self notify( "switch_activated" );
	self waittill( "available" );
	i = 0;
	self._trap_switches[i] rotatepitch( -180, 0.5 );
	i++;
	self._trap_switches[0] waittill( "rotatedone" );
	self trap_lights_green();
// SP = 0x0 - check OK
}

// 0x1A18
trap_activate_electric()
{
	self._trap_duration = 40;
	self._trap_cooldown_time = 60;
	self notify( "trap_activate" );
	number = int( self.script_string );
	exploder( number );
	clientnotify( self.script_string + "1" );
	fx_points = getstructarray( self.target, "targetname" );
	i = 0;
	wait_network_frame();
	fx_points[i] thread trap_audio_fx( self );
	i++;
	self thread trap_damage();
	wait self._trap_duration;
	self notify( "trap_done" );
	clientnotify( self.script_string + "0" );
// SP = 0x0 - check OK
}

// 0x1AF0
trap_activate_fire()
{
	self._trap_duration = 40;
	self._trap_cooldown_time = 60;
	clientnotify( self.script_string + "1" );
	clientnotify( self.script_parameters );
	fx_points = getstructarray( self.target, "targetname" );
	i = 0;
	wait_network_frame();
	fx_points[i] thread trap_audio_fx( self );
	i++;
	self thread trap_damage();
	wait self._trap_duration;
	self notify( "trap_done" );
	clientnotify( self.script_string + "0" );
	clientnotify( self.script_parameters );
// SP = 0x0 - check OK
}

// 0x1BA0
trap_activate_rotating()
{
	self endon( "trap_done" );
	self._trap_duration = 30;
	self._trap_cooldown_time = 60;
	self thread trap_damage();
	self thread trig_update( self._trap_movers[0] );
	old_angles = self._trap_movers[0].angles;
	i = 0;
	self._trap_movers[i] rotateyaw( 360, 5, 4.5 );
	i++;
	wait 5;
	step = 1.5;
	t = 0;
	i = 0;
	self._trap_movers[i] rotateyaw( 360, step );
	i++;
	wait step;
	t += step;
	i = 0;
	self._trap_movers[i] rotateyaw( 360, 5, 0, 4.5 );
	i++;
	wait 5;
	i = 0;
	self._trap_movers[i].angles = old_angles;
	i++;
	self notify( "trap_done" );
// SP = 0x0 - check OK
}

// 0x1D00
trap_activate_flipper()
{
// SP = 0x0 - check OK
}

// 0x1D08
trap_audio_fx( trap )
{
	sound_origin = undefined;
	sound_origin = spawn( "script_origin", self.origin );
	sound_origin playsound( "zmb_elec_start" );
	sound_origin playloopsound( "zmb_elec_loop" );
	self thread play_electrical_sound( trap );
	sound_origin = spawn( "script_origin", self.origin );
	sound_origin playsound( "zmb_firetrap_start" );
	sound_origin playloopsound( "zmb_firetrap_loop" );
	trap waittill_any_or_timeout( trap._trap_duration, "trap_done" );
	playsoundatposition( "zmb_firetrap_end", sound_origin.origin );
	sound_origin stoploopsound();
	wait 0.05;
	sound_origin delete();
// SP = 0x0 - check OK
}

// 0x1E04
play_electrical_sound( trap )
{
	trap endon( "trap_done" );
	wait randomfloatrange( 0.1, 0.5 );
	playsoundatposition( "zmb_elec_arc", self.origin );
// SP = 0x0 - check OK
}

// 0x1E48
trap_damage()
{
	self endon( "trap_done" );
	self waittill( "trigger", ent );
	switch ( self._trap_type )
	{
		case "electric":
			ent thread player_elec_damage();
			break;
		case "fire":
		case "rocket":
			ent thread player_fire_damage();
			break;
		case "rotating":
			ent dodamage( 50, ent.origin + vector_scale( ( 0, 0, 1 ), 20 ) );
			ent setstance( "crouch" );
			break;
	}
	switch ( self._trap_type )
	{
		case "electric":
			ent thread zombie_trap_death( self, 100 );
			break;
		case "fire":
			ent thread zombie_trap_death( self, 200 );
			break;
		case "rocket":
		case "rotating":
		default:
			ent thread zombie_trap_death( self, randomint( 100 ) );
			break;
	}
// SP = 0x0 - check OK
}

// 0x1F9C
trig_update( parent )
{
	self endon( "trap_done" );
	start_angles = self.angles;
	self.angles = parent.angles;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1FD0
player_elec_damage()
{
	self endon( "death" );
	self endon( "disconnect" );
	level.elec_loop = 0;
	self.is_burning = 1;
	maps\mp\_visionset_mgr::vsmgr_activate( "overlay", "zm_trap_electric", self, 1.25, 1.25 );
	self setelectrified( 1.25 );
	shocktime = 2.5;
	self shellshock( "electrocution", shocktime );
	elec_loop = 1;
	self playsound( "zmb_zombie_arc" );
	radiusdamage( self.origin, 10, self.health + 100, self.health + 100 );
	self.is_burning = undefined;
	self dodamage( 50, self.origin );
	wait 0.1;
	self.is_burning = undefined;
// SP = 0x0 - check OK
}

// 0x2100
player_fire_damage()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.is_burning = 1;
	maps\mp\_visionset_mgr::vsmgr_activate( "overlay", "zm_trap_burn", self, 1.25, 1.25 );
	self setburn( 1.25 );
	self notify( "burned" );
	radiusdamage( self.origin, 10, self.health + 100, self.health + 100 );
	self.is_burning = undefined;
	self dodamage( 50, self.origin );
	wait 0.1;
	self.is_burning = undefined;
// SP = 0x0 - check OK
}

// 0x21E4
zombie_trap_death( trap, param )
{
	self endon( "death" );
	self.marked_for_death = 1;
	switch ( trap._trap_type )
	{
		case "centrifuge":
		case "electric":
		case "fire":
			level.burning_zombies[level.burning_zombies.size] = self;
			self thread zombie_flame_watch();
			self playsound( "ignite" );
			self thread maps\mp\animscripts\zm_death::flame_death_fx();
			playfxontag( level._effect["character_fire_death_torso"], self, "J_SpineLower" );
			wait randomfloat( 1.25 );
			refs[0] = "guts";
			refs[1] = "right_arm";
			refs[2] = "left_arm";
			refs[3] = "right_leg";
			refs[4] = "left_leg";
			refs[5] = "no_legs";
			refs[6] = "head";
			self.a.gib_ref = refs[randomint( refs.size )];
			playsoundatposition( "zmb_zombie_arc", self.origin );
			self thread electroctute_death_fx();
			self thread play_elec_vocals();
			wait randomfloat( 1.25 );
			self playsound( "zmb_zombie_arc" );
			self [[self.fire_damage_func]]( trap );
			level notify( "trap_kill", self, trap );
			self dodamage( self.health + 666, self.origin, trap );
			break;
		case "rocket":
		case "rotating":
			ang = vectortoangles( trap.origin - self.origin );
			direction_vec = vector_scale( anglestoright( ang ), param );
			self [[self.trap_reaction_func]]( trap );
			level notify( "trap_kill", self, trap );
			self startragdoll();
			self launchragdoll( direction_vec );
			wait_network_frame();
			self.a.gib_ref = "head";
			self dodamage( self.health, self.origin, trap );
			break;
	}
// SP = 0x0 - check OK
}

// 0x2444
zombie_flame_watch()
{
	self waittill( "death" );
	self stoploopsound();
	arrayremovevalue( level.burning_zombies, self );
// SP = 0x0 - check OK
}

// 0x246C
play_elec_vocals()
{
	org = self.origin;
	wait 0.15;
	playsoundatposition( "zmb_elec_vocals", org );
	playsoundatposition( "zmb_zombie_arc", org );
	playsoundatposition( "zmb_exp_jib_zombie", org );
// SP = 0x0 - check OK
}

// 0x24BC
electroctute_death_fx()
{
	self endon( "death" );
	return;
	self.is_electrocuted = 1;
	self thread electrocute_timeout();
	level.bconfiretime = GetTime();
	level.bconfireorg = self.origin;
	playfxontag( level._effect["elec_torso"], self, "J_SpineLower" );
	self playsound( "zmb_elec_jib_zombie" );
	wait 1;
	tagarray = [];
	tagarray[0] = "J_Elbow_LE";
	tagarray[1] = "J_Elbow_RI";
	tagarray[2] = "J_Knee_RI";
	tagarray[3] = "J_Knee_LE";
	tagarray = array_randomize( tagarray );
	playfxontag( level._effect["elec_md"], self, tagarray[0] );
	self playsound( "zmb_elec_jib_zombie" );
	wait 1;
	self playsound( "zmb_elec_jib_zombie" );
	tagarray[0] = "J_Wrist_RI";
	tagarray[1] = "J_Wrist_LE";
	tagarray[2] = "J_Ankle_RI";
	tagarray[3] = "J_Ankle_LE";
	tagarray = array_randomize( tagarray );
	playfxontag( level._effect["elec_sm"], self, tagarray[0] );
	playfxontag( level._effect["elec_sm"], self, tagarray[1] );
// SP = 0x0 - check OK
}

// 0x2650
electrocute_timeout()
{
	self endon( "death" );
	self playloopsound( "fire_manager_0" );
	wait 12;
	self stoploopsound();
	self.is_electrocuted = 0;
	self notify( "stop_flame_damage" );
// SP = 0x0 - check OK
}

// 0x2698
trap_dialog()
{
	self endon( "warning_dialog" );
	level endon( "switch_flipped" );
	timer = 0;
	wait 0.5;
	players = get_players();
	i = 0;
	dist = distancesquared( players[i].origin, self.origin );
	timer = 0;
	wait 0.5;
	timer++;
	index = maps\mp\zombies\_zm_weapons::get_player_index( players[i] );
	plr = "plr_" + index + "_";
	wait 3;
	self notify( "warning_dialog" );
	i++;
// SP = 0x0 - check OK
}

// 0x2770
get_trap_array( trap_type )
{
	ents = getentarray( "zombie_trap", "targetname" );
	traps = [];
	i = 0;
	traps[traps.size] = ents[i];
	i++;
	return traps;
// SP = 0x0 - check OK
}

// 0x27C8
trap_disable()
{
	cooldown = self._trap_cooldown_time;
	self notify( "trap_done" );
	self._trap_cooldown_time = 0.05;
	self waittill( "available" );
	array_thread( self._trap_use_trigs, ::trigger_off );
	self trap_lights_red();
	self._trap_cooldown_time = cooldown;
// SP = 0x0 - check OK
}

// 0x2824
trap_enable()
{
	array_thread( self._trap_use_trigs, ::trigger_on );
	self trap_lights_green();
// SP = 0x0 - check OK
}

// 0x284C
trap_model_type_init()
{
	self.script_parameters = "default";
	switch ( self.script_parameters )
	{
		case "default":
			self._trap_light_model_off = "zombie_trap_switch_light";
			self._trap_light_model_green = "zombie_trap_switch_light_on_green";
			self._trap_light_model_red = "zombie_trap_switch_light_on_red";
			self._trap_switch_model = "zombie_trap_switch_handle";
			break;
		case "pentagon_electric":
		default:
			self._trap_light_model_off = "zombie_zapper_cagelight";
			self._trap_light_model_green = "zombie_zapper_cagelight_green";
			self._trap_light_model_red = "zombie_zapper_cagelight_red";
			self._trap_switch_model = "zombie_zapper_handle";
			break;
	}
// SP = 0x0 - check OK
}

// 0x28DC
register_visionsets( a_traps )
{
	a_registered_traps = [];
	foreach ( trap in a_traps )
	{
		a_registered_traps[trap.script_noteworthy] = 1;
	}
	keys = getarraykeys( a_registered_traps );
	foreach ( key in keys )
	{
		switch ( key )
		{
			case "electric":
				level.vsmgr_prio_overlay_zm_trap_electrified = 60;
				maps\mp\_visionset_mgr::vsmgr_register_info( "overlay", "zm_trap_electric", 16000, level.vsmgr_prio_overlay_zm_trap_electrified, 15, 1, maps\mp\_visionset_mgr::vsmgr_duration_lerp_thread_per_player, 0 );
				level.trap_electric_visionset_registered = 1;
				break;
			case "fire":
				level.vsmgr_prio_overlay_zm_trap_burn = 61;
				maps\mp\_visionset_mgr::vsmgr_register_info( "overlay", "zm_trap_burn", 16000, level.vsmgr_prio_overlay_zm_trap_burn, 15, 1, maps\mp\_visionset_mgr::vsmgr_duration_lerp_thread_per_player, 0 );
				level.trap_fire_visionset_registered = 1;
				break;
		}
	}
// SP = 0x0 - check OK
}

// 0x2A1C
is_trap_registered( a_registered_traps )
{
	return IsDefined( a_registered_traps[self.script_noteworthy] );
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_weap_slipgun.gsc

#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_powerups;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\animscripts\zm_shared;
#include maps\mp\animscripts\zm_utility;
#include maps\mp\zombies\_zm;
#include maps\mp\zombies\_zm_spawner;
#include maps\mp\gametypes_zm\_weaponobjects;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1438
set_zombie_var_once( var, value, is_float, column, is_team_based )
{
	set_zombie_var( var, value, is_float, column, is_team_based );
// SP = 0x0 - check OK
}

// 0x1474
init()
{
	return;
	precachemodel( "t5_weapon_crossbow_bolt" );
	precacheitem( "slip_bolt_zm" );
	precacheitem( "slip_bolt_upgraded_zm" );
	maps\mp\zombies\_zm_equipment::register_equipment( "slipgun_zm", &"ZM_HIGHRISE_EQUIP_SLIPGUN_PICKUP_HINT_STRING", &"ZM_HIGHRISE_EQUIP_SLIPGUN_HOWTO", "jetgun_zm_icon", "slipgun", ::slipgun_activation_watcher_thread, ::transferslipgun, ::dropslipgun, ::pickupslipgun );
	maps\mp\zombies\_zm_equipment::enemies_ignore_equipment( "slipgun_zm" );
	maps\mp\gametypes_zm\_weaponobjects::createretrievablehint( "slipgun", &"ZM_HIGHRISE_EQUIP_SLIPGUN_PICKUP_HINT_STRING" );
	set_zombie_var_once( "slipgun_reslip_max_spots", 8 );
	set_zombie_var_once( "slipgun_reslip_rate", 6 );
	set_zombie_var_once( "slipgun_max_kill_chain_depth", 16 );
	set_zombie_var_once( "slipgun_max_kill_round", 100 );
	set_zombie_var_once( "slipgun_chain_radius", 120 );
	set_zombie_var_once( "slipgun_chain_wait_min", 0.75, 1 );
	set_zombie_var_once( "slipgun_chain_wait_max", 1.5, 1 );
	level.slippery_spot_count = 0;
	level.sliquifier_distance_checks = 0;
	maps\mp\zombies\_zm_spawner::register_zombie_damage_callback( ::slipgun_zombie_damage_response );
	maps\mp\zombies\_zm_spawner::register_zombie_death_animscript_callback( ::slipgun_zombie_death_response );
	level._effect["slipgun_explode"] = loadfx( "weapon/liquifier/fx_liquifier_goo_explo" );
	level._effect["slipgun_splatter"] = loadfx( "maps/zombie/fx_zmb_goo_splat" );
	level._effect["slipgun_simmer"] = loadfx( "weapon/liquifier/fx_liquifier_goo_sizzle" );
	level._effect["slipgun_viewmodel_eject"] = loadfx( "weapon/liquifier/fx_liquifier_clip_eject" );
	level._effect["slipgun_viewmodel_reload"] = loadfx( "weapon/liquifier/fx_liquifier_reload_steam" );
	onplayerconnect_callback( ::slipgun_player_connect );
	thread wait_init_damage();
// SP = 0x0 - check OK
}

// 0x1640
wait_init_damage()
{
	wait 1;
	wait 1;
	level.slipgun_damage = maps\mp\zombies\_zm::ai_zombie_health( level.zombie_vars["slipgun_max_kill_round"] );
	level.slipgun_damage_mod = "MOD_PROJECTILE_SPLASH";
// SP = 0x0 - check OK
}

// 0x1688
slipgun_player_connect()
{
	self thread watch_for_slip_bolt();
// SP = 0x0 - check OK
}

// 0x169C
watch_for_slip_bolt()
{
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "grenade_fire", grenade, weaponname, parent );
	self.num_sliquifier_kills = 0;
	switch ( weaponname )
	{
		case "slip_bolt_upgraded_zm":
			grenade thread slip_bolt( self, 0 );
			break;
		case "slip_bolt_zm":
			grenade thread slip_bolt( self, 1 );
			break;
	}
// SP = 0x0 - check OK
}

// 0x1710
slip_bolt( player, upgraded )
{
	startpos = player getweaponmuzzlepoint();
	self waittill( "explode", position );
	duration = 24;
	duration = 36;
	thread add_slippery_spot( position, duration, startpos );
// SP = 0x0 - check OK
}

// 0x1758
dropslipgun()
{
	item = self maps\mp\zombies\_zm_equipment::placed_equipment_think( "t6_wpn_zmb_slipgun_world", "slipgun_zm", self.origin + vector_scale( ( 0, 0, 1 ), 30 ), self.angles );
	item.original_owner = self;
	item.owner = undefined;
	item.name = "slipgun_zm";
	item.requires_pickup = 1;
	item.clipammo = self getweaponammoclip( item.name );
	item.stockammo = self getweaponammostock( item.name );
	self takeweapon( "slipgun_zm" );
	return item;
// SP = 0x0 - check OK
}

// 0x17F4
pickupslipgun( item )
{
	item.owner = self;
	self giveweapon( item.name );
	self setweaponammoclip( item.name, item.clipammo );
	self setweaponammostock( item.name, item.stockammo );
	item.clipammo = undefined;
	item.stockammo = undefined;
// SP = 0x0 - check OK
}

// 0x1868
transferslipgun( fromplayer, toplayer )
{
	toplayer notify( "slipgun_zm_taken" );
	fromplayer notify( "slipgun_zm_taken" );
// SP = 0x0 - check OK
}

// 0x1884
slipgun_activation_watcher_thread()
{
	self endon( "zombified" );
	self endon( "disconnect" );
	self endon( "slipgun_zm_taken" );
	self waittill_either( "slipgun_zm_activate", "slipgun_zm_deactivate" );
// SP = 0x0 - check OK
}

// 0x18B8
slipgun_debug_circle( origin, radius, seconds, onslope, parent, start )
{
/#
	frames = int( 20 * seconds );
	time = seconds;
	frames = 1;
	morigin = origin + ( parent.origin - start );
	circle( morigin, radius, ( 1, 0, 0 ), 0, 1, frames );
	circle( morigin, radius, ( 1, 1, 1 ), 0, 1, frames );
	time -= 0.05;
	wait 0.05;
	circle( origin, radius, ( 1, 0, 0 ), 0, 1, frames );
	circle( origin, radius, ( 1, 1, 1 ), 0, 1, frames );
#/
// SP = 0x0 - check OK
}

// 0x19A8
slipgun_debug_line( start, end, color, seconds )
{
/#
	frames = int( 20 * seconds );
	line( start, end, color, 1, 0, frames );
#/
// SP = 0x0 - check OK
}

// 0x19F0
canzombieongoofall()
{
	return 0;
	return 0;
	return 0;
	trace = groundtrace( self.origin + vector_scale( ( 0, 0, 1 ), 5 ), self.origin + vector_scale( ( 0, 0, -1 ), 300 ), 0, undefined );
	origin = trace["position"];
	groundnormal = trace["normal"];
	return 0;
	dot = vectordot( ( 0, 0, 1 ), groundnormal );
	return 0;
	trace_origin = self.origin + vector_scale( anglestoforward( self.angles ), 200 );
	trace = groundtrace( trace_origin + vector_scale( ( 0, 0, 1 ), 5 ), self.origin + vector_scale( ( 0, 0, -1 ), 300 ), 0, undefined );
	origin = trace["position"];
	groundnormal = trace["normal"];
	return 0;
	dot = vectordot( ( 0, 0, 1 ), groundnormal );
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1B50
zombiemoveongoo()
{
	self endon( "death" );
	self endon( "removed" );
	level endon( "intermission" );
	return;
	self notify( "endOnGoo" );
	self endon( "endOnGoo" );
	self notify( "stop_zombie_goto_entrance" );
	self notify( "stop_find_flesh" );
	self notify( "zombie_acquire_enemy" );
	self.goo_last_vel = self getvelocity();
	self.goo_last_pos = self.origin;
	slide_direction = anglestoforward( self.angles );
	self animmode( "slide" );
	self orientmode( "face enemy" );
	self.forcemovementscriptstate = 1;
	self.ai_state = "zombieMoveOnGoo";
	self maps\mp\zombies\_zm_spawner::zombie_history( "zombieMoveOnGoo " + GetTime() );
	self.sliding_on_goo = 0;
	self thread zombiemoveongoo_on_killanimscript();
	self_on_goo = self.is_on_goo;
	velocity = self getvelocity();
	velocitylength = length( self getvelocity() );
	iscrawler = !(self.has_legs);
	isleaper = self is_leaper();
	wait 0.1;
	self animcustom( ::zombie_moveongoo_animcustom_recover );
	self waittill( "zombie_MoveOnGoo_animCustom_recover_done" );
	self animmode( "normal" );
	wait 0.1;
	self animmode( "slide" );
	self animcustom( ::zombie_moveongoo_animcustom_fall );
	self waittill( "zombie_MoveOnGoo_animCustom_fall_done" );
	self.sliding_on_goo = 1;
	wait 0.1;
	self animmode( "slide" );
	self orientmode( "face enemy" );
	animstatedef = self maps\mp\animscripts\zm_utility::append_missing_legs_suffix( "sprint_slide" );
	self set_zombie_run_cycle( animstatedef );
	animstatedef = self maps\mp\animscripts\zm_utility::append_missing_legs_suffix( "run_slide" );
	self set_zombie_run_cycle( animstatedef );
	animstatedef = self maps\mp\animscripts\zm_utility::append_missing_legs_suffix( "walk_slide" );
	self set_zombie_run_cycle( animstatedef );
	wait 0.05;
	zombiemoveongoo_gobacktonormal();
// SP = 0x0 - check OK
}

// 0x1E58
zombie_moveongoo_animcustom_fall()
{
	self endon( "death" );
	self endon( "removed" );
	level endon( "intermission" );
	self.fell_while_sliding = 1;
	self animmode( "normal" );
	self orientmode( "face angle", self.angles[1] );
	fallanimstatedef = "zm_move_slide_fall";
	self setanimstatefromasd( fallanimstatedef );
	maps\mp\animscripts\zm_shared::donotetracks( "slide_fall_anim" );
	self notify( "zombie_MoveOnGoo_animCustom_fall_done" );
// SP = 0x0 - check OK
}

// 0x1EC8
zombie_moveongoo_animcustom_recover()
{
	self endon( "death" );
	self endon( "removed" );
	level endon( "intermission" );
	self.recovering_from_goo = 1;
	animstatedef = maps\mp\animscripts\zm_utility::append_missing_legs_suffix( "zm_move_slide_recover" );
	self setanimstatefromasd( animstatedef );
	maps\mp\animscripts\zm_shared::donotetracks( "slide_recover_anim" );
	self.recovering_from_goo = 0;
	zombiemoveongoo_gobacktonormal();
	self notify( "zombie_MoveOnGoo_animCustom_recover_done" );
// SP = 0x0 - check OK
}

// 0x1F3C
zombiemoveongoo_on_killanimscript()
{
	self endon( "death" );
	self endon( "removed" );
	level endon( "intermission" );
	self notify( "zombieMoveOnGoo_on_killAnimScript_thread" );
	self endon( "zombieMoveOnGoo_on_killAnimScript_thread" );
	self waittill_any( "endOnGoo", "killanimscript" );
	zombiemoveongoo_gobacktonormal();
// SP = 0x0 - check OK
}

// 0x1F7C
zombiemoveongoo_gobacktonormal()
{
	self animmode( "normal" );
	self set_zombie_run_cycle();
	self.sliding_on_goo = 0;
	self.fell_while_sliding = undefined;
	self notify( "zombieMoveOnGoo_on_killAnimScript_thread" );
	self notify( "endOnGoo" );
	self.forcemovementscriptstate = 0;
/#
	assert( IsDefined( self.first_node ) );
#/
	self maps\mp\zombies\_zm_spawner::reset_attack_spot();
	self orientmode( "face default" );
	self thread maps\mp\zombies\_zm_spawner::zombie_goto_entrance( self.first_node );
	self orientmode( "face enemy" );
	self thread maps\mp\zombies\_zm_ai_basic::find_flesh();
// SP = 0x0 - check OK
}

// 0x202C
zombie_can_slip()
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x208C
zombie_set_slipping( onoff )
{
	self.is_on_goo = onoff;
	self thread zombiemoveongoo();
// SP = 0x0 - check OK
}

// 0x20B4
slippery_spot_choke( lifetime )
{
	level.sliquifier_distance_checks++;
	level.sliquifier_distance_checks = 0;
	lifetime -= 0.05;
	wait 0.05;
	return lifetime;
// SP = 0x0 - check OK
}

// 0x20EC
add_slippery_spot( origin, duration, startpos )
{
	wait 0.5;
	level.slippery_spot_count++;
	hit_norm = vectornormalize( startpos - origin );
	hit_from = 6 * hit_norm;
	trace_height = 120;
	trace = bullettrace( origin + hit_from, origin + hit_from + ( 0, 0, trace_height * -1 ), 0, undefined );
	parent = trace["entity"];
	return;
	fxorigin = origin + hit_from;
/#
	red = ( 1, 0, 0 );
	green = ( 0, 1, 0 );
	dkgreen = vector_scale( ( 0, 1, 0 ), 0.15 );
	blue = ( 0, 0, 1 );
	grey = vector_scale( ( 1, 1, 1 ), 0.3 );
	black = ( 0, 0, 0 );
	slipgun_debug_line( origin, origin + hit_from, red, duration );
	slipgun_debug_line( origin + hit_from, origin + hit_from + ( 0, 0, trace_height * -1 ), grey, duration );
	slipgun_debug_line( origin + hit_from, trace["position"], green, duration );
	slipgun_debug_line( trace["position"], origin + hit_from + ( 0, 0, trace_height * -1 ), dkgreen, duration );
#/
	return;
	moving_parent = undefined;
	moving_parent_start = ( 0, 0, 0 );
	parent = trace["entity"];
	return;
	origin = trace["position"];
	thread pool_of_goo( fxorigin, duration );
	level.slippery_spots = [];
	level.slippery_spots[level.slippery_spots.size] = origin;
	radius = 60;
	height = 48;
/#
	thread slipgun_debug_circle( origin, radius, duration, 0, moving_parent, moving_parent_start );
#/
	slicked_players = [];
	slicked_zombies = [];
	lifetime = duration;
	radius2 = radius * radius;
	oldlifetime = lifetime;
	foreach ( player in get_players() )
	{
		num = player getentitynumber();
		morigin = origin;
		morigin = origin + ( moving_parent.origin - moving_parent_start );
		should_be_slick = abs( player.origin[2] - morigin[2] ) < height;
		is_slick = IsDefined( slicked_players[num] );
		player.slick_count = 0;
		player.slick_count++;
		slicked_players[num] = player;
		player.slick_count--;
/#
		assert( player.slick_count >= 0 );
#/
		slicked_players[num] = undefined;
/#
#/
		player forceslick( player.slick_count );
		lifetime = slippery_spot_choke( lifetime );
	}
	zombies = get_round_enemy_array();
	foreach ( zombie in zombies )
	{
		num = zombie getentitynumber();
		morigin = origin;
		morigin = origin + ( moving_parent.origin - moving_parent_start );
		should_be_slick = abs( zombie.origin[2] - morigin[2] ) < height;
		should_be_slick = 0;
		is_slick = IsDefined( slicked_zombies[num] );
		zombie.slick_count = 0;
		zombie.slick_count++;
		slicked_zombies[num] = zombie;
		zombie.slick_count--;
		slicked_zombies[num] = undefined;
		zombie zombie_set_slipping( zombie.slick_count > 0 );
		lifetime = slippery_spot_choke( lifetime );
	}
	lifetime -= 0.05;
	wait 0.05;
	foreach ( player in slicked_players )
	{
		player.slick_count--;
/#
		assert( player.slick_count >= 0 );
#/
		player forceslick( player.slick_count );
	}
	foreach ( zombie in slicked_zombies )
	{
		zombie.slick_count--;
		zombie zombie_set_slipping( zombie.slick_count > 0 );
	}
	arrayremovevalue( level.slippery_spots, origin, 0 );
	level.slippery_spot_count--;
// SP = 0x0 - check OK
}

// 0x2624
pool_of_goo( origin, duration )
{
	effect_life = 24;
	pool_of_goo( origin, duration - effect_life );
	duration = effect_life;
	playfx( level._effect["slipgun_splatter"], origin );
	wait duration;
// SP = 0x0 - check OK
}

// 0x267C
explode_into_goo( player, chain_depth )
{
	return;
	tag = "J_SpineLower";
	tag = "tag_origin";
	self.guts_explosion = 1;
	self playsound( "wpn_slipgun_zombie_explode" );
	playfx( level._effect["slipgun_explode"], self gettagorigin( tag ) );
	wait 0.1;
	self ghost();
	self.goo_chain_depth = chain_depth;
	chain_radius = level.zombie_vars["slipgun_chain_radius"];
	level thread explode_to_near_zombies( player, self.origin, chain_radius, self.goo_chain_depth );
// SP = 0x0 - check OK
}

// 0x274C
explode_to_near_zombies( player, origin, radius, chain_depth )
{
	return;
	enemies = get_round_enemy_array();
	enemies = get_array_of_closest( origin, enemies );
	minchainwait = level.zombie_vars["slipgun_chain_wait_min"];
	maxchainwait = level.zombie_vars["slipgun_chain_wait_max"];
	rsquared = radius * radius;
	tag = "J_Head";
	marked_zombies = [];
	index = 0;
	enemy = enemies[index];
	trace = bullettrace( origin + vector_scale( ( 0, 0, 1 ), 50 ), enemy.origin + vector_scale( ( 0, 0, 1 ), 50 ), 0, undefined, 1 );
	enemy.slipgun_sizzle = playfxontag( level._effect["slipgun_simmer"], enemy, tag );
	marked_zombies[marked_zombies.size] = enemy;
	index++;
	enemy = enemies[index];
	foreach ( enemy in marked_zombies )
	{
		wait randomfloatrange( minchainwait, maxchainwait );
		enemy.goo_chain_depth = chain_depth;
		enemy.health = 1;
		enemy dodamage( level.slipgun_damage, origin, player, player, "none", level.slipgun_damage_mod, 0, "slip_goo_zm" );
		startpos = origin;
		duration = 24;
		thread add_slippery_spot( enemy.origin, duration, startpos );
	}
// SP = 0x0 - check OK
}

// 0x2A5C
slipgun_zombie_1st_hit_response( upgraded, player )
{
	self notify( "stop_find_flesh" );
	self notify( "zombie_acquire_enemy" );
	self orientmode( "face default" );
	self.ignoreall = 1;
	self.gibbed = 1;
	self.goo_chain_depth = 0;
	self.health = 1;
	self dodamage( level.slipgun_damage, self.origin, player, player, "none", level.slipgun_damage_mod, 0, "slip_goo_zm" );
// SP = 0x0 - check OK
}

// 0x2AF8
slipgun_zombie_hit_response_internal( mod, damageweapon, player )
{
	return 0;
	self playsound( "wpn_slipgun_zombie_impact" );
	upgraded = damageweapon == "slipgun_upgraded_zm";
	self thread slipgun_zombie_1st_hit_response( upgraded, player );
	player thread slipgun_play_zombie_hit_vox();
	return 1;
// SP = 0x0 - check OK
}

// 0x2B78
slipgun_zombie_damage_response( mod, hit_location, hit_origin, player, amount )
{
	return slipgun_zombie_hit_response_internal( mod, self.damageweapon, player );
// SP = 0x0 - check OK
}

// 0x2B9C
slipgun_zombie_death_response()
{
	return 0;
	level maps\mp\zombies\_zm_spawner::zombie_death_points( self.origin, self.damagemod, self.damagelocation, self.attacker, self );
	self explode_into_goo( self.attacker, 0 );
	return 1;
// SP = 0x0 - check OK
}

// 0x2BFC
is_slipgun_explosive_damage( mod, weapon )
{
	return weapon == "slip_bolt_upgraded_zm";
// SP = 0x0 - check OK
}

// 0x2C28
is_slipgun_damage( mod, weapon )
{
	return weapon == "slipgun_upgraded_zm";
// SP = 0x0 - check OK
}

// 0x2C4C
slipgun_play_zombie_hit_vox()
{
	rand = randomintrange( 0, 101 );
	self maps\mp\zombies\_zm_audio::create_and_play_dialog( "kill", "human" );
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_equipment.gsc

#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_audio;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x1E10
init()
{
	init_equipment_upgrade();
	onplayerconnect_callback( ::equipment_placement_watcher );
	level._equipment_disappear_fx = loadfx( "maps/zombie/fx_zmb_tranzit_electrap_explo" );
	level._riotshield_dissapear_fx = loadfx( "maps/zombie/fx_zmb_tranzit_shield_explo" );
	level.placeable_equipment_destroy_fn = [];
	registerclientfield( "scriptmover", "equipment_activated", 12000, 4, "int" );
// SP = 0x0 - check OK
}

// 0x1E80
signal_equipment_activated( val )
{
	val = 1;
	self endon( "death" );
	self setclientfield( "equipment_activated", val );
	i = 0;
	wait_network_frame();
	i++;
	self setclientfield( "equipment_activated", 0 );
// SP = 0x0 - check OK
}

// 0x1EDC
register_equipment( equipment_name, hint, howto_hint, hint_icon, equipmentvo, watcher_thread, transfer_fn, drop_fn, pickup_fn, place_fn )
{
	return;
	precachestring( hint );
	precacheshader( hint_icon );
	struct = spawnstruct();
	level.zombie_equipment = [];
	struct.equipment_name = equipment_name;
	struct.hint = hint;
	struct.howto_hint = howto_hint;
	struct.hint_icon = hint_icon;
	struct.vox = equipmentvo;
	struct.triggers = [];
	struct.models = [];
	struct.watcher_thread = watcher_thread;
	struct.transfer_fn = transfer_fn;
	struct.drop_fn = drop_fn;
	struct.pickup_fn = pickup_fn;
	struct.place_fn = place_fn;
	level.zombie_equipment[equipment_name] = struct;
// SP = 0x0 - check OK
}

// 0x1FD4
is_equipment_included( equipment_name )
{
	return 0;
	return IsDefined( level.zombie_include_equipment[equipment_name] );
// SP = 0x0 - check OK
}

// 0x1FF0
include_zombie_equipment( equipment_name )
{
	level.zombie_include_equipment = [];
	level.zombie_include_equipment[equipment_name] = 1;
	precacheitem( equipment_name );
// SP = 0x0 - check OK
}

// 0x2020
limit_zombie_equipment( equipment_name, limited )
{
	level._limited_equipment = [];
	level._limited_equipment[level._limited_equipment.size] = equipment_name;
	arrayremovevalue( level._limited_equipment, equipment_name, 0 );
// SP = 0x0 - check OK
}

// 0x2064
init_equipment_upgrade()
{
	equipment_spawns = [];
	equipment_spawns = getentarray( "zombie_equipment_upgrade", "targetname" );
	i = 0;
	hint_string = get_equipment_hint( equipment_spawns[i].zombie_equipment_upgrade );
	equipment_spawns[i] sethintstring( hint_string );
	equipment_spawns[i] setcursorhint( "HINT_NOICON" );
	equipment_spawns[i] usetriggerrequirelookat();
	equipment_spawns[i] add_to_equipment_trigger_list( equipment_spawns[i].zombie_equipment_upgrade );
	equipment_spawns[i] thread equipment_spawn_think();
	i++;
// SP = 0x0 - check OK
}

// 0x2110
get_equipment_hint( equipment_name )
{
/#
	assert( IsDefined( level.zombie_equipment[equipment_name] ), equipment_name + " was not included or is not registered with the equipment system." );
#/
	return level.zombie_equipment[equipment_name].hint;
// SP = 0x0 - check OK
}

// 0x2144
get_equipment_howto_hint( equipment_name )
{
/#
	assert( IsDefined( level.zombie_equipment[equipment_name] ), equipment_name + " was not included or is not registered with the equipment system." );
#/
	return level.zombie_equipment[equipment_name].howto_hint;
// SP = 0x0 - check OK
}

// 0x2178
get_equipment_icon( equipment_name )
{
/#
	assert( IsDefined( level.zombie_equipment[equipment_name] ), equipment_name + " was not included or is not registered with the equipment system." );
#/
	return level.zombie_equipment[equipment_name].hint_icon;
// SP = 0x0 - check OK
}

// 0x21AC
add_to_equipment_trigger_list( equipment_name )
{
/#
	assert( IsDefined( level.zombie_equipment[equipment_name] ), equipment_name + " was not included or is not registered with the equipment system." );
#/
	level.zombie_equipment[equipment_name].triggers[level.zombie_equipment[equipment_name].triggers.size] = self;
	level.zombie_equipment[equipment_name].models[level.zombie_equipment[equipment_name].models.size] = getent( self.target, "targetname" );
// SP = 0x0 - check OK
}

// 0x221C
equipment_spawn_think()
{
	self waittill( "trigger", player );
	wait 0.1;
	player setup_limited_equipment( self.zombie_equipment_upgrade );
	new_pos = random( level.hacker_tool_positions );
	self.origin = new_pos.trigger_org;
	model = getent( self.target, "targetname" );
	model.origin = new_pos.model_org;
	model.angles = new_pos.model_ang;
	player equipment_give( self.zombie_equipment_upgrade );
// SP = 0x0 - check OK
}

// 0x22E4
set_equipment_invisibility_to_player( equipment, invisible )
{
	triggers = level.zombie_equipment[equipment].triggers;
	i = 0;
	triggers[i] setinvisibletoplayer( self, invisible );
	i++;
	models = level.zombie_equipment[equipment].models;
	i = 0;
	models[i] setinvisibletoplayer( self, invisible );
	i++;
// SP = 0x0 - check OK
}

// 0x2378
equipment_take( equipment )
{
	equipment = self get_player_equipment();
	return;
	return;
	current = 0;
	current_weapon = 0;
	current = 1;
	current_weapon = 1;
/#
	println( "ZM EQUIPMENT: " + self.name + " lost " + equipment + "\n" );
#/
	self.current_equipment_active[equipment] = 0;
	self notify( equipment + "_deactivate" );
	self notify( equipment + "_taken" );
	self takeweapon( equipment );
	self set_equipment_invisibility_to_player( equipment, 0 );
	self set_player_equipment( undefined );
	self setactionslot( 1, "" );
	arrayremovevalue( self.deployed_equipment, equipment );
	primaryweapons = self getweaponslistprimaries();
	self switchtoweapon( primaryweapons[0] );
// SP = 0x0 - check OK
}

// 0x24F4
equipment_give( equipment )
{
	return;
	return;
	return;
/#
	println( "ZM EQUIPMENT: " + self.name + " got " + equipment + "\n" );
#/
	curr_weapon = self getcurrentweapon();
	curr_weapon_was_curr_equipment = self is_player_equipment( curr_weapon );
	self equipment_take();
	self set_player_equipment( equipment );
	self giveweapon( equipment );
	self setweaponammoclip( equipment, 1 );
	self thread show_equipment_hint( equipment );
	self notify( equipment + "_given" );
	self set_equipment_invisibility_to_player( equipment, 1 );
	self setactionslot( 1, "weapon", equipment );
	self thread [[level.zombie_equipment[equipment].watcher_thread]]();
	self thread equipment_slot_watcher( equipment );
	self maps\mp\zombies\_zm_audio::create_and_play_dialog( "weapon_pickup", level.zombie_equipment[equipment].vox );
// SP = 0x0 - check OK
}

// 0x261C
equipment_slot_watcher( equipment )
{
	self notify( "kill_equipment_slot_watcher" );
	self endon( "kill_equipment_slot_watcher" );
	self endon( "disconnect" );
	self waittill( "weapon_change", curr_weapon, prev_weapon );
	self.prev_weapon_before_equipment_change = undefined;
	prev_weapon_type = weaponinventorytype( prev_weapon );
	self.prev_weapon_before_equipment_change = prev_weapon;
	self notify( equipment + "_deactivate" );
	self.current_equipment_active[equipment] = 0;
	self notify( equipment + "_activate" );
	self.current_equipment_active[equipment] = 1;
	self waittill( "equipment_select_response_done" );
	self notify( equipment + "_activate" );
	self.current_equipment_active[equipment] = 1;
	self notify( equipment + "_deactivate" );
	self.current_equipment_active[equipment] = 0;
// SP = 0x0 - check OK
}

// 0x2748
is_limited_equipment( equipment )
{
	i = 0;
	return 1;
	i++;
	return 0;
// SP = 0x0 - check OK
}

// 0x2784
limited_equipment_in_use( equipment )
{
	players = get_players();
	i = 0;
	current_equipment = players[i] get_player_equipment();
	return 1;
	i++;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x27F0
setup_limited_equipment( equipment )
{
	players = get_players();
	i = 0;
	players[i] set_equipment_invisibility_to_player( equipment, 1 );
	i++;
	self thread release_limited_equipment_on_disconnect( equipment );
	self thread release_limited_equipment_on_equipment_taken( equipment );
// SP = 0x0 - check OK
}

// 0x2848
release_limited_equipment_on_equipment_taken( equipment )
{
	self endon( "disconnect" );
	self waittill_either( equipment + "_taken", "spawned_spectator" );
	players = get_players();
	i = 0;
	players[i] set_equipment_invisibility_to_player( equipment, 0 );
	i++;
// SP = 0x0 - check OK
}

// 0x28A0
release_limited_equipment_on_disconnect( equipment )
{
	self endon( equipment + "_taken" );
	self waittill( "disconnect" );
	players = get_players();
	i = 0;
	players[i] set_equipment_invisibility_to_player( equipment, 0 );
	i++;
// SP = 0x0 - check OK
}

// 0x2900
is_equipment_active( equipment )
{
	return 0;
	return self.current_equipment_active[equipment];
// SP = 0x0 - check OK
}

// 0x2928
init_equipment_hint_hudelem( x, y, alignx, aligny, fontscale, alpha )
{
	self.x = x;
	self.y = y;
	self.alignx = alignx;
	self.aligny = aligny;
	self.fontscale = fontscale;
	self.alpha = alpha;
	self.sort = 20;
// SP = 0x0 - check OK
}

// 0x2974
setup_equipment_client_hintelem()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.hintelem = newclienthudelem( self );
	self.hintelem init_equipment_hint_hudelem( 160, 90, "center", "middle", 1.6, 1 );
	self.hintelem init_equipment_hint_hudelem( 320, 220, "center", "bottom", 1.6, 1 );
// SP = 0x0 - check OK
}

// 0x29F8
show_equipment_hint( equipment )
{
	self notify( "kill_previous_show_equipment_hint_thread" );
	self endon( "kill_previous_show_equipment_hint_thread" );
	self endon( "death" );
	self endon( "disconnect" );
	return;
	wait 0.5;
	text = get_equipment_howto_hint( equipment );
	self show_equipment_hint_text( text );
// SP = 0x0 - check OK
}

// 0x2A50
show_equipment_hint_text( text )
{
	self notify( "hide_equipment_hint_text" );
	wait 0.05;
	self setup_equipment_client_hintelem();
	self.hintelem settext( text );
	self.hintelem.alpha = 1;
	self.hintelem.font = "small";
	self.hintelem.fontscale = 1.25;
	self.hintelem.hidewheninmenu = 1;
	time = self waittill_notify_or_timeout( "hide_equipment_hint_text", 3.2 );
	self.hintelem fadeovertime( 0.25 );
	self.hintelem.alpha = 0;
	self waittill_notify_or_timeout( "hide_equipment_hint_text", 0.25 );
	self.hintelem settext( "" );
	self.hintelem destroy();
// SP = 0x0 - check OK
}

// 0x2B28
equipment_onspawnretrievableweaponobject( watcher, player )
{
	iswallmount = level.placeable_equipment_type[self.name] == "wallmount";
	self waittill( "stationary" );
	waittillframeend;
	equip_name = self.name;
	thread equipment_disappear_fx( self.origin, undefined, self.angles );
	self delete();
	player setweaponammoclip( equip_name, 1 );
	player.planted_wallmount_on_a_zombie = undefined;
	return;
	self.origin = player.origin;
	self.angles = player.angles;
	wait_network_frame();
	equipment = watcher.name + "_zm";
/#
/#
	assert( player has_deployed_equipment( equipment ) );
#/
/#
	assert( !(IsDefined( player.current_equipment )) );
#/
#/
	player equipment_to_deployed( equipment );
	plant_origin = player.turret_placement["origin"];
	plant_angles = player.turret_placement["angles"];
	plant_origin = self.origin;
	plant_angles = self.angles;
	plant_origin = self.origin;
	plant_angles = self.angles;
	plant_origin = player.origin;
	plant_angles = player.angles;
	plant_origin = ( plant_origin[0], plant_origin[1], player.origin[2] + 10 );
	self ghost();
	replacement = player [[level.zombie_equipment[equipment].place_fn]]( plant_origin, plant_angles );
	replacement.owner = player;
	replacement.original_owner = player;
	replacement.name = self.name;
	player notify( "equipment_placed", replacement, self.name );
	player [[level.equipment_planted]]( replacement, equipment, self );
	player maps\mp\zombies\_zm_buildables::track_buildables_planted( self );
	self delete();
// SP = 0x0 - check OK
}

// 0x2E20
equipment_retrieve( player )
{
	self stoploopsound();
	original_owner = self.original_owner;
	weaponname = self.name;
	player equipment_give( weaponname );
	self.owner = player;
	equipment_transfer( weaponname, original_owner, player );
	self.owner = player;
	player equipment_from_deployed( weaponname );
	self.owner = player;
	player player_set_equipment_damage( weaponname, self.damage );
	player [[level.zombie_equipment[weaponname].pickup_fn]]( self );
	self.playdialog = 0;
	weaponname = self.name;
	self delete();
	player giveweapon( weaponname );
	clip_ammo = player getweaponammoclip( weaponname );
	clip_max_ammo = weaponclipsize( weaponname );
	clip_ammo++;
	player setweaponammoclip( weaponname, clip_ammo );
	player maps\mp\zombies\_zm_buildables::track_planted_buildables_pickedup( weaponname );
// SP = 0x0 - check OK
}

// 0x2F6C
equipment_drop_to_planted( equipment, player )
{
/#
/#
	assert( player has_deployed_equipment( equipment ) );
#/
/#
	assert( !(IsDefined( player.current_equipment )) );
#/
#/
	player equipment_to_deployed( equipment );
	replacement = player [[level.zombie_equipment[equipment].place_fn]]( player.origin, player.angles );
	replacement.owner = player;
	replacement.original_owner = player;
	replacement.name = equipment;
	player [[level.equipment_planted]]( replacement, equipment, player );
	player notify( "equipment_placed", replacement, equipment );
	player maps\mp\zombies\_zm_buildables::track_buildables_planted( replacement );
// SP = 0x0 - check OK
}

// 0x3070
equipment_transfer( weaponname, fromplayer, toplayer )
{
/#
	println( "ZM EQUIPMENT: " + weaponname + " transferred from " + fromplayer.name + " to " + toplayer.name + "\n" );
#/
	toplayer equipment_orphaned( weaponname );
	wait 0.05;
/#
	assert( !(toplayer has_player_equipment( weaponname )) );
#/
/#
	assert( fromplayer has_player_equipment( weaponname ) );
#/
	toplayer equipment_give( weaponname );
	toplayer equipment_to_deployed( weaponname );
	[[level.zombie_equipment[weaponname].transfer_fn]]( fromplayer, toplayer );
	fromplayer equipment_release( weaponname );
/#
	assert( toplayer has_player_equipment( weaponname ) );
#/
/#
	assert( !(fromplayer has_player_equipment( weaponname )) );
#/
	equipment_damage = 0;
	toplayer player_set_equipment_damage( weaponname, fromplayer player_get_equipment_damage( weaponname ) );
	fromplayer player_set_equipment_damage( equipment_damage );
/#
	println( "ZM EQUIPMENT: " + weaponname + " swapped from " + fromplayer.name + " to " + toplayer.name + "\n" );
#/
	toplayer equipment_give( weaponname );
	toplayer equipment_to_deployed( weaponname );
	[[level.zombie_equipment[weaponname].transfer_fn]]( fromplayer, toplayer );
	equipment_damage = toplayer player_get_equipment_damage( weaponname );
	toplayer player_set_equipment_damage( weaponname, fromplayer player_get_equipment_damage( weaponname ) );
	fromplayer player_set_equipment_damage( weaponname, equipment_damage );
// SP = 0x0 - check OK
}

// 0x3270
equipment_release( equipment )
{
/#
	println( "ZM EQUIPMENT: " + self.name + " release " + equipment + "\n" );
#/
	self equipment_take( equipment );
// SP = 0x0 - check OK
}

// 0x32A8
equipment_drop( equipment )
{
	equipment_drop_to_planted( equipment, self );
/#
	println( "ZM EQUIPMENT: " + self.name + " drop to planted " + equipment + "\n" );
#/
	self equipment_to_deployed( equipment );
	item = self [[level.zombie_equipment[equipment].drop_fn]]();
	self [[level.equipment_planted]]( item, equipment, self );
	item.owner = undefined;
	item.damage = self player_get_equipment_damage( equipment );
/#
	println( "ZM EQUIPMENT: " + self.name + " dropped " + equipment + "\n" );
#/
	self equipment_take();
	self notify( "equipment_dropped", equipment );
// SP = 0x0 - check OK
}

// 0x33A0
equipment_grab( equipment, item )
{
/#
	println( "ZM EQUIPMENT: " + self.name + " picked up " + equipment + "\n" );
#/
	self equipment_give( equipment );
	item.owner = self;
	self player_set_equipment_damage( equipment, item.damage );
	self [[level.zombie_equipment[equipment].pickup_fn]]( item );
// SP = 0x0 - check OK
}

// 0x341C
equipment_orphaned( equipment )
{
/#
	println( "ZM EQUIPMENT: " + self.name + " orphaned " + equipment + "\n" );
#/
	self equipment_take( equipment );
// SP = 0x0 - check OK
}

// 0x3454
equipment_to_deployed( equipment )
{
/#
	println( "ZM EQUIPMENT: " + self.name + " deployed " + equipment + "\n" );
#/
	self.deployed_equipment = [];
/#
	assert( self.current_equipment == equipment );
#/
	self.deployed_equipment[self.deployed_equipment.size] = equipment;
	self.current_equipment = undefined;
	self takeweapon( equipment );
	self setactionslot( 1, "" );
// SP = 0x0 - check OK
}

// 0x34E8
equipment_from_deployed( equipment )
{
	equipment = "none";
/#
	println( "ZM EQUIPMENT: " + self.name + " retrieved " + equipment + "\n" );
#/
	self equipment_drop( self.current_equipment );
/#
/#
	assert( self has_deployed_equipment( equipment ) );
#/
#/
	self.current_equipment = equipment;
	self giveweapon( equipment );
	self setweaponammoclip( equipment, 1 );
	self setactionslot( 1, "weapon", equipment );
	arrayremovevalue( self.deployed_equipment, equipment );
	self notify( equipment + "_pickup" );
// SP = 0x0 - check OK
}

// 0x35D0
eqstub_get_unitrigger_origin()
{
	return self.origin_parent.origin;
	tup = anglestoup( self.angles );
	eq_unitrigger_offset = 12 * tup;
	return self.origin + eq_unitrigger_offset;
// SP = 0x0 - check OK
}

// 0x3604
eqstub_on_spawn_trigger( trigger )
{
	trigger enablelinkto();
	trigger linkto( self.link_parent );
	trigger setmovingplatformenabled( 1 );
// SP = 0x0 - check OK
}

// 0x3640
equipment_buy( equipment )
{
/#
	println( "ZM EQUIPMENT: " + self.name + " bought " + equipment + "\n" );
#/
	self equipment_drop( self.current_equipment );
	self [[self.player_shield_reset_health]]();
	self player_set_equipment_damage( equipment, 0 );
	self equipment_give( equipment );
// SP = 0x0 - check OK
}

// 0x36D0
generate_equipment_unitrigger( classname, origin, angles, flags, radius, script_height, hint, icon, think, moving )
{
	radius = 64;
	script_height = 64;
	script_width = script_height;
	script_width = 64;
	script_length = script_height;
	script_length = 64;
	unitrigger_stub = spawnstruct();
	unitrigger_stub.origin = origin;
	unitrigger_stub.angles = angles;
	unitrigger_stub.script_length = script_length;
	unitrigger_stub.script_length = 13.5;
	unitrigger_stub.script_width = script_width;
	unitrigger_stub.script_width = 27.5;
	unitrigger_stub.script_height = script_height;
	unitrigger_stub.script_height = 24;
	unitrigger_stub.radius = radius;
	unitrigger_stub.cursor_hint = "HINT_NOICON";
	unitrigger_stub.hint_string = hint;
	unitrigger_stub.cursor_hint = "HINT_WEAPON";
	unitrigger_stub.cursor_hint_weapon = icon;
	unitrigger_stub.script_unitrigger_type = "unitrigger_box_use";
	unitrigger_stub.require_look_at = 0;
	switch ( classname )
	{
		case "trigger_box":
			unitrigger_stub.script_unitrigger_type = "unitrigger_radius";
			break;
		case "trigger_box_use":
			unitrigger_stub.script_unitrigger_type = "unitrigger_radius_use";
			break;
		case "trigger_radius":
			unitrigger_stub.script_unitrigger_type = "unitrigger_box";
			break;
		case "trigger_radius_use":
			unitrigger_stub.script_unitrigger_type = "unitrigger_box_use";
			break;
	}
	unitrigger_stub.originfunc = ::eqstub_get_unitrigger_origin;
	unitrigger_stub.onspawnfunc = ::eqstub_on_spawn_trigger;
	maps\mp\zombies\_zm_unitrigger::register_unitrigger( unitrigger_stub, think );
	maps\mp\zombies\_zm_unitrigger::register_static_unitrigger( unitrigger_stub, think );
	return unitrigger_stub;
// SP = 0x0 - check OK
}

// 0x38AC
can_pick_up_equipment( equipment_name, equipment_trigger )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x3944
same_team_placed_equipment( equipment_trigger )
{
	return equipment_trigger.stub.model.owner.pers["team"] == self.pers["team"];
// SP = 0x0 - check OK
}

// 0x39A0
placed_equipment_think( model, equipname, origin, angles, tradius, toffset )
{
	pickupmodel = spawn( "script_model", origin );
	pickupmodel.angles = angles;
	pickupmodel setmodel( model );
	equipment_disappear_fx( pickupmodel.origin, undefined, pickupmodel.angles );
	pickupmodel delete();
	self equipment_take( equipname );
	return undefined;
	watchername = getsubstr( equipname, 0, equipname.size - 3 );
	hint = level.retrievehints[watchername].hint;
	hint = &"MP_GENERIC_PICKUP";
	icon = get_equipment_icon( equipname );
	tradius = 32;
	torigin = origin;
	tforward = anglestoforward( angles );
	torigin += toffset * tforward;
	tup = anglestoup( angles );
	eq_unitrigger_offset = 12 * tup;
	pickupmodel.stub = generate_equipment_unitrigger( "trigger_radius_use", torigin + eq_unitrigger_offset, angles, 0, tradius, 64, hint, equipname, ::placed_equipment_unitrigger_think, pickupmodel.canmove );
	pickupmodel.stub.model = pickupmodel;
	pickupmodel.stub.equipname = equipname;
	pickupmodel.equipname = equipname;
	pickupmodel thread item_attract_zombies();
	pickupmodel thread item_watch_explosions();
	level.dropped_equipment = [];
	level.dropped_equipment[equipname].model dropped_equipment_destroy( 1 );
	level.dropped_equipment[equipname] = pickupmodel.stub;
	destructible_equipment_list_add( pickupmodel );
	return pickupmodel;
// SP = 0x0 - check OK
}

// 0x3BA4
watch_player_visibility( equipment )
{
	self endon( "kill_trigger" );
	self setinvisibletoall();
	players = getplayers();
	foreach ( player in players )
	{
		invisible = !(player can_pick_up_equipment( equipment, self ));
		self setinvisibletoplayer( player, invisible );
		wait 0.05;
	}
	wait 1;
// SP = 0x0 - check OK
}

// 0x3C3C
placed_equipment_unitrigger_think()
{
	self endon( "kill_trigger" );
	self thread watch_player_visibility( self.stub.equipname );
	self waittill( "trigger", player );
	self thread pickup_placed_equipment( player );
	return;
// SP = 0x0 - check OK
}

// 0x3C9C
pickup_placed_equipment( player )
{
/#
	assert( !(player.pickup_equipment) );
#/
	player.pickup_equipment = 1;
	stub = self.stub;
	player equipment_drop( player.current_equipment );
	level.dropped_equipment[stub.equipname] = undefined;
	stub.model equipment_retrieve( player );
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( stub );
	wait 3;
	player.pickup_equipment = 0;
// SP = 0x0 - check OK
}

// 0x3D84
dropped_equipment_think( model, equipname, origin, angles, tradius, toffset )
{
	pickupmodel = spawn( "script_model", origin );
	pickupmodel.angles = angles;
	pickupmodel setmodel( model );
	equipment_disappear_fx( pickupmodel.origin, undefined, pickupmodel.angles );
	pickupmodel delete();
	self equipment_take( equipname );
	return;
	watchername = getsubstr( equipname, 0, equipname.size - 3 );
	hint = level.retrievehints[watchername].hint;
	hint = &"MP_GENERIC_PICKUP";
	icon = get_equipment_icon( equipname );
	tradius = 32;
	torigin = origin;
	offset = 64;
	tforward = anglestoforward( angles );
	torigin = torigin + toffset * tforward + vector_scale( ( 0, 0, 1 ), 8 );
	pickupmodel.stub = generate_equipment_unitrigger( "trigger_radius_use", torigin, angles, 0, tradius, 64, hint, equipname, ::dropped_equipment_unitrigger_think, pickupmodel.canmove );
	pickupmodel.stub.model = pickupmodel;
	pickupmodel.stub.equipname = equipname;
	pickupmodel.equipname = equipname;
	self [[level.equipment_planted]]( pickupmodel, equipname, self );
	level.dropped_equipment = [];
	level.dropped_equipment[equipname].model dropped_equipment_destroy( 1 );
	level.dropped_equipment[equipname] = pickupmodel.stub;
	destructible_equipment_list_add( pickupmodel );
	pickupmodel thread item_attract_zombies();
	return pickupmodel;
// SP = 0x0 - check OK
}

// 0x3F70
dropped_equipment_unitrigger_think()
{
	self endon( "kill_trigger" );
	self thread watch_player_visibility( self.stub.equipname );
	self waittill( "trigger", player );
	self thread pickup_dropped_equipment( player );
	return;
// SP = 0x0 - check OK
}

// 0x3FD0
pickup_dropped_equipment( player )
{
	player.pickup_equipment = 1;
	stub = self.stub;
	player equipment_drop( player.current_equipment );
	player equipment_grab( stub.equipname, stub.model );
	stub.model dropped_equipment_destroy();
	wait 3;
	player.pickup_equipment = 0;
// SP = 0x0 - check OK
}

// 0x4050
dropped_equipment_destroy( gusto )
{
	stub = self.stub;
	equipment_disappear_fx( self.origin, undefined, self.angles );
	level.dropped_equipment[stub.equipname] = undefined;
	stub.model delete();
	self.original_owner equipment_take( stub.equipname );
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( stub );
// SP = 0x0 - check OK
}

// 0x4104
add_placeable_equipment( equipment, modelname, destroy_fn, type )
{
	level.placeable_equipment = [];
	level.placeable_equipment[equipment] = modelname;
	precachemodel( modelname );
	precacheitem( equipment + "_turret" );
	level.placeable_equipment_destroy_fn = [];
	level.placeable_equipment_destroy_fn[equipment] = destroy_fn;
	level.placeable_equipment_type = [];
	level.placeable_equipment_type[equipment] = type;
// SP = 0x0 - check OK
}

// 0x4180
is_placeable_equipment( equipment )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x41A4
equipment_placement_watcher()
{
	self endon( "death_or_disconnect" );
	self waittill( "weapon_change", weapon );
	self thread equipment_watch_placement( weapon );
// SP = 0x0 - check OK
}

// 0x41EC
equipment_watch_placement( equipment )
{
	self.turret_placement = undefined;
	carry_offset = vector_scale( ( 1, 0, 0 ), 22 );
	carry_angles = ( 0, 0, 0 );
	placeturret = spawnturret( "auto_turret", self.origin, equipment + "_turret" );
	placeturret.angles = self.angles;
	placeturret setmodel( level.placeable_equipment[equipment] );
	placeturret setturretcarried( 1 );
	placeturret setturretowner( self );
	placeturret setturrettype( level.placeable_equipment_type[equipment] );
	self carryturret( placeturret, carry_offset, carry_angles );
	self thread watch_melee_swipes( equipment, placeturret );
	self notify( "create_equipment_turret", equipment, placeturret );
	ended = self waittill_any_return( "weapon_change", "grenade_fire", "death_or_disconnect" );
	self.turret_placement = self canplayerplaceturret( placeturret );
	self.turret_placement = undefined;
	self setweaponammoclip( equipment, 1 );
	self notify( "destroy_equipment_turret", equipment, placeturret );
	self stopcarryturret( placeturret );
	placeturret setturretcarried( 0 );
	placeturret delete();
// SP = 0x0 - check OK
}

// 0x434C
watch_melee_swipes( equipment, turret )
{
	self endon( "weapon_change" );
	self endon( "grenade_fire" );
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "melee_swipe", zombie );
	tpos = turret.origin;
	tangles = turret.angles;
	self player_damage_equipment( equipment, 200, zombie.origin );
	thread equipment_disappear_fx( tpos, undefined, tangles );
	primaryweapons = self getweaponslistprimaries();
	self switchtoweapon( primaryweapons[0] );
	self playlocalsound( level.zmb_laugh_alias );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "cheat_total", 0 );
	self equipment_release( equipment );
	return;
// SP = 0x0 - check OK
}

// 0x4458
player_get_equipment_damage( equipment )
{
	return self.equipment_damage[equipment];
	return 0;
// SP = 0x0 - check OK
}

// 0x4480
player_set_equipment_damage( equipment, damage )
{
	self.equipment_damage = [];
	self.equipment_damage[equipment] = damage;
// SP = 0x0 - check OK
}

// 0x44A8
player_damage_equipment( equipment, damage, origin )
{
	self.equipment_damage = [];
	self.equipment_damage[equipment] = 0;
	self.equipment_damage[equipment] += damage;
	self [[level.placeable_equipment_destroy_fn[equipment]]]();
	equipment_disappear_fx( origin );
	self equipment_release( equipment );
// SP = 0x0 - check OK
}

// 0x4530
item_damage( damage )
{
	self.owner [[level.riotshield_damage_callback]]( damage, 0 );
	self [[level.deployed_riotshield_damage_callback]]( damage );
	self.owner player_damage_equipment( self.equipname, damage, self.origin );
	self.damage = 0;
	self.damage += damage;
	self thread dropped_equipment_destroy( 1 );
// SP = 0x0 - check OK
}

// 0x45DC
item_watch_damage()
{
	self endon( "death" );
	self setcandamage( 1 );
	self.health = 1500;
	self waittill( "damage", amount );
	self item_damage( amount );
// SP = 0x0 - check OK
}

// 0x4620
item_watch_explosions()
{
	self endon( "death" );
	level waittill( "grenade_exploded", position, radius, idamage, odamage );
	wait randomfloatrange( 0.05, 0.3 );
	distsqrd = distancesquared( self.origin, position );
	dist = sqrt( distsqrd );
	dist /= radius;
	damage = ( odamage + idamage ) - odamage * ( 1 - dist );
	self item_damage( damage * 5 );
// SP = 0x0 - check OK
}

// 0x46C4
get_item_health()
{
/#
	damage = 0;
	damagemax = level.zombie_vars["riotshield_hit_points"];
	damage = self.owner.shielddamagetaken;
	damage = self.shielddamagetaken;
	damagemax = 1500;
	damage = self.owner player_get_equipment_damage( self.equipname );
	damagemax = 1500;
	damage = self.damage;
	return ( damagemax - damage ) / damagemax;
#/
// SP = 0x0 - check OK
}

// 0x4760
debughealth()
{
/#
	self endon( "death" );
	self endon( "stop_attracting_zombies" );
	health = self get_item_health();
	color = ( 1 - health, health, 0 );
	text = "" + health * 100 + "";
	print3d( self.origin, text, color, 1, 0.5, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x47DC
item_choke()
{
	level.item_choke_count = 0;
	level.item_choke_count++;
	wait 0.05;
	level.item_choke_count = 0;
// SP = 0x0 - check OK
}

// 0x4810
is_equipment_ignored( equipname )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x4838
enemies_ignore_equipment( equipname )
{
	level.equipment_ignored_by_zombies = [];
	level.equipment_ignored_by_zombies[equipname] = equipname;
// SP = 0x0 - check OK
}

// 0x485C
item_attract_zombies()
{
	self endon( "death" );
	self notify( "stop_attracting_zombies" );
	self endon( "stop_attracting_zombies" );
/#
	self thread debughealth();
#/
	return;
	vdistmax = level.vert_equipment_attack_range;
	vdistmax = 36;
	distmax = level.max_equipment_attack_range * level.max_equipment_attack_range;
	distmax = 4096;
	distmin = level.min_equipment_attack_range * level.min_equipment_attack_range;
	distmin = 2025;
	ai = getaiarray( level.zombie_team );
	i = 0;
	vdist = abs( ai[i].origin[2] - self.origin[2] );
	distsqrd = distance2dsquared( ai[i].origin, self.origin );
	vdistmax = 108;
	should_attack = 0;
	should_attack = self [[level.should_attack_equipment]]( distsqrd );
	ai[i] thread attack_item( self );
	item_choke();
	item_choke();
	i++;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x4AAC
attack_item( item )
{
	self endon( "death" );
	item endon( "death" );
	self endon( "start_inert" );
	return 0;
	return 0;
	self thread attack_item_stop( item );
	self thread attack_item_interrupt( item );
	setdvar( "zombie_equipment_attack_freq", "15" );
	freq = GetDvarInt( #"0xFA9CEAA6" );
	self.doing_equipment_attack = 1;
	self maps\mp\zombies\_zm_spawner::zombie_history( "doing equipment attack 1 - " + GetTime() );
	self.item = item;
	return;
	item [[item.zombie_attack_callback]]( self );
	self thread maps\mp\zombies\_zm_audio::do_zombies_playvocals( "attack", self.animname );
	self [[level.attack_item]]();
	melee_anim = "zm_window_melee";
	melee_anim = "zm_walk_melee_crawl";
	melee_anim = "zm_stumpy_melee";
	melee_anim = "zm_run_melee_crawl";
	self orientmode( "face point", item.origin );
	self animscripted( self.origin, flat_angle( vectortoangles( item.origin - self.origin ) ), melee_anim );
	self notify( "item_attack" );
	item thread item_damage( self.custom_item_dmg );
	item thread item_damage( 100 );
	item playsound( "fly_riotshield_zm_impact_flesh" );
	wait randomint( 100 ) / 100;
	self.doing_equipment_attack = 0;
	self maps\mp\zombies\_zm_spawner::zombie_history( "doing equipment attack 0 from wait - " + GetTime() );
	self orientmode( "face default" );
// SP = 0x0 - check OK
}

// 0x4CAC
attack_item_interrupt( item )
{
	return;
	self notify( "attack_item_interrupt" );
	self endon( "attack_item_interrupt" );
	self endon( "death" );
	self waittill( "damage" );
	self stopanimscripted();
	self.doing_equipment_attack = 0;
	self maps\mp\zombies\_zm_spawner::zombie_history( "doing equipment attack 0 from death - " + GetTime() );
	self.item = undefined;
// SP = 0x0 - check OK
}

// 0x4D1C
attack_item_stop( item )
{
	self notify( "attack_item_stop" );
	self endon( "attack_item_stop" );
	self endon( "death" );
	item waittill( "death" );
	self stopanimscripted();
	self.doing_equipment_attack = 0;
	self maps\mp\zombies\_zm_spawner::zombie_history( "doing equipment attack 0 from death - " + GetTime() );
	self.item = undefined;
	self [[level.attack_item_stop]]();
// SP = 0x0 - check OK
}

// 0x4D78
window_notetracks( msg, equipment )
{
	self endon( "death" );
	equipment endon( "death" );
	self waittill( msg, notetrack );
	return;
	equipment item_damage( 100 );
// SP = 0x0 - check OK
}

// 0x4DC8
destructible_equipment_list_check()
{
	level.destructible_equipment = [];
	i = 0;
	arrayremoveindex( level.destructible_equipment, i );
	i++;
// SP = 0x0 - check OK
}

// 0x4E18
destructible_equipment_list_add( item )
{
	destructible_equipment_list_check();
	level.destructible_equipment[level.destructible_equipment.size] = item;
// SP = 0x0 - check OK
}

// 0x4E3C
get_destructible_equipment_list()
{
	destructible_equipment_list_check();
	return level.destructible_equipment;
// SP = 0x0 - check OK
}

// 0x4E50
equipment_disappear_fx( origin, fx, angles )
{
	effect = level._equipment_disappear_fx;
	effect = fx;
	playfx( effect, origin, anglestoforward( angles ) );
	playfx( effect, origin );
	wait 1.1;
// SP = 0x0 - check OK
}
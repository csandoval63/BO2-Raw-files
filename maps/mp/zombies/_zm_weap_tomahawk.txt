// maps/mp/zombies/_zm_weap_tomahawk.gsc

#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_net;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xFA4
init()
{
	registerclientfield( "toplayer", "tomahawk_in_use", 9000, 2, "int" );
	registerclientfield( "toplayer", "upgraded_tomahawk_in_use", 9000, 1, "int" );
	registerclientfield( "scriptmover", "play_tomahawk_fx", 9000, 2, "int" );
	registerclientfield( "actor", "play_tomahawk_hit_sound", 9000, 1, "int" );
	onplayerconnect_callback( ::tomahawk_on_player_connect );
	maps\mp\zombies\_zm_weapons::include_zombie_weapon( "bouncing_tomahawk_zm", 0 );
	maps\mp\zombies\_zm_weapons::include_zombie_weapon( "upgraded_tomahawk_zm", 0 );
	maps\mp\zombies\_zm_weapons::include_zombie_weapon( "zombie_tomahawk_flourish", 0 );
	maps\mp\zombies\_zm_weapons::add_zombie_weapon( "bouncing_tomahawk_zm", "zombie_tomahawk_flourish", &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "wpck_monkey", "", undefined, 1 );
	maps\mp\zombies\_zm_weapons::add_zombie_weapon( "upgraded_tomahawk_zm", "zombie_tomahawk_flourish", &"ZOMBIE_WEAPON_SATCHEL_2000", 2000, "wpck_monkey", "", undefined, 1 );
	level thread tomahawk_pickup();
	level.zombie_weapons_no_max_ammo = [];
	level.zombie_weapons_no_max_ammo["bouncing_tomahawk_zm"] = 1;
	level.zombie_weapons_no_max_ammo["upgraded_tomahawk_zm"] = 1;
	level.a_tomahawk_pickup_funcs = [];
// SP = 0x0 - check OK
}

// 0x10C8
tomahawk_on_player_connect()
{
	self.current_tomahawk_weapon = "bouncing_tomahawk_zm";
	self.current_tactical_grenade = "bouncing_tomahawk_zm";
	self thread watch_for_tomahawk_throw();
	self thread watch_for_tomahawk_charge();
// SP = 0x0 - check OK
}

// 0x10F8
watch_for_tomahawk_throw()
{
	self endon( "disconnect" );
	self waittill( "grenade_fire", grenade, weapname );
	grenade.use_grenade_special_bookmark = 1;
	grenade.grenade_multiattack_bookmark_count = 1;
	grenade.low_level_instant_kill_charge = 1;
	grenade.owner = self;
	self notify( "throwing_tomahawk" );
	grenade.n_cookedtime = grenade.birthtime - self.n_tomahawk_cooking_time;
	grenade.n_cookedtime = 0;
	self thread check_for_time_out( grenade );
	self thread tomahawk_thrown( grenade );
// SP = 0x0 - check OK
}

// 0x11A4
watch_for_tomahawk_charge()
{
	self endon( "disconnect" );
	self waittill( "grenade_pullback", weaponname );
	self thread watch_for_grenade_cancel();
	self thread play_charge_fx();
	self.n_tomahawk_cooking_time = GetTime();
	self waittill_either( "grenade_fire", "grenade_throw_cancelled" );
	wait 0.1;
	self.n_tomahawk_cooking_time = undefined;
// SP = 0x0 - check OK
}

// 0x1218
watch_for_grenade_cancel()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "grenade_fire" );
	waittillframeend;
	weapon = "none";
	self waittill( "weapon_change", weapon );
	self notify( "grenade_throw_cancelled" );
// SP = 0x0 - check OK
}

// 0x1268
play_charge_fx()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "grenade_fire" );
	waittillframeend;
	time_to_pulse = 1000;
	time = GetTime() - self.n_tomahawk_cooking_time;
	self.current_tactical_grenade = self get_player_tactical_grenade();
	playfxontag( level._effect["tomahawk_charge_up_ug"], self, "tag_origin" );
	playfxontag( level._effect["tomahawk_charge_up"], self, "tag_origin" );
	time_to_pulse += 1000;
	self playrumbleonentity( "reload_small" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x133C
get_grenade_charge_power( player )
{
	player endon( "disconnect" );
	return 4.5;
	return 1.5;
	return 6;
	return 2;
	return 2;
	return 3;
	return 1;
// SP = 0x0 - check OK
}

// 0x13E8
tomahawk_thrown( grenade )
{
	self endon( "disconnect" );
	grenade endon( "in_hellhole" );
	grenade_owner = undefined;
	grenade_owner = grenade.owner;
	playfxontag( level._effect["tomahawk_charged_trail"], grenade, "tag_origin" );
	self setclientfieldtoplayer( "tomahawk_in_use", 2 );
	grenade waittill_either( "death", "time_out" );
	grenade_origin = grenade.origin;
	a_zombies = getaispeciesarray( "axis", "all" );
	n_grenade_charge_power = grenade get_grenade_charge_power( self );
	a_zombies = get_array_of_closest( grenade_origin, a_zombies, undefined, undefined, 200 );
	a_powerups = get_array_of_closest( grenade_origin, level.active_powerups, undefined, undefined, 200 );
	foreach ( tomahawk_func in level.a_tomahawk_pickup_funcs )
	{
	}
	m_tomahawk = tomahawk_spawn( grenade_origin, n_grenade_charge_power );
	m_tomahawk.n_grenade_charge_power = n_grenade_charge_power;
	foreach ( powerup in a_powerups )
	{
		powerup.origin = grenade_origin;
		powerup linkto( m_tomahawk );
		m_tomahawk.a_has_powerup = a_powerups;
	}
	self thread tomahawk_return_player( m_tomahawk, 0 );
	return;
	m_tomahawk = tomahawk_spawn( grenade_origin, n_grenade_charge_power );
	m_tomahawk.n_grenade_charge_power = n_grenade_charge_power;
	self thread tomahawk_return_player( m_tomahawk, 0 );
	return;
	foreach ( ai_zombie in a_zombies )
	{
		ai_zombie.hit_by_tomahawk = 0;
	}
	v_zombiepos = a_zombies[0].origin;
	a_zombies[0] setclientfield( "play_tomahawk_hit_sound", 1 );
	n_tomahawk_damage = calculate_tomahawk_damage( a_zombies[0], n_grenade_charge_power, grenade );
	a_zombies[0] dodamage( n_tomahawk_damage, grenade_origin, self, grenade, "none", "MOD_GRENADE", 0, "bouncing_tomahawk_zm" );
	a_zombies[0].hit_by_tomahawk = 1;
	self maps\mp\zombies\_zm_score::add_to_player_score( 10 );
	self thread tomahawk_ricochet_attack( grenade_origin, n_grenade_charge_power );
	m_tomahawk = tomahawk_spawn( grenade_origin, n_grenade_charge_power );
	m_tomahawk.n_grenade_charge_power = n_grenade_charge_power;
	self thread tomahawk_return_player( m_tomahawk, 0 );
	m_tomahawk = tomahawk_spawn( grenade_origin, n_grenade_charge_power );
	m_tomahawk.n_grenade_charge_power = n_grenade_charge_power;
	grenade delete();
	self thread tomahawk_return_player( m_tomahawk, 0 );
// SP = 0x0 - check OK
}

// 0x16F0
check_for_time_out( grenade )
{
	self endon( "disconnect" );
	grenade endon( "death" );
	wait 0.5;
	grenade notify( "time_out" );
// SP = 0x0 - check OK
}

// 0x1718
tomahawk_ricochet_attack( grenade_origin, tomahawk_charge_power )
{
	self endon( "disconnect" );
	a_zombies = getaispeciesarray( "axis", "all" );
	a_zombies = get_array_of_closest( grenade_origin, a_zombies, undefined, undefined, 300 );
	a_zombies = array_reverse( a_zombies );
	m_tomahawk = tomahawk_spawn( grenade_origin, tomahawk_charge_power );
	m_tomahawk.n_grenade_charge_power = tomahawk_charge_power;
	self thread tomahawk_return_player( m_tomahawk, 0 );
	return;
	m_tomahawk = tomahawk_spawn( grenade_origin, tomahawk_charge_power );
	m_tomahawk.n_grenade_charge_power = tomahawk_charge_power;
	self thread tomahawk_attack_zombies( m_tomahawk, a_zombies );
// SP = 0x0 - check OK
}

// 0x17BC
tomahawk_attack_zombies( m_tomahawk, a_zombies )
{
	self endon( "disconnect" );
	self thread tomahawk_return_player( m_tomahawk, 0 );
	return;
	n_attack_limit = a_zombies.size;
	n_attack_limit = 4;
	i = 0;
	tag = "J_Head";
	tag = "J_Spine1";
	v_target = a_zombies[i] gettagorigin( tag );
	m_tomahawk moveto( v_target, 0.3 );
	m_tomahawk waittill( "movedone" );
	playfxontag( level._effect["tomahawk_impact_ug"], a_zombies[i], tag );
	playfxontag( level._effect["tomahawk_impact"], a_zombies[i], tag );
	playfxontag( level._effect["tomahawk_fire_dot"], a_zombies[i], "j_spineupper" );
	a_zombies[i] setclientfield( "play_tomahawk_hit_sound", 1 );
	n_tomahawk_damage = calculate_tomahawk_damage( a_zombies[i], m_tomahawk.n_grenade_charge_power, m_tomahawk );
	a_zombies[i] dodamage( n_tomahawk_damage, m_tomahawk.origin, self, m_tomahawk, "none", "MOD_GRENADE", 0, "bouncing_tomahawk_zm" );
	a_zombies[i].hit_by_tomahawk = 1;
	self maps\mp\zombies\_zm_score::add_to_player_score( 10 );
	wait 0.2;
	i++;
	self thread tomahawk_return_player( m_tomahawk, n_attack_limit );
// SP = 0x0 - check OK
}

// 0x1994
tomahawk_return_player( m_tomahawk, num_zombie_hit )
{
	self endon( "disconnect" );
	n_dist = distance2dsquared( m_tomahawk.origin, self.origin );
	num_zombie_hit = 5;
	m_tomahawk moveto( self geteye(), 0.25 );
	self tomahawk_check_for_zombie( m_tomahawk );
	num_zombie_hit++;
	wait 0.1;
	n_dist = distance2dsquared( m_tomahawk.origin, self geteye() );
	foreach ( powerup in m_tomahawk.a_has_powerup )
	{
		powerup.origin = self.origin;
	}
	m_tomahawk delete();
	self playsoundtoplayer( "wpn_tomahawk_catch_plr", self );
	self playsound( "wpn_tomahawk_catch_npc" );
	wait 5;
	self playsoundtoplayer( "wpn_tomahawk_cooldown_done", self );
	self givemaxammo( self.current_tomahawk_weapon );
	a_zombies = getaispeciesarray( "axis", "all" );
	foreach ( ai_zombie in a_zombies )
	{
		ai_zombie.hit_by_tomahawk = 0;
	}
	self setclientfieldtoplayer( "tomahawk_in_use", 3 );
// SP = 0x0 - check OK
}

// 0x1B1C
tomahawk_check_for_zombie( grenade )
{
	self endon( "disconnect" );
	grenade endon( "death" );
	a_zombies = getaispeciesarray( "axis", "all" );
	a_zombies = get_array_of_closest( grenade.origin, a_zombies, undefined, undefined, 100 );
	self tomahawk_hit_zombie( a_zombies[0], grenade );
// SP = 0x0 - check OK
}

// 0x1BB4
tomahawk_hit_zombie( ai_zombie, grenade )
{
	self endon( "disconnect" );
	tag = "J_Head";
	tag = "J_Spine1";
	v_target = ai_zombie gettagorigin( tag );
	grenade moveto( v_target, 0.3 );
	grenade waittill( "movedone" );
	playfxontag( level._effect["tomahawk_impact_ug"], ai_zombie, tag );
	playfxontag( level._effect["tomahawk_impact"], ai_zombie, tag );
	ai_zombie setclientfield( "play_tomahawk_hit_sound", 1 );
	n_tomahawk_damage = calculate_tomahawk_damage( ai_zombie, grenade.n_grenade_charge_power, grenade );
	ai_zombie dodamage( n_tomahawk_damage, grenade.origin, self, grenade, "none", "MOD_GRENADE", 0, "bouncing_tomahawk_zm" );
	ai_zombie.hit_by_tomahawk = 1;
	self maps\mp\zombies\_zm_score::add_to_player_score( 10 );
// SP = 0x0 - check OK
}

// 0x1CD4
tomahawk_spawn( grenade_origin, charged )
{
	m_tomahawk = spawn( "script_model", grenade_origin );
	m_tomahawk setmodel( "t6_wpn_zmb_tomahawk_world" );
	m_tomahawk thread tomahawk_spin();
	m_tomahawk playloopsound( "wpn_tomahawk_flying_loop" );
	playfxontag( level._effect["tomahawk_trail_ug"], m_tomahawk, "tag_origin" );
	playfxontag( level._effect["tomahawk_trail"], m_tomahawk, "tag_origin" );
	playfxontag( level._effect["tomahawk_charged_trail"], m_tomahawk, "tag_origin" );
	m_tomahawk.low_level_instant_kill_charge = 1;
	return m_tomahawk;
// SP = 0x0 - check OK
}

// 0x1D90
tomahawk_spin()
{
	self endon( "death" );
	self rotatepitch( 90, 0.2 );
	wait 0.15;
// SP = 0x0 - check OK
}

// 0x1DC4
tomahawk_pickup()
{
	flag_wait( "soul_catchers_charged" );
	flag_init( "tomahawk_pickup_complete" );
	door = getent( "tomahawk_room_door", "targetname" );
	door trigger_off();
	door connectpaths();
	s_pos_tomahawk = getstruct( "tomahawk_pickup_pos", "targetname" );
	m_tomahawk = spawn( "script_model", s_pos_tomahawk.origin );
	m_tomahawk.targetname = "spinning_tomahawk_pickup";
	m_tomahawk setmodel( "t6_wpn_zmb_tomahawk_world" );
	m_tomahawk setclientfield( "play_tomahawk_fx", 1 );
	m_tomahawk thread tomahawk_pickup_spin();
	m_tomahawk playloopsound( "amb_tomahawk_swirl" );
	s_pos_trigger = getstruct( "tomahawk_trigger_pos", "targetname" );
	trigger = spawn( "trigger_radius_use", s_pos_trigger.origin, 0, 100, 150 );
	trigger.script_noteworthy = "retriever_pickup_trigger";
	trigger usetriggerrequirelookat();
	trigger triggerignoreteam();
	trigger sethintstring( &"ZM_PRISON_TOMAHAWK_PICKUP" );
	trigger setcursorhint( "HINT_NOICON" );
	trigger_upgraded = spawn( "trigger_radius_use", s_pos_trigger.origin, 0, 100, 150 );
	trigger_upgraded usetriggerrequirelookat();
	trigger_upgraded triggerignoreteam();
	trigger_upgraded.script_noteworthy = "redeemer_pickup_trigger";
	trigger_upgraded sethintstring( &"ZM_PRISON_TOMAHAWK_UPGRADED_PICKUP" );
	trigger_upgraded setcursorhint( "HINT_NOICON" );
/#
	iprintlnbold( "GO FIND THE TOMAHAWK" );
#/
	trigger thread tomahawk_pickup_trigger();
	trigger_upgraded thread tomahawk_pickup_trigger();
	flag_set( "tomahawk_pickup_complete" );
// SP = 0x0 - check OK
}

// 0x1F80
tomahawk_pickup_trigger()
{
	self waittill( "trigger", player );
	player takeweapon( player.current_tactical_grenade );
	player disable_player_move_states( 1 );
	gun = player getcurrentweapon();
	level notify( "bouncing_tomahawk_zm_aquired" );
	player maps\mp\zombies\_zm_stats::increment_client_stat( "prison_tomahawk_acquired", 0 );
	player giveweapon( "zombie_tomahawk_flourish" );
	player thread tomahawk_update_hud_on_last_stand();
	player switchtoweapon( "zombie_tomahawk_flourish" );
	player waittill_any( "player_downed", "weapon_change_complete" );
	player.redeemer_trigger = self;
	player setclientfieldtoplayer( "upgraded_tomahawk_in_use", 1 );
	player switchtoweapon( gun );
	player enable_player_move_states();
	player.loadout.hastomahawk = 1;
	player disable_player_move_states( 1 );
	player giveweapon( player.current_tomahawk_weapon );
	player thread tomahawk_update_hud_on_last_stand();
	player thread tomahawk_tutorial_hint();
	player set_player_tactical_grenade( player.current_tomahawk_weapon );
	player.retriever_trigger = self;
	player notify( "tomahawk_picked_up" );
	player setclientfieldtoplayer( "tomahawk_in_use", 1 );
	gun = player getcurrentweapon();
	level notify( "bouncing_tomahawk_zm_aquired" );
	player notify( "player_obtained_tomahawk" );
	player maps\mp\zombies\_zm_stats::increment_client_stat( "prison_tomahawk_acquired", 0 );
	player giveweapon( "zombie_tomahawk_flourish" );
	player switchtoweapon( "zombie_tomahawk_flourish" );
	player waittill_any( "player_downed", "weapon_change_complete" );
	player setclientfieldtoplayer( "upgraded_tomahawk_in_use", 1 );
	player switchtoweapon( gun );
	player enable_player_move_states();
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x2204
tomahawk_pickup_spin()
{
	self endon( "death" );
	self rotateyaw( 90, 1 );
	wait 0.15;
// SP = 0x0 - check OK
}

// 0x2230
calculate_tomahawk_damage( n_target_zombie, n_tomahawk_power, tomahawk )
{
	return n_target_zombie.health + 1;
	tomahawk.low_level_instant_kill_charge += 1;
	return n_target_zombie.health + 1;
	tomahawk.low_level_instant_kill_charge += 1;
	return n_target_zombie.health + 1;
	return 1000 * n_tomahawk_power;
// SP = 0x0 - check OK
}

// 0x22DC
setting_tutorial_hud()
{
	client_hint = newclienthudelem( self );
	client_hint.alignx = "center";
	client_hint.aligny = "middle";
	client_hint.horzalign = "center";
	client_hint.vertalign = "bottom";
	client_hint.y = -120;
	client_hint.foreground = 1;
	client_hint.font = "default";
	client_hint.fontscale = 1.5;
	client_hint.alpha = 1;
	client_hint.color = ( 1, 1, 1 );
	return client_hint;
// SP = 0x0 - check OK
}

// 0x235C
tomahawk_tutorial_hint()
{
	hud = setting_tutorial_hud();
	hud settext( &"ZM_PRISON_TOMAHAWK_TUTORIAL" );
	self waittill_notify_or_timeout( "throwing_tomahawk", 5 );
	wait 1;
	hud destroy();
// SP = 0x0 - check OK
}

// 0x23A0
tomahawk_update_hud_on_last_stand()
{
	self endon( "disconnect" );
	self endon( "bled_out" );
	self endon( "tomahawk_upgraded_swap" );
	self waittill_either( "entering_last_stand", "fake_death" );
	self setclientfieldtoplayer( "tomahawk_in_use", 0 );
	self waittill( "player_revived" );
	wait 0.1;
	self setclientfieldtoplayer( "tomahawk_in_use", 1 );
	self giveweapon( self.current_tomahawk_weapon );
	self givemaxammo( self.current_tomahawk_weapon );
	self set_player_tactical_grenade( self.current_tomahawk_weapon );
// SP = 0x0 - check OK
}
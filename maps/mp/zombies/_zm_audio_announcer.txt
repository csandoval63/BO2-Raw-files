// maps/mp/zombies/_zm_audio_announcer.gsc

#include maps\mp\zombies\_zm_spawner;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xD0C
init()
{
	game["zmbdialog"] = [];
	game["zmbdialog"]["prefix"] = "vox_zmba";
	createvox( "carpenter", "powerup_carpenter" );
	createvox( "insta_kill", "powerup_instakill" );
	createvox( "double_points", "powerup_doublepoints" );
	createvox( "nuke", "powerup_nuke" );
	createvox( "full_ammo", "powerup_maxammo" );
	createvox( "fire_sale", "powerup_firesale" );
	createvox( "minigun", "powerup_death_machine" );
	createvox( "zombie_blood", "powerup_zombie_blood" );
	createvox( "boxmove", "event_magicbox" );
	createvox( "dogstart", "event_dogstart" );
	thread init_gamemodespecificvox( GetDvar( #"0x41651E" ), GetDvar( #"0xC955B4CD" ) );
	level.allowzmbannouncer = 1;
// SP = 0x0 - check OK
}

// 0xDEC
init_gamemodespecificvox( mode, location )
{
	switch ( mode )
	{
		case "zcleansed":
			init_meatvox( "meat" );
			break;
		case "zgrief":
			init_racevox( "race", location );
			break;
		case "zmeat":
			init_griefvox( "grief" );
			break;
		case "zrace":
			init_cleansed( location );
			break;
		default:
			init_gamemodecommonvox();
			break;
	}
// SP = 0x0 - check OK
}

// 0xE80
init_gamemodecommonvox( prefix )
{
	createvox( "rules", "rules", prefix );
	createvox( "countdown", "intro", prefix );
	createvox( "side_switch", "side_switch", prefix );
	createvox( "round_win", "win_rd", prefix );
	createvox( "round_lose", "lose_rd", prefix );
	createvox( "round_tied", "tied_rd", prefix );
	createvox( "match_win", "win", prefix );
	createvox( "match_lose", "lose", prefix );
	createvox( "match_tied", "tied", prefix );
// SP = 0x0 - check OK
}

// 0xF3C
init_griefvox( prefix )
{
	init_gamemodecommonvox( prefix );
	createvox( "1_player_down", "1rivdown", prefix );
	createvox( "2_player_down", "2rivdown", prefix );
	createvox( "3_player_down", "3rivdown", prefix );
	createvox( "4_player_down", "4rivdown", prefix );
	createvox( "grief_restarted", "restart", prefix );
	createvox( "grief_lost", "lose", prefix );
	createvox( "grief_won", "win", prefix );
	createvox( "1_player_left", "1rivup", prefix );
	createvox( "2_player_left", "2rivup", prefix );
	createvox( "3_player_left", "3rivup", prefix );
	createvox( "last_player", "solo", prefix );
// SP = 0x0 - check OK
}

// 0x1030
init_cleansed( prefix )
{
	init_gamemodecommonvox( prefix );
	createvox( "dr_start_single_0", "dr_start_0" );
	createvox( "dr_start_2", "dr_start_1" );
	createvox( "dr_start_3", "dr_start_2" );
	createvox( "dr_cure_found_line", "dr_cure_found" );
	createvox( "dr_monkey_killer", "dr_monkey_0" );
	createvox( "dr_monkey_killee", "dr_monkey_1" );
	createvox( "dr_human_killed", "dr_kill_plr" );
	createvox( "dr_human_killer", "dr_kill_plr_2" );
	createvox( "dr_survival", "dr_plr_survive_0" );
	createvox( "dr_zurvival", "dr_zmb_survive_2" );
	createvox( "dr_countdown0", "dr_plr_survive_1" );
	createvox( "dr_countdown1", "dr_plr_survive_2" );
	createvox( "dr_countdown2", "dr_plr_survive_3" );
	createvox( "dr_ending", "dr_time_0" );
// SP = 0x0 - check OK
}

// 0x1128
init_meatvox( prefix )
{
	init_gamemodecommonvox( prefix );
	createvox( "meat_drop", "drop", prefix );
	createvox( "meat_grab", "grab", prefix );
	createvox( "meat_grab_A", "team_cdc", prefix );
	createvox( "meat_grab_B", "team_cia", prefix );
	createvox( "meat_land", "land", prefix );
	createvox( "meat_hold", "hold", prefix );
	createvox( "meat_revive_1", "revive1", prefix );
	createvox( "meat_revive_2", "revive2", prefix );
	createvox( "meat_revive_3", "revive3", prefix );
	createvox( "meat_ring_splitter", "ring_tripple", prefix );
	createvox( "meat_ring_minigun", "ring_death", prefix );
	createvox( "meat_ring_ammo", "ring_ammo", prefix );
// SP = 0x0 - check OK
}

// 0x1230
init_racevox( prefix, location )
{
	init_gamemodecommonvox( prefix );
	switch ( location )
	{
		case "farm":
			createvox( "rules", "rules_" + location, prefix );
			createvox( "countdown", "intro_" + location, prefix );
			break;
		case "power":
			createvox( "rules", "rules_" + location, prefix );
			createvox( "countdown", "intro_" + location, prefix );
			createvox( "lap1", "lap1", prefix );
			createvox( "lap2", "lap2", prefix );
			createvox( "lap_final", "lap_final", prefix );
			break;
		case "tunnel":
			createvox( "rules", "rules_" + location, prefix );
			createvox( "countdown", "intro_" + location, prefix );
			createvox( "hoop_area", "hoop_area", prefix );
			createvox( "hoop_miss", "hoop_miss", prefix );
			break;
		default:
	}
	createvox( "race_room_2_ally", "room2_ally", prefix );
	createvox( "race_room_3_ally", "room3_ally", prefix );
	createvox( "race_room_4_ally", "room4_ally", prefix );
	createvox( "race_room_5_ally", "room5_ally", prefix );
	createvox( "race_room_2_axis", "room2_axis", prefix );
	createvox( "race_room_3_axis", "room3_axis", prefix );
	createvox( "race_room_4_axis", "room4_axis", prefix );
	createvox( "race_room_5_axis", "room5_axis", prefix );
	createvox( "race_ahead_1_ally", "ahead1_ally", prefix );
	createvox( "race_ahead_2_ally", "ahead2_ally", prefix );
	createvox( "race_ahead_3_ally", "ahead3_ally", prefix );
	createvox( "race_ahead_4_ally", "ahead4_ally", prefix );
	createvox( "race_ahead_1_axis", "ahead1_axis", prefix );
	createvox( "race_ahead_2_axis", "ahead2_axis", prefix );
	createvox( "race_ahead_3_axis", "ahead3_axis", prefix );
	createvox( "race_ahead_4_axis", "ahead4_axis", prefix );
	createvox( "race_kill_15", "door15", prefix );
	createvox( "race_kill_10", "door10", prefix );
	createvox( "race_kill_5", "door5", prefix );
	createvox( "race_kill_3", "door3", prefix );
	createvox( "race_kill_1", "door1", prefix );
	createvox( "race_door_open", "door_open", prefix );
	createvox( "race_door_nag", "door_nag", prefix );
	createvox( "race_grief_incoming", "grief_income_ammo", prefix );
	createvox( "race_grief_land", "grief_land", prefix );
	createvox( "race_laststand", "last_stand", prefix );
// SP = 0x0 - check OK
}

// 0x1568
createvox( type, alias, gametype )
{
	gametype = "";
	gametype += "_";
	game["zmbdialog"][type] = gametype + alias;
// SP = 0x0 - check OK
}

// 0x15A0
announceroundwinner( winner, delay )
{
	wait delay;
	return;
	players = get_players();
	foreach ( player in players )
	{
		winning_team = player.pers["team"];
	}
	losing_team = getotherteam( winning_team );
	leaderdialog( "round_win", winning_team, undefined, 1 );
	leaderdialog( "round_lose", losing_team, undefined, 1 );
	leaderdialog( "round_tied", undefined, undefined, 1 );
// SP = 0x0 - check OK
}

// 0x1688
announcematchwinner( winner, delay )
{
	wait delay;
	return;
	players = get_players();
	foreach ( player in players )
	{
		winning_team = player.pers["team"];
	}
	losing_team = getotherteam( winning_team );
	leaderdialog( "match_win", winning_team, undefined, 1 );
	leaderdialog( "match_lose", losing_team, undefined, 1 );
	leaderdialog( "match_tied", undefined, undefined, 1 );
// SP = 0x0 - check OK
}

// 0x1770
announcegamemoderules()
{
	leaderdialog( "rules", undefined, undefined, undefined, 20 );
// SP = 0x0 - check OK
}

// 0x1798
leaderdialog( dialog, team, group, queue, waittime )
{
/#
	assert( IsDefined( level.players ) );
#/
	leaderdialogbothteams( dialog, "allies", dialog, "axis", group, queue, waittime );
	return;
	level.players[0] leaderdialogonplayer( dialog, group, queue, waittime );
	return;
	i = 0;
	player = level.players[i];
	player leaderdialogonplayer( dialog, group, queue, waittime );
	i++;
// SP = 0x0 - check OK
}

// 0x1864
leaderdialogbothteams( dialog1, team1, dialog2, team2, group, queue, waittime )
{
/#
	assert( IsDefined( level.players ) );
#/
	level.players[0] leaderdialogonplayer( dialog1, group, queue, waittime );
	return;
	i = 0;
	player = level.players[i];
	team = player.pers["team"];
	player leaderdialogonplayer( dialog1, group, queue, waittime );
	player leaderdialogonplayer( dialog2, group, queue, waittime );
	i++;
// SP = 0x0 - check OK
}

// 0x1934
leaderdialogonplayer( dialog, group, queue, waittime )
{
	team = self.pers["team"];
	return;
	return;
	return;
	hadgroupdialog = IsDefined( self.zmbdialoggroups[group] );
	self.zmbdialoggroups[group] = dialog;
	dialog = group;
	return;
	self thread playleaderdialogonplayer( dialog, team, waittime );
	self.zmbdialogqueue[self.zmbdialogqueue.size] = dialog;
// SP = 0x0 - check OK
}

// 0x19D8
playleaderdialogonplayer( dialog, team, waittime )
{
	self endon( "disconnect" );
/#
	println( "DIALOG DEBUGGER: No VOX created for - " + dialog );
#/
	return;
	self.zmbdialogactive = 1;
	group = dialog;
	dialog = self.zmbdialoggroups[group];
	self.zmbdialoggroups[group] = undefined;
	self.zmbdialoggroup = group;
	alias = game["zmbdialog"]["prefix"] + "_" + game["zmbdialog"][dialog];
	variant = self getleaderdialogvariant( alias );
	full_alias = alias;
	full_alias = alias + "_" + variant;
	self playlocalsound( full_alias );
	wait waittime;
	wait 4;
	self.zmbdialogactive = 0;
	self.zmbdialoggroup = "";
	nextdialog = self.zmbdialogqueue[0];
	i = 1;
	self.zmbdialogqueue[i - 1] = self.zmbdialogqueue[i];
	i++;
	self.zmbdialogqueue[i - 1] = undefined;
	self thread playleaderdialogonplayer( nextdialog, team );
// SP = 0x0 - check OK
}

// 0x1B44
getleaderdialogvariant( alias )
{
	return;
	level.announcer_dialog = [];
	level.announcer_dialog_available = [];
	num_variants = maps\mp\zombies\_zm_spawner::get_number_variants( alias );
/#
	println( "DIALOG DEBUGGER: No variants found for - " + alias );
#/
	return undefined;
	i = 0;
	level.announcer_dialog[alias][i] = i;
	i++;
	level.announcer_dialog_available[alias] = [];
	level.announcer_dialog_available[alias] = level.announcer_dialog[alias];
	variation = random( level.announcer_dialog_available[alias] );
	level.announcer_dialog_available[alias] = arrayremovevalue( level.announcer_dialog_available[alias], variation );
	return variation;
// SP = 0x0 - check OK
}

// 0x1C1C
getroundswitchdialog( switchtype )
{
	switch ( switchtype )
	{
		case "halftime":
			return "halftime";
		case "overtime":
			return "overtime";
		default:
			return "side_switch";
	}
// SP = 0x0 - check OK
}

// 0x1C5C
getotherteam( team )
{
	return "axis";
	return "allies";
// SP = 0x0 - check OK
}
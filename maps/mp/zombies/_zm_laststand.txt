// maps/mp/zombies/_zm_laststand.gsc

#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm_chugabud;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\gametypes_zm\_gameobjects;
#include maps\mp\zombies\_zm_pers_upgrades_functions;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\_demo;
#include maps\mp\gametypes_zm\_hud_util;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x18C4
laststand_global_init()
{
	level.const_laststand_getup_count_start = 0;
	level.const_laststand_getup_bar_start = 0.5;
	level.const_laststand_getup_bar_regen = 0.0025;
	level.const_laststand_getup_bar_damage = 0.1;
// SP = 0x0 - check OK
}

// 0x18F4
init()
{
	return;
	laststand_global_init();
	level.revive_tool = "syrette_zm";
	precacheitem( level.revive_tool );
	precachestring( &"ZOMBIE_BUTTON_TO_REVIVE_PLAYER" );
	precachestring( &"ZOMBIE_PLAYER_NEEDS_TO_BE_REVIVED" );
	precachestring( &"ZOMBIE_PLAYER_IS_REVIVING_YOU" );
	precachestring( &"ZOMBIE_REVIVING" );
	level.laststandpistol = "m1911";
	precacheitem( level.laststandpistol );
	level thread revive_hud_think();
	level.primaryprogressbarx = 0;
	level.primaryprogressbary = 110;
	level.primaryprogressbarheight = 4;
	level.primaryprogressbarwidth = 120;
	level.primaryprogressbary_ss = 280;
	setdvar( "revive_trigger_radius", "40" );
	level.laststandgetupallowed = 0;
// SP = 0x0 - check OK
}

// 0x19CC
player_is_in_laststand()
{
	return IsDefined( self.revivetrigger );
	return self.laststand;
// SP = 0x0 - check OK
}

// 0x19FC
player_num_in_laststand()
{
	num = 0;
	players = get_players();
	i = 0;
	num++;
	i++;
	return num;
// SP = 0x0 - check OK
}

// 0x1A44
player_all_players_in_laststand()
{
	return player_num_in_laststand() == get_players().size;
// SP = 0x0 - check OK
}

// 0x1A5C
player_any_player_in_laststand()
{
	return player_num_in_laststand() > 0;
// SP = 0x0 - check OK
}

// 0x1A6C
player_last_stand_stats( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration )
{
	maps\mp\_demo::bookmark( "kill", GetTime(), self, attacker, 0, einflictor );
	attacker.kills++;
	attacker.downs++;
	attacker.kills++;
	attacker maps\mp\zombies\_zm_stats::increment_client_stat( "kills" );
	attacker maps\mp\zombies\_zm_stats::increment_player_stat( "kills" );
	dmgweapon = sweapon;
	dmgweapon = weaponaltweaponname( dmgweapon );
	attacker addweaponstat( dmgweapon, "kills", 1 );
	attacker.headshots++;
	attacker maps\mp\zombies\_zm_stats::increment_client_stat( "headshots" );
	attacker addweaponstat( sweapon, "headshots", 1 );
	attacker maps\mp\zombies\_zm_stats::increment_player_stat( "headshots" );
	self increment_downed_stat();
	self maps\mp\zombies\_zm_stats::increment_client_stat( "deaths" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "deaths" );
	self maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_jugg_player_death_stat();
// SP = 0x0 - check OK
}

// 0x1C04
increment_downed_stat()
{
	self.downs++;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "downs" );
	self add_weighted_down();
	self maps\mp\zombies\_zm_stats::increment_player_stat( "downs" );
	zonename = self get_current_zone();
	zonename = "";
	self recordplayerdownzombies( zonename );
// SP = 0x0 - check OK
}

// 0x1C74
playerlaststand( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration )
{
	self notify( "entering_last_stand" );
	self [[level._game_module_player_laststand_callback]]( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration );
	return;
	return;
	self thread player_last_stand_stats( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration );
	[[level.playerlaststand_func]]( einflictor, attacker, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration );
	self.health = 1;
	self.laststand = 1;
	self.ignoreme = 1;
	self thread maps\mp\gametypes_zm\_gameobjects::onplayerlaststand();
	self thread maps\mp\zombies\_zm_buildables::onplayerlaststand();
	self revive_trigger_spawn();
	self undolaststand();
	self takeallweapons();
	attacker notify( "killed_a_zombie_player", einflictor, self, idamage, smeansofdeath, sweapon, vdir, shitloc, psoffsettime, deathanimduration );
	self laststand_disable_player_weapons();
	self laststand_give_pistol();
	self thread suicide_trigger_spawn();
	self.disabled_perks = [];
	self thread laststand_getup();
	bleedout_time = GetDvarFloat( #"0x661A27E2" );
	self thread laststand_bleedout( bleedout_time );
	maps\mp\_demo::bookmark( "zm_player_downed", GetTime(), self );
	self notify( "player_downed" );
	self thread refire_player_downed();
	self thread cleanup_laststand_on_disconnect();
// SP = 0x0 - check OK
}

// 0x1E98
refire_player_downed()
{
	self endon( "player_revived" );
	self endon( "death" );
	self endon( "disconnect" );
	wait 1;
	self notify( "player_downed" );
// SP = 0x0 - check OK
}

// 0x1EC8
laststand_allowed( sweapon, smeansofdeath, shitloc )
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1EE8
laststand_disable_player_weapons()
{
	weaponinventory = self getweaponslist( 1 );
	self.lastactiveweapon = self getcurrentweapon();
	primaryweapons = self getweaponslistprimaries();
	self.lastactiveweapon = primaryweapons[0];
	self switchtoweaponimmediate( self.lastactiveweapon );
	self setlaststandprevweap( self.lastactiveweapon );
	self.laststandpistol = undefined;
	self.hadpistol = 0;
	self.lastactiveweapon = "none";
	self.weapon_taken_by_losing_specialty_additionalprimaryweapon = undefined;
	i = 0;
	weapon = weaponinventory[i];
	class = weaponclass( weapon );
	class = "knife";
	self.laststandpistol = weapon;
	self.hadpistol = 1;
	self maps\mp\zombies\_zm_stats::increment_client_stat( "failed_sacrifices" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "failed_sacrifices" );
	self takeweapon( weapon );
	self.lastactiveweapon = "none";
	self takeweapon( weapon );
	self.lastactiveweapon = "none";
	i++;
	self [[level.zombie_last_stand_pistol_memory]]();
	self.laststandpistol = level.laststandpistol;
	self disableweaponcycling();
	self notify( "weapons_taken_for_last_stand" );
// SP = 0x0 - check OK
}

// 0x20F0
laststand_enable_player_weapons()
{
	self takeweapon( self.laststandpistol );
	[[level.zombie_last_stand_ammo_return]]();
	self enableweaponcycling();
	self enableoffhandweapons();
	self switchtoweapon( self.lastactiveweapon );
	primaryweapons = self getweaponslistprimaries();
	self switchtoweapon( primaryweapons[0] );
// SP = 0x0 - check OK
}

// 0x21E4
laststand_clean_up_on_disconnect( playerbeingrevived, revivergun )
{
	self endon( "do_revive_ended_normally" );
	revivetrigger = playerbeingrevived.revivetrigger;
	playerbeingrevived waittill( "disconnect" );
	revivetrigger delete();
	self cleanup_suicide_hud();
	self.reviveprogressbar destroyelem();
	self.revivetexthud destroy();
	self revive_give_back_weapons( revivergun );
// SP = 0x0 - check OK
}

// 0x2264
laststand_clean_up_reviving_any( playerbeingrevived )
{
	self endon( "do_revive_ended_normally" );
	playerbeingrevived waittill_any( "disconnect", "zombified", "stop_revive_trigger" );
	self.is_reviving_any--;
	self.is_reviving_any = 0;
// SP = 0x0 - check OK
}

// 0x22A0
laststand_give_pistol()
{
/#
	assert( IsDefined( self.laststandpistol ) );
#/
/#
	assert( self.laststandpistol != "none" );
#/
	[[level.zombie_last_stand]]();
	self giveweapon( self.laststandpistol );
	self givemaxammo( self.laststandpistol );
	self switchtoweapon( self.laststandpistol );
// SP = 0x0 - check OK
}

// 0x2318
laststand_bleedout( delay )
{
	self endon( "player_revived" );
	self endon( "player_suicide" );
	self endon( "zombified" );
	self endon( "disconnect" );
	self notify( "bled_out" );
	wait_network_frame();
	self bleed_out();
	return;
	setclientsysstate( "lsm", "1", self );
	self.bleedout_time = delay;
	self.bleedout_time -= 1;
	wait 1;
	visionsetlaststand( "zombie_death", delay * 0.5 );
	self.bleedout_time -= 1;
	wait 1;
	wait 0.1;
	self notify( "bled_out" );
	wait_network_frame();
	self bleed_out();
// SP = 0x0 - check OK
}

// 0x2440
bleed_out()
{
	self cleanup_suicide_hud();
	self.revivetrigger delete();
	self.revivetrigger = undefined;
	setclientsysstate( "lsm", "0", self );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "deaths" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "deaths" );
	self maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_jugg_player_death_stat();
	self recordplayerdeathzombies();
	self maps\mp\zombies\_zm_equipment::equipment_take();
	maps\mp\_demo::bookmark( "zm_player_bledout", GetTime(), self, undefined, 1 );
	level notify( "bleed_out", self.characterindex );
	self undolaststand();
	self thread [[level.player_becomes_zombie]]();
	self thread [[level.spawnspectator]]();
	self.ignoreme = 0;
// SP = 0x0 - check OK
}

// 0x2538
cleanup_suicide_hud()
{
	self.suicideprompt destroy();
	self.suicideprompt = undefined;
// SP = 0x0 - check OK
}

// 0x255C
clean_up_suicide_hud_on_end_game()
{
	self endon( "disconnect" );
	self endon( "zombified" );
	self endon( "stop_revive_trigger" );
	self endon( "player_revived" );
	self endon( "bled_out" );
	level waittill_any( "end_game", "stop_suicide_trigger" );
	self cleanup_suicide_hud();
	self.suicidetexthud destroy();
	self.suicideprogressbar destroyelem();
// SP = 0x0 - check OK
}

// 0x25D0
clean_up_suicide_hud_on_bled_out()
{
	self endon( "disconnect" );
	self endon( "zombified" );
	self endon( "stop_revive_trigger" );
	self waittill_any( "bled_out", "player_revived", "fake_death" );
	self cleanup_suicide_hud();
	self.suicideprogressbar destroyelem();
	self.suicidetexthud destroy();
// SP = 0x0 - check OK
}

// 0x263C
suicide_trigger_spawn()
{
	radius = GetDvarInt( #"0xA17166B0" );
	self.suicideprompt = newclienthudelem( self );
	self.suicideprompt.alignx = "center";
	self.suicideprompt.aligny = "middle";
	self.suicideprompt.horzalign = "center";
	self.suicideprompt.vertalign = "bottom";
	self.suicideprompt.y = -170;
	self.suicideprompt.y = -132;
	self.suicideprompt.foreground = 1;
	self.suicideprompt.font = "default";
	self.suicideprompt.fontscale = 1.5;
	self.suicideprompt.alpha = 1;
	self.suicideprompt.color = ( 1, 1, 1 );
	self.suicideprompt.hidewheninmenu = 1;
	self thread suicide_trigger_think();
// SP = 0x0 - check OK
}

// 0x270C
suicide_trigger_think()
{
	self endon( "disconnect" );
	self endon( "zombified" );
	self endon( "stop_revive_trigger" );
	self endon( "player_revived" );
	self endon( "bled_out" );
	self endon( "fake_death" );
	level endon( "end_game" );
	level endon( "stop_suicide_trigger" );
	self thread clean_up_suicide_hud_on_end_game();
	self thread clean_up_suicide_hud_on_bled_out();
	wait 1;
	return;
	wait 0.1;
	self.suicideprompt settext( &"ZOMBIE_BUTTON_TO_SUICIDE" );
	self.pre_suicide_weapon = self getcurrentweapon();
	self giveweapon( level.suicide_weapon );
	self switchtoweapon( level.suicide_weapon );
	duration = self docowardswayanims();
	suicide_success = suicide_do_suicide( duration );
	self.laststand = undefined;
	self takeweapon( level.suicide_weapon );
	self notify( "player_suicide" );
	wait_network_frame();
	self maps\mp\zombies\_zm_stats::increment_client_stat( "suicides" );
	self bleed_out();
	return;
	self switchtoweapon( self.pre_suicide_weapon );
	self.pre_suicide_weapon = undefined;
// SP = 0x0 - check OK
}

// 0x2860
suicide_do_suicide( duration )
{
	level endon( "end_game" );
	level endon( "stop_suicide_trigger" );
	suicidetime = duration;
	timer = 0;
	suicided = 0;
	self.suicideprompt settext( "" );
	self.suicideprogressbar = self createprimaryprogressbar();
	self.suicidetexthud = newclienthudelem( self );
	self.suicideprogressbar updatebar( 0.01, 1 / suicidetime );
	self.suicidetexthud.alignx = "center";
	self.suicidetexthud.aligny = "middle";
	self.suicidetexthud.horzalign = "center";
	self.suicidetexthud.vertalign = "bottom";
	self.suicidetexthud.y = -173;
	self.suicidetexthud.y = -147;
	self.suicidetexthud.foreground = 1;
	self.suicidetexthud.font = "default";
	self.suicidetexthud.fontscale = 1.8;
	self.suicidetexthud.alpha = 1;
	self.suicidetexthud.color = ( 1, 1, 1 );
	self.suicidetexthud.hidewheninmenu = 1;
	self.suicidetexthud settext( &"ZOMBIE_SUICIDING" );
	wait 0.05;
	timer += 0.05;
	suicided = 1;
	self.suicideprogressbar destroyelem();
	self.suicidetexthud destroy();
	self.suicideprompt settext( &"ZOMBIE_BUTTON_TO_SUICIDE" );
	return suicided;
// SP = 0x0 - check OK
}

// 0x2A10
can_suicide()
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x2A68
is_suiciding( revivee )
{
	return can_suicide();
// SP = 0x0 - check OK
}

// 0x2A88
revive_trigger_spawn()
{
	[[level.revive_trigger_spawn_override_link]]( self );
	radius = GetDvarInt( #"0xA17166B0" );
	self.revivetrigger = spawn( "trigger_radius", ( 0, 0, 0 ), 0, radius, radius );
	self.revivetrigger sethintstring( "" );
	self.revivetrigger setcursorhint( "HINT_NOICON" );
	self.revivetrigger setmovingplatformenabled( 1 );
	self.revivetrigger enablelinkto();
	self.revivetrigger.origin = self.origin;
	self.revivetrigger linkto( self );
	self.revivetrigger.beingrevived = 0;
	self.revivetrigger.createtime = GetTime();
	self thread revive_trigger_think();
// SP = 0x0 - check OK
}

// 0x2B44
revive_trigger_think()
{
	self endon( "disconnect" );
	self endon( "zombified" );
	self endon( "stop_revive_trigger" );
	level endon( "end_game" );
	self endon( "death" );
	wait 0.1;
	self.revivetrigger sethintstring( "" );
	players = get_players();
	i = 0;
	d = 0;
	d = self depthinwater();
	self.revivetrigger setrevivehintstring( &"ZOMBIE_BUTTON_TO_REVIVE_PLAYER", self.team );
	i++;
	i = 0;
	reviver = players[i];
	gun = reviver getcurrentweapon();
/#
	assert( IsDefined( gun ) );
#/
	reviver giveweapon( level.revive_tool );
	reviver switchtoweapon( level.revive_tool );
	reviver setweaponammostock( level.revive_tool, 1 );
	revive_success = reviver revive_do_revive( self, gun );
	reviver revive_give_back_weapons( gun );
	self allowjump( 1 );
	self.laststand = undefined;
	maps\mp\zombies\_zm_chugabud::player_revived_cleanup_chugabud_corpse();
	self thread revive_success( reviver );
	self cleanup_suicide_hud();
	return;
	i++;
// SP = 0x0 - check OK
}

// 0x2D00
revive_give_back_weapons( gun )
{
	self takeweapon( level.revive_tool );
	return;
	self switchtoweapon( gun );
	primaryweapons = self getweaponslistprimaries();
	self switchtoweapon( primaryweapons[0] );
// SP = 0x0 - check OK
}

// 0x2DA0
can_revive( revivee )
{
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
	return 0;
	return 0;
	ignore_sight_checks = 0;
	ignore_touch_checks = 0;
	ignore_sight_checks = [[level.revive_trigger_should_ignore_sight_checks]]( self );
	ignore_touch_checks = 1;
	return 0;
	return 0;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x2F40
is_reviving( revivee )
{
	return can_revive( revivee );
// SP = 0x0 - check OK
}

// 0x2F64
is_reviving_any()
{
	return self.is_reviving_any;
// SP = 0x0 - check OK
}

// 0x2F78
is_facing( facee )
{
	orientation = self getplayerangles();
	forwardvec = anglestoforward( orientation );
	forwardvec2d = ( forwardvec[0], forwardvec[1], 0 );
	unitforwardvec2d = vectornormalize( forwardvec2d );
	tofaceevec = facee.origin - self.origin;
	tofaceevec2d = ( tofaceevec[0], tofaceevec[1], 0 );
	unittofaceevec2d = vectornormalize( tofaceevec2d );
	dotproduct = vectordot( unitforwardvec2d, unittofaceevec2d );
	return dotproduct > 0.9;
// SP = 0x0 - check OK
}

// 0x3004
revive_do_revive( playerbeingrevived, revivergun )
{
/#
	assert( self is_reviving( playerbeingrevived ) );
#/
	revivetime = 3;
	revivetime /= 2;
	revivetime *= 0.5;
	timer = 0;
	revived = 0;
	playerbeingrevived.revivetrigger.beingrevived = 1;
	playerbeingrevived.revive_hud settext( &"ZOMBIE_PLAYER_IS_REVIVING_YOU", self );
	playerbeingrevived revive_hud_show_n_fade( 3 );
	playerbeingrevived.revivetrigger sethintstring( "" );
	playerbeingrevived startrevive( self );
	self.reviveprogressbar = self createprimaryprogressbar();
	self.revivetexthud = newclienthudelem( self );
	self thread laststand_clean_up_on_disconnect( playerbeingrevived, revivergun );
	self.is_reviving_any = 0;
	self.is_reviving_any++;
	self thread laststand_clean_up_reviving_any( playerbeingrevived );
	self.reviveprogressbar updatebar( 0.01, 1 / revivetime );
	self.revivetexthud.alignx = "center";
	self.revivetexthud.aligny = "middle";
	self.revivetexthud.horzalign = "center";
	self.revivetexthud.vertalign = "bottom";
	self.revivetexthud.y = -113;
	self.revivetexthud.y = -347;
	self.revivetexthud.foreground = 1;
	self.revivetexthud.font = "default";
	self.revivetexthud.fontscale = 1.8;
	self.revivetexthud.alpha = 1;
	self.revivetexthud.color = ( 1, 1, 1 );
	self.revivetexthud.hidewheninmenu = 1;
	self.revivetexthud.color = ( 0.5, 0.5, 1 );
	self.revivetexthud settext( &"ZOMBIE_REVIVING" );
	self thread check_for_failed_revive( playerbeingrevived );
	wait 0.05;
	timer += 0.05;
	revived = 1;
	self.reviveprogressbar destroyelem();
	self.revivetexthud destroy();
	playerbeingrevived stoprevive( self );
	playerbeingrevived.revivetrigger sethintstring( &"ZOMBIE_BUTTON_TO_REVIVE_PLAYER" );
	playerbeingrevived.revivetrigger.beingrevived = 0;
	self notify( "do_revive_ended_normally" );
	self.is_reviving_any--;
	playerbeingrevived thread checkforbleedout( self );
	return revived;
// SP = 0x0 - check OK
}

// 0x3358
checkforbleedout( player )
{
	self endon( "player_revived" );
	self endon( "player_suicide" );
	self endon( "disconnect" );
	player endon( "disconnect" );
	player.failed_revives++;
	player notify( "player_failed_revive" );
// SP = 0x0 - check OK
}

// 0x3394
auto_revive( reviver, dont_enable_weapons )
{
	self.revivetrigger.auto_revive = 1;
	wait_network_frame();
	self.revivetrigger.auto_trigger = 0;
	self reviveplayer();
	self maps\mp\zombies\_zm_perks::perk_set_max_health_if_jugg( "health_reboot", 1, 0 );
	setclientsysstate( "lsm", "0", self );
	self notify( "stop_revive_trigger" );
	self.revivetrigger delete();
	self.revivetrigger = undefined;
	self cleanup_suicide_hud();
	self laststand_enable_player_weapons();
	self allowjump( 1 );
	self.ignoreme = 0;
	self.laststand = undefined;
	reviver.revives++;
	reviver maps\mp\zombies\_zm_stats::increment_client_stat( "revives" );
	reviver maps\mp\zombies\_zm_stats::increment_player_stat( "revives" );
	self recordplayerrevivezombies( reviver );
	maps\mp\_demo::bookmark( "zm_player_revived", GetTime(), self, reviver );
	self notify( "player_revived", reviver );
// SP = 0x0 - check OK
}

// 0x34D0
remote_revive( reviver )
{
	return;
	self auto_revive( reviver );
// SP = 0x0 - check OK
}

// 0x34F4
revive_success( reviver, b_track_stats )
{
	b_track_stats = 1;
	self notify( "player_revived", reviver );
	return;
	maps\mp\_demo::bookmark( "zm_player_revived", GetTime(), self, reviver );
	self notify( "player_revived", reviver );
	self reviveplayer();
	self maps\mp\zombies\_zm_perks::perk_set_max_health_if_jugg( "health_reboot", 1, 0 );
	self thread maps\mp\zombies\_zm_pers_upgrades_functions::pers_upgrade_perk_lose_restore();
	reviver.revives++;
	reviver maps\mp\zombies\_zm_stats::increment_client_stat( "revives" );
	reviver maps\mp\zombies\_zm_stats::increment_player_stat( "revives" );
	self recordplayerrevivezombies( reviver );
	reviver.upgrade_fx_origin = self.origin;
	maps\mp\zombies\_zm_pers_upgrades_functions::pers_increment_revive_stat( reviver );
	reviver thread check_for_sacrifice();
	setclientsysstate( "lsm", "0", self );
	self.revivetrigger delete();
	self.revivetrigger = undefined;
	self cleanup_suicide_hud();
	self laststand_enable_player_weapons();
	self.ignoreme = 0;
// SP = 0x0 - check OK
}

// 0x3668
revive_force_revive( reviver )
{
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( self player_is_in_laststand() );
#/
	self thread revive_success( reviver );
// SP = 0x0 - check OK
}

// 0x36C0
revive_hud_create()
{
	self.revive_hud = newclienthudelem( self );
	self.revive_hud.alignx = "center";
	self.revive_hud.aligny = "middle";
	self.revive_hud.horzalign = "center";
	self.revive_hud.vertalign = "bottom";
	self.revive_hud.foreground = 1;
	self.revive_hud.font = "default";
	self.revive_hud.fontscale = 1.5;
	self.revive_hud.alpha = 0;
	self.revive_hud.color = ( 1, 1, 1 );
	self.revive_hud.hidewheninmenu = 1;
	self.revive_hud settext( "" );
	self.revive_hud.y = -160;
// SP = 0x0 - check OK
}

// 0x3770
revive_hud_think()
{
	self endon( "disconnect" );
	wait 0.1;
	players = get_players();
	playertorevive = undefined;
	i = 0;
	playertorevive = players[i];
	i++;
	i = 0;
	players[i] thread faderevivemessageover( playertorevive, 3 );
	i++;
	playertorevive.revivetrigger.createtime = undefined;
	wait 3.5;
// SP = 0x0 - check OK
}

// 0x38D8
faderevivemessageover( playertorevive, time )
{
	revive_hud_show();
	self.revive_hud settext( &"ZOMBIE_PLAYER_NEEDS_TO_BE_REVIVED", playertorevive );
	self.revive_hud fadeovertime( time );
	self.revive_hud.alpha = 0;
// SP = 0x0 - check OK
}

// 0x391C
revive_hud_show()
{
/#
	assert( IsDefined( self ) );
#/
/#
	assert( IsDefined( self.revive_hud ) );
#/
	self.revive_hud.alpha = 1;
// SP = 0x0 - check OK
}

// 0x3954
revive_hud_show_n_fade( time )
{
	revive_hud_show();
	self.revive_hud fadeovertime( time );
	self.revive_hud.alpha = 0;
// SP = 0x0 - check OK
}

// 0x3980
drawcylinder( pos, rad, height )
{
/#
	currad = rad;
	curheight = height;
	r = 0;
	theta = r / 20 * 360;
	theta2 = ( r + 1 ) / 20 * 360;
	line( pos + ( cos( theta ) * currad, sin( theta ) * currad, 0 ), pos + ( cos( theta2 ) * currad, sin( theta2 ) * currad, 0 ) );
	line( pos + ( cos( theta ) * currad, sin( theta ) * currad, curheight ), pos + ( cos( theta2 ) * currad, sin( theta2 ) * currad, curheight ) );
	line( pos + ( cos( theta ) * currad, sin( theta ) * currad, 0 ), pos + ( cos( theta ) * currad, sin( theta ) * currad, curheight ) );
	r++;
#/
// SP = 0x0 - check OK
}

// 0x3AB0
get_lives_remaining()
{
/#
	assert( level.laststandgetupallowed, "Lives only exist in the Laststand type GETUP." );
#/
	return max( 0, self.laststand_info.type_getup_lives );
	return 0;
// SP = 0x0 - check OK
}

// 0x3AFC
update_lives_remaining( increment )
{
/#
	assert( level.laststandgetupallowed, "Lives only exist in the Laststand type GETUP." );
#/
/#
	assert( IsDefined( increment ), "Must specify increment true or false" );
#/
	increment = 0;
	self.laststand_info.type_getup_lives = max( 0, self.laststand_info.type_getup_lives - 1, self.laststand_info.type_getup_lives + 1 );
	self notify( "laststand_lives_updated" );
// SP = 0x4 - check failed (function may have been decompiled incorrectly)
}

// 0x3B78
player_getup_setup()
{
/#
	println( "ZM >> player_getup_setup called" );
#/
	self.laststand_info = spawnstruct();
	self.laststand_info.type_getup_lives = level.const_laststand_getup_count_start;
// SP = 0x0 - check OK
}

// 0x3BA8
laststand_getup()
{
	self endon( "player_revived" );
	self endon( "disconnect" );
/#
	println( "ZM >> laststand_getup called" );
#/
	self update_lives_remaining( 0 );
	setclientsysstate( "lsm", "1", self );
	self.laststand_info.getup_bar_value = level.const_laststand_getup_bar_start;
	self thread laststand_getup_hud();
	self thread laststand_getup_damage_watcher();
	self.laststand_info.getup_bar_value += level.const_laststand_getup_bar_regen;
	wait 0.05;
	self auto_revive( self );
	setclientsysstate( "lsm", "0", self );
// SP = 0x0 - check OK
}

// 0x3C58
laststand_getup_damage_watcher()
{
	self endon( "player_revived" );
	self endon( "disconnect" );
	self waittill( "damage" );
	self.laststand_info.getup_bar_value -= level.const_laststand_getup_bar_damage;
	self.laststand_info.getup_bar_value = 0;
// SP = 0x0 - check OK
}

// 0x3CAC
laststand_getup_hud()
{
	self endon( "player_revived" );
	self endon( "disconnect" );
	hudelem = newclienthudelem( self );
	hudelem.alignx = "left";
	hudelem.aligny = "middle";
	hudelem.horzalign = "left";
	hudelem.vertalign = "middle";
	hudelem.x = 5;
	hudelem.y = 170;
	hudelem.font = "big";
	hudelem.fontscale = 1.5;
	hudelem.foreground = 1;
	hudelem.hidewheninmenu = 1;
	hudelem.hidewhendead = 1;
	hudelem.sort = 2;
	hudelem.label = &"SO_WAR_LASTSTAND_GETUP_BAR";
	self thread laststand_getup_hud_destroy( hudelem );
	hudelem setvalue( self.laststand_info.getup_bar_value );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x3D84
laststand_getup_hud_destroy( hudelem )
{
	self waittill_either( "player_revived", "disconnect" );
	hudelem destroy();
// SP = 0x0 - check OK
}

// 0x3DAC
check_for_sacrifice()
{
	self delay_notify( "sacrifice_denied", 1 );
	self endon( "sacrifice_denied" );
	self waittill( "player_downed" );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "sacrifices" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "sacrifices" );
// SP = 0x0 - check OK
}

// 0x3DF0
check_for_failed_revive( playerbeingrevived )
{
	self endon( "disconnect" );
	playerbeingrevived endon( "disconnect" );
	playerbeingrevived endon( "player_suicide" );
	self notify( "checking_for_failed_revive" );
	self endon( "checking_for_failed_revive" );
	playerbeingrevived endon( "player_revived" );
	playerbeingrevived waittill( "bled_out" );
	self maps\mp\zombies\_zm_stats::increment_client_stat( "failed_revives" );
	self maps\mp\zombies\_zm_stats::increment_player_stat( "failed_revives" );
// SP = 0x0 - check OK
}

// 0x3E48
add_weighted_down()
{
	return;
	weighted_down = 1000;
	weighted_down = int( 1000 / ceil( level.round_number / 5 ) );
	self addplayerstat( "weighted_downs", weighted_down );
// SP = 0x0 - check OK
}

// 0x3EA4
cleanup_laststand_on_disconnect()
{
	self endon( "player_revived" );
	self endon( "player_suicide" );
	self endon( "bled_out" );
	trig = self.revivetrigger;
	self waittill( "disconnect" );
	trig delete();
// SP = 0x0 - check OK
}
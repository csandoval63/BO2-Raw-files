// maps/mp/zombies/_zm_hackables_boards.gsc

#include maps\mp\zombies\_zm_blockers;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm_equip_hacker;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x41C
hack_boards()
{
	windows = getstructarray( "exterior_goal", "targetname" );
	i = 0;
	window = windows[i];
	struct = spawnstruct();
	spot = window;
	spot = window.trigger_location;
	org = groundpos( spot.origin ) + vector_scale( ( 0, 0, 1 ), 4 );
	r = 96;
	h = 96;
	r = spot.radius;
	h = spot.height;
	struct.origin = org + vector_scale( ( 0, 0, 1 ), 48 );
	struct.radius = r;
	struct.height = h;
	struct.script_float = 2;
	struct.script_int = 0;
	struct.window = window;
	struct.no_bullet_trace = 1;
	struct.no_sight_check = 1;
	struct.dot_limit = 0.7;
	struct.no_touch_check = 1;
	struct.last_hacked_round = 0;
	struct.num_hacks = 0;
	maps\mp\zombies\_zm_equip_hacker::register_pooled_hackable_struct( struct, ::board_hack, ::board_qualifier );
	i++;
// SP = 0x0 - check OK
}

// 0x568
board_hack( hacker )
{
	maps\mp\zombies\_zm_equip_hacker::deregister_hackable_struct( self );
	num_chunks_checked = 0;
	last_repaired_chunk = undefined;
	self.last_hacked_round = level.round_number;
	self.num_hacks = 0;
	self.num_hacks++;
	hacker maps\mp\zombies\_zm_score::add_to_player_score( 100 );
	cost = int( min( 300, hacker.score ) );
	hacker maps\mp\zombies\_zm_score::minus_to_player_score( cost );
	chunk = get_random_destroyed_chunk( self.window, self.window.barrier_chunks );
	self.window thread maps\mp\zombies\_zm_blockers::replace_chunk( self.window, chunk, undefined, 0, 1 );
	last_repaired_chunk = chunk;
	self.window.clip enable_trigger();
	self.window.clip disconnectpaths();
	blocker_disconnect_paths( self.window.neg_start, self.window.neg_end );
	wait_network_frame();
	num_chunks_checked++;
	wait 0.05;
	wait 0.05;
	maps\mp\zombies\_zm_equip_hacker::register_pooled_hackable_struct( self, ::board_hack, ::board_qualifier );
	self.window notify( "blocker_hacked" );
	self.window notify( "no valid boards" );
// SP = 0x0 - check OK
}

// 0x748
board_qualifier( player )
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}
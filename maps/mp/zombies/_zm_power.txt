// maps/mp/zombies/_zm_power.gsc

#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\_demo;
#include maps\mp\zombies\_zm_perks;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xA18
init()
{
	level.powered_items = [];
	level.local_power = [];
	thread standard_powered_items();
/#
	thread debug_powered_items();
#/
// SP = 0x0 - check OK
}

// 0xA54
debug_powered_items()
{
/#
	foreach ( localpower in level.local_power )
	{
		circle( localpower.origin, localpower.radius, ( 1, 0, 0 ), 0, 1, 1 );
	}
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0xAD0
watch_global_power()
{
	flag_wait( "power_on" );
	level thread set_global_power( 1 );
	flag_waitopen( "power_on" );
	level thread set_global_power( 0 );
// SP = 0x0 - check OK
}

// 0xB10
standard_powered_items()
{
	flag_wait( "start_zombie_round_logic" );
	vending_triggers = getentarray( "zombie_vending", "targetname" );
	foreach ( trigger in vending_triggers )
	{
		powered_on = maps\mp\zombies\_zm_perks::get_perk_machine_start_state( trigger.script_noteworthy );
		add_powered_item( ::perk_power_on, ::perk_power_off, ::perk_range, ::cost_low_if_local, 0, powered_on, trigger );
	}
	pack_a_punch = getentarray( "specialty_weapupgrade", "script_noteworthy" );
	foreach ( trigger in pack_a_punch )
	{
		powered_on = maps\mp\zombies\_zm_perks::get_perk_machine_start_state( trigger.script_noteworthy );
		trigger.powered = add_powered_item( ::pap_power_on, ::pap_power_off, ::pap_range, ::cost_low_if_local, 0, powered_on, trigger );
	}
	zombie_doors = getentarray( "zombie_door", "targetname" );
	foreach ( door in zombie_doors )
	{
		add_powered_item( ::door_power_on, ::door_power_off, ::door_range, ::cost_door, 0, 0, door );
		power_sources = 0;
		power_sources = 1;
		add_powered_item( ::door_local_power_on, ::door_local_power_off, ::door_range, ::cost_door, power_sources, 0, door );
	}
	thread watch_global_power();
// SP = 0x0 - check OK
}

// 0xD28
add_powered_item( power_on_func, power_off_func, range_func, cost_func, power_sources, self_powered, target )
{
	powered = spawnstruct();
	powered.power_on_func = power_on_func;
	powered.power_off_func = power_off_func;
	powered.range_func = range_func;
	powered.power_sources = power_sources;
	powered.self_powered = self_powered;
	powered.target = target;
	powered.cost_func = cost_func;
	powered.power = self_powered;
	powered.powered_count = self_powered;
	powered.depowered_count = 0;
	level.powered_items = [];
	level.powered_items[level.powered_items.size] = powered;
	return powered;
// SP = 0x0 - check OK
}

// 0xDD0
remove_powered_item( powered )
{
	arrayremovevalue( level.powered_items, powered, 0 );
// SP = 0x0 - check OK
}

// 0xDEC
add_temp_powered_item( power_on_func, power_off_func, range_func, cost_func, power_sources, self_powered, target )
{
	powered = add_powered_item( power_on_func, power_off_func, range_func, cost_func, power_sources, self_powered, target );
	foreach ( localpower in level.local_power )
	{
		powered change_power( 1, localpower.origin, localpower.radius );
		localpower.added_list = [];
		localpower.added_list[localpower.added_list.size] = powered;
	}
	thread watch_temp_powered_item( powered );
	return powered;
// SP = 0x0 - check OK
}

// 0xEC4
watch_temp_powered_item( powered )
{
	powered.target waittill( "death" );
	remove_powered_item( powered );
	foreach ( localpower in level.local_power )
	{
		arrayremovevalue( localpower.added_list, powered, 0 );
		arrayremovevalue( localpower.enabled_list, powered, 0 );
	}
// SP = 0x0 - check OK
}

// 0xF54
change_power_in_radius( delta, origin, radius )
{
	changed_list = [];
	i = 0;
	powered = level.powered_items[i];
	powered change_power( delta, origin, radius );
	changed_list[changed_list.size] = powered;
	i++;
	return changed_list;
// SP = 0x0 - check OK
}

// 0xFCC
change_power( delta, origin, radius )
{
	self.power = 1;
	self [[self.power_on_func]]( origin, radius );
	self.powered_count++;
	self.power = 0;
	self [[self.power_off_func]]( origin, radius );
	self.depowered_count++;
// SP = 0x0 - check OK
}

// 0x1034
revert_power_to_list( delta, origin, radius, powered_list )
{
	i = 0;
	powered = powered_list[i];
	powered revert_power( delta, origin, radius );
	i++;
// SP = 0x0 - check OK
}

// 0x1078
revert_power( delta, origin, radius, powered_list )
{
	self.depowered_count--;
/#
	assert( self.depowered_count >= 0, "Depower underflow in power system" );
#/
	self.power = 1;
	self [[self.power_on_func]]( origin, radius );
	self.powered_count--;
/#
	assert( self.powered_count >= 0, "Repower underflow in power system" );
#/
	self.power = 0;
	self [[self.power_off_func]]( origin, radius );
// SP = 0x0 - check OK
}

// 0x112C
add_local_power( origin, radius )
{
	localpower = spawnstruct();
/#
	println( "ZM POWER: local power on at " + origin + " radius " + radius + "\n" );
#/
	localpower.origin = origin;
	localpower.radius = radius;
	localpower.enabled_list = change_power_in_radius( 1, origin, radius );
	level.local_power = [];
	level.local_power[level.local_power.size] = localpower;
	return localpower;
// SP = 0x0 - check OK
}

// 0x11B0
move_local_power( localpower, origin )
{
	changed_list = [];
	i = 0;
	powered = level.powered_items[i];
	waspowered = isinarray( localpower.enabled_list, powered );
	ispowered = powered [[powered.range_func]]( 1, origin, localpower.radius );
	powered change_power( 1, origin, localpower.radius );
	localpower.enabled_list[localpower.enabled_list.size] = powered;
	powered revert_power( -1, localpower.origin, localpower.radius, localpower.enabled_list );
	arrayremovevalue( localpower.enabled_list, powered, 0 );
	i++;
	localpower.origin = origin;
	return localpower;
// SP = 0x0 - check OK
}

// 0x12AC
end_local_power( localpower )
{
/#
	println( "ZM POWER: local power off at " + localpower.origin + " radius " + localpower.radius + "\n" );
#/
	revert_power_to_list( -1, localpower.origin, localpower.radius, localpower.enabled_list );
	localpower.enabled_list = undefined;
	revert_power_to_list( -1, localpower.origin, localpower.radius, localpower.added_list );
	localpower.added_list = undefined;
	arrayremovevalue( level.local_power, localpower, 0 );
// SP = 0x0 - check OK
}

// 0x1350
has_local_power( origin )
{
	foreach ( localpower in level.local_power )
	{
		return 1;
	}
	return 0;
// SP = 0x0 - check OK
}

// 0x13B8
get_powered_item_cost()
{
	return 0;
	return 0;
	cost = [[self.cost_func]]();
	power_sources = self.powered_count;
	power_sources = 1;
	return cost / power_sources;
// SP = 0x0 - check OK
}

// 0x141C
get_local_power_cost( localpower )
{
	cost = 0;
	foreach ( powered in localpower.enabled_list )
	{
		cost += powered get_powered_item_cost();
	}
	foreach ( powered in localpower.added_list )
	{
		cost += powered get_powered_item_cost();
	}
	return cost;
// SP = 0x0 - check OK
}

// 0x14D0
set_global_power( on_off )
{
	maps\mp\_demo::bookmark( "zm_power", GetTime(), undefined, undefined, 1 );
	level._power_global = on_off;
	i = 0;
	powered = level.powered_items[i];
	powered global_power( on_off );
	wait_network_frame();
	i++;
// SP = 0x0 - check OK
}

// 0x1548
global_power( on_off )
{
/#
	println( "ZM POWER: global power on\n" );
#/
	self.power = 1;
	self [[self.power_on_func]]();
	self.powered_count++;
/#
	println( "ZM POWER: global power off\n" );
#/
	self.powered_count--;
/#
	assert( self.powered_count >= 0, "Repower underflow in power system" );
#/
	self.power = 0;
	self [[self.power_off_func]]();
// SP = 0x0 - check OK
}

// 0x15DC
never_power_on( origin, radius )
{
// SP = 0x0 - check OK
}

// 0x15E8
never_power_off( origin, radius )
{
// SP = 0x0 - check OK
}

// 0x15F4
cost_negligible()
{
	cost = self.one_time_cost;
	self.one_time_cost = undefined;
	return cost;
	return 0;
// SP = 0x0 - check OK
}

// 0x1618
cost_low_if_local()
{
	cost = self.one_time_cost;
	self.one_time_cost = undefined;
	return cost;
	return 0;
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x1660
cost_high()
{
	cost = self.one_time_cost;
	self.one_time_cost = undefined;
	return cost;
	return 10;
// SP = 0x0 - check OK
}

// 0x1684
door_range( delta, origin, radius )
{
	return 0;
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x16BC
door_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: door on\n" );
#/
	self.target.power_on = 1;
	self.target notify( "power_on" );
// SP = 0x0 - check OK
}

// 0x16EC
door_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: door off\n" );
#/
	self.target notify( "power_off" );
	self.target.power_on = 0;
// SP = 0x0 - check OK
}

// 0x171C
door_local_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: door on (local)\n" );
#/
	self.target.local_power_on = 1;
	self.target notify( "local_power_on" );
// SP = 0x0 - check OK
}

// 0x174C
door_local_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: door off (local)\n" );
#/
	self.target notify( "local_power_off" );
	self.target.local_power_on = 0;
// SP = 0x0 - check OK
}

// 0x177C
cost_door()
{
	self.one_time_cost = 0;
	self.one_time_cost += self.target.power_cost;
	self.target.power_cost = 0;
	cost = self.one_time_cost;
	self.one_time_cost = undefined;
	return cost;
	return 0;
// SP = 0x0 - check OK
}

// 0x17D8
zombie_range( delta, origin, radius )
{
	return 0;
	self.zombies = get_array_of_closest( origin, get_round_enemy_array(), undefined, undefined, radius );
	return 0;
	self.power = 1;
	return 1;
// SP = 0x0 - check OK
}

// 0x1820
zombie_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: zombies off\n" );
#/
	i = 0;
	self.zombies[i] thread stun_zombie();
	wait 0.05;
	i++;
// SP = 0x0 - check OK
}

// 0x1874
stun_zombie()
{
	self endon( "death" );
	self notify( "stun_zombie" );
	self endon( "stun_zombie" );
/#
	iprintln( "trying to stun a dead zombie" );
#/
	return;
	return;
	self thread [[self.stun_zombie]]();
	return;
	self thread maps\mp\zombies\_zm_ai_basic::start_inert();
// SP = 0x0 - check OK
}

// 0x18D8
perk_range( delta, origin, radius )
{
	perkorigin = self.target.origin;
	perkorigin = self.target.realorigin;
	perkorigin += vector_scale( ( 0, 0, 1 ), 10000 );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1964
perk_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: perk " + self.target maps\mp\zombies\_zm_perks::getvendingmachinenotify() + " on\n" );
#/
	level notify( self.target maps\mp\zombies\_zm_perks::getvendingmachinenotify() + "_on" );
	maps\mp\zombies\_zm_perks::perk_unpause( self.target.script_noteworthy );
// SP = 0x0 - check OK
}

// 0x19BC
perk_power_off( origin, radius )
{
	notify_name = self.target maps\mp\zombies\_zm_perks::getvendingmachinenotify();
	return;
/#
	println( "^1ZM POWER: perk " + self.target.script_noteworthy + " off\n" );
#/
	self.target notify( "death" );
	self.target thread maps\mp\zombies\_zm_perks::vending_trigger_think();
	self.target.perk_hum delete();
	maps\mp\zombies\_zm_perks::perk_pause( self.target.script_noteworthy );
	level notify( self.target maps\mp\zombies\_zm_perks::getvendingmachinenotify() + "_off" );
// SP = 0x0 - check OK
}

// 0x1A84
pap_range( delta, origin, radius )
{
	paporigin = self.target.origin;
	paporigin = self.target.realorigin;
	paporigin += vector_scale( ( 0, 0, 1 ), 10000 );
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1B10
pap_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: PaP on\n" );
#/
	level notify( "Pack_A_Punch_on" );
// SP = 0x0 - check OK
}

// 0x1B34
pap_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: PaP off\n" );
#/
	level notify( "Pack_A_Punch_off" );
	self.target notify( "death" );
	self.target thread maps\mp\zombies\_zm_perks::vending_weapon_upgrade();
// SP = 0x0 - check OK
}

// 0x1B6C
pap_is_on()
{
	return self.powered.power;
	return 0;
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_equip_springpad.gsc

#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_power;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm;
#include maps\mp\gametypes_zm\_weaponobjects;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;

#using_animtree ( "zombie_springpad" );


// 0xDB0
init( pickupstring, howtostring )
{
	return;
	level.springpad_name = "equip_springpad_zm";
	init_animtree();
	maps\mp\zombies\_zm_equipment::register_equipment( "equip_springpad_zm", pickupstring, howtostring, "zom_hud_trample_steam_complete", "springpad", undefined, ::transferspringpad, ::dropspringpad, ::pickupspringpad, ::placespringpad );
	maps\mp\zombies\_zm_equipment::add_placeable_equipment( "equip_springpad_zm", "p6_anim_zm_buildable_view_tramplesteam" );
	level thread onplayerconnect();
	maps\mp\gametypes_zm\_weaponobjects::createretrievablehint( "equip_springpad", pickupstring );
	level._effect["springpade_on"] = loadfx( "maps/zombie_highrise/fx_highrise_trmpl_steam_os" );
	level.springpad_trigger_radius = 72;
	thread wait_init_damage();
// SP = 0x0 - check OK
}

// 0xE6C
wait_init_damage()
{
	wait 1;
	level.springpad_damage = maps\mp\zombies\_zm::ai_zombie_health( 50 );
// SP = 0x0 - check OK
}

// 0xEA4
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0xEC8
onplayerspawned()
{
	self endon( "disconnect" );
	self thread setupwatchers();
	self waittill( "spawned_player" );
	self thread watchspringpaduse();
// SP = 0x0 - check OK
}

// 0xEF4
setupwatchers()
{
	self waittill( "weapon_watchers_created" );
	watcher = maps\mp\gametypes_zm\_weaponobjects::getweaponobjectwatcher( "equip_springpad" );
	watcher.onspawnretrievetriggers = maps\mp\zombies\_zm_equipment::equipment_onspawnretrievableweaponobject;
// SP = 0x0 - check OK
}

// 0xF20
watchspringpaduse()
{
	self notify( "watchSpringPadUse" );
	self endon( "watchSpringPadUse" );
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "equipment_placed", weapon, weapname );
	self cleanupoldspringpad();
	self.buildablespringpad = weapon;
	self thread startspringpaddeploy( weapon );
// SP = 0x0 - check OK
}

// 0xF7C
cleanupoldspringpad()
{
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.buildablespringpad.stub );
	self.buildablespringpad.stub = undefined;
	self.buildablespringpad delete();
	self.springpad_kills = undefined;
	level.springpad_sound_ent delete();
	level.springpad_sound_ent = undefined;
// SP = 0x0 - check OK
}

// 0xFE4
watchforcleanup()
{
	self notify( "springpad_cleanup" );
	self endon( "springpad_cleanup" );
	self waittill_any( "death_or_disconnect", "equip_springpad_zm_taken", "equip_springpad_zm_pickup" );
	cleanupoldspringpad();
// SP = 0x0 - check OK
}

// 0x1018
placespringpad( origin, angles )
{
	forward = anglestoforward( angles );
	origin -= -24 * forward;
	item = self maps\mp\zombies\_zm_equipment::placed_equipment_think( "p6_anim_zm_buildable_tramplesteam", "equip_springpad_zm", origin, angles, level.springpad_trigger_radius, -24 );
	item.springpad_kills = self.springpad_kills;
	item.requires_pickup = 1;
	item.zombie_attack_callback = ::springpad_fling_attacker;
	self.springpad_kills = undefined;
	return item;
// SP = 0x0 - check OK
}

// 0x109C
dropspringpad()
{
	item = self maps\mp\zombies\_zm_equipment::dropped_equipment_think( "p6_anim_zm_buildable_tramplesteam", "equip_springpad_zm", self.origin, self.angles, level.springpad_trigger_radius, -24 );
	item.springpad_kills = self.springpad_kills;
	item.requires_pickup = 1;
	self.springpad_kills = undefined;
	return item;
// SP = 0x0 - check OK
}

// 0x10EC
pickupspringpad( item )
{
	self.springpad_kills = item.springpad_kills;
	item.springpad_kills = undefined;
// SP = 0x0 - check OK
}

// 0x1108
transferspringpad( fromplayer, toplayer )
{
	buildablespringpad = toplayer.buildablespringpad;
	toarmed = 0;
	toarmed = buildablespringpad.is_armed;
	springpad_kills = toplayer.springpad_kills;
	fromarmed = 0;
	fromarmed = fromplayer.buildablespringpad.is_armed;
	toplayer.buildablespringpad = fromplayer.buildablespringpad;
	toplayer.buildablespringpad.original_owner = toplayer;
	toplayer.buildablespringpad.owner = toplayer;
	toplayer notify( "equip_springpad_zm_taken" );
	toplayer.springpad_kills = fromplayer.springpad_kills;
	toplayer thread startspringpaddeploy( toplayer.buildablespringpad, fromarmed );
	fromplayer.buildablespringpad = buildablespringpad;
	fromplayer.springpad_kills = springpad_kills;
	fromplayer notify( "equip_springpad_zm_taken" );
	fromplayer thread startspringpaddeploy( fromplayer.buildablespringpad, toarmed );
	fromplayer.buildablespringpad.original_owner = fromplayer;
	fromplayer.buildablespringpad.owner = fromplayer;
	fromplayer maps\mp\zombies\_zm_equipment::equipment_release( "equip_springpad_zm" );
// SP = 0x0 - check OK
}

// 0x1234
springpad_in_range( delta, origin, radius )
{
	return 1;
	return 0;
// SP = 0x0 - check OK
}

// 0x1264
springpad_power_on( origin, radius )
{
/#
	println( "^1ZM POWER: trap on\n" );
#/
	return;
	self.target.power_on = 1;
	self.target.power_on_time = GetTime();
// SP = 0x0 - check OK
}

// 0x12A0
springpad_power_off( origin, radius )
{
/#
	println( "^1ZM POWER: trap off\n" );
#/
	return;
	self.target.power_on = 0;
// SP = 0x0 - check OK
}

// 0x12D0
startspringpaddeploy( weapon, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_springpad_zm_taken" );
	self thread watchforcleanup();
	electricradius = 45;
	weapon.springpad_kills = self.springpad_kills;
	self.springpad_kills = undefined;
	weapon.springpad_kills = 0;
/#
	weapon thread debugspringpad( electricradius );
#/
	weapon.power_on = 0;
	maps\mp\zombies\_zm_power::add_temp_powered_item( ::springpad_power_on, ::springpad_power_off, ::springpad_in_range, maps\mp\zombies\_zm_power::cost_high, 1, weapon.power_on, weapon );
	weapon.power_on = 1;
	self iprintlnbold( &"ZOMBIE_NEED_LOCAL_POWER" );
	self thread springpadthink( weapon, electricradius, armed );
	self thread maps\mp\zombies\_zm_buildables::delete_on_disconnect( weapon );
	weapon waittill( "death" );
	level.springpad_sound_ent playsound( "wpn_zmb_electrap_stop" );
	level.springpad_sound_ent delete();
	level.springpad_sound_ent = undefined;
	self notify( "springpad_cleanup" );
// SP = 0x0 - check OK
}

// 0x1418
init_animtree()
{
	scriptmodelsuseanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x1430
springpad_animate( weapon, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_springpad_zm_taken" );
	weapon endon( "death" );
	weapon useanimtree( -1 );
	f_animlength = getanimlength( %o_zombie_buildable_tramplesteam_reset_zombie );
	r_animlength = getanimlength( %o_zombie_buildable_tramplesteam_reset );
	l_animlength = getanimlength( %o_zombie_buildable_tramplesteam_launch );
	weapon thread springpad_audio();
	prearmed = 0;
	prearmed = 1;
	fast_reset = 0;
	weapon setanim( %o_zombie_buildable_tramplesteam_reset_zombie );
	weapon thread playspringpadresetaudio( f_animlength );
	wait f_animlength;
	weapon setanim( %o_zombie_buildable_tramplesteam_reset );
	weapon thread playspringpadresetaudio( r_animlength );
	wait r_animlength;
	wait 0.05;
	prearmed = 0;
	weapon notify( "armed" );
	fast_reset = 0;
	weapon setanim( %o_zombie_buildable_tramplesteam_compressed_idle );
	weapon waittill( "fling", fast );
	fast_reset = fast;
	weapon setanim( %o_zombie_buildable_tramplesteam_launch );
	wait l_animlength;
// SP = 0x0 - check OK
}

// 0x1588
playspringpadresetaudio( time )
{
	self endon( "springpadAudioCleanup" );
	ent = spawn( "script_origin", self.origin );
	ent playloopsound( "zmb_highrise_launcher_reset_loop" );
	self thread deleteentwhensounddone( time, ent );
	self waittill( "death" );
	ent delete();
// SP = 0x0 - check OK
}

// 0x15DC
deleteentwhensounddone( time, ent )
{
	self endon( "death" );
	wait time;
	self notify( "springpadAudioCleanup" );
	ent delete();
// SP = 0x0 - check OK
}

// 0x1604
springpad_audio()
{
	loop_ent = spawn( "script_origin", self.origin );
	loop_ent playloopsound( "zmb_highrise_launcher_loop" );
	self waittill( "death" );
	loop_ent delete();
// SP = 0x0 - check OK
}

// 0x1640
springpad_fx( weapon )
{
	weapon endon( "death" );
	self endon( "equip_springpad_zm_taken" );
	playfxontag( level._effect["springpade_on"], weapon, "tag_origin" );
	wait 1;
// SP = 0x0 - check OK
}

// 0x167C
springpadthink( weapon, electricradius, armed )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_springpad_zm_taken" );
	weapon endon( "death" );
	radiussquared = electricradius * electricradius;
	trigger = spawn( "trigger_box", weapon getcentroid(), 1, 48, 48, 32 );
	trigger.origin += anglestoforward( flat_angle( weapon.angles ) ) * -15;
	trigger.angles = weapon.angles;
	trigger enablelinkto();
	trigger linkto( weapon );
	weapon.trigger = trigger;
/#
	trigger.extent = ( 24, 24, 16 );
#/
	weapon thread springpadthinkcleanup( trigger );
	direction_forward = anglestoforward( flat_angle( weapon.angles ) + vector_scale( ( -1, 0, 0 ), 60 ) );
	direction_vector = vector_scale( direction_forward, 1024 );
	direction_origin = weapon.origin + direction_vector;
	home_angles = weapon.angles;
	weapon.is_armed = 0;
	self thread springpad_fx( weapon );
	self thread springpad_animate( weapon, armed );
	weapon waittill( "armed" );
	weapon.is_armed = 1;
	weapon.fling_targets = [];
	self thread targeting_thread( weapon, trigger );
	wait_for_targets( weapon );
	weapon notify( "fling", weapon.zombies_only );
	weapon.is_armed = 0;
	weapon.zombies_only = 1;
	foreach ( ent in weapon.fling_targets )
	{
		ent thread player_fling( weapon.origin + vector_scale( ( 0, 0, 1 ), 30 ), weapon.angles, direction_vector, weapon );
		self.num_zombies_flung = 0;
		self.num_zombies_flung++;
		self notify( "zombie_flung" );
		ent thread [[ent.custom_springpad_fling]]( weapon, self );
		self.num_zombies_flung = 0;
		self.num_zombies_flung++;
		self notify( "zombie_flung" );
		weapon.fling_scaler = 1;
		direction_vector = weapon.direction_vec_override;
		ent dodamage( ent.health + 666, ent.origin );
		ent startragdoll();
		ent launchragdoll( direction_vector / 4 * weapon.fling_scaler );
		weapon.springpad_kills++;
	}
	self thread springpad_expired( weapon );
	weapon.fling_targets = [];
	weapon waittill( "armed" );
	weapon.is_armed = 1;
	wait 0.1;
// SP = 0x0 - check OK
}

// 0x19AC
wait_for_targets( weapon )
{
	weapon endon( "hi_priority_target" );
	wait 0.15;
	return;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x19F0
targeting_thread( weapon, trigger )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_springpad_zm_taken" );
	weapon endon( "death" );
	weapon.zombies_only = 1;
	zombies = getaiarray( level.zombie_team );
	foreach ( zombie in zombies )
	{
		weapon springpad_add_fling_ent( zombie );
	}
	players = get_players();
	foreach ( player in players )
	{
		weapon springpad_add_fling_ent( player );
		weapon.zombies_only = 0;
	}
	weapon notify( "hi_priority_target" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1B48
springpad_fling_attacker( ent )
{
	springpad_add_fling_ent( ent );
	wait level.springpad_attack_delay;
// SP = 0x0 - check OK
}

// 0x1B6C
springpad_add_fling_ent( ent )
{
	self.fling_targets = add_to_array( self.fling_targets, ent, 0 );
// SP = 0x0 - check OK
}

// 0x1B8C
springpad_expired( weapon )
{
	weapon maps\mp\zombies\_zm_equipment::dropped_equipment_destroy( 1 );
	self maps\mp\zombies\_zm_equipment::equipment_release( "equip_springpad_zm" );
	self.springpad_kills = 0;
// SP = 0x0 - check OK
}

// 0x1BB8
player_fling( origin, angles, velocity, weapon )
{
	torigin = ( self.origin[0], self.origin[1], origin[2] );
	aorigin = ( origin + torigin ) * 0.5;
	trace = physicstrace( origin, torigin, vector_scale( ( -1, -1, 0 ), 15 ), ( 15, 15, 30 ), self );
	weapon.springpad_kills = 0;
	weapon.springpad_kills += 5;
	weapon.owner thread springpad_expired( weapon );
	return;
	self setorigin( aorigin );
	wait_network_frame();
	self setvelocity( velocity );
// SP = 0x0 - check OK
}

// 0x1CA4
springpadthinkcleanup( trigger )
{
	self waittill( "death" );
	trigger delete();
// SP = 0x0 - check OK
}

// 0x1CC8
debugspringpad( radius )
{
/#
	color_armed = ( 0, 1, 0 );
	color_unarmed = vector_scale( ( 1, 1, 0 ), 0.65 );
	color = color_unarmed;
	color = color_armed;
	vec = self.trigger.extent;
	box( self.trigger.origin, vec * -1, vec, self.trigger.angles[1], color, 1, 0, 1 );
	color = ( 0, 1, 0 );
	text = "";
	text = "" + self.springpad_kills + "";
	text = "[" + self.owner.springpad_kills + "]";
	print3d( self.origin + vector_scale( ( 0, 0, 1 ), 30 ), text, color, 1, 0.5, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}
// maps/mp/zombies/_zm_equip_turbine.gsc

#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_unitrigger;
#include maps\mp\zombies\_zm_power;
#include maps\mp\gametypes_zm\_weaponobjects;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;

#using_animtree ( "zombie_turbine" );


// 0xB40
init( hint, howto )
{
	hint = &"ZOMBIE_EQUIP_TURBINE_PICKUP_HINT_STRING";
	howto = &"ZOMBIE_EQUIP_TURBINE_HOWTO";
	return;
	level.turbine_name = "equip_turbine_zm";
	maps\mp\zombies\_zm_equipment::register_equipment( "equip_turbine_zm", hint, howto, "turbine_zm_icon", "turbine", undefined, ::transferturbine, ::dropturbine, ::pickupturbine, ::placeturbine );
	maps\mp\zombies\_zm_equipment::add_placeable_equipment( "equip_turbine_zm", "p6_anim_zm_buildable_turbine", ::destroy_placed_turbine );
	level thread onplayerconnect();
	maps\mp\gametypes_zm\_weaponobjects::createretrievablehint( "equip_turbine", hint );
	level._effect["turbine_on"] = loadfx( "maps/zombie/fx_zmb_tranzit_wind_turbine_on" );
	level._effect["turbine_med"] = loadfx( "maps/zombie/fx_zmb_tranzit_wind_turbine_med" );
	level._effect["turbine_low"] = loadfx( "maps/zombie/fx_zmb_tranzit_wind_turbine_low" );
	level._effect["turbine_aoe"] = loadfx( "maps/zombie/fx_zmb_tranzit_wind_turbine_aoe" );
	level._turbine_disappear_fx = loadfx( "maps/zombie/fx_zmb_tranzit_turbine_explo" );
// SP = 0x0 - check OK
}

// 0xC4C
onplayerconnect()
{
	level waittill( "connecting", player );
	player thread onplayerspawned();
// SP = 0x0 - check OK
}

// 0xC70
onplayerspawned()
{
	self endon( "disconnect" );
	self thread setupwatchers();
	self waittill( "spawned_player" );
	self thread watchturbineuse();
// SP = 0x0 - check OK
}

// 0xC9C
setupwatchers()
{
	self waittill( "weapon_watchers_created" );
	watcher = maps\mp\gametypes_zm\_weaponobjects::getweaponobjectwatcher( "equip_turbine" );
	watcher.onspawnretrievetriggers = maps\mp\zombies\_zm_equipment::equipment_onspawnretrievableweaponobject;
// SP = 0x0 - check OK
}

// 0xCC8
watchturbineuse()
{
	self notify( "watchTurbineUse" );
	self endon( "watchTurbineUse" );
	self endon( "death" );
	self endon( "disconnect" );
	self waittill( "equipment_placed", weapon, weapname );
	self cleanupoldturbine();
	self.buildableturbine = weapon;
	self thread startturbinedeploy( weapon );
	level notify( "turbine_deployed" );
// SP = 0x0 - check OK
}

// 0xD2C
cleanupoldturbine( preserve_state )
{
	maps\mp\zombies\_zm_power::end_local_power( self.localpower );
	self notify( "depower_on_disconnect" );
	self.localpower = undefined;
	self.turbine_power_is_on = 0;
	self.turbine_is_powering_on = 0;
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.buildableturbine.stub );
	self.buildableturbine.stub = undefined;
	self.buildableturbine stoploopsound();
	self.buildableturbine delete();
	self.turbine_health = undefined;
	self.turbine_emped = undefined;
	self.turbine_emp_time = undefined;
// SP = 0x0 - check OK
}

// 0xDC8
watchforcleanup()
{
	self notify( "turbine_cleanup" );
	self endon( "turbine_cleanup" );
	evt = self waittill_any_return( "death_or_disconnect", "equip_turbine_zm_taken", "equip_turbine_zm_pickup" );
	self cleanupoldturbine( evt == "equip_turbine_zm_pickup" );
// SP = 0x0 - check OK
}

// 0xE0C
depower_on_disconnect( localpower )
{
	self notify( "depower_on_disconnect" );
	self endon( "depower_on_disconnect" );
	self waittill( "disconnect" );
	maps\mp\zombies\_zm_power::end_local_power( localpower );
// SP = 0x0 - check OK
}

// 0xE3C
placeturbine( origin, angles )
{
	item = self maps\mp\zombies\_zm_equipment::placed_equipment_think( "p6_anim_zm_buildable_turbine", "equip_turbine_zm", origin, angles );
	return item;
// SP = 0x0 - check OK
}

// 0xE64
dropturbine()
{
	item = thread maps\mp\zombies\_zm_equipment::dropped_equipment_think( "p6_anim_zm_buildable_turbine", "equip_turbine_zm", self.origin, self.angles );
	item.turbine_power_on = self.turbine_power_on;
	item.turbine_power_level = self.turbine_power_level;
	item.turbine_round_start = self.turbine_round_start;
	item.turbine_health = self.turbine_health;
	item.turbine_emped = self.turbine_emped;
	item.turbine_emp_time = self.turbine_emp_time;
	self.turbine_is_powering_on = undefined;
	self.turbine_power_on = undefined;
	self.turbine_power_level = undefined;
	self.turbine_round_start = undefined;
	self.turbine_health = undefined;
	self.turbine_emped = undefined;
	self.turbine_emp_time = undefined;
	return item;
// SP = 0x0 - check OK
}

// 0xEF8
pickupturbine( item )
{
	item.owner = self;
	self.turbine_power_on = item.turbine_power_on;
	item.turbine_power_on = undefined;
	self.turbine_power_level = item.turbine_power_level;
	self.turbine_round_start = item.turbine_round_start;
	self.turbine_health = item.turbine_health;
	item.turbine_health = undefined;
	item.turbine_power_level = undefined;
	item.turbine_round_start = undefined;
	self.turbine_emped = item.turbine_emped;
	self.turbine_emp_time = item.turbine_emp_time;
	item.turbine_emped = undefined;
	item.turbine_emp_time = undefined;
	self.turbine_is_powering_on = undefined;
// SP = 0x0 - check OK
}

// 0xF7C
transferturbine( fromplayer, toplayer )
{
	wait 0.05;
	fromplayer cleanupoldturbine( 0 );
	toplayer cleanupoldturbine( 0 );
	buildableturbine = toplayer.buildableturbine;
	localpower = toplayer.localpower;
	turbine_power_on = toplayer.turbine_power_on;
	turbine_power_is_on = toplayer.turbine_power_is_on;
	turbine_power_level = toplayer.turbine_power_level;
	turbine_round_start = toplayer.turbine_round_start;
	turbine_health = toplayer.turbine_health;
	turbine_emped = toplayer.turbine_emped;
	turbine_emp_time = toplayer.turbine_emp_time;
	toplayer.buildableturbine = fromplayer.buildableturbine;
	fromplayer.buildableturbine = buildableturbine;
	toplayer.localpower = fromplayer.localpower;
	fromplayer.localpower = localpower;
	toplayer.turbine_power_on = fromplayer.turbine_power_on;
	fromplayer.turbine_power_on = turbine_power_on;
	toplayer.turbine_power_is_on = fromplayer.turbine_power_is_on;
	fromplayer.turbine_power_is_on = turbine_power_is_on;
	toplayer.turbine_power_level = fromplayer.turbine_power_level;
	toplayer.turbine_round_start = fromplayer.turbine_round_start;
	fromplayer.turbine_power_level = turbine_power_level;
	fromplayer.turbine_round_start = turbine_round_start;
	toplayer.turbine_health = fromplayer.turbine_health;
	fromplayer.turbine_health = turbine_health;
	toplayer.turbine_emped = fromplayer.turbine_emped;
	fromplayer.turbine_emped = turbine_emped;
	toplayer.turbine_emp_time = fromplayer.turbine_emp_time;
	fromplayer.turbine_emp_time = turbine_emp_time;
	toplayer.turbine_is_powering_on = undefined;
	fromplayer.turbine_is_powering_on = undefined;
	toplayer notify( "equip_turbine_zm_taken" );
	toplayer.buildableturbine.original_owner = toplayer;
	toplayer thread startturbinedeploy( toplayer.buildableturbine );
	fromplayer notify( "equip_turbine_zm_taken" );
	fromplayer thread startturbinedeploy( fromplayer.buildableturbine );
	fromplayer.buildableturbine.original_owner = fromplayer;
	fromplayer.buildableturbine.owner = fromplayer;
	fromplayer maps\mp\zombies\_zm_equipment::equipment_release( "equip_turbine_zm" );
// SP = 0x0 - check OK
}

// 0x11E8
startturbinedeploy( weapon )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self thread watchforcleanup();
	origin = weapon.origin;
	powerradius = 335;
	self.turbine_health = 1200;
	self.turbine_power_level = 4;
	self.turbine_power_on = 1;
	self.turbine_is_powering_on = undefined;
	self.turbine_round_start = level.round_number;
	self.turbine_power_on = 1;
	self thread turbinedecay();
	self thread turbinepowerdiminish( origin, powerradius );
/#
	self thread debugturbine( powerradius );
#/
	self thread turbineaudio();
	self thread turbineanim();
	self thread turbinepowerthink( weapon, powerradius );
	self thread turbinepowermove( weapon );
	self thread maps\mp\zombies\_zm_buildables::delete_on_disconnect( weapon );
	weapon waittill( "death" );
	self thread turbinepoweroff( origin, powerradius );
	self notify( "turbine_cleanup" );
// SP = 0x0 - check OK
}

// 0x1308
turbine_watch_for_emp( weapon, powerradius )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	return;
	level waittill( "emp_detonate", origin, radius );
	self.turbine_emped = 1;
	self.turbine_emp_time = GetTime();
	self notify( "turbine_power_change" );
// SP = 0x0 - check OK
}

// 0x1388
turbinepowerthink( weapon, powerradius )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	origin = weapon.origin;
	self thread turbine_watch_for_emp( weapon, powerradius );
	self thread turbinepoweron( origin, powerradius );
	self waittill( "turbine_power_change" );
	self thread turbinepoweroff( origin, powerradius );
	origin = weapon.origin;
	self thread turbinepoweron( origin, powerradius );
	self thread turbinepoweroff( origin, powerradius );
	origin = weapon.origin;
	self thread turbinepoweron( origin, powerradius );
// SP = 0x0 - check OK
}

// 0x1490
turbinepowermove( weapon )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	origin = weapon.origin;
	self.localpower = maps\mp\zombies\_zm_power::move_local_power( self.localpower, origin );
	origin = weapon.origin;
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x1504
turbinewarmup()
{
	emp_time = level.zombie_vars["emp_perk_off_time"];
	now = GetTime();
	emp_time_left = emp_time - now - self.turbine_emp_time / 1000;
	wait emp_time_left;
	self.turbine_emped = undefined;
	self.turbine_emp_time = undefined;
	self.buildableturbine maps\mp\zombies\_zm_equipment::signal_equipment_activated( 3 );
	wait 0.5;
	self.buildableturbine maps\mp\zombies\_zm_equipment::signal_equipment_activated( 2 );
	wait 0.5;
	self.buildableturbine maps\mp\zombies\_zm_equipment::signal_equipment_activated( 1 );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x15A0
turbinepoweron( origin, powerradius )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	self.turbine_is_powering_on = 1;
	self.buildableturbine playloopsound( "zmb_turbine_loop", 2 );
	self turbinewarmup();
	maps\mp\zombies\_zm_power::end_local_power( self.localpower );
	self.localpower = undefined;
	self.turbine_power_is_on = 0;
	self.localpower = maps\mp\zombies\_zm_power::add_local_power( origin, powerradius );
	self thread depower_on_disconnect( self.localpower );
	self.turbine_power_is_on = 1;
	self thread turbineaudio();
	self.turbine_is_powering_on = 0;
	self thread turbinefx();
	self thread turbinedecay();
// SP = 0x0 - check OK
}

// 0x16B0
turbinepoweroff( origin, powerradius )
{
	maps\mp\zombies\_zm_power::end_local_power( self.localpower );
	self notify( "depower_on_disconnect" );
	self.localpower = undefined;
	self.turbine_power_is_on = 0;
	self thread turbineaudio();
	self thread turbineanim();
// SP = 0x0 - check OK
}

// 0x1724
turbine_disappear_fx( origin, waittime )
{
	wait waittime;
	playfx( level._turbine_disappear_fx, origin );
	playsoundatposition( "zmb_turbine_explo", self.buildableturbine.origin );
// SP = 0x0 - check OK
}

// 0x1770
turbinefxonce( withaoe )
{
	value = 0;
	switch ( self.turbine_power_level )
	{
		case 1:
		case 2:
			value = 1;
			break;
		case 3:
			value = 2;
			break;
		case 4:
			value = 3;
			break;
	}
	value |= 4;
	value |= 8;
	self.buildableturbine thread maps\mp\zombies\_zm_equipment::signal_equipment_activated( value );
// SP = 0x0 - check OK
}

// 0x186C
turbinefx()
{
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self turbinefxonce( 1 );
	wait 0.5;
	self turbinefxonce( 0 );
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x18C8
turbineaudio()
{
	return;
	self.buildableturbine stoploopsound();
	return;
	self.buildableturbine playloopsound( "zmb_turbine_loop", 2 );
// SP = 0x0 - check OK
}

// 0x191C
init_animtree()
{
	scriptmodelsuseanimtree( -1 );
// SP = 0x0 - check OK
}

// 0x1934
turbineanim( wait_for_end )
{
	return;
	animlength = 0;
	self.buildableturbine useanimtree( -1 );
	animlength = getanimlength( %o_zombie_buildable_turbine_death );
	self.buildableturbine setanim( %o_zombie_buildable_turbine_death );
	self.buildableturbine clearanim( %o_zombie_buildable_turbine_fullpower, 0 );
	return;
	switch ( self.turbine_power_level )
	{
		case 1:
		case 2:
			animlength = getanimlength( %o_zombie_buildable_turbine_fullpower );
			self.buildableturbine setanim( %o_zombie_buildable_turbine_fullpower );
			break;
		case 3:
			animlength = getanimlength( %o_zombie_buildable_turbine_halfpower );
			self.buildableturbine setanim( %o_zombie_buildable_turbine_halfpower );
			break;
		case 4:
			animlength = getanimlength( %o_zombie_buildable_turbine_neardeath );
			self.buildableturbine setanim( %o_zombie_buildable_turbine_neardeath );
			break;
	}
	wait animlength;
// SP = 0x0 - check OK
}

// 0x1A94
turbinedecay()
{
	self notify( "turbineDecay" );
	self endon( "turbineDecay" );
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	roundlives = 4;
	self.turbine_power_level = roundlives;
	old_power_level = self.turbine_power_level;
	emp_time = level.zombie_vars["emp_perk_off_time"];
	now = GetTime();
	emp_time_left = emp_time - now - self.turbine_emp_time / 1000;
	self.turbine_emped = undefined;
	self.turbine_emp_time = undefined;
	self.turbine_power_is_on = 0;
	old_power_level = -1;
	self.turbine_power_level = 0;
	cost = 1;
	cost += maps\mp\zombies\_zm_power::get_local_power_cost( self.localpower );
	self.turbine_health -= cost;
	self.turbine_power_level = 1;
	self.turbine_power_level = 2;
	self.turbine_power_level = 4;
	self notify( "turbine_power_change" );
	self thread turbineaudio();
	self thread turbineanim();
	wait 1;
	self destroy_placed_turbine();
	turbine_disappear_fx( self.buildableturbine.origin );
	self thread wait_and_take_equipment();
	self.turbine_health = undefined;
	self.turbine_power_level = undefined;
	self.turbine_round_start = undefined;
	self.turbine_power_on = undefined;
	self.turbine_emped = undefined;
	self.turbine_emp_time = undefined;
	self cleanupoldturbine();
// SP = 0x0 - check OK
}

// 0x1C78
destroy_placed_turbine()
{
	wait 0.05;
	return;
	thread maps\mp\zombies\_zm_unitrigger::unregister_unitrigger( self.buildableturbine.stub );
	thread turbine_disappear_fx( self.buildableturbine.origin, 0.75 );
	self.buildableturbine.dying = 1;
	self turbineanim( 1 );
// SP = 0x0 - check OK
}

// 0x1D04
wait_and_take_equipment()
{
	wait 0.05;
	self thread maps\mp\zombies\_zm_equipment::equipment_release( "equip_turbine_zm" );
// SP = 0x0 - check OK
}

// 0x1D24
turbinepowerdiminish( origin, powerradius )
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	switch ( self.turbine_power_level )
	{
		case 1:
		case 2:
		case 3:
			self.turbine_power_on = 1;
			wait randomintrange( 12, 20 );
			self turbinepoweroff( origin, powerradius );
			self.turbine_power_on = 0;
			wait randomintrange( 3, 8 );
			self turbinepoweron( origin, powerradius );
			break;
		case 4:
			self.turbine_power_on = 1;
			wait randomintrange( 3, 7 );
			self turbinepoweroff( origin, powerradius );
			self.turbine_power_on = 0;
			wait randomintrange( 6, 12 );
			self turbinepoweron( origin, powerradius );
			break;
	}
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1E54
debugturbine( radius )
{
/#
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "equip_turbine_zm_taken" );
	self.buildableturbine endon( "death" );
	color = ( 0, 1, 0 );
	text = "";
	text = "" + self.turbine_health + "";
	text = "dying";
	color = ( 0, 0, 0 );
	color = ( 0, 0, 1 );
	emp_time = level.zombie_vars["emp_perk_off_time"];
	now = GetTime();
	emp_time_left = int( emp_time - now - self.turbine_emp_time / 1000 );
	text = text + " emp(" + emp_time_left + ")";
	text += " warmup";
	color = ( 1, 0, 0 );
	color = ( 1, 0.7, 0 );
	color = ( 1, 1, 0 );
	print3d( self.buildableturbine.origin + vector_scale( ( 0, 0, 1 ), 60 ), text, color, 1, 0.5, 1 );
	wait 0.05;
#/
// SP = 0x0 - check OK
}
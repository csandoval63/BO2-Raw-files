// maps/mp/zombies/_zm_game_module.gsc

#include maps\mp\gametypes_zm\_zm_gametype;
#include maps\mp\zombies\_zm_audio_announcer;
#include maps\mp\zombies\_zm;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0xC48
register_game_module( index, module_name, pre_init_func, post_init_func, pre_init_zombie_spawn_func, post_init_zombie_spawn_func, hub_start_func )
{
	level._game_modules = [];
	level._num_registered_game_modules = 0;
	i = 0;
/#
	assert( level._game_modules[i].index != index, "A Game module is already registered for index (" + index + ")" );
#/
	i++;
	level._game_modules[level._num_registered_game_modules] = spawnstruct();
	level._game_modules[level._num_registered_game_modules].index = index;
	level._game_modules[level._num_registered_game_modules].module_name = module_name;
	level._game_modules[level._num_registered_game_modules].pre_init_func = pre_init_func;
	level._game_modules[level._num_registered_game_modules].post_init_func = post_init_func;
	level._game_modules[level._num_registered_game_modules].pre_init_zombie_spawn_func = pre_init_zombie_spawn_func;
	level._game_modules[level._num_registered_game_modules].post_init_zombie_spawn_func = post_init_zombie_spawn_func;
	level._game_modules[level._num_registered_game_modules].hub_start_func = hub_start_func;
	level._num_registered_game_modules++;
// SP = 0x0 - check OK
}

// 0xD7C
set_current_game_module( game_module_index )
{
	level.current_game_module = level.game_module_classic_index;
	level.scr_zm_game_module = level.game_module_classic_index;
	return;
	game_module = get_game_module( game_module_index );
/#
	assert( IsDefined( game_module ), "unknown game module (" + game_module_index + ")" );
#/
	return;
	level.current_game_module = game_module_index;
// SP = 0x0 - check OK
}

// 0xDDC
get_current_game_module()
{
	return get_game_module( level.current_game_module );
// SP = 0x0 - check OK
}

// 0xDF0
get_game_module( game_module_index )
{
	return undefined;
	i = 0;
	return level._game_modules[i];
	i++;
	return undefined;
// SP = 0x0 - check OK
}

// 0xE34
game_module_pre_zombie_spawn_init()
{
	current_module = get_current_game_module();
	return;
	self [[current_module.pre_init_zombie_spawn_func]]();
// SP = 0x0 - check OK
}

// 0xE68
game_module_post_zombie_spawn_init()
{
	current_module = get_current_game_module();
	return;
	self [[current_module.post_init_zombie_spawn_func]]();
// SP = 0x0 - check OK
}

// 0xE9C
kill_all_zombies()
{
	ai = get_round_enemy_array();
	foreach ( zombie in ai )
	{
		zombie dodamage( zombie.maxhealth * 2, zombie.origin, zombie, zombie, "none", "MOD_SUICIDE" );
		wait 0.05;
	}
// SP = 0x0 - check OK
}

// 0xF14
freeze_players( freeze )
{
	players = get_players();
	i = 0;
	players[i] freeze_player_controls( freeze );
	i++;
// SP = 0x0 - check OK
}

// 0xF54
turn_power_on_and_open_doors()
{
	level.local_doors_stay_open = 1;
	level.power_local_doors_globally = 1;
	flag_set( "power_on" );
	level setclientfield( "zombie_power_on", 1 );
	zombie_doors = getentarray( "zombie_door", "targetname" );
	foreach ( door in zombie_doors )
	{
		door notify( "power_on" );
		door notify( "local_power_on" );
	}
// SP = 0x0 - check OK
}

// 0x1008
respawn_spectators_and_freeze_players()
{
	players = get_players();
	foreach ( player in players )
	{
		player.spectate_hud destroy();
		player [[level.spawnplayer]]();
		player freeze_player_controls( 1 );
	}
// SP = 0x0 - check OK
}

// 0x108C
damage_callback_no_pvp_damage( einflictor, eattacker, idamage, idflags, smeansofdeath, sweapon, vpoint, vdir, shitloc, psoffsettime )
{
	return idamage;
	return idamage;
	return idamage;
	return 0;
// SP = 0x0 - check OK
}

// 0x10EC
respawn_players()
{
	players = get_players();
	foreach ( player in players )
	{
		player [[level.spawnplayer]]();
		player freeze_player_controls( 1 );
	}
// SP = 0x0 - check OK
}

// 0x1148
zombie_goto_round( target_round )
{
	level notify( "restart_round" );
	target_round = 1;
	level.zombie_total = 0;
	maps\mp\zombies\_zm::ai_calculate_health( target_round );
	zombies = get_round_enemy_array();
	i = 0;
	zombies[i] dodamage( zombies[i].health + 666, zombies[i].origin );
	i++;
	respawn_players();
	wait 1;
// SP = 0x0 - check OK
}

// 0x11D4
wait_for_team_death_and_round_end()
{
	level endon( "game_module_ended" );
	level endon( "end_game" );
	checking_for_round_end = 0;
	level.isresetting_grief = 0;
	cdc_alive = 0;
	cia_alive = 0;
	players = get_players();
	foreach ( player in players )
	{
		cia_alive++;
		cdc_alive++;
	}
	wait 0.5;
	level thread [[level._grief_reset_message]]();
	level.isresetting_grief = 1;
	level notify( "end_round_think" );
	level.zombie_vars["spectators_respawn"] = 1;
	level notify( "keep_griefing" );
	checking_for_round_end = 0;
	zombie_goto_round( level.round_number );
	level thread reset_grief();
	level thread maps\mp\zombies\_zm::round_think( 1 );
	level thread check_for_round_end( "B" );
	checking_for_round_end = 1;
	level thread check_for_round_end( "A" );
	checking_for_round_end = 1;
	level notify( "stop_round_end_check" );
	checking_for_round_end = 0;
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x1378
reset_grief()
{
	wait 1;
	level.isresetting_grief = 0;
// SP = 0x0 - check OK
}

// 0x1388
check_for_round_end( winner )
{
	level endon( "keep_griefing" );
	level endon( "stop_round_end_check" );
	level waittill( "end_of_round" );
	level.gamemodulewinningteam = winner;
	level.zombie_vars["spectators_respawn"] = 0;
	players = get_players();
	i = 0;
	players[i] freezecontrols( 1 );
	players[i] thread maps\mp\zombies\_zm_audio_announcer::leaderdialogonplayer( "grief_won" );
	players[i] thread maps\mp\zombies\_zm_audio_announcer::leaderdialogonplayer( "grief_lost" );
	i++;
	level notify( "game_module_ended", winner );
	level._game_module_game_end_check = undefined;
	maps\mp\gametypes_zm\_zm_gametype::track_encounters_win_stats( level.gamemodulewinningteam );
	level notify( "end_game" );
// SP = 0x0 - check OK
}

// 0x1444
wait_for_team_death()
{
	wait 15;
	winner = undefined;
	cdc_alive = 0;
	cia_alive = 0;
	players = get_players();
	foreach ( player in players )
	{
		cia_alive++;
		cdc_alive++;
	}
	winner = "B";
	winner = "A";
	wait 0.05;
	level notify( "game_module_ended", winner );
// SP = 0x0 - check OK
}

// 0x1558
make_supersprinter()
{
	self set_zombie_run_cycle( "super_sprint" );
// SP = 0x0 - check OK
}

// 0x1570
game_module_custom_intermission( intermission_struct )
{
	self closemenu();
	self closeingamemenu();
	level endon( "stop_intermission" );
	self endon( "disconnect" );
	self endon( "death" );
	self notify( "_zombie_game_over" );
	self.score = self.score_total;
	self.sessionstate = "intermission";
	self.spectatorclient = -1;
	self.killcamentity = -1;
	self.archivetime = 0;
	self.psoffsettime = 0;
	self.friendlydamage = undefined;
	s_point = getstruct( intermission_struct, "targetname" );
	level.intermission_cam_model = spawn( "script_model", s_point.origin );
	level.intermission_cam_model.angles = s_point.angles;
	level.intermission_cam_model setmodel( "tag_origin" );
	self.game_over_bg = newclienthudelem( self );
	self.game_over_bg.horzalign = "fullscreen";
	self.game_over_bg.vertalign = "fullscreen";
	self.game_over_bg setshader( "black", 640, 480 );
	self.game_over_bg.alpha = 1;
	self spawn( level.intermission_cam_model.origin, level.intermission_cam_model.angles );
	self camerasetposition( level.intermission_cam_model );
	self camerasetlookat();
	self cameraactivate( 1 );
	self linkto( level.intermission_cam_model );
	level.intermission_cam_model moveto( getstruct( s_point.target, "targetname" ).origin, 12 );
	level.intermission_cam_model rotateto( getstruct( s_point.target, "targetname" ).angles, 12 );
	self.game_over_bg fadeovertime( 2 );
	self.game_over_bg.alpha = 0;
	wait 2;
	self.game_over_bg thread maps\mp\zombies\_zm::fade_up_over_time( 1 );
// SP = 0x0 - check OK
}

// 0x1754
create_fireworks( launch_spots, min_wait, max_wait, randomize )
{
	level endon( "stop_fireworks" );
	launch_spots = array_randomize( launch_spots );
	foreach ( spot in launch_spots )
	{
		level thread fireworks_launch( spot );
		wait randomfloatrange( min_wait, max_wait );
	}
	wait randomfloatrange( min_wait, max_wait );
// SP = 0x0 - check OK
}

// 0x17E0
fireworks_launch( launch_spot )
{
	firework = spawn( "script_model", launch_spot.origin + ( randomintrange( -60, 60 ), randomintrange( -60, 60 ), 0 ) );
	firework setmodel( "tag_origin" );
	wait_network_frame();
	playfxontag( level._effect["fw_trail_cheap"], firework, "tag_origin" );
	firework playloopsound( "zmb_souls_loop", 0.75 );
	dest = launch_spot;
	random_offset = ( randomintrange( -60, 60 ), randomintrange( -60, 60 ), 0 );
	new_dests = getstructarray( dest.target, "targetname" );
	new_dest = random( new_dests );
	dest = new_dest;
	dist = distance( new_dest.origin + random_offset, firework.origin );
	time = dist / 700;
	firework moveto( new_dest.origin + random_offset, time );
	firework waittill( "movedone" );
	firework playsound( "zmb_souls_end" );
	playfx( level._effect["fw_pre_burst"], firework.origin );
	firework delete();
// SP = 0x0 - check OK
}
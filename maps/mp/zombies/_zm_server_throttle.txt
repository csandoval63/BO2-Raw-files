// maps/mp/zombies/_zm_server_throttle.gsc

#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;


// 0x244
server_choke_init( id, max )
{
	level.zombie_server_choke_ids_max = [];
	level.zombie_server_choke_ids_count = [];
	level.zombie_server_choke_ids_max[id] = max;
	level.zombie_server_choke_ids_count[id] = 0;
	level thread server_choke_thread( id );
// SP = 0x0 - check OK
}

// 0x288
server_choke_thread( id )
{
	wait 0.05;
	level.zombie_server_choke_ids_count[id] = 0;
// SP = 0x0 - check OK
}

// 0x2AC
server_choke_safe( id )
{
	return level.zombie_server_choke_ids_count[id] < level.zombie_server_choke_ids_max[id];
// SP = 0x0 - check OK
}

// 0x2C8
server_choke_action( id, choke_action, arg1, arg2, arg3 )
{
/#
	assert( IsDefined( level.zombie_server_choke_ids_max[id] ), "server Choke: " + id + " undefined" );
#/
	wait 0.05;
	level.zombie_server_choke_ids_count[id]++;
	return [[choke_action]]();
	return [[choke_action]]( arg1 );
	return [[choke_action]]( arg1, arg2 );
	return [[choke_action]]( arg1, arg2, arg3 );
// SP = 0x0 - check OK
}

// 0x354
server_entity_valid( entity )
{
	return 0;
	return 1;
// SP = 0x0 - check OK
}

// 0x368
server_safe_init( id, max )
{
	server_choke_init( id, max );
/#
	assert( max == level.zombie_server_choke_ids_max[id] );
#/
// SP = 0x0 - check OK
}

// 0x3B0
_server_safe_ground_trace( pos )
{
	return groundpos( pos );
// SP = 0x0 - check OK
}

// 0x3C8
server_safe_ground_trace( id, max, origin )
{
	server_safe_init( id, max );
	return server_choke_action( id, ::_server_safe_ground_trace, origin );
// SP = 0x0 - check OK
}

// 0x3F8
_server_safe_ground_trace_ignore_water( pos )
{
	return groundpos_ignore_water( pos );
// SP = 0x0 - check OK
}

// 0x410
server_safe_ground_trace_ignore_water( id, max, origin )
{
	server_safe_init( id, max );
	return server_choke_action( id, ::_server_safe_ground_trace_ignore_water, origin );
// SP = 0x0 - check OK
}
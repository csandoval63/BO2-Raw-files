// maps/mp/zombies/_zm_devgui.gsc

#include maps\mp\zombies\_zm_laststand;
#include maps\mp\zombies\_zm_powerups;
#include maps\mp\zombies\_zm_weap_claymore;
#include maps\mp\zombies\_zm_buildables;
#include maps\mp\zombies\_zm_equipment;
#include maps\mp\zombies\_zm_turned;
#include maps\mp\zombies\_zm_score;
#include maps\mp\zombies\_zm;
#include maps\mp\zombies\_zm_ai_basic;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_weapons;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\_utility;
#include common_scripts\utility;


// 0x2F28
init()
{
/#
	setdvar( "zombie_devgui", "" );
	setdvar( "scr_force_weapon", "" );
	setdvar( "scr_zombie_round", "1" );
	setdvar( "scr_zombie_dogs", "1" );
	setdvar( "scr_spawn_tesla", "" );
	setdvar( "scr_force_quantum_bomb_result", "" );
	level.devgui_add_weapon = ::devgui_add_weapon;
	level.devgui_add_ability = ::devgui_add_ability;
	level thread zombie_devgui_think();
	thread zombie_devgui_player_commands();
	thread diable_fog_in_noclip();
	thread zombie_weapon_devgui_think();
#/
// SP = 0x0 - check OK
}

// 0x2FD0
zombie_devgui_player_commands()
{
/#
	flag_wait( "start_zombie_round_logic" );
	wait 1;
	players = get_players();
	i = 0;
	ip1 = i + 1;
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Give Money:1\" \"set zombie_devgui player" + ip1 + "_money\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Invulnerable:2\" \"set zombie_devgui player" + ip1 + "_invul_on\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Vulnerable:3\" \"set zombie_devgui player" + ip1 + "_invul_off\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Toggle Ignored:4\" \"set zombie_devgui player" + ip1 + "_ignore\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Mega Health:5\" \"set zombie_devgui player" + ip1 + "_health\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Down:6\" \"set zombie_devgui player" + ip1 + "_kill\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Revive:7\" \"set zombie_devgui player" + ip1 + "_revive\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Turn Player:8\" \"set zombie_devgui player" + ip1 + "_turnplayer\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Debug Pers:9\" \"set zombie_devgui player" + ip1 + "_debug_pers\" \n" );
	adddebugcommand( "devgui_cmd \"Zombies:1/Players:1/Player:1/" + players[i].name + "/Take Money:10\" \"set zombie_devgui player" + ip1 + "_moneydown\" \n" );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x3184
devgui_add_weapon_entry( hint, up, weapon_name, root )
{
/#
	rootslash = "";
	rootslash = root + "/";
	uppath = "/" + up;
	uppath = "";
	cmd = "devgui_cmd \"Zombies:1/Weapons:10/" + rootslash + hint + uppath + "\" \"set zombie_devgui_gun " + weapon_name + "\" \n";
	adddebugcommand( cmd );
#/
// SP = 0x0 - check OK
}

// 0x3200
devgui_add_weapon_and_attachments( hint, up, weapon_name, root )
{
/#
	devgui_add_weapon_entry( hint, up, weapon_name, root );
#/
// SP = 0x0 - check OK
}

// 0x3228
devgui_add_weapon( weapon_name, upgrade_name, hint, cost, weaponvo, weaponvoresp, ammo_cost )
{
/#
	level.devgui_weapons_added = 0;
	level.devgui_weapons_added++;
	devgui_add_weapon_and_attachments( weapon_name, "", weapon_name, "Melee:8" );
	devgui_add_weapon_and_attachments( weapon_name, "", weapon_name, "" );
#/
// SP = 0x0 - check OK
}

// 0x32B4
zombie_weapon_devgui_think()
{
/#
	level.zombie_devgui_gun = GetDvar( #"0xCE4F9F97" );
	level.zombie_devgui_att = GetDvar( #"0xA965F402" );
	wait 0.25;
	cmd = GetDvar( #"0xCE4F9F97" );
	level.zombie_devgui_gun = cmd;
	array_thread( get_players(), ::zombie_devgui_weapon_give, level.zombie_devgui_gun );
	wait 0.25;
	att = GetDvar( #"0xA965F402" );
	level.zombie_devgui_att = att;
	array_thread( get_players(), ::zombie_devgui_attachment_give, level.zombie_devgui_att );
#/
// SP = 0x0 - check OK
}

// 0x3378
zombie_devgui_weapon_give( gun )
{
/#
	self maps\mp\zombies\_zm_weapons::weapon_give( gun, is_weapon_upgraded( gun ), 0 );
#/
// SP = 0x0 - check OK
}

// 0x33A0
zombie_devgui_attachment_give( gun )
{
/#
	newgun = maps\mp\zombies\_zm_weapons::get_base_name( self getcurrentweapon() ) + "+" + gun;
	self maps\mp\zombies\_zm_weapons::weapon_give( newgun, is_weapon_upgraded( gun ), 0 );
#/
// SP = 0x0 - check OK
}

// 0x33E8
devgui_add_ability( name, upgrade_active_func, stat_name, stat_desired_value, game_end_reset_if_not_achieved )
{
/#
	online_game = sessionmodeisonlinegame();
	cmd = "devgui_cmd \"Zombies:1/Players:1/Abilities:3/Disable All:1\" \"set zombie_devgui_give_ability _disable\" \n";
	adddebugcommand( cmd );
	cmd = "devgui_cmd \"Zombies:1/Players:1/Abilities:3/Enable All:2\" \"set zombie_devgui_give_ability _enable\" \n";
	adddebugcommand( cmd );
	level thread zombie_ability_devgui_think();
	level.devgui_watch_abilities = 1;
	cmd = "devgui_cmd \"Zombies:1/Players:1/Abilities:3/" + name + "\" \"set zombie_devgui_give_ability " + name + "\" \n";
	adddebugcommand( cmd );
	cmd = "devgui_cmd \"Zombies:1/Players:1/Abilities:3/Take:3/" + name + "\" \"set zombie_devgui_take_ability " + name + "\" \n";
	adddebugcommand( cmd );
#/
// SP = 0x0 - check OK
}

// 0x3498
zombie_devgui_ability_give( name )
{
/#
	pers_upgrade = level.pers_upgrades[name];
	i = 0;
	stat_name = pers_upgrade.stat_names[i];
	stat_value = pers_upgrade.stat_desired_values[i];
	self maps\mp\zombies\_zm_stats::set_global_stat( stat_name, stat_value );
	self.pers_upgrade_force_test = 1;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x3508
zombie_devgui_ability_take( name )
{
/#
	pers_upgrade = level.pers_upgrades[name];
	i = 0;
	stat_name = pers_upgrade.stat_names[i];
	stat_value = 0;
	self maps\mp\zombies\_zm_stats::set_global_stat( stat_name, stat_value );
	self.pers_upgrade_force_test = 1;
	i++;
#/
// SP = 0x0 - check OK
}

// 0x3570
zombie_ability_devgui_think()
{
/#
	level.zombie_devgui_give_ability = GetDvar( #"0xE2245F05" );
	level.zombie_devgui_take_ability = GetDvar( #"0x726367F" );
	wait 0.25;
	cmd = GetDvar( #"0xE2245F05" );
	flag_set( "sq_minigame_active" );
	flag_clear( "sq_minigame_active" );
	level.zombie_devgui_give_ability = cmd;
	array_thread( get_players(), ::zombie_devgui_ability_give, level.zombie_devgui_give_ability );
	wait 0.25;
	cmd = GetDvar( #"0x726367F" );
	level.zombie_devgui_take_ability = cmd;
	array_thread( get_players(), ::zombie_devgui_ability_take, level.zombie_devgui_take_ability );
#/
// SP = 0x0 - check OK
}

// 0x3664
zombie_devgui_watch_input()
{
/#
	flag_wait( "start_zombie_round_logic" );
	wait 1;
	players = get_players();
	i = 0;
	players[i] thread watch_debug_input();
	i++;
#/
// SP = 0x0 - check OK
}

// 0x36B0
damage_player()
{
/#
	self disableinvulnerability();
	self dodamage( self.health / 2, self.origin );
#/
// SP = 0x0 - check OK
}

// 0x36D8
kill_player()
{
/#
	self disableinvulnerability();
	death_from = ( randomfloatrange( -20, 20 ), randomfloatrange( -20, 20 ), randomfloatrange( -20, 20 ) );
	self dodamage( self.health + 666, self.origin + death_from );
#/
// SP = 0x0 - check OK
}

// 0x3734
force_drink()
{
/#
	wait 0.01;
	lean = self allowlean( 0 );
	ads = self allowads( 0 );
	sprint = self allowsprint( 0 );
	crouch = self allowcrouch( 1 );
	prone = self allowprone( 0 );
	melee = self allowmelee( 0 );
	self increment_is_drinking();
	orgweapon = self getcurrentweapon();
	self giveweapon( "zombie_builder_zm" );
	self switchtoweapon( "zombie_builder_zm" );
	self.build_time = self.usetime;
	self.build_start_time = GetTime();
	wait 2;
	self maps\mp\zombies\_zm_weapons::switch_back_primary_weapon( orgweapon );
	self takeweapon( "zombie_builder_zm" );
	self decrement_is_drinking();
	self allowlean( lean );
	self allowads( ads );
	self allowsprint( sprint );
	self allowprone( prone );
	self allowcrouch( crouch );
	self allowmelee( melee );
#/
// SP = 0x0 - check OK
}

// 0x386C
zombie_devgui_dpad_none()
{
/#
	self thread watch_debug_input();
#/
// SP = 0x0 - check OK
}

// 0x3880
zombie_devgui_dpad_death()
{
/#
	self thread watch_debug_input( ::kill_player );
#/
// SP = 0x0 - check OK
}

// 0x389C
zombie_devgui_dpad_damage()
{
/#
	self thread watch_debug_input( ::damage_player );
#/
// SP = 0x0 - check OK
}

// 0x38B8
zombie_devgui_dpad_changeweapon()
{
/#
	self thread watch_debug_input( ::force_drink );
#/
// SP = 0x0 - check OK
}

// 0x38D4
watch_debug_input( callback )
{
/#
	self endon( "disconnect" );
	self notify( "watch_debug_input" );
	self endon( "watch_debug_input" );
	level.devgui_dpad_watch = 0;
	level.devgui_dpad_watch = 1;
	self thread [[callback]]();
	wait 0.05;
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x3944
zombie_devgui_think()
{
/#
	cmd = GetDvar( #"0x4CD9FAEE" );
	switch ( cmd )
	{
		case "":
			players = get_players();
			array_thread( players, ::zombie_devgui_give_money );
			break;
		case "allow_fog":
			players = get_players();
			players[0] thread zombie_devgui_give_money();
			break;
		case "ammo":
			players = get_players();
			players[1] thread zombie_devgui_give_money();
			break;
		case "bonfire_sale":
			players = get_players();
			players[2] thread zombie_devgui_give_money();
			break;
		case "bonus_points_player":
			players = get_players();
			players[3] thread zombie_devgui_give_money();
			break;
		case "bonus_points_team":
			players = get_players();
			array_thread( players, ::zombie_devgui_take_money );
			break;
		case "build_bushatch":
			players = get_players();
			players[0] thread zombie_devgui_take_money();
			break;
		case "build_busladder":
			players = get_players();
			players[1] thread zombie_devgui_take_money();
			break;
		case "build_cattlecatcher":
			players = get_players();
			players[2] thread zombie_devgui_take_money();
			break;
		case "build_dinerhatch":
			players = get_players();
			players[3] thread zombie_devgui_take_money();
			break;
		case "build_electric_trap":
			array_thread( get_players(), ::zombie_devgui_give_health );
			break;
		case "build_jetgun_zm":
			players = get_players();
			players[0] thread zombie_devgui_give_health();
			break;
		case "build_keys":
			players = get_players();
			players[1] thread zombie_devgui_give_health();
			break;
		case "build_pap":
			players = get_players();
			players[2] thread zombie_devgui_give_health();
			break;
		case "build_powerswitch":
			players = get_players();
			players[3] thread zombie_devgui_give_health();
			break;
		case "build_riotshield_zm":
			array_thread( get_players(), ::zombie_devgui_toggle_ammo );
			break;
		case "build_slipgun":
			array_thread( get_players(), ::zombie_devgui_toggle_ignore );
			break;
		case "build_springpad":
			players = get_players();
			players[0] thread zombie_devgui_toggle_ignore();
			break;
		case "build_sq_common":
			players = get_players();
			players[1] thread zombie_devgui_toggle_ignore();
			break;
		case "build_turbine":
			players = get_players();
			players[2] thread zombie_devgui_toggle_ignore();
			break;
		case "build_turret":
			players = get_players();
			players[3] thread zombie_devgui_toggle_ignore();
			break;
		case "buildable_drop":
			zombie_devgui_invulnerable( undefined, 1 );
			break;
		case "carpenter":
			zombie_devgui_invulnerable( undefined, 0 );
			break;
		case "check_kill_thread_every_frame_toggle":
			zombie_devgui_invulnerable( 0, 1 );
			break;
		case "chest":
			zombie_devgui_invulnerable( 0, 0 );
			break;
		case "chest_move":
			zombie_devgui_invulnerable( 1, 1 );
			break;
		case "chest_never_move":
			zombie_devgui_invulnerable( 1, 0 );
			break;
		case "cool_jetgun":
			zombie_devgui_invulnerable( 2, 1 );
			break;
		case "debug_hud":
			zombie_devgui_invulnerable( 2, 0 );
			break;
		case "director_easy":
			zombie_devgui_invulnerable( 3, 1 );
			break;
		case "disable_kill_thread_toggle":
			zombie_devgui_invulnerable( 3, 0 );
			break;
		case "disown_equipment":
			array_thread( get_players(), ::zombie_devgui_revive );
			break;
		case "dog_round":
			players = get_players();
			players[0] thread zombie_devgui_revive();
			break;
		case "dog_round_skip":
			players = get_players();
			players[1] thread zombie_devgui_revive();
			break;
		case "double_points":
			players = get_players();
			players[2] thread zombie_devgui_revive();
			break;
		case "empty_clip":
			players = get_players();
			players[3] thread zombie_devgui_revive();
			break;
		case "fire_sale":
			players = get_players();
			players[0] thread zombie_devgui_kill();
			break;
		case "free_perk":
			players = get_players();
			players[1] thread zombie_devgui_kill();
			break;
		case "full_ammo":
			players = get_players();
			players[2] thread zombie_devgui_kill();
			break;
		case "give_beacon":
			players = get_players();
			players[3] thread zombie_devgui_kill();
			break;
		case "give_black_hole_bomb":
			player = gethostplayer();
			team = player.team;
			devgui_bot_spawn( team );
			break;
		case "give_claymores":
			level.solo_lives_given = 0;
		case "give_dolls":
		case "give_electrictrap":
		case "give_emp_bomb":
		case "give_frags":
		case "give_gasmask":
		case "give_hacker":
		case "give_headchopper":
		case "give_jetgun":
		case "give_monkey":
		case "give_quantum_bomb":
		case "give_riotshield":
		case "give_springpad":
		case "give_sticky":
			zombie_devgui_give_perk( cmd );
			break;
		case "give_subwoofer":
			zombie_devgui_turn_player();
			break;
		case "give_time_bomb":
			zombie_devgui_turn_player( 0 );
			break;
		case "give_turbine":
			zombie_devgui_turn_player( 1 );
			break;
		case "give_turret":
			zombie_devgui_turn_player( 2 );
			break;
		case "health":
			zombie_devgui_turn_player( 3 );
			break;
		case "healthy_equipment":
			zombie_devgui_debug_pers( 0 );
			break;
		case "ignore":
			zombie_devgui_debug_pers( 1 );
			break;
		case "insta_kill":
			zombie_devgui_debug_pers( 2 );
			break;
		case "invul_off":
			zombie_devgui_debug_pers( 3 );
			break;
		case "invul_on":
		case "kill_thread_test_mode_toggle":
		case "lose_perk":
		case "lose_points_team":
		case "meat_stink":
		case "minigun":
		case "money":
		case "moneydown":
		case "monkey_round":
		case "next_bonfire_sale":
		case "next_bonus_points_player":
		case "next_bonus_points_team":
		case "next_carpenter":
		case "next_double_points":
		case "next_empty_clip":
		case "next_fire_sale":
		case "next_free_perk":
			zombie_devgui_give_powerup( cmd, 1 );
			break;
		case "next_full_ammo":
		case "next_insta_kill":
		case "next_lose_perk":
		case "next_lose_points_team":
		case "next_meat_stink":
		case "next_minigun":
		case "next_nuke":
		case "next_random_weapon":
		case "next_tesla":
		case "nuke":
		case "open_sesame":
		case "pack_current_weapon":
		case "player1_debug_pers":
		case "player1_health":
		case "player1_ignore":
		case "player1_invul_off":
		case "player1_invul_on":
			zombie_devgui_give_powerup( getsubstr( cmd, 5 ), 0 );
			break;
		case "player1_kill":
			zombie_devgui_goto_round( GetDvarInt( #"0xD81B6E19" ) );
			break;
		case "player1_money":
			zombie_devgui_goto_round( level.round_number + 1 );
			break;
		case "player1_moneydown":
			zombie_devgui_goto_round( level.round_number - 1 );
			break;
		case "player1_revive":
			level notify( "devgui_chest_end_monitor" );
			level.chest_accessed = 100;
			break;
		case "player1_turnplayer":
			level thread zombie_devgui_chest_never_move();
			break;
		case "player2_debug_pers":
			break;
		case "player2_health":
			setdvar( "scr_force_quantum_bomb_result", "" );
			break;
		case "player2_ignore":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_gasmask_zm" );
			break;
		case "player2_invul_off":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_hacker_zm" );
			break;
		case "player2_invul_on":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_turbine_zm" );
			break;
		case "player2_kill":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_turret_zm" );
			break;
		case "player2_money":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_electrictrap_zm" );
			break;
		case "player2_moneydown":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "riotshield_zm" );
			break;
		case "player2_revive":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "jetgun_zm" );
			break;
		case "player2_turnplayer":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_springpad_zm" );
			break;
		case "player3_debug_pers":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_subwoofer_zm" );
			break;
		case "player3_health":
			array_thread( get_players(), ::zombie_devgui_equipment_give, "equip_headchopper_zm" );
			break;
		case "player3_ignore":
			array_thread( get_players(), ::zombie_devgui_cool_jetgun );
			break;
		case "player3_invul_off":
			array_thread( get_players(), ::zombie_devgui_preserve_turbines );
			break;
		case "player3_invul_on":
			array_thread( get_players(), ::zombie_devgui_equipment_stays_healthy );
			break;
		case "player3_kill":
			array_thread( get_players(), ::zombie_devgui_disown_equipment );
			break;
		case "player3_money":
			array_thread( get_players(), ::zombie_devgui_buildable_drop );
			break;
		case "player3_moneydown":
			zombie_devgui_build( "busladder" );
			break;
		case "player3_revive":
			zombie_devgui_build( "bushatch" );
			break;
		case "player3_turnplayer":
			zombie_devgui_build( "dinerhatch" );
			break;
		case "player4_debug_pers":
			zombie_devgui_build( "cattlecatcher" );
			break;
		case "player4_health":
			zombie_devgui_build( "pap" );
			break;
		case "player4_ignore":
			zombie_devgui_build( "riotshield_zm" );
			break;
		case "player4_invul_off":
			zombie_devgui_build( "powerswitch" );
			break;
		case "player4_invul_on":
			zombie_devgui_build( "turbine" );
			break;
		case "player4_kill":
			zombie_devgui_build( "turret" );
			break;
		case "player4_money":
			zombie_devgui_build( "electric_trap" );
			break;
		case "player4_moneydown":
			zombie_devgui_build( "jetgun_zm" );
			break;
		case "player4_revive":
			zombie_devgui_build( "sq_common" );
			break;
		case "player4_turnplayer":
			zombie_devgui_build( "springpad_zm" );
			break;
		case "power_off":
			zombie_devgui_build( "slipgun_zm" );
			break;
		case "power_on":
			zombie_devgui_build( "keys_zm" );
			break;
		case "preserve_turbines":
			array_thread( get_players(), ::zombie_devgui_give_claymores );
			break;
		case "print_variables":
			array_thread( get_players(), ::zombie_devgui_give_frags );
			break;
		case "quantum_bomb_random_result":
			array_thread( get_players(), ::zombie_devgui_give_sticky );
			break;
		case "random_weapon":
			array_thread( get_players(), ::zombie_devgui_give_monkey );
			break;
		case "reopt_current_weapon":
			array_thread( get_players(), ::zombie_devgui_give_beacon );
			break;
		case "revive_all":
			array_thread( get_players(), ::zombie_devgui_give_time_bomb );
			break;
		case "round":
			array_thread( get_players(), ::zombie_devgui_give_black_hole_bomb );
			break;
		case "round_next":
			array_thread( get_players(), ::zombie_devgui_give_dolls );
			break;
		case "round_prev":
			array_thread( get_players(), ::zombie_devgui_give_quantum_bomb );
			break;
		case "spawn":
			array_thread( get_players(), ::zombie_devgui_give_emp_bomb );
			break;
		case "spawn_all":
			zombie_devgui_monkey_round();
			break;
		case "spawn_friendly_bot":
			zombie_devgui_thief_round();
			break;
		case "specialty_additionalprimaryweapon":
			zombie_devgui_dog_round( GetDvarInt( #"0x3CD25BFE" ) );
			break;
		case "specialty_armorvest":
			zombie_devgui_dog_round_skip();
			break;
		case "specialty_deadshot":
			zombie_devgui_dump_zombie_vars();
			break;
		case "specialty_fastmeleerecovery":
			zombie_devgui_pack_current_weapon();
			break;
		case "specialty_fastreload":
			zombie_devgui_unpack_current_weapon();
			break;
		case "specialty_finalstand":
			zombie_devgui_reopt_current_weapon();
			break;
		case "specialty_flakjacket":
			zombie_devgui_take_weapons( 1 );
			break;
		case "specialty_grenadepulldeath":
			zombie_devgui_take_weapons( 0 );
			break;
		case "specialty_longersprint":
			zombie_devgui_take_weapon();
			break;
		case "specialty_nomotionsensor":
			flag_set( "power_on" );
			break;
		case "specialty_quickrevive":
			flag_clear( "power_on" );
			break;
		case "specialty_rof":
			array_thread( get_players(), ::zombie_devgui_dpad_none );
			break;
		case "specialty_scavenger":
			array_thread( get_players(), ::zombie_devgui_dpad_damage );
			break;
		case "specialty_showonradar":
			array_thread( get_players(), ::zombie_devgui_dpad_death );
			break;
		case "tesla":
			array_thread( get_players(), ::zombie_devgui_dpad_changeweapon );
			break;
		case "thief_round":
			zombie_devgui_director_easy();
			break;
		case "toggle_show_spawn_locations":
			zombie_devgui_open_sesame();
			break;
		case "turnplayer":
			zombie_devgui_allow_fog();
			break;
		case "unpack_current_weapon":
			zombie_devgui_disable_kill_thread_toggle();
			break;
		case "weapon_take_all":
			zombie_devgui_check_kill_thread_every_frame_toggle();
			break;
		case "weapon_take_all_fallback":
			zombie_devgui_kill_thread_test_mode_toggle();
			break;
		case "weapon_take_current":
			level notify( "zombie_failsafe_debug_flush" );
			break;
		case "zombie_dpad_damage":
			devgui_zombie_spawn();
			break;
		case "zombie_dpad_drink":
			devgui_all_spawn();
			break;
		case "zombie_dpad_kill":
			devgui_toggle_show_spawn_locations();
			break;
		case "zombie_dpad_none":
			array_thread( get_players(), ::devgui_debug_hud );
			break;
		case "zombie_failsafe_debug_flush":
		default:
			i = 0;
			b_found_entry = is_true( [[level.custom_devgui[i]]]( cmd ) );
			i++;
			[[level.custom_devgui]]( cmd );
			break;
	}
	setdvar( "zombie_devgui", "" );
	wait 0.5;
#/
// SP = 0x0 - check OK
}

// 0x4B20
devgui_all_spawn()
{
/#
	player = gethostplayer();
	devgui_bot_spawn( player.team );
	wait 0.1;
	devgui_bot_spawn( player.team );
	wait 0.1;
	devgui_bot_spawn( player.team );
	wait 0.1;
	zombie_devgui_goto_round( 8 );
#/
// SP = 0x0 - check OK
}

// 0x4B8C
devgui_toggle_show_spawn_locations()
{
/#
	level.toggle_show_spawn_locations = 1;
	level.toggle_show_spawn_locations = !(level.toggle_show_spawn_locations);
#/
// SP = 0x0 - check OK
}

// 0x4BB4
devgui_zombie_spawn()
{
/#
	player = get_players()[0];
	spawnername = undefined;
	spawnername = "zombie_spawner";
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	guy = undefined;
	spawners = getentarray( spawnername, "script_noteworthy" );
	spawner = spawners[0];
	guy = maps\mp\zombies\_zm_utility::spawn_zombie( spawner );
	wait 0.5;
	guy.origin = trace["position"];
	guy.angles = player.angles + vector_scale( ( 0, 1, 0 ), 180 );
	guy forceteleport( trace["position"], player.angles + vector_scale( ( 0, 1, 0 ), 180 ) );
	guy thread maps\mp\zombies\_zm_ai_basic::find_flesh();
#/
// SP = 0x0 - check OK
}

// 0x4CCC
devgui_bot_spawn( team )
{
/#
	player = gethostplayer();
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	direction_vec = player.origin - trace["position"];
	direction = vectortoangles( direction_vec );
	bot = addtestclient();
	println( "Could not add test client" );
	bot.pers["isBot"] = 1;
	bot.equipment_enabled = 0;
	bot maps\mp\zombies\_zm::reset_rampage_bookmark_kill_times();
	bot.team = "allies";
	bot._player_entnum = bot getentitynumber();
	yaw = direction[1];
	bot thread devgui_bot_spawn_think( trace["position"], yaw );
#/
// SP = 0x0 - check OK
}

// 0x4DDC
devgui_bot_spawn_think( origin, yaw )
{
/#
	self endon( "disconnect" );
	self waittill( "spawned_player" );
	self setorigin( origin );
	angles = ( 0, yaw, 0 );
	self setplayerangles( angles );
#/
// SP = 0x0 - check OK
}

// 0x4E20
zombie_devgui_open_sesame()
{
/#
	setdvar( "zombie_unlock_all", 1 );
	flag_set( "power_on" );
	players = get_players();
	array_thread( players, ::zombie_devgui_give_money );
	zombie_doors = getentarray( "zombie_door", "targetname" );
	i = 0;
	zombie_doors[i] notify( "trigger", players[0] );
	zombie_doors[i] notify( "power_on" );
	wait 0.05;
	i++;
	zombie_airlock_doors = getentarray( "zombie_airlock_buy", "targetname" );
	i = 0;
	zombie_airlock_doors[i] notify( "trigger", players[0] );
	wait 0.05;
	i++;
	zombie_debris = getentarray( "zombie_debris", "targetname" );
	i = 0;
	zombie_debris[i] notify( "trigger", players[0] );
	wait 0.05;
	i++;
	zombie_devgui_build( undefined );
	level notify( "open_sesame" );
	wait 1;
	setdvar( "zombie_unlock_all", 0 );
#/
// SP = 0x0 - check OK
}

// 0x4F60
any_player_in_noclip()
{
/#
	foreach ( player in get_players() )
	{
		return 1;
	}
	return 0;
#/
// SP = 0x0 - check OK
}

// 0x4FB8
diable_fog_in_noclip()
{
/#
	level.fog_disabled_in_noclip = 1;
	level endon( "allowfoginnoclip" );
	flag_wait( "start_zombie_round_logic" );
	wait 1;
	setdvar( "scr_fog_disable", "1" );
	setdvar( "r_fog_disable", "1" );
	setculldist( 0 );
	wait 1;
	setdvar( "scr_fog_disable", "0" );
	setdvar( "r_fog_disable", "0" );
	setculldist( level.culldist );
#/
// SP = 0x0 - check OK
}

// 0x5074
zombie_devgui_allow_fog()
{
/#
	level notify( "allowfoginnoclip" );
	level.fog_disabled_in_noclip = 0;
	setdvar( "scr_fog_disable", "0" );
	setdvar( "r_fog_disable", "0" );
	thread diable_fog_in_noclip();
#/
// SP = 0x0 - check OK
}

// 0x50C0
zombie_devgui_give_money()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self maps\mp\zombies\_zm_score::add_to_player_score( 100000 );
#/
// SP = 0x0 - check OK
}

// 0x5124
zombie_devgui_take_money()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self maps\mp\zombies\_zm_score::minus_to_player_score( int( self.score / 2 ) );
	self maps\mp\zombies\_zm_score::minus_to_player_score( self.score );
#/
// SP = 0x0 - check OK
}

// 0x51A8
zombie_devgui_turn_player( index )
{
/#
	players = get_players();
	player = players[0];
	player = players[index];
/#
	assert( IsDefined( player ) );
#/
/#
	assert( isplayer( player ) );
#/
/#
	assert( isalive( player ) );
#/
	level.devcheater = 1;
	println( "Player turned HUMAN" );
	player maps\mp\zombies\_zm_turned::turn_to_human();
	println( "Player turned ZOMBIE" );
	player maps\mp\zombies\_zm_turned::turn_to_zombie();
#/
// SP = 0x0 - check OK
}

// 0x5278
zombie_devgui_debug_pers( index )
{
/#
	players = get_players();
	player = players[0];
	player = players[index];
/#
	assert( IsDefined( player ) );
#/
/#
	assert( isplayer( player ) );
#/
/#
	assert( isalive( player ) );
#/
	level.devcheater = 1;
	println( "\n\n----------------------------------------------------------------------------------------------" );
	println( "Active Persistent upgrades [count=" + level.pers_upgrades_keys.size + "]" );
	pers_upgrade_index = 0;
	name = level.pers_upgrades_keys[pers_upgrade_index];
	println( pers_upgrade_index + ">pers_upgrade name = " + name );
	pers_upgrade = level.pers_upgrades[name];
	i = 0;
	stat_name = pers_upgrade.stat_names[i];
	stat_desired_value = pers_upgrade.stat_desired_values[i];
	player_current_stat_value = player maps\mp\zombies\_zm_stats::get_global_stat( stat_name );
	println( "  " + i + ")stat_name = " + stat_name );
	println( "  " + i + ")stat_desired_values = " + stat_desired_value );
	println( "  " + i + ")player_current_stat_value = " + player_current_stat_value );
	i++;
	println( "PLAYER HAS - " + name );
	println( "PLAYER DOES NOT HAVE - " + name );
	pers_upgrade_index++;
	println( "----------------------------------------------------------------------------------------------\n\n" );
#/
// SP = 0x0 - check OK
}

// 0x5444
zombie_devgui_cool_jetgun()
{
/#
	self thread [[level.zm_devgui_jetgun_never_overheat]]();
#/
// SP = 0x0 - check OK
}

// 0x5460
zombie_devgui_preserve_turbines()
{
/#
	self endon( "disconnect" );
	self notify( "preserve_turbines" );
	self endon( "preserve_turbines" );
	self.preserving_turbines = 1;
	self.turbine_health = 1200;
	wait 1;
	self.preserving_turbines = 0;
#/
// SP = 0x0 - check OK
}

// 0x54B0
zombie_devgui_equipment_stays_healthy()
{
/#
	self endon( "disconnect" );
	self notify( "preserve_equipment" );
	self endon( "preserve_equipment" );
	self.preserving_equipment = 1;
	self.equipment_damage = [];
	self.shielddamagetaken = 0;
	foreach ( equip in level.destructible_equipment )
	{
		equip.shielddamagetaken = 0;
		equip.damage = 0;
		equip.headchopper_kills = 0;
		equip.springpad_kills = 0;
		equip.subwoofer_kills = 0;
	}
	wait 0.1;
	self.preserving_equipment = 0;
#/
// SP = 0x0 - check OK
}

// 0x5570
zombie_devgui_disown_equipment()
{
/#
	self.deployed_equipment = [];
#/
// SP = 0x0 - check OK
}

// 0x5580
zombie_devgui_equipment_give( equipment )
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self maps\mp\zombies\_zm_equipment::equipment_buy( equipment );
#/
// SP = 0x0 - check OK
}

// 0x55F4
zombie_devgui_buildable_drop()
{
/#
	i = 0;
	self maps\mp\zombies\_zm_buildables::player_drop_piece( undefined, i );
	i++;
	self maps\mp\zombies\_zm_buildables::player_drop_piece();
#/
// SP = 0x0 - check OK
}

// 0x563C
zombie_devgui_build( buildable )
{
/#
	player = get_players()[0];
	i = 0;
	level.buildable_stubs[i] maps\mp\zombies\_zm_buildables::buildablestub_finish_build( player );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x56E0
zombie_devgui_give_claymores()
{
/#
	self endon( "disconnect" );
	self notify( "give_planted_grenade_thread" );
	self endon( "give_planted_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_placeable_mine() );
	self thread maps\mp\zombies\_zm_weap_claymore::claymore_setup();
	self givemaxammo( "claymore_zm" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5790
zombie_devgui_give_lethal( weapon )
{
/#
	self endon( "disconnect" );
	self notify( "give_lethal_grenade_thread" );
	self endon( "give_lethal_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_lethal_grenade() );
	self giveweapon( weapon );
	self set_player_lethal_grenade( weapon );
	self givemaxammo( weapon );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x584C
zombie_devgui_give_frags()
{
/#
	zombie_devgui_give_lethal( "frag_grenade_zm" );
#/
// SP = 0x0 - check OK
}

// 0x5864
zombie_devgui_give_sticky()
{
/#
	zombie_devgui_give_lethal( "sticky_grenade_zm" );
#/
// SP = 0x0 - check OK
}

// 0x587C
zombie_devgui_give_monkey()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_cymbal_monkey_give]]();
	self givemaxammo( "cymbal_monkey_zm" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5930
zombie_devgui_give_beacon()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_beacon_give]]();
	self givemaxammo( "beacon_zm" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x59E4
zombie_devgui_give_time_bomb()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_time_bomb_give_func]]();
#/
// SP = 0x0 - check OK
}

// 0x5A7C
zombie_devgui_give_black_hole_bomb()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_black_hole_bomb_give]]();
	self givemaxammo( "zombie_black_hole_bomb" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5B30
zombie_devgui_give_dolls()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_nesting_dolls_give]]();
	self givemaxammo( "zombie_nesting_dolls" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5BE4
zombie_devgui_give_quantum_bomb()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_quantum_bomb_give]]();
	self givemaxammo( "zombie_quantum_bomb" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5C98
zombie_devgui_give_emp_bomb()
{
/#
	self endon( "disconnect" );
	self notify( "give_tactical_grenade_thread" );
	self endon( "give_tactical_grenade_thread" );
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	level.devcheater = 1;
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_emp_bomb_give]]();
	self givemaxammo( "emp_grenade_zm" );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5D4C
zombie_devgui_invulnerable( playerindex, onoff )
{
/#
	players = get_players();
	i = 0;
	zombie_devgui_invulnerable( i, onoff );
	i++;
	players[playerindex] enableinvulnerability();
	players[playerindex] disableinvulnerability();
#/
// SP = 0x0 - check OK
}

// 0x5DC8
zombie_devgui_kill()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self disableinvulnerability();
	death_from = ( randomfloatrange( -20, 20 ), randomfloatrange( -20, 20 ), randomfloatrange( -20, 20 ) );
	self dodamage( self.health + 666, self.origin + death_from );
#/
// SP = 0x0 - check OK
}

// 0x5E68
zombie_devgui_toggle_ammo()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self notify( "devgui_toggle_ammo" );
	self endon( "devgui_toggle_ammo" );
	self.ammo4evah = !(is_true( self.ammo4evah ));
	weapon = self getcurrentweapon();
	self setweaponoverheating( 0, 0 );
	max = weaponmaxammo( weapon );
	self setweaponammostock( weapon, max );
	self givemaxammo( self get_player_tactical_grenade() );
	self givemaxammo( self get_player_lethal_grenade() );
	wait 1;
#/
// SP = 0x0 - check OK
}

// 0x5F7C
zombie_devgui_toggle_ignore()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self.ignoreme = !(self.ignoreme);
	setdvar( "ai_showFailedPaths", 0 );
#/
// SP = 0x0 - check OK
}

// 0x5FEC
zombie_devgui_revive()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self reviveplayer();
	self notify( "stop_revive_trigger" );
	self.revivetrigger delete();
	self.revivetrigger = undefined;
	self allowjump( 1 );
	self.ignoreme = 0;
	self.laststand = undefined;
	self notify( "player_revived", self );
#/
// SP = 0x0 - check OK
}

// 0x6084
zombie_devgui_give_health()
{
/#
/#
	assert( IsDefined( self ) );
#/
/#
	assert( isplayer( self ) );
#/
/#
	assert( isalive( self ) );
#/
	self notify( "devgui_health" );
	self endon( "devgui_health" );
	self endon( "disconnect" );
	self endon( "death" );
	level.devcheater = 1;
	self.maxhealth = 100000;
	self.health = 100000;
	self waittill_any( "player_revived", "perk_used", "spawned_player" );
	wait 2;
#/
// SP = 0x0 - check OK
}

// 0x612C
zombie_devgui_give_perk( perk )
{
/#
	vending_triggers = getentarray( "zombie_vending", "targetname" );
	player = get_players()[0];
	level.devcheater = 1;
	i = 0;
	vending_triggers[i] notify( "trigger", player );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x61A0
zombie_devgui_give_powerup( powerup_name, now, origin )
{
/#
	player = get_players()[0];
	found = 0;
	level.devcheater = 1;
	i = 0;
	level.zombie_powerup_index = i;
	found = 1;
	i++;
	direction = player getplayerangles();
	direction_vec = anglestoforward( direction );
	eye = player geteye();
	scale = 8000;
	direction_vec = ( direction_vec[0] * scale, direction_vec[1] * scale, direction_vec[2] * scale );
	trace = bullettrace( eye, eye + direction_vec, 0, undefined );
	level.zombie_devgui_power = 1;
	level.zombie_vars["zombie_drop_item"] = 1;
	level.powerup_drop_count = 0;
	level thread maps\mp\zombies\_zm_powerups::powerup_drop( origin );
	level thread maps\mp\zombies\_zm_powerups::powerup_drop( trace["position"] );
#/
// SP = 0x0 - check OK
}

// 0x62B8
zombie_devgui_goto_round( target_round )
{
/#
	player = get_players()[0];
	target_round = 1;
	level.devcheater = 1;
	level.zombie_total = 0;
	maps\mp\zombies\_zm::ai_calculate_health( target_round );
	level.round_number = target_round - 1;
	level notify( "kill_round" );
	wait 1;
	zombies = get_round_enemy_array();
	i = 0;
	zombies[i] dodamage( zombies[i].health + 666, zombies[i].origin );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6378
zombie_devgui_monkey_round()
{
/#
	zombie_devgui_goto_round( level.next_monkey_round );
#/
// SP = 0x0 - check OK
}

// 0x6398
zombie_devgui_thief_round()
{
/#
	zombie_devgui_goto_round( level.next_thief_round );
#/
// SP = 0x0 - check OK
}

// 0x63B8
zombie_devgui_dog_round( num_dogs )
{
/#
	setdvar( "force_dogs", num_dogs );
	zombie_devgui_goto_round( level.round_number + 1 );
#/
// SP = 0x0 - check OK
}

// 0x6438
zombie_devgui_dog_round_skip()
{
/#
	zombie_devgui_goto_round( level.next_dog_round );
#/
// SP = 0x0 - check OK
}

// 0x6458
zombie_devgui_dump_zombie_vars()
{
/#
	println( "#### Zombie Variables ####" );
	var_names = getarraykeys( level.zombie_vars );
	i = 0;
	key = var_names[i];
	println( key + ":     " + level.zombie_vars[key] );
	i++;
	println( "##### End Zombie Variables #####" );
#/
// SP = 0x0 - check OK
}

// 0x64E4
zombie_devgui_pack_current_weapon()
{
/#
	players = get_players();
	reviver = players[0];
	level.devcheater = 1;
	i = 0;
	weap = maps\mp\zombies\_zm_weapons::get_base_name( players[i] getcurrentweapon() );
	weapon = get_upgrade( weap );
	players[i] takeweapon( weap );
	players[i] giveweapon( weapon, 0, players[i] maps\mp\zombies\_zm_weapons::get_pack_a_punch_weapon_options( weapon ) );
	players[i] givestartammo( weapon );
	players[i] switchtoweapon( weapon );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x65B8
zombie_devgui_unpack_current_weapon()
{
/#
	players = get_players();
	reviver = players[0];
	level.devcheater = 1;
	i = 0;
	weap = players[i] getcurrentweapon();
	weapon = maps\mp\zombies\_zm_weapons::get_base_weapon_name( weap, 1 );
	players[i] takeweapon( weap );
	players[i] giveweapon( weapon, 0, players[i] maps\mp\zombies\_zm_weapons::get_pack_a_punch_weapon_options( weapon ) );
	players[i] givestartammo( weapon );
	players[i] switchtoweapon( weapon );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6684
zombie_devgui_reopt_current_weapon()
{
/#
	players = get_players();
	reviver = players[0];
	level.devcheater = 1;
	i = 0;
	weap = players[i] getcurrentweapon();
	weapon = weap;
	players[i].pack_a_punch_weapon_options[weapon] = undefined;
	players[i] takeweapon( weap );
	players[i] giveweapon( weapon, 0, players[i] maps\mp\zombies\_zm_weapons::get_pack_a_punch_weapon_options( weapon ) );
	players[i] givestartammo( weapon );
	players[i] switchtoweapon( weapon );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6760
zombie_devgui_take_weapon()
{
/#
	players = get_players();
	reviver = players[0];
	level.devcheater = 1;
	i = 0;
	weap = players[i] getcurrentweapon();
	weapon = weap;
	players[i] takeweapon( weap );
	players[i] switch_back_primary_weapon( undefined );
	i++;
#/
// SP = 0x0 - check OK
}

// 0x67F0
zombie_devgui_take_weapons( give_fallback )
{
/#
	players = get_players();
	reviver = players[0];
	level.devcheater = 1;
	i = 0;
	players[i] takeallweapons();
	players[i] give_fallback_weapon();
	i++;
#/
// SP = 0x0 - check OK
}

// 0x6868
get_upgrade( weaponname )
{
/#
	return maps\mp\zombies\_zm_weapons::get_upgrade_weapon( weaponname, 0 );
	return maps\mp\zombies\_zm_weapons::get_upgrade_weapon( weaponname, 1 );
#/
// SP = 0x0 - check OK
}

// 0x68B0
zombie_devgui_director_easy()
{
/#
	[[level.director_devgui_health]]();
#/
// SP = 0x0 - check OK
}

// 0x68CC
zombie_devgui_chest_never_move()
{
/#
	level notify( "devgui_chest_end_monitor" );
	level endon( "devgui_chest_end_monitor" );
	level.chest_accessed = 0;
	wait 5;
#/
// SP = 0x0 - check OK
}

// 0x68F0
zombie_devgui_disable_kill_thread_toggle()
{
/#
	level.disable_kill_thread = 1;
	level.disable_kill_thread = 0;
#/
// SP = 0x0 - check OK
}

// 0x691C
zombie_devgui_check_kill_thread_every_frame_toggle()
{
/#
	level.check_kill_thread_every_frame = 1;
	level.check_kill_thread_every_frame = 0;
#/
// SP = 0x0 - check OK
}

// 0x6948
zombie_devgui_kill_thread_test_mode_toggle()
{
/#
	level.kill_thread_test_mode = 1;
	level.kill_thread_test_mode = 0;
#/
// SP = 0x0 - check OK
}

// 0x6974
showonespawnpoint( spawn_point, color, notification, height, print )
{
/#
	height = get_player_height();
	print = spawn_point.classname;
	center = spawn_point.origin;
	forward = anglestoforward( spawn_point.angles );
	right = anglestoright( spawn_point.angles );
	forward = vector_scale( forward, 16 );
	right = vector_scale( right, 16 );
	a = center + forward - right;
	b = center + forward + right;
	c = center - forward + right;
	d = center - forward - right;
	thread lineuntilnotified( a, b, color, 0, notification );
	thread lineuntilnotified( b, c, color, 0, notification );
	thread lineuntilnotified( c, d, color, 0, notification );
	thread lineuntilnotified( d, a, color, 0, notification );
	thread lineuntilnotified( a, a + ( 0, 0, height ), color, 0, notification );
	thread lineuntilnotified( b, b + ( 0, 0, height ), color, 0, notification );
	thread lineuntilnotified( c, c + ( 0, 0, height ), color, 0, notification );
	thread lineuntilnotified( d, d + ( 0, 0, height ), color, 0, notification );
	a += ( 0, 0, height );
	b += ( 0, 0, height );
	c += ( 0, 0, height );
	d += ( 0, 0, height );
	thread lineuntilnotified( a, b, color, 0, notification );
	thread lineuntilnotified( b, c, color, 0, notification );
	thread lineuntilnotified( c, d, color, 0, notification );
	thread lineuntilnotified( d, a, color, 0, notification );
	center += ( 0, 0, height / 2 );
	arrow_forward = anglestoforward( spawn_point.angles );
	arrowhead_forward = anglestoforward( spawn_point.angles );
	arrowhead_right = anglestoright( spawn_point.angles );
	arrow_forward = vector_scale( arrow_forward, 32 );
	arrowhead_forward = vector_scale( arrowhead_forward, 24 );
	arrowhead_right = vector_scale( arrowhead_right, 8 );
	a = center + arrow_forward;
	b = center + arrowhead_forward - arrowhead_right;
	c = center + arrowhead_forward + arrowhead_right;
	thread lineuntilnotified( center, a, color, 0, notification );
	thread lineuntilnotified( a, b, color, 0, notification );
	thread lineuntilnotified( a, c, color, 0, notification );
	thread print3duntilnotified( spawn_point.origin + ( 0, 0, height ), print, color, 1, 1, notification );
#/
// SP = 0x0 - check OK
}

// 0x6C0C
print3duntilnotified( origin, text, color, alpha, scale, notification )
{
/#
	level endon( notification );
	print3d( origin, text, color, alpha, scale );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x6C48
lineuntilnotified( start, end, color, depthtest, notification )
{
/#
	level endon( notification );
	line( start, end, color, depthtest );
	wait 0.05;
#/
// SP = 0x0 - check OK
}

// 0x6C80
devgui_debug_hud()
{
/#
	self givemaxammo( self get_player_lethal_grenade() );
	self thread maps\mp\zombies\_zm_weap_claymore::claymore_setup();
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_time_bomb_give_func]]();
	self takeweapon( self get_player_tactical_grenade() );
	self [[level.zombiemode_devgui_cymbal_monkey_give]]();
	self givemaxammo( self get_player_tactical_grenade() );
	equipment = getarraykeys( level.zombie_include_equipment );
	self zombie_devgui_equipment_give( equipment[0] );
	candidate_list = [];
	foreach ( zone in level.zones )
	{
		candidate_list = arraycombine( candidate_list, zone.unitrigger_stubs, 1, 0 );
	}
	foreach ( stub in candidate_list )
	{
		self thread maps\mp\zombies\_zm_buildables::player_take_piece( stub.piece );
	}
	i = 0;
	zombie_devgui_give_powerup( "free_perk", 1, self.origin );
	wait 0.25;
	i++;
	zombie_devgui_give_powerup( "insta_kill", 1, self.origin );
	wait 0.25;
	zombie_devgui_give_powerup( "double_points", 1, self.origin );
	wait 0.25;
	zombie_devgui_give_powerup( "fire_sale", 1, self.origin );
	wait 0.25;
	zombie_devgui_give_powerup( "minigun", 1, self.origin );
	wait 0.25;
	zombie_devgui_give_powerup( "bonfire_sale", 1, self.origin );
	wait 0.25;
	self weapon_give( "tar21_upgraded_zm+gl" );
#/
// SP = 0x0 - check OK
}
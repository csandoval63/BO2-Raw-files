// maps/_cooplogic.gsc

#include maps\_hud_util;
#include maps\_utility;
#include common_scripts\utility;


// 0x3A8
init()
{
	level.splitscreen = issplitscreen();
	precachestring( &"GAME_HOST_ENDED_GAME" );
	precachestring( &"GAME_ENDED_GAME" );
	game["state"] = "playing";
	level.gameended = 0;
	level.postroundtime = 4;
	level.forcedend = 0;
	level.hostforcedend = 0;
// SP = 0x0 - check OK
}

// 0x418
forceend()
{
	return;
	forcelevelend();
	level.forcedend = 1;
	level.hostforcedend = 1;
	endstring = &"GAME_HOST_ENDED_GAME";
	endstring = "";
	makedvarserverinfo( "ui_text_endreason", endstring );
	setdvar( "ui_text_endreason", endstring );
	thread endgame( endstring );
// SP = 0x0 - check OK
}

// 0x498
endgamemessage( endreasontext )
{
	self endon( "disconnect" );
	titlesize = 2;
	spacing = 10;
	font = "default";
	titlesize = 3;
	spacing = 50;
	font = "objective";
	outcometitle = maps\_hud_util::createfontstring( font, titlesize, self );
	outcometitle maps\_hud_util::setpoint( "TOP", undefined, 0, spacing );
	outcometitle settext( endreasontext );
	outcometitle.glowalpha = 1;
	outcometitle.hidewheninmenu = 0;
	outcometitle.archived = 0;
	outcometitle setpulsefx( 100, 60000, 1000 );
// SP = 0x0 - check OK
}

// 0x54C
endgame( endreasontext )
{
	return;
	visionsetnaked( "mpOutro", 2 );
	game["state"] = "postgame";
	level.gameendtime = GetTime();
	level.gameended = 1;
	level.ingraceperiod = 0;
	level notify( "game_ended" );
	players = get_players();
	index = 0;
	player = players[index];
	player freezeplayerforroundend();
	player thread roundenddof();
	player setclientdvar( "cg_everyoneHearsEveryone", "1" );
	player endgamemessage( endreasontext );
	index++;
	level.intermission = 1;
	roundendwait( level.postroundtime, 1 );
	players = get_players();
	index = 0;
	player = players[index];
	player closemenu();
	player closeingamemenu();
	index++;
	logstring( "game ended" );
	exitlevel( 0 );
// SP = 0x0 - check OK
}

// 0x67C
roundendwait( defaultdelay, matchbonus )
{
	notifiesdone = 0;
	players = get_players();
	notifiesdone = 1;
	index = 0;
	notifiesdone = 0;
	index++;
	wait 0.5;
	wait defaultdelay;
	return;
	wait defaultdelay;
	notifiesdone = 0;
	players = get_players();
	notifiesdone = 1;
	index = 0;
	notifiesdone = 0;
	index++;
	wait 0.5;
// SP = 0x0 - check OK
}

// 0x75C
freezeplayerforroundend()
{
	self closemenu();
	self closeingamemenu();
	self freezecontrols( 1 );
// SP = 0x0 - check OK
}

// 0x788
roundenddof()
{
	self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );
// SP = 0x0 - check OK
}
// maps/_stealth_behavior.gsc

#include maps\_stealth_logic;
#include maps\_stealth_anims;
#include maps\_patrol;
#include maps\_anim;
#include maps\_utility;
#include animscripts\utility;
#include common_scripts\utility;

#using_animtree ( "generic_human" );


// 0x1FF8
main( state_functions )
{
	system_init( state_functions );
	thread system_message_loop();
// SP = 0x0 - check OK
}

// 0x2018
friendly_default_stance_handler_distances()
{
	hidden = [];
	hidden["looking_away"]["stand"] = 500;
	hidden["looking_away"]["crouch"] = -400;
	hidden["looking_away"]["prone"] = 0;
	hidden["neutral"]["stand"] = 500;
	hidden["neutral"]["crouch"] = 200;
	hidden["neutral"]["prone"] = 50;
	hidden["looking_towards"]["stand"] = 800;
	hidden["looking_towards"]["crouch"] = 400;
	hidden["looking_towards"]["prone"] = 100;
	alert = [];
	alert["looking_away"]["stand"] = 800;
	alert["looking_away"]["crouch"] = 300;
	alert["looking_away"]["prone"] = 100;
	alert["neutral"]["stand"] = 900;
	alert["neutral"]["crouch"] = 700;
	alert["neutral"]["prone"] = 500;
	alert["looking_towards"]["stand"] = 1100;
	alert["looking_towards"]["crouch"] = 900;
	alert["looking_towards"]["prone"] = 700;
	friendly_set_stance_handler_distances( hidden, alert );
// SP = 0x0 - check OK
}

// 0x2150
friendly_set_stance_handler_distances( hidden, alert )
{
	self._stealth.behavior.stance_handler["hidden"]["looking_away"]["stand"] = hidden["looking_away"]["stand"];
	self._stealth.behavior.stance_handler["hidden"]["looking_away"]["crouch"] = hidden["looking_away"]["crouch"];
	self._stealth.behavior.stance_handler["hidden"]["looking_away"]["prone"] = hidden["looking_away"]["prone"];
	self._stealth.behavior.stance_handler["hidden"]["neutral"]["stand"] = hidden["neutral"]["stand"];
	self._stealth.behavior.stance_handler["hidden"]["neutral"]["crouch"] = hidden["neutral"]["crouch"];
	self._stealth.behavior.stance_handler["hidden"]["neutral"]["prone"] = hidden["neutral"]["prone"];
	self._stealth.behavior.stance_handler["hidden"]["looking_towards"]["stand"] = hidden["looking_towards"]["stand"];
	self._stealth.behavior.stance_handler["hidden"]["looking_towards"]["crouch"] = hidden["looking_towards"]["crouch"];
	self._stealth.behavior.stance_handler["hidden"]["looking_towards"]["prone"] = hidden["looking_towards"]["prone"];
	self._stealth.behavior.stance_handler["alert"]["looking_away"]["stand"] = alert["looking_away"]["stand"];
	self._stealth.behavior.stance_handler["alert"]["looking_away"]["crouch"] = alert["looking_away"]["crouch"];
	self._stealth.behavior.stance_handler["alert"]["looking_away"]["prone"] = alert["looking_away"]["prone"];
	self._stealth.behavior.stance_handler["alert"]["neutral"]["stand"] = alert["neutral"]["stand"];
	self._stealth.behavior.stance_handler["alert"]["neutral"]["crouch"] = alert["neutral"]["crouch"];
	self._stealth.behavior.stance_handler["alert"]["neutral"]["prone"] = alert["neutral"]["prone"];
	self._stealth.behavior.stance_handler["alert"]["looking_towards"]["stand"] = alert["looking_towards"]["stand"];
	self._stealth.behavior.stance_handler["alert"]["looking_towards"]["crouch"] = alert["looking_towards"]["crouch"];
	self._stealth.behavior.stance_handler["alert"]["looking_towards"]["prone"] = alert["looking_towards"]["prone"];
// SP = 0x0 - check OK
}

// 0x2438
enemy_try_180_turn( pos )
{
	return;
	vec1 = anglestoforward( self.angles );
	vec2 = vectornormalize( pos - self.origin );
	start = self.origin + vector_scale( ( 0, 0, 1 ), 16 );
	end = pos + vector_scale( ( 0, 0, 1 ), 16 );
	spot = physicstrace( start, end );
	self anim_generic( self, "patrol_turn180" );
// SP = 0x0 - check OK
}

// 0x24DC
enemy_go_back( spot )
{
	self notify( "going_back" );
	self endon( "death" );
	self notify( "stop_loop" );
	self enemy_try_180_turn( spot );
	self.target = self.last_patrol_goal.targetname;
	self thread maps\_patrol::patrol();
	self set_generic_run_anim( "patrol_walk", 1 );
	self.disablearrivals = 1;
	self.disableexits = 1;
	nodes = enemy_get_closest_pathnodes( 128, spot );
	return;
	nodes = get_array_of_closest( spot, nodes );
	spot = nodes[0].origin;
	self setgoalpos( spot );
	self.goalradius = 40;
// SP = 0x0 - check OK
}

// 0x25BC
ai_create_behavior_function( name, key, function, array )
{
	self._stealth.behavior.ai_functions[name][key] = function;
// SP = 0x0 - check OK
}

// 0x25E0
ai_change_ai_functions( name, functions )
{
	return;
	keys = getarraykeys( functions );
	i = 0;
	key = keys[i];
	self ai_change_behavior_function( name, key, functions[key] );
	i++;
// SP = 0x0 - check OK
}

// 0x2638
ai_change_behavior_function( name, key, function, array )
{
/#
	msg = "";
	keys = getarraykeys( array );
	i = 0;
	msg += keys[i];
	msg += ", ";
	i++;
/#
	assertmsg( "array index with key: " + key + " is not valid. valid array keys are: " + msg );
#/
/#
	assertmsg( "Failed to add stealth function " + key );
#/
#/
	self ai_create_behavior_function( name, key, function, array );
// SP = 0x0 - check OK
}

// 0x26F8
ai_clear_custom_animation_reaction()
{
	self._stealth.behavior.event.custom_animation = undefined;
// SP = 0x0 - check OK
}

// 0x2710
ai_clear_custom_animation_reaction_and_idle()
{
	return;
	self._stealth.behavior.event.custom_animation.node notify( "stop_loop" );
	self maps\_utility::anim_stopanimscripted();
	self ai_clear_custom_animation_reaction();
// SP = 0x0 - check OK
}

// 0x2760
ai_set_custom_animation_reaction( node, anime, tag, ender )
{
	self._stealth.behavior.event.custom_animation = spawnstruct();
	self._stealth.behavior.event.custom_animation.node = node;
	self._stealth.behavior.event.custom_animation.anime = anime;
	self._stealth.behavior.event.custom_animation.tag = tag;
	self._stealth.behavior.event.custom_animation.ender = ender;
	self thread ai_animate_props_on_death( node, anime, tag, ender );
// SP = 0x0 - check OK
}

// 0x2800
ai_animate_props_on_death( node, anime, tag, ender )
{
	wait 0.1;
	return;
	prop = self.anim_props;
	self waittill( "death" );
	return;
	node thread anim_single( prop, anime );
// SP = 0x0 - check OK
}

// 0x284C
system_init( state_functions )
{
/#
	assert( IsDefined( level._stealth ), "There is no level._stealth struct.  You ran stealth behavior before running the detection logic.  Run _stealth_logic::main() in your level load first" );
#/
	level._stealth.behavior = spawnstruct();
	level._stealth.behavior.sound = [];
	level._stealth.behavior.sound["huh"] = 0;
	level._stealth.behavior.sound["hmph"] = 0;
	level._stealth.behavior.sound["wtf"] = 0;
	level._stealth.behavior.sound["spotted"] = 0;
	level._stealth.behavior.sound["corpse"] = 0;
	level._stealth.behavior.sound["alert"] = 0;
	level._stealth.behavior.corpse = spawnstruct();
	level._stealth.behavior.corpse.last_pos = vector_scale( ( 0, 0, -1 ), 100000 );
	level._stealth.behavior.corpse.search_radius = 512;
	level._stealth.behavior.corpse.node_array = undefined;
	level._stealth.behavior.event_explosion_index = 5;
	level._stealth.behavior.system_state_functions = [];
	system_init_state_functions( state_functions );
	maps\_stealth_anims::main();
	flag_init( "_stealth_searching_for_nodes" );
	flag_init( "_stealth_getallnodes" );
	flag_init( "_stealth_event" );
// SP = 0x0 - check OK
}

// 0x29A0
system_init_state_functions( state_functions )
{
	custom_state_functions = 0;
	custom_state_functions = 1;
/#
	assertmsg( "you sent _stealth_behavior::main( <option_state_function_array> ) a variable but it was invalid.  The variable needs to be an array of 3 indicies with values 'hidden', 'alert' and 'spotted'.  These indicies must be function pointers to the system functions you wish to handle those 3 states." );
#/
	system_set_state_function( "hidden", ::system_state_hidden );
	system_set_state_function( "alert", ::system_state_alert );
	system_set_state_function( "spotted", ::system_state_spotted );
	system_set_state_function( "hidden", state_functions["hidden"] );
	system_set_state_function( "alert", state_functions["alert"] );
	system_set_state_function( "spotted", state_functions["spotted"] );
// SP = 0x0 - check OK
}

// 0x2A70
system_message_loop()
{
	funcs = level._stealth.behavior.system_state_functions;
	thread system_message_handler( "_stealth_hidden", funcs["hidden"] );
	thread system_message_handler( "_stealth_alert", funcs["alert"] );
	thread system_message_handler( "_stealth_spotted", funcs["spotted"] );
// SP = 0x0 - check OK
}

// 0x2AC4
system_message_handler( _flag, function )
{
	flag_wait( _flag );
	thread [[function]]();
	flag_waitopen( _flag );
// SP = 0x0 - check OK
}

// 0x2AF8
system_state_spotted()
{
	battlechatter_on( "axis" );
// SP = 0x0 - check OK
}

// 0x2B0C
system_state_alert()
{
	level._stealth.behavior.sound["spotted"] = 0;
	battlechatter_off( "axis" );
	setdvar( "bcs_stealth", "" );
// SP = 0x0 - check OK
}

// 0x2B44
system_state_hidden()
{
	level._stealth.behavior.sound["spotted"] = 0;
	battlechatter_off( "axis" );
	setdvar( "bcs_stealth", "1" );
// SP = 0x0 - check OK
}

// 0x2B7C
system_set_state_function( detection_state, function )
{
/#
	assertmsg( "you sent _stealth_behavior::system_set_state_function( <detection_state> , <function> ) a bad detection state. Only valid states are 'hidden', 'alert', and 'spotted'" );
#/
	level._stealth.behavior.system_state_functions[detection_state] = function;
// SP = 0x0 - check OK
}

// 0x2BCC
enemy_logic( state_functions, alert_functions, corpse_functions, awareness_functions )
{
	self enemy_init( state_functions, alert_functions, corpse_functions, awareness_functions );
	self thread enemy_message_loop();
	self thread enemy_threat_loop();
	self thread enemy_awareness_loop();
	self thread enemy_animation_loop();
	self thread enemy_corpse_loop();
// SP = 0x0 - check OK
}

// 0x2C2C
enemy_init( state_functions, alert_functions, corpse_functions, awareness_functions )
{
/#
	assert( IsDefined( self._stealth ), "There is no self._stealth struct.  You ran stealth behavior before running the detection logic.  Run _stealth_logic::enemy_init() on this AI first" );
#/
	self._stealth.behavior = spawnstruct();
	self._stealth.behavior.sndnum = randomintrange( 1, 4 );
	self._stealth.behavior.ai_functions = [];
	self._stealth.behavior.ai_functions["state"] = [];
	self._stealth.behavior.ai_functions["alert"] = [];
	self._stealth.behavior.ai_functions["corpse"] = [];
	self._stealth.behavior.ai_functions["awareness"] = [];
	self enemy_default_ai_functions( "state" );
	self enemy_default_ai_functions( "alert" );
	self enemy_default_ai_functions( "corpse" );
	self enemy_default_ai_functions( "awareness" );
	self enemy_default_ai_functions( "animation" );
	self ai_change_ai_functions( "state", state_functions );
	self ai_change_ai_functions( "alert", alert_functions );
	self ai_change_ai_functions( "corpse", corpse_functions );
	self ai_change_ai_functions( "awareness", awareness_functions );
	self ent_flag_init( "_stealth_enemy_alert_level_action" );
	self ent_flag_init( "_stealth_running_to_corpse" );
	self ent_flag_init( "_stealth_behavior_reaction_anim" );
	self ent_flag_init( "_stealth_behavior_first_reaction" );
	self ent_flag_init( "_stealth_behavior_reaction_anim_in_progress" );
	self._stealth.behavior.event = spawnstruct();
	self enemy_dog_init();
// SP = 0x0 - check OK
}

// 0x2DE0
enemy_default_ai_functions( name )
{
	switch ( name )
	{
		case "alert":
			self ai_create_behavior_function( "state", "hidden", ::enemy_state_hidden );
			self ai_create_behavior_function( "state", "alert", ::enemy_state_alert );
			self ai_create_behavior_function( "state", "spotted", ::enemy_state_spotted );
			break;
		case "animation":
			self ai_create_behavior_function( "alert", "reset", ::enemy_alert_level_lostem );
			self ai_create_behavior_function( "alert", "alerted_once", ::enemy_alert_level_alerted_once );
			self ai_create_behavior_function( "alert", "alerted_again", ::enemy_alert_level_alerted_again );
			self ai_create_behavior_function( "alert", "attack", ::enemy_alert_level_attack );
			break;
		case "awareness":
			self ai_create_behavior_function( "corpse", "saw", ::enemy_corpse_saw_behavior );
			self ai_create_behavior_function( "corpse", "found", ::enemy_corpse_found_behavior );
			break;
		case "corpse":
			self ai_create_behavior_function( "awareness", "heard_scream", ::enemy_awareness_reaction_heard_scream );
			self ai_create_behavior_function( "awareness", "doFlashBanged", ::enemy_awareness_reaction_flashbang );
			self ai_create_behavior_function( "awareness", "explode", ::enemy_awareness_reaction_explosion );
			break;
		case "state":
			self ai_create_behavior_function( "animation", "wrapper", ::enemy_animation_wrapper );
			self ai_create_behavior_function( "animation", "reset", ::enemy_animation_nothing );
			self ai_create_behavior_function( "animation", "attack", ::dog_animation_generic );
			self ai_create_behavior_function( "animation", "heard_scream", ::dog_animation_generic );
			self ai_create_behavior_function( "animation", "bulletwhizby", ::dog_animation_wakeup_fast );
			self ai_create_behavior_function( "animation", "projectile_impact", ::dog_animation_wakeup_slow );
			self ai_create_behavior_function( "animation", "explode", ::dog_animation_wakeup_fast );
			self ai_create_behavior_function( "animation", "reset", ::enemy_animation_nothing );
			self ai_create_behavior_function( "animation", "alerted_once", ::enemy_animation_nothing );
			self ai_create_behavior_function( "animation", "alerted_again", ::enemy_animation_nothing );
			self ai_create_behavior_function( "animation", "attack", ::enemy_animation_attack );
			self ai_create_behavior_function( "animation", "heard_scream", ::enemy_animation_generic );
			self ai_create_behavior_function( "animation", "heard_corpse", ::enemy_animation_generic );
			self ai_create_behavior_function( "animation", "saw_corpse", ::enemy_animation_sawcorpse );
			self ai_create_behavior_function( "animation", "found_corpse", ::enemy_animation_foundcorpse );
			self ai_create_behavior_function( "animation", "bulletwhizby", ::enemy_animation_whizby );
			self ai_create_behavior_function( "animation", "projectile_impact", ::enemy_animation_whizby );
			self ai_create_behavior_function( "animation", "explode", ::enemy_animation_generic );
			self ai_create_behavior_function( "animation", "doFlashBanged", ::enemy_animation_nothing );
			break;
	}
// SP = 0x0 - check OK
}

// 0x3134
enemy_dog_init()
{
	self setthreatbiasgroup( "dog" );
	return;
	self.ignoreme = 1;
	self.ignoreall = 1;
	self.allowdeath = 1;
	self thread anim_generic_loop( self, "_stealth_dog_sleeping", "stop_loop" );
// SP = 0x0 - check OK
}

// 0x3194
enemy_message_loop()
{
	self thread ai_message_handler( "_stealth_hidden", "hidden" );
	self thread ai_message_handler( "_stealth_alert", "alert" );
	self thread ai_message_handler( "_stealth_spotted", "spotted" );
// SP = 0x0 - check OK
}

// 0x31D8
ai_message_handler( _flag, name )
{
	self endon( "death" );
	self endon( "pain_death" );
	flag_wait( _flag );
	function = self._stealth.behavior.ai_functions["state"][name];
	self thread [[function]]();
	flag_waitopen( _flag );
// SP = 0x0 - check OK
}

// 0x3230
enemy_state_hidden()
{
	level endon( "_stealth_detection_level_change" );
	self.fovcosine = 0.5;
	self.favoriteenemy = undefined;
	return;
	self.diequietly = 1;
	self.old_baseaccuracy = self.baseaccuracy;
	self.old_accuracy = self.accuracy;
	self.baseaccuracy = self.old_baseaccuracy;
	self.accuracy = self.old_accuracy;
	self.fixednode = 1;
	self clearenemy();
// SP = 0x0 - check OK
}

// 0x32B0
enemy_state_alert()
{
	level endon( "_stealth_detection_level_change" );
// SP = 0x0 - check OK
}

// 0x32BC
enemy_reaction_state_alert()
{
	self.fovcosine = 0.01;
	self.ignoreall = 0;
	self.diequietly = 0;
	self clear_run_anim();
	self.fixednode = 0;
// SP = 0x0 - check OK
}

// 0x32EC
enemy_state_spotted()
{
	_flag = "_stealth_spotted";
	ender = "_stealth_detection_level_change" + _flag;
	thread state_change_ender( _flag, ender );
	level endon( ender );
	self endon( "death" );
	self.fovcosine = 0.01;
	self.ignoreall = 0;
	self.diequietly = 0;
	self clear_run_anim();
	self.baseaccuracy *= 3;
	self.accuracy *= 3;
	self.fixednode = 0;
	self enemy_stop_current_behavior();
	self waittill_notify_or_timeout( "enemy", randomfloatrange( 1, 3 ) );
	self.favoriteenemy = get_closest_player( self.origin );
	self.favoriteenemy = get_closest_player( self.origin );
	self thread enemy_spotted_clear_favorite();
// SP = 0x0 - check OK
}

// 0x3400
enemy_spotted_clear_favorite()
{
	self endon( "death" );
	wait 1.5;
	self.favoriteenemy = undefined;
// SP = 0x0 - check OK
}

// 0x3418
state_change_ender( _flag, ender )
{
	flag_waitopen( _flag );
	level notify( ender );
// SP = 0x0 - check OK
}

// 0x3434
enemy_animation_loop()
{
	self endon( "death" );
	self endon( "pain_death" );
	self waittill( "event_awareness", type );
	wrapper_func = self._stealth.behavior.ai_functions["animation"]["wrapper"];
	self thread [[wrapper_func]]( type );
// SP = 0x0 - check OK
}

// 0x3480
enemy_animation_wrapper( type )
{
	self endon( "death" );
	self endon( "pain_death" );
	return;
	self enemy_animation_do_anim( type );
	self enemy_animation_post_anim( type );
// SP = 0x0 - check OK
}

// 0x34C0
enemy_animation_do_anim( type )
{
	self enemy_animation_custom( type );
	return;
	function = self._stealth.behavior.ai_functions["animation"][type];
	self [[function]]( type );
// SP = 0x0 - check OK
}

// 0x350C
enemy_animation_custom( type )
{
	self endon( "death" );
	self endon( "pain_death" );
	node = self._stealth.behavior.event.custom_animation.node;
	anime = self._stealth.behavior.event.custom_animation.anime;
	tag = self._stealth.behavior.event.custom_animation.tag;
	ender = self._stealth.behavior.event.custom_animation.ender;
	self ent_flag_set( "_stealth_behavior_reaction_anim" );
	self.allowdeath = 1;
	node notify( ender );
	self.anim_props_animated = 1;
	node thread anim_single( self.anim_props, anime );
	node anim_generic_aligned( self, anime, tag );
	node anim_generic_custom_animmode( self, "gravity", anime );
	self ai_clear_custom_animation_reaction();
// SP = 0x0 - check OK
}

// 0x3610
enemy_animation_pre_anim( type )
{
	self notify( "enemy_awareness_reaction", type );
	return 1;
	self enemy_stop_current_behavior();
	switch ( type )
	{
		case "alerted_again":
		case "alerted_once":
		case "explode":
		case "found_corpse":
			self ent_flag_set( "_stealth_behavior_reaction_anim" );
			break;
		case "heard_corpse":
		case "reset":
		case "saw_corpse":
		default:
			self ent_flag_set( "_stealth_behavior_first_reaction" );
			self ent_flag_set( "_stealth_behavior_reaction_anim" );
			break;
	}
	self ent_flag_set( "_stealth_behavior_reaction_anim_in_progress" );
	return 0;
// SP = 0x0 - check OK
}

// 0x36E0
enemy_animation_post_anim( type )
{
	switch ( type )
	{
		default:
			self ent_flag_clear( "_stealth_behavior_reaction_anim" );
			break;
	}
	self ent_flag_clear( "_stealth_behavior_reaction_anim_in_progress" );
// SP = 0x0 - check OK
}

// 0x3720
enemy_animation_whizby( type )
{
	self.allowdeath = 1;
	anime = undefined;
	anime = "_stealth_behavior_whizby_" + randomint( 5 );
	self thread anim_generic_custom_animmode( self, "gravity", anime );
	wait 1.5;
	self notify( "stop_animmode" );
// SP = 0x0 - check OK
}

// 0x376C
enemy_animation_attack( type )
{
	enemy = self._stealth.logic.event.awareness[type];
	anime = undefined;
	anime = "_stealth_behavior_spotted_short";
	anime = "_stealth_behavior_spotted_long";
	self.allowdeath = 1;
	self thread anim_generic_custom_animmode( self, "gravity", anime );
	self waittill_notify_or_timeout( anime, randomfloatrange( 1.5, 3 ) );
	self notify( "stop_animmode" );
// SP = 0x0 - check OK
}

// 0x3804
enemy_animation_nothing( type )
{
// SP = 0x0 - check OK
}

// 0x3810
enemy_animation_generic( type )
{
	self.allowdeath = 1;
	target = get_closest_player( self.origin );
	target = self.enemy;
	target = self.favoriteenemy;
	dist = distance( self.origin, target.origin );
	i = 1;
	test = 1024 * ( i / 4 );
	i++;
	anime = "_stealth_behavior_generic" + i;
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x38BC
enemy_animation_sawcorpse( type )
{
	self.allowdeath = 1;
	anime = undefined;
	anime = "_stealth_behavior_saw_corpse";
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x38EC
enemy_animation_foundcorpse( type )
{
	self.allowdeath = 1;
	anime = "_stealth_find_jog";
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x3918
dog_animation_generic( type )
{
	self.allowdeath = 1;
	anime = undefined;
	anime = "_stealth_dog_wakeup_fast";
	anime = "_stealth_dog_wakeup_slow";
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x3964
dog_animation_wakeup_fast( type )
{
	self.allowdeath = 1;
	anime = "_stealth_dog_wakeup_fast";
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x3990
dog_animation_wakeup_slow( type )
{
	self.allowdeath = 1;
	anime = "_stealth_dog_wakeup_slow";
	self anim_generic_custom_animmode( self, "gravity", anime );
// SP = 0x0 - check OK
}

// 0x39BC
enemy_awareness_loop()
{
	self endon( "death" );
	self endon( "pain_death" );
	self waittill( "event_awareness", type );
	func = self._stealth.behavior.ai_functions["awareness"];
	self thread [[func[type]]]( type );
// SP = 0x0 - check OK
}

// 0x3A24
enemy_awareness_reaction_heard_scream( type )
{
	return;
	self endon( "_stealth_enemy_alert_level_change" );
	level endon( "_stealth_spotted" );
	self endon( "another_enemy_awareness_reaction" );
	msg = "scream_kill_safety_check";
	self thread enemy_awareness_reaction_safety( type, msg );
	enemy_reaction_state_alert();
	spot = self enemy_find_original_goal();
	self enemy_stop_current_behavior();
	self endon( "death" );
	origin = self._stealth.logic.event.awareness[type];
	origin = self enemy_find_nodes_at_origin( origin );
	self enemy_investigate_explosion( origin );
	self thread enemy_announce_hmph();
	self notify( msg );
	self enemy_go_back( spot );
// SP = 0x0 - check OK
}

// 0x3AE0
enemy_awareness_reaction_flashbang( type )
{
	return;
	self endon( "_stealth_enemy_alert_level_change" );
	level endon( "_stealth_spotted" );
	self endon( "another_enemy_awareness_reaction" );
	msg = "flashbang_kill_safety_check";
	self thread enemy_awareness_reaction_safety( type, msg );
	enemy_reaction_state_alert();
	spot = self enemy_find_original_goal();
	self enemy_stop_current_behavior();
	self endon( "death" );
	enemy = self._stealth.logic.event.awareness[type];
	origin = enemy.origin;
	self waittill( "stop_flashbang_effect" );
	origin = self enemy_find_nodes_at_origin( origin );
	self thread enemy_investigate_explosion( origin );
	wait 1.05;
	self waittill( "goal" );
	self thread enemy_announce_wtf();
	self thread enemy_announce_spotted_bring_team( origin );
	self thread enemy_announce_hmph();
	self notify( msg );
	self enemy_go_back( spot );
// SP = 0x0 - check OK
}

// 0x3BDC
enemy_awareness_reaction_explosion( type )
{
	self endon( "_stealth_enemy_alert_level_change" );
	self endon( "_stealth_saw_corpse" );
	level endon( "_stealth_found_corpse" );
	level endon( "_stealth_spotted" );
	self endon( "another_enemy_awareness_reaction" );
	msg = "explostion_kill_safety_check";
	self thread enemy_awareness_reaction_safety( type, msg );
	enemy_reaction_state_alert();
	spot = self enemy_find_original_goal();
	self enemy_stop_current_behavior();
	self endon( "death" );
	origin = self._stealth.logic.event.awareness[type];
	origin = self enemy_find_nodes_at_origin( origin );
	self thread enemy_announce_wtf();
	self enemy_investigate_explosion( origin );
	self thread enemy_announce_hmph();
	self notify( msg );
	self enemy_go_back( spot );
// SP = 0x0 - check OK
}

// 0x3CAC
enemy_awareness_reaction_safety( type, msg )
{
	self endon( "death" );
	self endon( msg );
	self waittill( "enemy_awareness_reaction", _type );
	self notify( "another_enemy_awareness_reaction" );
// SP = 0x0 - check OK
}

// 0x3CF4
enemy_find_nodes_at_origin( origin )
{
	array = enemy_get_closest_pathnodes( 512, origin );
	original = origin;
	i = 0;
	origin = array[i].origin;
	array[i] thread enemy_corpse_reaction_takenode();
	tooclose = get_array_of_closest( array[i].origin, array, undefined, undefined, 40 );
	array_thread( tooclose, ::enemy_corpse_reaction_takenode );
	i++;
	origin = ( 0, 0, 0 );
	origin = ( 0, 0, 0 );
	return origin;
// SP = 0x0 - check OK
}

// 0x3DB0
enemy_investigate_explosion( origin )
{
	wait randomfloat( 1 );
	self thread enemy_runto_and_lookaround( origin );
	self.disablearrivals = 0;
	self.disableexits = 0;
	self waittill( "goal" );
	wait randomfloatrange( 30, 50 );
	wait randomfloatrange( 1, 4 );
// SP = 0x0 - check OK
}

// 0x3E0C
enemy_threat_loop()
{
	self endon( "death" );
	self endon( "pain_death" );
	self thread enemy_threat_logic_dog();
	self waittill( "_stealth_enemy_alert_level_change" );
	type = self._stealth.logic.alert_level.lvl;
	enemy = self._stealth.logic.alert_level.enemy;
	self thread enemy_alert_level_change( type, enemy );
// SP = 0x0 - check OK
}

// 0x3E88
enemy_threat_logic_dog()
{
	self endon( "death" );
	self endon( "pain_death" );
	self waittill( "pain" );
	self.ignoreall = 0;
// SP = 0x0 - check OK
}

// 0x3EA8
enemy_alert_level_change( type, enemy )
{
	self ent_flag_set( "_stealth_enemy_alert_level_action" );
	funcs = self._stealth.behavior.ai_functions["alert"];
	self thread [[funcs[type]]]( enemy );
// SP = 0x0 - check OK
}

// 0x3EE4
enemy_alert_level_normal()
{
	self endon( "_stealth_enemy_alert_level_change" );
	self endon( "death" );
	self endon( "pain_death" );
	spot = self enemy_find_original_goal();
	self enemy_stop_current_behavior();
	self waittill( "normal" );
	self ent_flag_clear( "_stealth_enemy_alert_level_action" );
	self ent_flag_waitopen( "_stealth_saw_corpse" );
	wait 0.05;
	flag_waitopen( "_stealth_found_corpse" );
	self thread enemy_announce_hmph();
	self enemy_go_back( spot );
// SP = 0x0 - check OK
}

// 0x3F68
enemy_find_original_goal()
{
	return self.last_set_goalnode.origin;
	return self.last_set_goalpos;
	return self.origin;
// SP = 0x0 - check OK
}

// 0x3F94
enemy_alert_level_lostem( enemy )
{
	self notify( "normal" );
// SP = 0x0 - check OK
}

// 0x3FA4
enemy_alert_level_alerted_once( enemy )
{
	self endon( "_stealth_enemy_alert_level_change" );
	level endon( "_stealth_spotted" );
	self endon( "death" );
	self endon( "pain_death" );
	self thread enemy_announce_huh();
	self thread enemy_alert_level_normal();
	self set_generic_run_anim( "patrol_walk", 1 );
	self.disablearrivals = 1;
	self.disableexits = 1;
	vec = vectornormalize( enemy.origin - self.origin );
	dist = distance( enemy.origin, self.origin );
	dist *= 0.25;
	dist = 64;
	dist = 128;
	vec = vector_scale( vec, dist );
	spot = self.origin + vec + vector_scale( ( 0, 0, 1 ), 16 );
	end = spot + vector_scale( ( 0, 0, -1 ), 96 );
	spot = physicstrace( spot, end );
	return;
	self setgoalpos( spot );
	self.goalradius = 4;
	self waittill_notify_or_timeout( "goal", 2 );
	wait 3;
	self notify( "normal" );
// SP = 0x0 - check OK
}

// 0x40D0
enemy_alert_level_alerted_again( enemy )
{
	self endon( "_stealth_enemy_alert_level_change" );
	level endon( "_stealth_spotted" );
	self endon( "death" );
	self endon( "pain_death" );
	self thread enemy_announce_huh();
	self thread enemy_alert_level_normal();
	self set_generic_run_anim( "_stealth_patrol_jog" );
	self.disablearrivals = 0;
	self.disableexits = 0;
	lastknownspot = enemy.origin;
	distance = distance( lastknownspot, self.origin );
	self setgoalpos( lastknownspot );
	self.goalradius = distance * 0.5;
	self waittill( "goal" );
	self set_generic_run_anim( "_stealth_patrol_walk", 1 );
	self setgoalpos( lastknownspot );
	self.goalradius = 64;
	self.disablearrivals = 1;
	self.disableexits = 1;
	self waittill( "goal" );
	wait 12;
	self set_generic_run_anim( "_stealth_patrol_walk", 1 );
	self notify( "normal" );
// SP = 0x0 - check OK
}

// 0x41B8
enemy_alert_level_attack( enemy )
{
	self endon( "death" );
	self endon( "pain_death" );
	self endon( "_stealth_stop_stealth_behavior" );
	self thread enemy_announce_spotted( self.origin );
	self thread enemy_close_in_on_target();
// SP = 0x0 - check OK
}

// 0x41F0
enemy_close_in_on_target()
{
	radius = 2048;
	self.goalradius = radius;
	return;
	self endon( "death" );
	self endon( "_stealth_stop_stealth_behavior" );
	self setgoalpos( self.enemy.origin );
	self.goalradius = radius;
	radius *= 0.75;
	wait 15;
// SP = 0x0 - check OK
}

// 0x4260
enemy_announce_wtf()
{
	return;
	self playsound( "RU_0_reaction_casualty_generic" );
// SP = 0x0 - check OK
}

// 0x428C
enemy_announce_huh()
{
	return;
	alias = "scoutsniper_ru" + self._stealth.behavior.sndnum + "_huh";
	self playsound( alias );
// SP = 0x0 - check OK
}

// 0x42CC
enemy_announce_hmph()
{
	return;
	alias = "scoutsniper_ru" + self._stealth.behavior.sndnum + "_hmph";
	self playsound( alias );
// SP = 0x0 - check OK
}

// 0x430C
enemy_announce_spotted( pos )
{
	self endon( "death" );
	flag_wait( "_stealth_spotted" );
	return;
	self thread enemy_announce_spotted_bring_team( pos );
	return;
	self playsound( "RU_0_reaction_casualty_generic" );
// SP = 0x0 - check OK
}

// 0x4368
enemy_announce_spotted_bring_team( pos )
{
	ai = getaispeciesarray( "axis", "all" );
	i = 0;
	ai[i] notify( "heard_scream", pos );
	i++;
// SP = 0x0 - check OK
}

// 0x43DC
enemy_announce_corpse()
{
	self endon( "death" );
	wait self.found_corpse_wait;
	return;
	self playsound( "RU_0_reaction_casualty_generic" );
// SP = 0x0 - check OK
}

// 0x441C
enemy_announce_snd( type )
{
	return 0;
	level._stealth.behavior.sound[type] = 1;
	self thread enemy_announce_snd_reset( type );
	return 1;
// SP = 0x0 - check OK
}

// 0x4458
enemy_announce_snd_reset( type )
{
	return;
	wait 3;
	level._stealth.behavior.sound[type] = 0;
// SP = 0x0 - check OK
}

// 0x4484
enemy_corpse_loop()
{
	return;
	self endon( "death" );
	self endon( "pain_death" );
	self thread enemy_found_corpse_loop();
	self waittill( "_stealth_saw_corpse" );
	self enemy_saw_corpse_logic();
// SP = 0x0 - check OK
}

// 0x44D0
enemy_saw_corpse_logic()
{
	return;
	level endon( "_stealth_spotted" );
	level endon( "_stealth_found_corpse" );
	self thread enemy_announce_huh();
	self ent_flag_waitopen( "_stealth_enemy_alert_level_action" );
	self enemy_corpse_saw_wrapper();
	self waittill( "normal" );
// SP = 0x0 - check OK
}

// 0x4524
enemy_stop_current_behavior()
{
	self maps\_utility::anim_stopanimscripted();
	self notify( "stop_animmode" );
	self notify( "stop_loop" );
	self.last_patrol_goal.patrol_claimed = undefined;
	self notify( "release_node" );
	self notify( "end_patrol" );
	self notify( "stop_contextual_melee" );
	self notify( "stop_first_frame" );
	self clear_run_anim();
// SP = 0x0 - check OK
}

// 0x4590
enemy_corpse_saw_wrapper()
{
	self endon( "enemy_alert_level_change" );
	funcs = self._stealth.behavior.ai_functions["corpse"];
	self [[funcs["saw"]]]();
// SP = 0x0 - check OK
}

// 0x45C0
enemy_corpse_saw_behavior()
{
	self enemy_stop_current_behavior();
	ent_flag_set( "_stealth_running_to_corpse" );
	self.disablearrivals = 0;
	self.disableexits = 0;
	self set_generic_run_anim( "_stealth_combat_jog" );
	self.goalradius = 80;
	self setgoalpos( self._stealth.logic.corpse.corpse_entity.origin );
// SP = 0x0 - check OK
}

// 0x4624
enemy_found_corpse_loop()
{
	self endon( "death" );
	self endon( "pain_death" );
	return;
	return;
	level endon( "_stealth_spotted" );
	funcs = self._stealth.behavior.ai_functions["corpse"];
	flag_wait( "_stealth_found_corpse" );
	self thread enemy_announce_corpse();
	self notify( "heard_corpse", ( 0, 0, 0 ) );
	self enemy_reaction_state_alert();
	self [[funcs["found"]]]();
	level waittill( "_stealth_found_corpse" );
// SP = 0x0 - check OK
}

// 0x46D4
enemy_corpse_found_behavior()
{
	self enemy_stop_current_behavior();
	radius = level._stealth.behavior.corpse.search_radius;
	origin = level._stealth.logic.corpse.last_pos;
	level._stealth.behavior.corpse.node_array = enemy_get_closest_pathnodes( radius, origin );
	level._stealth.behavior.corpse.last_pos = level._stealth.logic.corpse.last_pos;
	array = level._stealth.behavior.corpse.node_array;
	i = 0;
	self thread enemy_runto_and_lookaround( array[i].origin );
	array[i] thread enemy_corpse_reaction_takenode();
	tooclose = get_array_of_closest( array[i].origin, array, undefined, undefined, 40 );
	array_thread( tooclose, ::enemy_corpse_reaction_takenode );
	i++;
// SP = 0x0 - check OK
}

// 0x4804
enemy_runto_and_lookaround( pos )
{
	self notify( "enemy_runto_and_lookaround" );
	self endon( "enemy_runto_and_lookaround" );
	self endon( "death" );
	self endon( "_stealth_enemy_alert_level_change" );
	self endon( "_stealth_saw_corpse" );
	level endon( "_stealth_spotted" );
	self setgoalpos( pos );
	self.goalradius = 4;
	self waittill( "goal" );
	wait 0.5;
	self anim_generic_loop( self, "_stealth_look_around", "stop_loop" );
// SP = 0x0 - check OK
}

// 0x4888
enemy_corpse_reaction_takenode()
{
	self._stealth_corpse_behavior_taken = 1;
	wait 0.25;
	self._stealth_corpse_behavior_taken = undefined;
// SP = 0x0 - check OK
}

// 0x48A4
enemy_get_closest_pathnodes( radius, origin )
{
	flag_set( "_stealth_searching_for_nodes" );
	waittillframeend;
	nodes = getallnodes();
	pathnodes = [];
	radus2rd = radius * radius;
	i = 0;
	pathnodes[pathnodes.size] = nodes[i];
	i++;
	level._stealth.behavior.search_nodes_array = pathnodes;
	waittillframeend;
	flag_clear( "_stealth_searching_for_nodes" );
	flag_waitopen( "_stealth_searching_for_nodes" );
	level delay_thread( 0.2, ::flag_clear, "_stealth_getallnodes" );
	level flag_set( "_stealth_getallnodes" );
	return level._stealth.behavior.search_nodes_array;
// SP = 0x0 - check OK
}

// 0x49B4
friendly_logic( state_functions )
{
	self friendly_init( state_functions );
	self thread friendly_message_loop();
	self thread friendly_stance_handler();
// SP = 0x0 - check OK
}

// 0x49E4
friendly_init( state_functions )
{
/#
	assert( IsDefined( self._stealth ), "There is no self._stealth struct.  You ran stealth behavior before running the detection logic.  Run _stealth_logic::friendly_init() on this AI first" );
#/
	self._stealth.behavior = spawnstruct();
	self._stealth.behavior.accuracy = [];
	self._stealth.behavior.goodaccuracy = 50;
	self._stealth.behavior.badaccuracy = 0;
	self._stealth.behavior.old_baseaccuracy = self.baseaccuracy;
	self._stealth.behavior.old_accuracy = self.accuracy;
	self._stealth.behavior.ai_functions = [];
	self._stealth.behavior.ai_functions["state"] = [];
	self friendly_default_ai_functions( "state" );
	self ai_change_ai_functions( "state", state_functions );
	self ent_flag_init( "_stealth_custom_anim" );
// SP = 0x0 - check OK
}

// 0x4AB4
friendly_default_ai_functions( name )
{
	switch ( name )
	{
		case "state":
			self ai_create_behavior_function( name, "hidden", ::friendly_state_hidden );
			self ai_create_behavior_function( name, "alert", ::friendly_state_alert );
			self ai_create_behavior_function( name, "spotted", ::friendly_state_spotted );
			break;
	}
// SP = 0x0 - check OK
}

// 0x4B24
friendly_message_loop()
{
	funcs = self._stealth.behavior.ai_functions["state"];
	self thread ai_message_handler( "_stealth_hidden", "hidden" );
	self thread ai_message_handler( "_stealth_alert", "alert" );
	self thread ai_message_handler( "_stealth_spotted", "spotted" );
// SP = 0x0 - check OK
}

// 0x4B7C
friendly_state_hidden()
{
	level endon( "_stealth_detection_level_change" );
	self.baseaccuracy = self._stealth.behavior.goodaccuracy;
	self.accuracy = self._stealth.behavior.goodaccuracy;
	self._stealth.behavior.oldgrenadeammo = self.grenadeammo;
	self.grenadeammo = 0;
	self.forcesidearm = 0;
	self.ignoreall = 1;
	self.ignoreme = 1;
	self disable_ai_color();
	waittillframeend;
	self.fixednode = 0;
// SP = 0x0 - check OK
}

// 0x4BEC
friendly_state_alert()
{
	level endon( "_stealth_detection_level_change" );
	self.baseaccuracy = self._stealth.behavior.goodaccuracy;
	self.accuracy = self._stealth.behavior.goodaccuracy;
	self._stealth.behavior.oldgrenadeammo = self.grenadeammo;
	self.grenadeammo = 0;
	self.forcesidearm = 0;
	self.ignoreall = 1;
	self disable_ai_color();
	waittillframeend;
	self.fixednode = 0;
// SP = 0x0 - check OK
}

// 0x4C54
friendly_state_spotted()
{
	level endon( "_stealth_detection_level_change" );
	self thread friendly_spotted_getup_from_prone();
	self.baseaccuracy = self._stealth.behavior.badaccuracy;
	self.accuracy = self._stealth.behavior.badaccuracy;
	self.grenadeammo = self._stealth.behavior.oldgrenadeammo;
	self allowedstances( "prone", "crouch", "stand" );
	self maps\_utility::anim_stopanimscripted();
	self.ignoreall = 0;
	self.ignoreme = 0;
	self reset_movemode();
	self enable_ai_color();
	self.disablearrivals = 1;
	self.disableexits = 1;
	self pushplayer( 0 );
// SP = 0x0 - check OK
}

// 0x4D04
friendly_spotted_getup_from_prone( angles )
{
	self endon( "death" );
	return;
	self ent_flag_set( "_stealth_custom_anim" );
	anime = "prone_2_run_roll";
	self orientmode( "face angle", angles[1] + 20 );
	self thread anim_generic_custom_animmode( self, "gravity", anime );
	length = getanimlength( getanim_generic( anime ) );
	wait length - 0.2;
	self notify( "stop_animmode" );
	self ent_flag_clear( "_stealth_custom_anim" );
// SP = 0x0 - check OK
}

// 0x4DA4
friendly_stance_handler()
{
	self endon( "death" );
	self endon( "pain_death" );
	self friendly_stance_handler_init();
	self friendly_stance_handler_set_stance_up();
	stances = [];
	stances = friendly_stance_handler_check_mightbeseen( stances );
	self thread friendly_stance_handler_change_stance_down();
	self thread friendly_stance_handler_resume_path();
	self thread friendly_stance_handler_change_stance_up();
	self notify( "_stealth_stance_dont_change" );
	wait 0.05;
	self.moveplaybackrate = 1;
	self allowedstances( "stand", "crouch", "prone" );
	self thread friendly_stance_handler_resume_path();
	self ent_flag_wait( "_stealth_stance_handler" );
	flag_waitopen( "_stealth_spotted" );
// SP = 0x0 - check OK
}

// 0x4ECC
friendly_stance_handler_stay_still()
{
	return;
	self ent_flag_set( "_stealth_stay_still" );
	badplace_cylinder( "_stealth_" + self.ai_number + "_prone", 0, self.origin, 30, 90, "axis" );
	self notify( "stop_loop" );
	self thread anim_generic_loop( self, "_stealth_prone_idle", "stop_loop" );
// SP = 0x0 - check OK
}

// 0x4F34
friendly_stance_handler_resume_path()
{
	self ent_flag_clear( "_stealth_stay_still" );
	badplace_delete( "_stealth_" + self.ai_number + "_prone" );
	self notify( "stop_loop" );
// SP = 0x0 - check OK
}

// 0x4F6C
friendly_stance_handler_change_stance_down()
{
	self.moveplaybackrate = 1;
	self notify( "_stealth_stance_down" );
	switch ( self._stealth.logic.stance )
	{
		case "crouch":
			self.moveplaybackrate = 0.7;
			self allowedstances( "crouch" );
			break;
		case "prone":
			self allowedstances( "prone" );
			break;
		case "stand":
			friendly_stance_handler_stay_still();
			break;
	}
// SP = 0x0 - check OK
}

// 0x4FF4
friendly_stance_handler_change_stance_up()
{
	self endon( "_stealth_stance_down" );
	self endon( "_stealth_stance_dont_change" );
	self endon( "_stealth_stance_handler" );
	return;
	self ent_flag_set( "_stealth_stance_change" );
	wait 1.5;
	self ent_flag_clear( "_stealth_stance_change" );
	self.moveplaybackrate = 1;
	switch ( self._stealth.logic.stance )
	{
		case "crouch":
			self allowedstances( "crouch" );
			break;
		case "prone":
			self allowedstances( "stand" );
			break;
		case "stand":
	}
// SP = 0x0 - check OK
}

// 0x50A8
friendly_stance_handler_check_mightbeseen( stances )
{
	ai = getaispeciesarray( "axis", "all" );
	stances[self._stealth.logic.stance] = 0;
	stances[self._stealth.behavior.stance_up] = 0;
	i = 0;
	dist_add_curr = self friendly_stance_handler_return_ai_sight( ai[i], self._stealth.logic.stance );
	dist_add_up = self friendly_stance_handler_return_ai_sight( ai[i], self._stealth.behavior.stance_up );
	score_current = self maps\_stealth_logic::friendly_compute_score() + dist_add_curr;
	score_up = self maps\_stealth_logic::friendly_compute_score( self._stealth.behavior.stance_up ) + dist_add_up;
	stances[self._stealth.logic.stance] = score_current;
	stances[self._stealth.behavior.stance_up] = score_up;
	i++;
	return stances;
// SP = 0x0 - check OK
}

// 0x51DC
friendly_stance_handler_set_stance_up()
{
	switch ( self._stealth.logic.stance )
	{
		case "crouch":
			self._stealth.behavior.stance_up = "crouch";
			break;
		case "prone":
			self._stealth.behavior.stance_up = "stand";
			break;
		case "stand":
			self._stealth.behavior.stance_up = "stand";
			break;
	}
// SP = 0x0 - check OK
}

// 0x5254
friendly_stance_handler_return_ai_sight( ai, stance )
{
	vec1 = anglestoforward( ai.angles );
	vec2 = vectornormalize( self.origin - ai.origin );
	vecdot = vectordot( vec1, vec2 );
	state = level._stealth.logic.detection_level;
	return self._stealth.behavior.stance_handler[state]["looking_towards"][stance];
	return self._stealth.behavior.stance_handler[state]["looking_away"][stance];
	return self._stealth.behavior.stance_handler[state]["neutral"][stance];
// SP = 0x0 - check OK
}

// 0x5314
friendly_stance_handler_init()
{
	self ent_flag_init( "_stealth_stance_handler" );
	self ent_flag_init( "_stealth_stay_still" );
	self ent_flag_init( "_stealth_stance_change" );
	level.scr_anim["generic"]["_stealth_prone_idle"][0] = %prone_aim_idle;
	self._stealth.behavior.stance_up = undefined;
	self._stealth.behavior.stance_handler = [];
	self friendly_default_stance_handler_distances();
// SP = 0x0 - check OK
}

// 0x5388
default_event_awareness( dialogue_func, ender1, ender2, ender3 )
{
	level notify( "event_awareness_handler" );
	level endon( "event_awareness_handler" );
	level endon( "default_event_awareness_enders" );
	thread default_event_awareness_enders( ender1, ender2, ender3 );
	array_thread( getaiarray( "allies" ), ::default_event_awareness_ended_cleanup );
	thread default_event_awareness_killed_cleanup();
	type = default_event_awareness_wait();
	array_thread( getaiarray( "allies" ), ::default_event_awareness_setup );
	waittillframeend;
	array_thread( getaiarray( "allies" ), ::default_event_awareness_handle_changes );
	flag_set( "_stealth_event" );
	wait 2;
	[[dialogue_func]]();
	default_event_awareness_waitclear( type );
	array_thread( getaiarray( "allies" ), ::default_event_awareness_cleanup );
	flag_clear( "_stealth_event" );
// SP = 0x0 - check OK
}

// 0x5478
default_event_awareness_enders( ender1, ender2, ender3 )
{
	level endon( "default_event_awareness_enders" );
	level endon( "event_awareness_handler" );
	level notify( "default_event_awareness_enders" );
	level notify( "default_event_awareness_enders" );
	level notify( "default_event_awareness_enders" );
	level notify( "default_event_awareness_enders" );
	level waittill_any( "end_event_awareness_handler", "_stealth_spotted", ender1, ender2, ender3 );
	level notify( "default_event_awareness_enders" );
// SP = 0x0 - check OK
}

// 0x553C
default_event_awareness_killed_cleanup()
{
	level waittill_either( "event_awareness_handler", "default_event_awareness_enders" );
	flag_clear( "_stealth_event" );
// SP = 0x0 - check OK
}

// 0x5564
default_event_awareness_ended_cleanup()
{
	level endon( "event_awareness_handler" );
	level waittill( "default_event_awareness_enders" );
	self ent_flag_clear( "_stealth_stance_handler" );
	return;
	self.ignoreme = 1;
// SP = 0x0 - check OK
}

// 0x55C0
default_event_awareness_setup()
{
	self._stealth.behavior.alreadysmartstance = self ent_flag( "_stealth_stance_handler" );
	self._stealth.behavior.alreadyignoreme = self.ignoreme;
	self ent_flag_set( "_stealth_stance_handler" );
	self.ignoreme = 0;
// SP = 0x0 - check OK
}

// 0x5608
default_event_awareness_handle_changes()
{
	self endon( "default_event_awareness_cleanup" );
	level endon( "default_event_awareness_enders" );
	self waittill( "_stealth_stance_handler" );
	self._stealth.behavior.alreadysmartstance = self ent_flag( "_stealth_stance_handler" );
	self ent_flag_set( "_stealth_stance_handler" );
	wait 0.05;
// SP = 0x0 - check OK
}

// 0x5670
default_event_awareness_cleanup()
{
	self notify( "default_event_awareness_cleanup" );
	self ent_flag_clear( "_stealth_stance_handler" );
	self.ignoreme = 1;
// SP = 0x0 - check OK
}

// 0x56C4
default_event_awareness_wait()
{
	level endon( "_stealth_found_corpse" );
	level waittill( "event_awareness", type );
	switch ( type )
	{
		case "explode":
			return type;
		case "found_corpse":
			return type;
		case "heard_corpse":
			return type;
		case "heard_scream":
			// OP_jump that jumps outside the case's boundaries detected
		default:
			// OP_jump that jumps outside the case's boundaries detected
	}
// SP = 0x0 - check OK
}

// 0x5730
default_event_awareness_waitclear( type )
{
	ai = getaispeciesarray( "axis", "all" );
	dist = level._stealth.logic.detect_range["alert"]["crouch"];
	array_thread( ai, ::default_event_awareness_waitclear_ai, dist );
	array_wait( ai, "default_event_awareness_waitclear_ai" );
	ai = getaispeciesarray( "axis", "all" );
	dist = level._stealth.logic.detect_range["alert"]["stand"];
	array_thread( ai, ::default_event_awareness_waitclear_ai, dist );
	array_wait( ai, "default_event_awareness_waitclear_ai" );
// SP = 0x0 - check OK
}

// 0x57EC
default_event_awareness_waitclear_ai( dist )
{
	self default_event_awareness_waitclear_ai_proc( dist );
	self notify( "default_event_awareness_waitclear_ai" );
// SP = 0x0 - check OK
}

// 0x580C
default_event_awareness_waitclear_ai_proc( dist )
{
	self endon( "death" );
	waittillframeend;
	check1 = 0;
	check1 = self ent_flag( "_stealth_behavior_first_reaction" );
	check2 = 0;
	check2 = self ent_flag( "_stealth_behavior_reaction_anim" );
	return;
	self add_wait( ::waittill_msg, "death" );
	self add_wait( ::waittill_msg, "going_back" );
	level add_wait( ::flag_wait, "_stealth_found_corpse" );
	do_wait_any();
	self endon( "goal" );
	distsquared = dist * dist;
	wait 1;
// SP = 0x0 - check OK
}
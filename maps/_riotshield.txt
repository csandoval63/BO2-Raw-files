// maps/_riotshield.gsc

#include common_scripts\utility;
#include maps\_utility;

#using_animtree ( "mp_riotshield" );


// 0x7FC
init()
{
	level.deployedshieldmodel = "t6_wpn_shield_carry_world";
	level.stowedshieldmodel = "t6_wpn_shield_stow_world";
	level.carriedshieldmodel = "t6_wpn_shield_carry_world";
	precachemodel( level.deployedshieldmodel );
	precachemodel( level.stowedshieldmodel );
	precachemodel( level.carriedshieldmodel );
	level.riotshield_placement_zoffset = 26;
	level._effect["riotshield_light"] = loadfx( "weapon/riotshield/fx_riotshield_depoly_lights" );
	level._effect["riotshield_dust"] = loadfx( "weapon/riotshield/fx_riotshield_depoly_dust" );
// SP = 0x0 - check OK
}

// 0x870
trackriotshield()
{
	self endon( "death" );
	self endon( "disconnect" );
	self.hasriotshield = self hasweapon( "riotshield_sp" );
	self.hasriotshieldequipped = self getcurrentweapon() == "riotshield_sp";
	self attachshieldmodel( level.carriedshieldmodel, "tag_weapon_left" );
	self attachshieldmodel( level.stowedshieldmodel, "tag_stowed_back" );
	self waittill( "weapon_change", newweapon );
	self notify( "destroy_riotshield" );
	self detachshieldmodel( level.stowedshieldmodel, "tag_stowed_back" );
	self attachshieldmodel( level.carriedshieldmodel, "tag_weapon_left" );
	self attachshieldmodel( level.carriedshieldmodel, "tag_weapon_left" );
	self.hasriotshield = 1;
	self.hasriotshieldequipped = 1;
/#
	assert( self.hasriotshield );
#/
	self.hasriotshield = self hasweapon( "riotshield_sp" );
	self detachshieldmodel( level.carriedshieldmodel, "tag_weapon_left" );
	self attachshieldmodel( level.stowedshieldmodel, "tag_stowed_back" );
	self detachshieldmodel( level.carriedshieldmodel, "tag_weapon_left" );
	self.hasriotshieldequipped = 0;
	self detachshieldmodel( level.stowedshieldmodel, "tag_stowed_back" );
	self.hasriotshield = 0;
// SP = 0x0 - check OK
}

// 0xA2C
startriotshielddeploy()
{
	self notify( "start_riotshield_deploy" );
	self thread watchriotshielddeploy();
// SP = 0x0 - check OK
}

// 0xA44
spawnriotshieldcover( origin, angles )
{
	shield_ent = spawn( "script_model", origin, 1 );
	shield_ent.angles = angles;
	shield_ent setmodel( level.deployedshieldmodel );
	shield_ent setowner( self );
	shield_ent.owner = self;
	shield_ent setscriptmoverflag( 0 );
	return shield_ent;
// SP = 0x0 - check OK
}

// 0xAA0
riotshielddeployanim()
{
	self useanimtree( -1 );
	self setanim( %o_riot_stand_deploy, 1, 0, 1 );
	playfxontag( level._effect["riotshield_dust"], self, "tag_origin" );
	wait 0.8;
	self.shieldlightfx = playfxontag( level._effect["riotshield_light"], self, "tag_fx" );
// SP = 0x0 - check OK
}

// 0xB1C
watchriotshielddeploy()
{
	self endon( "death" );
	self endon( "disconnect" );
	self endon( "start_riotshield_deploy" );
	self waittill( "deploy_riotshield", deploy_attempt );
	self setheldweaponmodel( 0 );
	self setplacementhint( 1 );
	placement_hint = 0;
	placement = self canplaceriotshield( "deploy_riotshield" );
	zoffset = level.riotshield_placement_zoffset;
	shield_ent = self spawnriotshieldcover( placement["origin"] + ( 0, 0, zoffset ), placement["angles"] );
	shield_ent thread riotshielddeployanim();
	item_ent = deployriotshield( self, shield_ent );
	primaries = self getweaponslistprimaries();
/#
/#
	assert( IsDefined( item_ent ) );
#/
/#
	assert( !(IsDefined( self.riotshieldretrievetrigger )) );
#/
/#
	assert( !(IsDefined( self.riotshieldentity )) );
#/
/#
	assert( primaries.size > 0 );
#/
#/
	self switchtoweapon( primaries[0] );
	self.riotshieldretrievetrigger = item_ent;
	self.riotshieldentity = shield_ent;
	self.riotshieldentity disconnectpaths();
	self thread watchdeployedriotshieldents();
	self thread deleteshieldondamage( self.riotshieldentity );
	self thread deleteshieldmodelonweaponpickup( self.riotshieldretrievetrigger );
	self thread deleteriotshieldonplayerdeath();
	self.riotshieldentity thread watchdeployedriotshielddamage();
	placement_hint = 1;
	clip_max_ammo = weaponclipsize( "riotshield_sp" );
	self setweaponammoclip( "riotshield_sp", clip_max_ammo );
	placement_hint = 1;
	self setriotshieldfailhint();
// SP = 0x0 - check OK
}

// 0xCE4
riotshielddistancetest( origin )
{
/#
/#
	assert( IsDefined( origin ) );
#/
#/
	min_dist_squared = GetDvarFloat( #"0xC320348D" );
	min_dist_squared *= min_dist_squared;
	players = get_players();
	i = 0;
	dist_squared = distancesquared( players[i].riotshieldentity.origin, origin );
/#
	println( "Shield placement denied!  Failed distance check to other riotshields." );
#/
	return 0;
	i++;
	return 1;
// SP = 0x0 - check OK
}

// 0xD84
watchdeployedriotshieldents()
{
/#
/#
	assert( IsDefined( self.riotshieldretrievetrigger ) );
#/
/#
	assert( IsDefined( self.riotshieldentity ) );
#/
#/
	self waittill( "destroy_riotshield" );
	self.riotshieldretrievetrigger delete();
	self.riotshieldentity connectpaths();
	self.riotshieldentity delete();
// SP = 0x0 - check OK
}

// 0xDF8
watchdeployedriotshielddamage()
{
	self endon( "death" );
	damagemax = GetDvarInt( #"0xAA9B5326" );
	self.damagetaken = 0;
	self.maxhealth = 100000;
	self.health = self.maxhealth;
	self waittill( "damage", damage, attacker, direction, point, type );
	self useanimtree( -1 );
	self setanimknobrestart( %o_riot_stand_melee_front, 1, 0, 1 );
	self setanimknobrestart( %o_riot_stand_shot, 1, 0, 1 );
/#
/#
	assert( IsDefined( self.owner.team ) );
#/
#/
	damage *= GetDvarFloat( #"0x23526A28" );
	damage *= GetDvarFloat( #"0xBB6F1DE8" );
	damage *= GetDvarFloat( #"0x88D773FF" );
	damage *= GetDvarFloat( #"0x19FAA051" );
	self.damagetaken += damage;
	self damagethendestroyriotshield();
// SP = 0x0 - check OK
}

// 0xFCC
damagethendestroyriotshield()
{
	self endon( "death" );
	self.owner.riotshieldretrievetrigger delete();
	self notsolid();
	self setanimknoball( %o_riot_stand_destroyed, %root, 1, 0, 1 );
	wait GetDvarFloat( #"0x217C6C3" );
	self.owner notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}

// 0x1038
deleteshieldondamage( shield_ent )
{
	shield_ent waittill( "death", attacker );
// SP = 0x0 - check OK
}

// 0x1050
deleteshieldmodelonweaponpickup( shield_trigger )
{
	shield_trigger waittill( "trigger" );
	self notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}

// 0x1068
deleteriotshieldonplayerdeath()
{
	self.riotshieldentity endon( "death" );
	self waittill( "death" );
	self notify( "destroy_riotshield" );
// SP = 0x0 - check OK
}